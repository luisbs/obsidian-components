/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-components@0.5.1 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-components
 */
"use strict";const K=require("obsidian");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class Ya{error(r,i){console.error(r,...i)}warn(r,i){console.warn(r,...i)}info(r,i){console.info(r,...i)}debug(r,i){console.debug(r,...i)}trace(r,i){console.trace(r,...i)}group(r,i){return console.groupCollapsed(r,...i),console.groupEnd}}const Fe=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),Ga=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class kn{#e;#t;#n;#r=[];#s=[];get level(){return this.#t?this.#t:this.#e?.level??Fe.WARN}get format(){return this.#n?this.#n:this.#e?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const r=[];for(let i=0;i<this.#s.length-1;i++)r.push(this.#s[i][0]);return r.push(this.#s.at(-1)??""),r.join(".")}get drivers(){return Object.freeze(this.#r)}setLevel(r){return this.#t=r,this}setFormat(r){return this.#n=r,this}addDrivers(...r){for(const i of r)Array.isArray(i)?this.#r.push(...i):i&&this.#r.push(i);return this}addNamespaces(...r){for(const i of r)Array.isArray(i)?this.#s.push(...i):i&&this.#s.push(i);return this}static consoleLogger(r){const i=new kn;return i.setLevel(Fe.WARN),i.addDrivers(new Ya),i.addNamespaces(r),i}make(r){const i=new kn;return i.#e=this,i.addDrivers(this.#r),i.addNamespaces(this.#s,r),i}prefix(r,i){return this.format.replace("hh",String(r.getHours()).padStart(2,"0")).replace("mm",String(r.getMinutes()).padStart(2,"0")).replace("ss",String(r.getSeconds()).padStart(2,"0")).replace("ms",String(r.getMilliseconds()).padStart(3,"0")).replace("level",Ga[i]).replace("namespace",this.namespace)}log(r,i,o){if(this.level>i)return;const d=this.prefix(r,i);switch(this.level){case Fe.ERROR:this.#r.forEach(p=>p.error(d,o));break;case Fe.WARN:this.#r.forEach(p=>p.warn(d,o));break;case Fe.INFO:this.#r.forEach(p=>p.info(d,o));break;case Fe.DEBUG:this.#r.forEach(p=>p.debug(d,o));break;default:this.#r.forEach(p=>p.trace(d,o))}}error(...r){this.log(new Date,Fe.ERROR,r)}warn(...r){this.log(new Date,Fe.WARN,r)}info(...r){this.log(new Date,Fe.INFO,r)}debug(...r){this.log(new Date,Fe.DEBUG,r)}trace(...r){this.log(new Date,Fe.TRACE,r)}group(...r){const i=new Ja;return i.#e=this,i.addDrivers(this.#r),i.addNamespaces(this.#s),r.length&&i.log(new Date,Fe.INFO,r),i}}class Ja extends kn{#e=[];log(r,i,o){this.level>i||this.#e.push({timestamp:r,level:i,content:o})}flush(...r){if(this.#e.length===0){super.log(new Date,Fe.INFO,r);return}const i=this.prefix(new Date,Fe.INFO),o=this.drivers.map(d=>d.group(i,r));for(const{timestamp:d,level:p,content:g}of this.#e)super.log(d,p,g);o.forEach(d=>d()),this.#e=[]}}class Ka{constructor(r,i){this.app=r,this.containerEl=i,this.scope=new K.Scope,this.wrapperEl=createDiv("suggestions-tooltip")}scope;wrapperEl;registerListeners(){this.scope.register([],"Escape",this.close.bind(this))}open(){this.app.keymap.pushScope(this.scope),this.containerEl.appendChild(this.wrapperEl)}close(){this.app.keymap.popScope(this.scope),this.wrapperEl.empty(),this.wrapperEl.detach()}}const Ci=Math.min,On=Math.max,hr=Math.round,Ke=c=>({x:c,y:c});function $i(c){return c.split("-")[0]}function Qa(c){return c.split("-")[1]}function Xa(c){return c==="x"?"y":"x"}function eo(c){return c==="y"?"height":"width"}function Ri(c){return["top","bottom"].includes($i(c))?"y":"x"}function to(c){return Xa(Ri(c))}function ji(c){const{x:r,y:i,width:o,height:d}=c;return{width:o,height:d,top:i,left:r,right:r+o,bottom:i+d,x:r,y:i}}function bi(c,r,i){let{reference:o,floating:d}=c;const p=Ri(r),g=to(r),b=eo(g),F=$i(r),_=p==="y",j=o.x+o.width/2-d.width/2,G=o.y+o.height/2-d.height/2,ae=o[b]/2-d[b]/2;let Q;switch(F){case"top":Q={x:j,y:o.y-d.height};break;case"bottom":Q={x:j,y:o.y+o.height};break;case"right":Q={x:o.x+o.width,y:G};break;case"left":Q={x:o.x-d.width,y:G};break;default:Q={x:o.x,y:o.y}}switch(Qa(r)){case"start":Q[g]-=ae*(i&&_?-1:1);break;case"end":Q[g]+=ae*(i&&_?-1:1);break}return Q}const no=async(c,r,i)=>{const{placement:o="bottom",strategy:d="absolute",middleware:p=[],platform:g}=i,b=p.filter(Boolean),F=await(g.isRTL==null?void 0:g.isRTL(r));let _=await g.getElementRects({reference:c,floating:r,strategy:d}),{x:j,y:G}=bi(_,o,F),ae=o,Q={},ye=0;for(let fe=0;fe<b.length;fe++){const{name:de,fn:Xe}=b[fe],{x:et,y:Z,data:ot,reset:xe}=await Xe({x:j,y:G,initialPlacement:o,placement:ae,strategy:d,middlewareData:Q,rects:_,platform:g,elements:{reference:c,floating:r}});j=et??j,G=Z??G,Q={...Q,[de]:{...Q[de],...ot}},xe&&ye<=50&&(ye++,typeof xe=="object"&&(xe.placement&&(ae=xe.placement),xe.rects&&(_=xe.rects===!0?await g.getElementRects({reference:c,floating:r,strategy:d}):xe.rects),{x:j,y:G}=bi(_,ae,F)),fe=-1)}return{x:j,y:G,placement:ae,strategy:d,middlewareData:Q}};function mr(){return typeof window<"u"}function tn(c){return Pi(c)?(c.nodeName||"").toLowerCase():"#document"}function ve(c){var r;return(c==null||(r=c.ownerDocument)==null?void 0:r.defaultView)||window}function at(c){var r;return(r=(Pi(c)?c.ownerDocument:c.document)||window.document)==null?void 0:r.documentElement}function Pi(c){return mr()?c instanceof Node||c instanceof ve(c).Node:!1}function Ze(c){return mr()?c instanceof Element||c instanceof ve(c).Element:!1}function Qe(c){return mr()?c instanceof HTMLElement||c instanceof ve(c).HTMLElement:!1}function vi(c){return!mr()||typeof ShadowRoot>"u"?!1:c instanceof ShadowRoot||c instanceof ve(c).ShadowRoot}function Mn(c){const{overflow:r,overflowX:i,overflowY:o,display:d}=ze(c);return/auto|scroll|overlay|hidden|clip/.test(r+o+i)&&!["inline","contents"].includes(d)}function ro(c){return["table","td","th"].includes(tn(c))}function pr(c){return[":popover-open",":modal"].some(r=>{try{return c.matches(r)}catch{return!1}})}function us(c){const r=as(),i=Ze(c)?ze(c):c;return["transform","translate","scale","rotate","perspective"].some(o=>i[o]?i[o]!=="none":!1)||(i.containerType?i.containerType!=="normal":!1)||!r&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!r&&(i.filter?i.filter!=="none":!1)||["transform","translate","scale","rotate","perspective","filter"].some(o=>(i.willChange||"").includes(o))||["paint","layout","strict","content"].some(o=>(i.contain||"").includes(o))}function so(c){let r=pt(c);for(;Qe(r)&&!Qt(r);){if(us(r))return r;if(pr(r))return null;r=pt(r)}return null}function as(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function Qt(c){return["html","body","#document"].includes(tn(c))}function ze(c){return ve(c).getComputedStyle(c)}function gr(c){return Ze(c)?{scrollLeft:c.scrollLeft,scrollTop:c.scrollTop}:{scrollLeft:c.scrollX,scrollTop:c.scrollY}}function pt(c){if(tn(c)==="html")return c;const r=c.assignedSlot||c.parentNode||vi(c)&&c.host||at(c);return vi(r)?r.host:r}function Vi(c){const r=pt(c);return Qt(r)?c.ownerDocument?c.ownerDocument.body:c.body:Qe(r)&&Mn(r)?r:Vi(r)}function Wi(c,r,i){var o;r===void 0&&(r=[]);const d=Vi(c),p=d===((o=c.ownerDocument)==null?void 0:o.body),g=ve(d);return p?(ss(g),r.concat(g,g.visualViewport||[],Mn(d)?d:[],[])):r.concat(d,Wi(d,[]))}function ss(c){return c.parent&&Object.getPrototypeOf(c.parent)?c.frameElement:null}function Zi(c){const r=ze(c);let i=parseFloat(r.width)||0,o=parseFloat(r.height)||0;const d=Qe(c),p=d?c.offsetWidth:i,g=d?c.offsetHeight:o,b=hr(i)!==p||hr(o)!==g;return b&&(i=p,o=g),{width:i,height:o,$:b}}function zi(c){return Ze(c)?c:c.contextElement}function Kt(c){const r=zi(c);if(!Qe(r))return Ke(1);const i=r.getBoundingClientRect(),{width:o,height:d,$:p}=Zi(r);let g=(p?hr(i.width):i.width)/o,b=(p?hr(i.height):i.height)/d;return(!g||!Number.isFinite(g))&&(g=1),(!b||!Number.isFinite(b))&&(b=1),{x:g,y:b}}const io=Ke(0);function Ui(c){const r=ve(c);return!as()||!r.visualViewport?io:{x:r.visualViewport.offsetLeft,y:r.visualViewport.offsetTop}}function uo(c,r,i){return r===void 0&&(r=!1),!i||r&&i!==ve(c)?!1:r}function Bn(c,r,i,o){r===void 0&&(r=!1),i===void 0&&(i=!1);const d=c.getBoundingClientRect(),p=zi(c);let g=Ke(1);r&&(o?Ze(o)&&(g=Kt(o)):g=Kt(c));const b=uo(p,i,o)?Ui(p):Ke(0);let F=(d.left+b.x)/g.x,_=(d.top+b.y)/g.y,j=d.width/g.x,G=d.height/g.y;if(p){const ae=ve(p),Q=o&&Ze(o)?ve(o):o;let ye=ae,fe=ss(ye);for(;fe&&o&&Q!==ye;){const de=Kt(fe),Xe=fe.getBoundingClientRect(),et=ze(fe),Z=Xe.left+(fe.clientLeft+parseFloat(et.paddingLeft))*de.x,ot=Xe.top+(fe.clientTop+parseFloat(et.paddingTop))*de.y;F*=de.x,_*=de.y,j*=de.x,G*=de.y,F+=Z,_+=ot,ye=ve(fe),fe=ss(ye)}}return ji({width:j,height:G,x:F,y:_})}function os(c,r){const i=gr(c).scrollLeft;return r?r.left+i:Bn(at(c)).left+i}function Hi(c,r,i){i===void 0&&(i=!1);const o=c.getBoundingClientRect(),d=o.left+r.scrollLeft-(i?0:os(c,o)),p=o.top+r.scrollTop;return{x:d,y:p}}function ao(c){let{elements:r,rect:i,offsetParent:o,strategy:d}=c;const p=d==="fixed",g=at(o),b=r?pr(r.floating):!1;if(o===g||b&&p)return i;let F={scrollLeft:0,scrollTop:0},_=Ke(1);const j=Ke(0),G=Qe(o);if((G||!G&&!p)&&((tn(o)!=="body"||Mn(g))&&(F=gr(o)),Qe(o))){const Q=Bn(o);_=Kt(o),j.x=Q.x+o.clientLeft,j.y=Q.y+o.clientTop}const ae=g&&!G&&!p?Hi(g,F,!0):Ke(0);return{width:i.width*_.x,height:i.height*_.y,x:i.x*_.x-F.scrollLeft*_.x+j.x+ae.x,y:i.y*_.y-F.scrollTop*_.y+j.y+ae.y}}function oo(c){return Array.from(c.getClientRects())}function lo(c){const r=at(c),i=gr(c),o=c.ownerDocument.body,d=On(r.scrollWidth,r.clientWidth,o.scrollWidth,o.clientWidth),p=On(r.scrollHeight,r.clientHeight,o.scrollHeight,o.clientHeight);let g=-i.scrollLeft+os(c);const b=-i.scrollTop;return ze(o).direction==="rtl"&&(g+=On(r.clientWidth,o.clientWidth)-d),{width:d,height:p,x:g,y:b}}function co(c,r){const i=ve(c),o=at(c),d=i.visualViewport;let p=o.clientWidth,g=o.clientHeight,b=0,F=0;if(d){p=d.width,g=d.height;const _=as();(!_||_&&r==="fixed")&&(b=d.offsetLeft,F=d.offsetTop)}return{width:p,height:g,x:b,y:F}}function fo(c,r){const i=Bn(c,!0,r==="fixed"),o=i.top+c.clientTop,d=i.left+c.clientLeft,p=Qe(c)?Kt(c):Ke(1),g=c.clientWidth*p.x,b=c.clientHeight*p.y,F=d*p.x,_=o*p.y;return{width:g,height:b,x:F,y:_}}function xi(c,r,i){let o;if(r==="viewport")o=co(c,i);else if(r==="document")o=lo(at(c));else if(Ze(r))o=fo(r,i);else{const d=Ui(c);o={x:r.x-d.x,y:r.y-d.y,width:r.width,height:r.height}}return ji(o)}function qi(c,r){const i=pt(c);return i===r||!Ze(i)||Qt(i)?!1:ze(i).position==="fixed"||qi(i,r)}function ho(c,r){const i=r.get(c);if(i)return i;let o=Wi(c,[]).filter(b=>Ze(b)&&tn(b)!=="body"),d=null;const p=ze(c).position==="fixed";let g=p?pt(c):c;for(;Ze(g)&&!Qt(g);){const b=ze(g),F=us(g);!F&&b.position==="fixed"&&(d=null),(p?!F&&!d:!F&&b.position==="static"&&d&&["absolute","fixed"].includes(d.position)||Mn(g)&&!F&&qi(c,g))?o=o.filter(_=>_!==g):d=b,g=pt(g)}return r.set(c,o),o}function Do(c){let{element:r,boundary:i,rootBoundary:o,strategy:d}=c;const p=[...i==="clippingAncestors"?pr(r)?[]:ho(r,this._c):[].concat(i),o],g=p[0],b=p.reduce((F,_)=>{const j=xi(r,_,d);return F.top=On(j.top,F.top),F.right=Ci(j.right,F.right),F.bottom=Ci(j.bottom,F.bottom),F.left=On(j.left,F.left),F},xi(r,g,d));return{width:b.right-b.left,height:b.bottom-b.top,x:b.left,y:b.top}}function mo(c){const{width:r,height:i}=Zi(c);return{width:r,height:i}}function po(c,r,i){const o=Qe(r),d=at(r),p=i==="fixed",g=Bn(c,!0,p,r);let b={scrollLeft:0,scrollTop:0};const F=Ke(0);if(o||!o&&!p)if((tn(r)!=="body"||Mn(d))&&(b=gr(r)),o){const ae=Bn(r,!0,p,r);F.x=ae.x+r.clientLeft,F.y=ae.y+r.clientTop}else d&&(F.x=os(d));const _=d&&!o&&!p?Hi(d,b):Ke(0),j=g.left+b.scrollLeft-F.x-_.x,G=g.top+b.scrollTop-F.y-_.y;return{x:j,y:G,width:g.width,height:g.height}}function ns(c){return ze(c).position==="static"}function Si(c,r){if(!Qe(c)||ze(c).position==="fixed")return null;if(r)return r(c);let i=c.offsetParent;return at(c)===i&&(i=i.ownerDocument.body),i}function Yi(c,r){const i=ve(c);if(pr(c))return i;if(!Qe(c)){let d=pt(c);for(;d&&!Qt(d);){if(Ze(d)&&!ns(d))return d;d=pt(d)}return i}let o=Si(c,r);for(;o&&ro(o)&&ns(o);)o=Si(o,r);return o&&Qt(o)&&ns(o)&&!us(o)?i:o||so(c)||i}const go=async function(c){const r=this.getOffsetParent||Yi,i=this.getDimensions,o=await i(c.floating);return{reference:po(c.reference,await r(c.floating),c.strategy),floating:{x:0,y:0,width:o.width,height:o.height}}};function Fo(c){return ze(c).direction==="rtl"}const yo={convertOffsetParentRelativeRectToViewportRelativeRect:ao,getDocumentElement:at,getClippingRect:Do,getOffsetParent:Yi,getElementRects:go,getClientRects:oo,getDimensions:mo,getScale:Kt,isElement:Ze,isRTL:Fo},Eo=(c,r,i)=>{const o=new Map,d={platform:yo,...i},p={...d.platform,_c:o};return no(c,r,{...d,platform:p})};function wo(){return{name:"matchWidth",fn({elements:c,rects:r}){return c.floating.style.width=`${r.reference.width}px`,{reset:{rects:!0}}}}}function Co(){return{name:"makeItFloat",fn({elements:c,x:r,y:i}){return c.floating.style.top=`${i}px`,c.floating.style.left=`${r}px`,{}}}}function bo(c,r){return(c%r+r)%r}class vo extends Ka{constructor(r,i,o){super(r,o??i.parentElement??document.body),this.inputEl=i,this.registerListeners()}#e=[];#t=[];#n=-1;open(){super.open(),Eo(this.inputEl,this.wrapperEl,{placement:"bottom-start",middleware:[wo(),Co()]})}close(){super.close(),this.#n=-1,this.#e=[],this.#t=[]}registerListeners(){super.registerListeners(),this.scope.register([],"Enter",r=>this.onKeypress(r,"enter")),this.scope.register([],"ArrowUp",r=>this.onKeypress(r,"up")),this.scope.register([],"ArrowDown",r=>this.onKeypress(r,"down")),this.wrapperEl.addEventListener("mousedown",()=>!1),this.wrapperEl.on("click",".suggestion-item",this.onClick.bind(this)),this.inputEl.addEventListener("blur",this.onBlur.bind(this)),this.inputEl.addEventListener("focus",this.onInputChange.bind(this)),this.inputEl.addEventListener("input",this.onInputChange.bind(this))}onBlur(){setTimeout(()=>this.close(),100)}onInputChange(r){if(!(r.currentTarget instanceof HTMLInputElement)&&!(r.currentTarget instanceof HTMLTextAreaElement))return;const i=this.getSuggestions(r.currentTarget.value);if(i.length>0){this.wrapperEl.empty(),this.#e=i,this.#t=i.map(o=>{const d=this.wrapperEl.createDiv("suggestion-item");return this.renderSuggestion(o,d),d}),this.open();return}this.close()}onKeypress(r,i){if(!r.isComposing)switch(r.preventDefault(),i){case"enter":this.selectSuggestion(this.#e[this.#n]);break;case"up":this.focusSuggestion(this.#n-1,!0);break;case"down":this.focusSuggestion(this.#n+1,!0);break}}onClick(r,i){r.preventDefault(),this.focusSuggestion(this.#t.indexOf(i),!1),this.selectSuggestion(this.#e[this.#n])}focusSuggestion(r,i){const o=bo(r,this.#e.length),d=this.#t[this.#n],p=this.#t[o];d.removeClass("is-selected"),p.addClass("is-selected"),this.#n=o,i&&p.scrollIntoView(!1)}}function xo(c,r){return So(c,r?i=>i instanceof K.TFolder&&r(i):i=>i instanceof K.TFolder)}function So(c,r){let i=c.getAllLoadedFiles();return r&&(i=i.filter(r)),i.sort((o,d)=>o.path.localeCompare(d.path))}function To(c,r,i){const o=Oo(c,r),d=p=>p instanceof K.TFile;return o.children.filter(d)}function Oo(c,r){const i=c.getAbstractFileByPath(K.normalizePath(r));if(!i)throw new Error(`Folder "${r}" doesn't exist.`);if(!(i instanceof K.TFolder))throw new Error(`${r} is a file, not a folder.`);return i}class Ti extends vo{getSuggestions(r){const i=r.trim().toLowerCase();return xo(this.app.vault,o=>o.path.toLowerCase().contains(i))}renderSuggestion(r,i){i.setText(r.path)}selectSuggestion(r){this.inputEl.value=r.path,this.inputEl.trigger("input"),this.close()}}let Oi=()=>{var c=(()=>{var r=Object.defineProperty,i=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,d=Object.prototype.hasOwnProperty,p=(w,x)=>{for(var B in x)r(w,B,{get:x[B],enumerable:!0})},g=(w,x,B,L)=>{if(x&&typeof x=="object"||typeof x=="function")for(let P of o(x))!d.call(w,P)&&P!==B&&r(w,P,{get:()=>x[P],enumerable:!(L=i(x,P))||L.enumerable});return w},b=w=>g(r({},"__esModule",{value:!0}),w),F={};p(F,{default:()=>Dn});var _=w=>Array.isArray(w),j=w=>typeof w=="function",G=w=>w.length===0,ae=w=>typeof w=="number",Q=w=>typeof w=="object"&&w!==null,ye=w=>w instanceof RegExp,fe=w=>typeof w=="string",de=w=>w===void 0,Xe=w=>{const x=new Map;return B=>{const L=x.get(B);if(L)return L;const P=w(B);return x.set(B,P),P}},et=(w,x,B={})=>{const L={cache:{},input:w,index:0,indexMax:0,options:B,output:[]};if(Be(x)(L)&&L.index===w.length)return L.output;throw new Error(`Failed to parse at index ${L.indexMax}`)},Z=(w,x)=>_(w)?ot(w,x):fe(w)?An(w,x):xe(w,x),ot=(w,x)=>{const B={};for(const L of w){if(L.length!==1)throw new Error(`Invalid character: "${L}"`);const P=L.charCodeAt(0);B[P]=!0}return L=>{const P=L.index,Y=L.input;for(;L.index<Y.length&&Y.charCodeAt(L.index)in B;)L.index+=1;const ne=L.index;if(ne>P){if(!de(x)&&!L.options.silent){const we=L.input.slice(P,ne),Te=j(x)?x(we,Y,String(P)):x;de(Te)||L.output.push(Te)}L.indexMax=Math.max(L.indexMax,L.index)}return!0}},xe=(w,x)=>{const B=w.source,L=w.flags.replace(/y|$/,"y"),P=new RegExp(B,L);return yt(Y=>{P.lastIndex=Y.index;const ne=P.exec(Y.input);if(ne){if(!de(x)&&!Y.options.silent){const we=j(x)?x(...ne,Y.input,String(Y.index)):x;de(we)||Y.output.push(we)}return Y.index+=ne[0].length,Y.indexMax=Math.max(Y.indexMax,Y.index),!0}else return!1})},An=(w,x)=>B=>{if(B.input.startsWith(w,B.index)){if(!de(x)&&!B.options.silent){const L=j(x)?x(w,B.input,String(B.index)):x;de(L)||B.output.push(L)}return B.index+=w.length,B.indexMax=Math.max(B.indexMax,B.index),!0}else return!1},nn=(w,x,B,L)=>{const P=Be(w);return yt(Nt(In(Y=>{let ne=0;for(;ne<B;){const we=Y.index;if(!P(Y)||(ne+=1,Y.index===we))break}return ne>=x})))},Nn=(w,x)=>nn(w,0,1),gt=(w,x)=>nn(w,0,1/0),Ft=(w,x)=>{const B=w.map(Be);return yt(Nt(In(L=>{for(let P=0,Y=B.length;P<Y;P++)if(!B[P](L))return!1;return!0})))},Se=(w,x)=>{const B=w.map(Be);return yt(Nt(L=>{for(let P=0,Y=B.length;P<Y;P++)if(B[P](L))return!0;return!1}))},In=(w,x=!1)=>{const B=Be(w);return L=>{const P=L.index,Y=L.output.length,ne=B(L);return(!ne||x)&&(L.index=P,L.output.length!==Y&&(L.output.length=Y)),ne}},Nt=(w,x)=>Be(w),yt=(()=>{let w=0;return x=>{const B=Be(x),L=w+=1;return P=>{var Y;if(P.options.memoization===!1)return B(P);const ne=P.index,we=(Y=P.cache)[L]||(Y[L]=new Map),Te=we.get(ne);if(Te===!1)return!1;if(ae(Te))return P.index=Te,!0;if(Te)return P.index=Te.index,Te.output?.length&&P.output.push(...Te.output),!0;{const mn=P.output.length;if(B(P)){const pn=P.index,gn=P.output.length;if(gn>mn){const Nr=P.output.slice(mn,gn);we.set(ne,{index:pn,output:Nr})}else we.set(ne,pn);return!0}else return we.set(ne,!1),!1}}}})(),rn=w=>{let x;return B=>(x||(x=Be(w())),x(B))},Be=Xe(w=>{if(j(w))return G(w)?rn(w):w;if(fe(w)||ye(w))return Z(w);if(_(w))return Ft(w);if(Q(w))return Se(Object.values(w));throw new Error("Invalid rule")}),lt="abcdefghijklmnopqrstuvwxyz",sn=w=>{let x="";for(;w>0;){const B=(w-1)%26;x=lt[B]+x,w=Math.floor((w-1)/26)}return x},Et=w=>{let x=0;for(let B=0,L=w.length;B<L;B++)x=x*26+lt.indexOf(w[B])+1;return x},ct=(w,x)=>{if(x<w)return ct(x,w);const B=[];for(;w<=x;)B.push(w++);return B},Fr=(w,x,B)=>ct(w,x).map(L=>String(L).padStart(B,"0")),Ln=(w,x)=>ct(Et(w),Et(x)).map(sn),Me=w=>w,_n=w=>It(x=>et(x,w,{memoization:!1}).join("")),It=w=>{const x={};return B=>x[B]??(x[B]=w(B))},Ae=Z(/^\*\*\/\*$/,".*"),$n=Z(/^\*\*\/(\*)?([ a-zA-Z0-9._-]+)$/,(w,x,B)=>`.*${x?"":"(?:^|/)"}${B.replaceAll(".","\\.")}`),yr=Z(/^\*\*\/(\*)?([ a-zA-Z0-9._-]*)\{([ a-zA-Z0-9._-]+(?:,[ a-zA-Z0-9._-]+)*)\}$/,(w,x,B,L)=>`.*${x?"":"(?:^|/)"}${B.replaceAll(".","\\.")}(?:${L.replaceAll(",","|").replaceAll(".","\\.")})`),wt=Z(/\\./,Me),un=Z(/[$.*+?^(){}[\]\|]/,w=>`\\${w}`),an=Z(/./,Me),Er=Z(/^(?:!!)*!(.*)$/,(w,x)=>`(?!^${Yn(x)}$).*?`),on=Z(/^(!!)+/,""),wr=Se([Er,on]),Ct=Z(/\/(\*\*\/)+/,"(?:/.+/|/)"),Cr=Z(/^(\*\*\/)+/,"(?:^|.*/)"),br=Z(/\/(\*\*)$/,"(?:/.*|$)"),vr=Z(/\*\*/,".*"),Rn=Se([Ct,Cr,br,vr]),xr=Z(/\*\/(?!\*\*\/)/,"[^/]*/"),Lt=Z(/\*/,"[^/]*"),jn=Se([xr,Lt]),Pn=Z("?","[^/]"),Sr=Z("[",Me),Tr=Z("]",Me),X=Z(/[!^]/,"^/"),ln=Z(/[a-z]-[a-z]|[0-9]-[0-9]/i,Me),De=Z(/[$.*+?^(){}[\|]/,w=>`\\${w}`),Or=Z(/[^\]]/,Me),Ue=Se([wt,De,ln,Or]),cn=Ft([Sr,Nn(X),gt(Ue),Tr]),Vn=Z("{","(?:"),Wn=Z("}",")"),Zn=Z(/(\d+)\.\.(\d+)/,(w,x,B)=>Fr(+x,+B,Math.min(x.length,B.length)).join("|")),zn=Z(/([a-z]+)\.\.([a-z]+)/,(w,x,B)=>Ln(x,B).join("|")),Un=Z(/([A-Z]+)\.\.([A-Z]+)/,(w,x,B)=>Ln(x.toLowerCase(),B.toLowerCase()).join("|").toUpperCase()),Hn=Se([Zn,zn,Un]),re=Ft([Vn,Hn,Wn]),q=Z("{","(?:"),tt=Z("}",")"),_t=Z(",","|"),kr=Z(/[$.*+?^(){[\]\|]/,w=>`\\${w}`),Br=Z(/[^}]/,Me),qn=rn(()=>fn),Mr=Se([Rn,jn,Pn,cn,re,qn,wt,kr,_t,Br]),fn=Ft([q,gt(Mr),tt]),Ar=gt(Se([Ae,$n,yr,wr,Rn,jn,Pn,cn,re,fn,wt,un,an])),ft=Ar,Ne=_n(ft),Yn=Ne,se=Z(/\\./,Me),He=Z(/./,Me),nt=Z(/\*\*\*+/,"*"),dn=Z(/([^/{[(!])\*\*/,(w,x)=>`${x}*`),hn=Z(/(^|.)\*\*(?=[^*/)\]}])/,(w,x)=>`${x}*`),bt=gt(Se([se,nt,dn,hn,He])),vt=bt,$t=_n(vt),Rt=$t,dt=(w,x)=>{const B=Array.isArray(w)?w:[w];if(!B.length)return!1;const L=B.map(dt.compile),P=B.every(ne=>/(\/(?:\*\*)?|\[\/\])$/.test(ne)),Y=x.replace(/[\\\/]+/g,"/").replace(/\/$/,P?"/":"");return L.some(ne=>ne.test(Y))};dt.compile=w=>new RegExp(`^${Yn(Rt(w))}$`,"s");var Dn=dt;return b(F)})();return c.default||c},rs;const ko=(c,r)=>(rs||(rs=Oi(),Oi=null),rs(c,r)),Bo=/^[A-Za-z]:\//;function At(c=""){return c&&c.replace(/\\/g,"/").replace(Bo,r=>r.toUpperCase())}const Mo=/^[/\\]{2}/,Ao=/^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/,Gi=/^[A-Za-z]:$/,ki=/^\/([A-Za-z]:)?$/,No=/.(\.[^./]+|\.)$/,Io=/^[/\\]|^[a-zA-Z]:[/\\]/,Lo="/",ls=function(c){if(c.length===0)return".";c=At(c);const r=c.match(Mo),i=Xt(c),o=c[c.length-1]==="/";return c=cs(c,!i),c.length===0?i?"/":o?"./":".":(o&&(c+="/"),Gi.test(c)&&(c+="/"),r?i?`//${c}`:`//./${c}`:i&&!Xt(c)?`/${c}`:c)},_o=function(...c){let r="";for(const i of c)if(i)if(r.length>0){const o=r[r.length-1]==="/",d=i[0]==="/";o&&d?r+=i.slice(1):r+=o||d?i:`/${i}`}else r+=i;return ls(r)};function $o(){return typeof process<"u"&&typeof process.cwd=="function"?process.cwd().replace(/\\/g,"/"):"/"}const Dr=function(...c){c=c.map(o=>At(o));let r="",i=!1;for(let o=c.length-1;o>=-1&&!i;o--){const d=o>=0?c[o]:$o();!d||d.length===0||(r=`${d}/${r}`,i=Xt(d))}return r=cs(r,!i),i&&!Xt(r)?`/${r}`:r.length>0?r:"."};function cs(c,r){let i="",o=0,d=-1,p=0,g=null;for(let b=0;b<=c.length;++b){if(b<c.length)g=c[b];else{if(g==="/")break;g="/"}if(g==="/"){if(!(d===b-1||p===1))if(p===2){if(i.length<2||o!==2||i[i.length-1]!=="."||i[i.length-2]!=="."){if(i.length>2){const F=i.lastIndexOf("/");F===-1?(i="",o=0):(i=i.slice(0,F),o=i.length-1-i.lastIndexOf("/")),d=b,p=0;continue}else if(i.length>0){i="",o=0,d=b,p=0;continue}}r&&(i+=i.length>0?"/..":"..",o=2)}else i.length>0?i+=`/${c.slice(d+1,b)}`:i=c.slice(d+1,b),o=b-d-1;d=b,p=0}else g==="."&&p!==-1?++p:p=-1}return i}const Xt=function(c){return Ao.test(c)},Ro=function(c){return At(c)},Ji=function(c){if(c==="..")return"";const r=No.exec(At(c));return r&&r[1]||""},jo=function(c,r){const i=Dr(c).replace(ki,"$1").split("/"),o=Dr(r).replace(ki,"$1").split("/");if(o[0][1]===":"&&i[0][1]===":"&&i[0]!==o[0])return o.join("/");const d=[...i];for(const p of d){if(o[0]!==p)break;i.shift(),o.shift()}return[...i.map(()=>".."),...o].join("/")},Ki=function(c){const r=At(c).replace(/\/$/,"").split("/").slice(0,-1);return r.length===1&&Gi.test(r[0])&&(r[0]+="/"),r.join("/")||(Xt(c)?"/":".")},Po=function(c){const r=c.ext?c.ext.startsWith(".")?c.ext:`.${c.ext}`:"",i=[c.root,c.dir,c.base??(c.name??"")+r].filter(Boolean);return At(c.root?Dr(...i):i.join("/"))},Qi=function(c,r){const i=At(c).split("/");let o="";for(let d=i.length-1;d>=0;d--){const p=i[d];if(p){o=p;break}}return r&&o.endsWith(r)?o.slice(0,-r.length):o},Vo=function(c){const r=Io.exec(c)?.[0]?.replace(/\\/g,"/")||"",i=Qi(c),o=Ji(i);return{root:r,dir:Ki(c),base:i,ext:o,name:i.slice(0,i.length-o.length)}},Wo=(c,r)=>ko(r,ls(c)),Bi={__proto__:null,basename:Qi,dirname:Ki,extname:Ji,format:Po,isAbsolute:Xt,join:_o,matchesGlob:Wo,normalize:ls,normalizeString:cs,parse:Vo,relative:jo,resolve:Dr,sep:Lo,toNamespacedPath:Ro},Zo=globalThis.process?.platform==="win32"?";":":",zo={posix:void 0,win32:void 0},Xi=(c=Zo)=>new Proxy(Bi,{get(r,i){return i==="delimiter"?c:i==="posix"?is:i==="win32"?Uo:zo[i]||Bi[i]}}),is=Xi(":"),Uo=Xi(";");function eu(c){return typeof c=="object"&&c!==null}function Ho(c){return c.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}async function tu(c){const i=new TextEncoder().encode(c),o=await crypto.subtle.digest("SHA-1",i),d=new Uint8Array(o);return Array.from(d).map(g=>g.toString(16).padStart(2,"0")).join("")}class fs{#e;#t;constructor(r){this.#t=r.app.vault,this.#e=r}getResourcePath(r){return this.#e.app.vault.getResourcePath(r)}getAbsolutePath(r){return is.resolve(this.#t.adapter.basePath,r)}getCachePath(...r){return this.join(this.#e.settings.cache_folder,"__components__",...r)}join(...r){return K.normalizePath(is.join(...r))}resolvePath(r){return String.isString(r)?r:r.path}resolveFile(r){return r instanceof K.TFile?r:this.#t.getFileByPath(r)}async#n(r){return await this.#t.adapter.exists(r)}async#r(r){return!await this.#t.adapter.exists(r)}async exists(r){return this.#n(r)}async missing(r){return this.#r(r)}async remove(r){await this.#t.adapter.remove(r)}async read(r){return await this.#t.adapter.read(r)}async edit(r,i){const o=this.resolvePath(r),d=await this.#t.adapter.read(o);await this.#t.adapter.write(o,i(d))}async copy(r,i,o){const d=this.resolvePath(r);if(!o)return this.#t.adapter.copy(d,i);const p=await this.#t.adapter.read(d);await this.#t.adapter.write(i,o(p))}async renewFolder(r){const i=this.resolvePath(r);await this.#n(i)&&await this.#t.adapter.rmdir(i,!0),await this.#r(i)&&await this.#t.adapter.mkdir(i)}async getFileHash(r,i=6){const o=this.resolvePath(r),d=await this.#t.adapter.read(o),p=await tu(d);return i<1?p:p.substring(0,i)}}class en{_values=new Map;clear(){this._values=new Map}keys(){return this._values.keys()}*keysWithValue(r){if(typeof r!="function"){for(const[i,o]of this._values.entries())o.includes(r)&&(yield i);return}for(const[i,o]of this._values.entries())o.some(r)&&(yield i)}values(){return this._values.values()}entries(){return this._values.entries()}has(r){return this._values.has(r)}hasValue(r){for(const i of this._values.values())if(i.includes(r))return!0;return!1}hasKeyValue(r,i){return this.get(r).includes(i)}get(r){return this._values.get(r)??[]}getFirst(r){return this.get(r).first()}store(r){this.has(r)||this._values.set(r,[])}prepend(r,i){const o=this.get(r);o.unshift(i),this._values.set(r,o.unique())}push(r,i){const o=this.get(r).reverse();o.unshift(i),this._values.set(r,o.unique().reverse())}static fromReversedObject(r){const i=new en;for(const[o,d]of Object.entries(r))i.push(d,o);return i}}function qo(c){const r=Go(c.settings);return{components_enabled:r,components_matchers:Jo(c.settings,r)}}function Yo(c){return c.split(/[|;,\s]+/gi).reduce((r,i)=>(i=i.replace(/\W*/gi,""),i.length>0&&!r.includes(i)&&r.push(i),r),[])}function Go(c){const r=new en;for(const i of c.components_config)if(i.enabled)for(const o of Yo(i.names))r.hasValue(o)||r.push(i.id,o);return r}function Jo(c,r){const i=[];for(const o of c.components_config)o.enabled&&i.push({id:o.id,path:o.path,test:[].contains.bind(r.get(o.id))});return i}function Ko(c,r,i){const o=To(c,r);return o.sort((d,p)=>d.path.localeCompare(p.path,"en")),o.map(d=>{const p=i.find(g=>g.id===d.name);return{id:d.name,path:d.path,names:p?.names??d.basename.replaceAll(".","_"),enabled:p?.enabled??!1}})}function Qo(c,r){return createEl(c,void 0,i=>i.append(r))}function Mi(c,r,i){return c.createEl(r,void 0,o=>o.append(i))}class Xo{#e;#t;#n=[];constructor(r,i){this.#e=r,this.#o(i),this.#t=i.createDiv("components-list"),this.#u()}async#r(r){this.#e.settings.components_config=r,await this.#e.saveSettings(),this.#l()}#s(r,i){const o=this.#e.settings.components_config.map(d=>r.includes(d.id)?{...d,enabled:i}:d);this.#r(o)}#i(r,i,o){const d=this.#e.settings.components_config.map(p=>p.id===r?{...p,[i]:o}:p);this.#r(d)}#u(){const r=Ko(this.#e.app.vault,this.#e.settings.components_folder,this.#e.settings.components_config);this.#n=r.map(i=>i.id),this.#r(r)}#o(r){let i=null;const o=new K.Setting(r);o.setName("Vault Components"),o.setDesc("The entries are components found on the vault."),o.addExtraButton(d=>{d.setIcon("reset").setTooltip("Refresh"),d.onClick(()=>{this.#u(),i?.setValue("")})}),o.addSearch(d=>{i=d,d.onChange(p=>{let g=!1;const b=[];for(const F of this.#e.settings.components_config){const _=p?F.path.contains(p):!0,j=this.#n.includes(F.id);_?(b.push(F.id),j||(g=!0)):j&&(g=!0)}g&&(this.#n=b,this.#l())})}),o.addExtraButton(d=>{d.setIcon("badge-check").setTooltip("Enable Listed Components"),d.onClick(()=>this.#s(this.#n,!0))}),o.addExtraButton(d=>{d.setIcon("badge-x").setTooltip("Disable Listed Components"),d.onClick(()=>this.#s(this.#n,!1))})}#l(){this.#t.empty();for(const r of this.#e.settings.components_config){if(!this.#n.includes(r.id))continue;const i=new K.Setting(this.#t);i.setName(this.#c(r.id,r.enabled)),i.setDesc(this.#a(r.id)),i.addExtraButton(o=>{o.setTooltip("Edit names"),o.setIcon("pencil"),o.onClick(()=>this.#d(i,r))}),i.addToggle(o=>{o.setTooltip("Is enabled?"),o.setValue(r.enabled),o.onChange(this.#s.bind(this,[r.id]))})}}#c(r,i){const o=createFragment();return o.append(`${i?"Enabled":"Disabled"} component: `,Qo("code",r)),o}#a(r){const i=createFragment(),o=i.createDiv("components-names");o.append("Usage: ");const d=this.#e.state.components_enabled.get(r);if(d.length===0)return Mi(o,"b","Not available"),i;for(let p=0;p<d.length;p++)p>0&&o.appendText(" | "),Mi(o,"code",d[p]);return i}#f=null;#d(r,i){this.#f?.remove(),this.#f=r.settingEl.createDiv("component-form");let o=null;const d=new K.Setting(this.#f);d.addTextArea(p=>{o=p,p.setValue(i.names)}),d.addButton(p=>{p.setButtonText("Cancel"),p.onClick(()=>this.#f?.remove())}),d.addButton(p=>{p.setButtonText("Save"),p.onClick(()=>{this.#i(i.id,"names",o?.getValue()??"")})})}}const el={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"};function dr(c,r){return createFragment(i=>{i.appendText(r+". Check the "),i.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-components/blob/main/docs/settings.md#${Ho(c)}`}),i.appendText(".")})}class tl extends K.PluginSettingTab{#e;#t;constructor(r){super(r.app,r),this.#e=r,this.#t=new fs(r)}async#n(r,i){this.#e.settings[r]=i,await this.#e.saveSettings()}display(){this.containerEl.empty(),this.containerEl.addClass("components-settings"),new K.Setting(this.containerEl).setName("Plugin Settings").setHeading(),this.#r(),new K.Setting(this.containerEl).setName("Codeblock Settings").setHeading(),this.#s(),new K.Setting(this.containerEl).setName("Component Settings").setHeading(),this.#i(),new Xo(this.#e,this.containerEl)}#r(){const r=new K.Setting(this.containerEl);r.setName("Plugging LogLevel"),r.setDesc(dr("Plugging LogLevel","To check the plugin logs")),r.addDropdown(o=>{o.addOptions(el),o.setValue(this.#e.settings.plugin_level),o.onChange(this.#n.bind(this,"plugin_level"))});const i=new K.Setting(this.containerEl);i.setName("Design mode"),i.setDesc(dr("Design mode","Enable design mode only if you're editing your components code. It will not disabled until you close the app")),i.addToggle(o=>{const d=this.#e.isDesignModeEnabled;o.setDisabled(d),o.setValue(d),o.onChange(()=>{d||(o.setDisabled(!0),this.#e.enableDesignMode())})})}#s(){const r=new K.Setting(this.containerEl);r.setName("Custom Codeblocks"),r.setDesc(dr("Custom Codeblocks","Allows the usage of the components custom names as codeblocks identifiers")),r.addToggle(p=>{p.setValue(this.#e.settings.enable_codeblocks),p.onChange(this.#n.bind(this,"enable_codeblocks"))});let i=null;const o=new K.Setting(this.containerEl);o.setName("Enable Codeblocks Separators"),o.setDesc(dr("Enable Codeblocks Separators","Allows the usage of separators inside codeblocks")),o.addToggle(p=>{p.setValue(this.#e.settings.enable_separators),p.onChange(g=>{this.#n("enable_separators",g),i?.setDisabled(!g)})});const d=new K.Setting(this.containerEl);d.setName("Codeblocks Separator"),d.setDesc("Separator to use inside codeblocks."),d.addText(p=>{i=p,p.setDisabled(!this.#e.settings.enable_separators),p.setValue(this.#e.settings.usage_separator),p.onChange(this.#n.bind(this,"usage_separator"))})}#i(){const r=(F,_,j)=>{_.onChange(async G=>{if(j.empty(),!G||G==="/"||await this.#t.missing(G)){_.inputEl.classList.add("invalid-value"),j.appendText("Invalid path.");return}_.inputEl.classList.remove("invalid-value"),this.#n(F,G)})},i=createFragment();i.append("Files in this directory will be taken as components.");const o=i.createEl("p","invalid-value"),d=new K.Setting(this.containerEl);d.setName("Components templates folder"),d.setDesc(i),d.addText(F=>{new Ti(this.app,F.inputEl,this.containerEl),F.setPlaceholder("Example: folder1/folder2"),F.setValue(this.#e.settings.components_folder),r("components_folder",F,o)});const p=createFragment();p.append("Folder used to cache pre-processed components.");const g=p.createEl("p","invalid-value"),b=new K.Setting(this.containerEl);b.setName("Components cache folder"),b.setDesc(p),b.addText(F=>{new Ti(this.app,F.inputEl,this.containerEl),F.setPlaceholder("Example: folder1/folder2"),F.setValue(this.#e.settings.cache_folder),r("cache_folder",F,g)})}}class Mt extends Error{name="ComponentError";code;constructor(r,i){super(r),this.code=i.code,this.cause=i.cause}toString(){if(!this.cause)return`${this.name}: ${this.message}`;const r=`${this.name}: ${this.message}, cause:

`;return this.cause instanceof Error?`${r}${this.cause}`:`${r}${JSON.stringify(this.cause)}`}}class Ai extends Mt{constructor(r){super(r,{code:"disabled-component"})}}class nl{id="yaml";test(r){return r.startsWith("-")?!0:/^\w+:/.test(r)}parse(r,i){return Promise.resolve(K.parseYaml(r))}}class rl{id="json";test(r){return/^\s*[[{]/gi.test(r)}parse(r,i){return Promise.resolve(JSON.parse(r))}}var Ni=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},We={},Ii;function sl(){if(Ii)return We;Ii=1,Object.defineProperty(We,"__esModule",{value:!0});class c extends Error{}class r extends c{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class i extends c{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class o extends c{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class d extends c{}class p extends c{constructor(e){super(`Invalid unit ${e}`)}}class g extends c{}class b extends c{constructor(){super("Zone is an abstract class")}}const F="numeric",_="short",j="long",G={year:F,month:F,day:F},ae={year:F,month:_,day:F},Q={year:F,month:_,day:F,weekday:_},ye={year:F,month:j,day:F},fe={year:F,month:j,day:F,weekday:j},de={hour:F,minute:F},Xe={hour:F,minute:F,second:F},et={hour:F,minute:F,second:F,timeZoneName:_},Z={hour:F,minute:F,second:F,timeZoneName:j},ot={hour:F,minute:F,hourCycle:"h23"},xe={hour:F,minute:F,second:F,hourCycle:"h23"},An={hour:F,minute:F,second:F,hourCycle:"h23",timeZoneName:_},nn={hour:F,minute:F,second:F,hourCycle:"h23",timeZoneName:j},Nn={year:F,month:F,day:F,hour:F,minute:F},gt={year:F,month:F,day:F,hour:F,minute:F,second:F},Ft={year:F,month:_,day:F,hour:F,minute:F},Se={year:F,month:_,day:F,hour:F,minute:F,second:F},In={year:F,month:_,day:F,weekday:_,hour:F,minute:F},Nt={year:F,month:j,day:F,hour:F,minute:F,timeZoneName:_},yt={year:F,month:j,day:F,hour:F,minute:F,second:F,timeZoneName:_},rn={year:F,month:j,day:F,weekday:j,hour:F,minute:F,timeZoneName:j},Be={year:F,month:j,day:F,weekday:j,hour:F,minute:F,second:F,timeZoneName:j};class lt{get type(){throw new b}get name(){throw new b}get ianaName(){return this.name}get isUniversal(){throw new b}offsetName(e,n){throw new b}formatOffset(e,n){throw new b}offset(e){throw new b}equals(e){throw new b}get isValid(){throw new b}}let sn=null;class Et extends lt{static get instance(){return sn===null&&(sn=new Et),sn}get type(){return"system"}get name(){return new Intl.DateTimeFormat().resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:n,locale:s}){return w(e,n,s)}formatOffset(e,n){return P(this.offset(e),n)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return e.type==="system"}get isValid(){return!0}}let ct={};function Fr(t){return ct[t]||(ct[t]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),ct[t]}const Ln={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};function Me(t,e){const n=t.format(e).replace(/\u200E/g,""),s=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,u,a,l,m,E,v,M]=s;return[l,u,a,m,E,v,M]}function _n(t,e){const n=t.formatToParts(e),s=[];for(let u=0;u<n.length;u++){const{type:a,value:l}=n[u],m=Ln[a];a==="era"?s[m]=l:q(m)||(s[m]=parseInt(l,10))}return s}let It={};class Ae extends lt{static create(e){return It[e]||(It[e]=new Ae(e)),It[e]}static resetCache(){It={},ct={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch{return!1}}constructor(e){super(),this.zoneName=e,this.valid=Ae.isValidZone(e)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:n,locale:s}){return w(e,n,s,this.name)}formatOffset(e,n){return P(this.offset(e),n)}offset(e){const n=new Date(e);if(isNaN(n))return NaN;const s=Fr(this.name);let[u,a,l,m,E,v,M]=s.formatToParts?_n(s,n):Me(s,n);m==="BC"&&(u=-Math.abs(u)+1);const R=Rt({year:u,month:a,day:l,hour:E===24?0:E,minute:v,second:M,millisecond:0});let I=+n;const H=I%1e3;return I-=H>=0?H:1e3+H,(R-I)/(60*1e3)}equals(e){return e.type==="iana"&&e.name===this.name}get isValid(){return this.valid}}let $n={};function yr(t,e={}){const n=JSON.stringify([t,e]);let s=$n[n];return s||(s=new Intl.ListFormat(t,e),$n[n]=s),s}let wt={};function un(t,e={}){const n=JSON.stringify([t,e]);let s=wt[n];return s||(s=new Intl.DateTimeFormat(t,e),wt[n]=s),s}let an={};function Er(t,e={}){const n=JSON.stringify([t,e]);let s=an[n];return s||(s=new Intl.NumberFormat(t,e),an[n]=s),s}let on={};function wr(t,e={}){const{base:n,...s}=e,u=JSON.stringify([t,s]);let a=on[u];return a||(a=new Intl.RelativeTimeFormat(t,e),on[u]=a),a}let Ct=null;function Cr(){return Ct||(Ct=new Intl.DateTimeFormat().resolvedOptions().locale,Ct)}function br(t){const e=t.indexOf("-x-");e!==-1&&(t=t.substring(0,e));const n=t.indexOf("-u-");if(n===-1)return[t];{let s,u;try{s=un(t).resolvedOptions(),u=t}catch{const E=t.substring(0,n);s=un(E).resolvedOptions(),u=E}const{numberingSystem:a,calendar:l}=s;return[u,a,l]}}function vr(t,e,n){return(n||e)&&(t.includes("-u-")||(t+="-u"),n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`)),t}function Rn(t){const e=[];for(let n=1;n<=12;n++){const s=$.utc(2009,n,1);e.push(t(s))}return e}function xr(t){const e=[];for(let n=1;n<=7;n++){const s=$.utc(2016,11,13+n);e.push(t(s))}return e}function Lt(t,e,n,s){const u=t.listingMode();return u==="error"?null:u==="en"?n(e):s(e)}function jn(t){return t.numberingSystem&&t.numberingSystem!=="latn"?!1:t.numberingSystem==="latn"||!t.locale||t.locale.startsWith("en")||new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem==="latn"}class Pn{constructor(e,n,s){this.padTo=s.padTo||0,this.floor=s.floor||!1;const{padTo:u,floor:a,...l}=s;if(!n||Object.keys(l).length>0){const m={useGrouping:!1,...s};s.padTo>0&&(m.minimumIntegerDigits=s.padTo),this.inf=Er(e,m)}}format(e){if(this.inf){const n=this.floor?Math.floor(e):e;return this.inf.format(n)}else{const n=this.floor?Math.floor(e):hn(e,3);return se(n,this.padTo)}}}class Sr{constructor(e,n,s){this.opts=s,this.originalZone=void 0;let u;if(this.opts.timeZone)this.dt=e;else if(e.zone.type==="fixed"){const l=-1*(e.offset/60),m=l>=0?`Etc/GMT+${l}`:`Etc/GMT${l}`;e.offset!==0&&Ae.create(m).valid?(u=m,this.dt=e):(u="UTC",this.dt=e.offset===0?e:e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone)}else e.zone.type==="system"?this.dt=e:e.zone.type==="iana"?(this.dt=e,u=e.zone.name):(u="UTC",this.dt=e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone);const a={...this.opts};a.timeZone=a.timeZone||u,this.dtf=un(n,a)}format(){return this.originalZone?this.formatToParts().map(({value:e})=>e).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const e=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?e.map(n=>{if(n.type==="timeZoneName"){const s=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...n,value:s}}else return n}):e}resolvedOptions(){return this.dtf.resolvedOptions()}}class Tr{constructor(e,n,s){this.opts={style:"long",...s},!n&&qn()&&(this.rtf=wr(e,s))}format(e,n){return this.rtf?this.rtf.format(e,n):cu(n,e,this.opts.numeric,this.opts.style!=="long")}formatToParts(e,n){return this.rtf?this.rtf.formatToParts(e,n):[]}}class X{static fromOpts(e){return X.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)}static create(e,n,s,u=!1){const a=e||re.defaultLocale,l=a||(u?"en-US":Cr()),m=n||re.defaultNumberingSystem,E=s||re.defaultOutputCalendar;return new X(l,m,E,a)}static resetCache(){Ct=null,wt={},an={},on={}}static fromObject({locale:e,numberingSystem:n,outputCalendar:s}={}){return X.create(e,n,s)}constructor(e,n,s,u){const[a,l,m]=br(e);this.locale=a,this.numberingSystem=n||l||null,this.outputCalendar=s||m||null,this.intl=vr(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=u,this.fastNumbersCached=null}get fastNumbers(){return this.fastNumbersCached==null&&(this.fastNumbersCached=jn(this)),this.fastNumbersCached}listingMode(){const e=this.isEnglish(),n=(this.numberingSystem===null||this.numberingSystem==="latn")&&(this.outputCalendar===null||this.outputCalendar==="gregory");return e&&n?"en":"intl"}clone(e){return!e||Object.getOwnPropertyNames(e).length===0?this:X.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1)}redefaultToEN(e={}){return this.clone({...e,defaultToEN:!0})}redefaultToSystem(e={}){return this.clone({...e,defaultToEN:!1})}months(e,n=!1){return Lt(this,e,mn,()=>{const s=n?{month:e,day:"numeric"}:{month:e},u=n?"format":"standalone";return this.monthsCache[u][e]||(this.monthsCache[u][e]=Rn(a=>this.extract(a,s,"month"))),this.monthsCache[u][e]})}weekdays(e,n=!1){return Lt(this,e,ps,()=>{const s=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},u=n?"format":"standalone";return this.weekdaysCache[u][e]||(this.weekdaysCache[u][e]=xr(a=>this.extract(a,s,"weekday"))),this.weekdaysCache[u][e]})}meridiems(){return Lt(this,void 0,()=>gs,()=>{if(!this.meridiemCache){const e={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[$.utc(2016,11,13,9),$.utc(2016,11,13,19)].map(n=>this.extract(n,e,"dayperiod"))}return this.meridiemCache})}eras(e){return Lt(this,e,Fs,()=>{const n={era:e};return this.eraCache[e]||(this.eraCache[e]=[$.utc(-40,1,1),$.utc(2017,1,1)].map(s=>this.extract(s,n,"era"))),this.eraCache[e]})}extract(e,n,s){const u=this.dtFormatter(e,n),a=u.formatToParts(),l=a.find(m=>m.type.toLowerCase()===s);return l?l.value:null}numberFormatter(e={}){return new Pn(this.intl,e.forceSimple||this.fastNumbers,e)}dtFormatter(e,n={}){return new Sr(e,this.intl,n)}relFormatter(e={}){return new Tr(this.intl,this.isEnglish(),e)}listFormatter(e={}){return yr(this.intl,e)}isEnglish(){return this.locale==="en"||this.locale.toLowerCase()==="en-us"||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}}let ln=null;class De extends lt{static get utcInstance(){return ln===null&&(ln=new De(0)),ln}static instance(e){return e===0?De.utcInstance:new De(e)}static parseSpecifier(e){if(e){const n=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(n)return new De(x(n[1],n[2]))}return null}constructor(e){super(),this.fixed=e}get type(){return"fixed"}get name(){return this.fixed===0?"UTC":`UTC${P(this.fixed,"narrow")}`}get ianaName(){return this.fixed===0?"Etc/UTC":`Etc/GMT${P(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(e,n){return P(this.fixed,n)}get isUniversal(){return!0}offset(){return this.fixed}equals(e){return e.type==="fixed"&&e.fixed===this.fixed}get isValid(){return!0}}class Or extends lt{constructor(e){super(),this.zoneName=e}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function Ue(t,e){if(q(t)||t===null)return e;if(t instanceof lt)return t;if(kr(t)){const n=t.toLowerCase();return n==="default"?e:n==="local"||n==="system"?Et.instance:n==="utc"||n==="gmt"?De.utcInstance:De.parseSpecifier(n)||Ae.create(t)}else return tt(t)?De.instance(t):typeof t=="object"&&"offset"in t&&typeof t.offset=="function"?t:new Or(t)}let cn=()=>Date.now(),Vn="system",Wn=null,Zn=null,zn=null,Un=60,Hn;class re{static get now(){return cn}static set now(e){cn=e}static set defaultZone(e){Vn=e}static get defaultZone(){return Ue(Vn,Et.instance)}static get defaultLocale(){return Wn}static set defaultLocale(e){Wn=e}static get defaultNumberingSystem(){return Zn}static set defaultNumberingSystem(e){Zn=e}static get defaultOutputCalendar(){return zn}static set defaultOutputCalendar(e){zn=e}static get twoDigitCutoffYear(){return Un}static set twoDigitCutoffYear(e){Un=e%100}static get throwOnInvalid(){return Hn}static set throwOnInvalid(e){Hn=e}static resetCaches(){X.resetCache(),Ae.resetCache()}}function q(t){return typeof t>"u"}function tt(t){return typeof t=="number"}function _t(t){return typeof t=="number"&&t%1===0}function kr(t){return typeof t=="string"}function Br(t){return Object.prototype.toString.call(t)==="[object Date]"}function qn(){try{return typeof Intl<"u"&&!!Intl.RelativeTimeFormat}catch{return!1}}function Mr(t){return Array.isArray(t)?t:[t]}function fn(t,e,n){if(t.length!==0)return t.reduce((s,u)=>{const a=[e(u),u];return s&&n(s[0],a[0])===s[0]?s:a},null)[1]}function Ar(t,e){return e.reduce((n,s)=>(n[s]=t[s],n),{})}function ft(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function Ne(t,e,n){return _t(t)&&t>=e&&t<=n}function Yn(t,e){return t-e*Math.floor(t/e)}function se(t,e=2){const n=t<0;let s;return n?s="-"+(""+-t).padStart(e,"0"):s=(""+t).padStart(e,"0"),s}function He(t){if(!(q(t)||t===null||t===""))return parseInt(t,10)}function nt(t){if(!(q(t)||t===null||t===""))return parseFloat(t)}function dn(t){if(!(q(t)||t===null||t==="")){const e=parseFloat("0."+t)*1e3;return Math.floor(e)}}function hn(t,e,n=!1){const s=10**e;return(n?Math.trunc:Math.round)(t*s)/s}function bt(t){return t%4===0&&(t%100!==0||t%400===0)}function vt(t){return bt(t)?366:365}function $t(t,e){const n=Yn(e-1,12)+1,s=t+(e-n)/12;return n===2?bt(s)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function Rt(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(t.year,t.month-1,t.day)),+e}function dt(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,s=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return e===4||s===3?53:52}function Dn(t){return t>99?t:t>re.twoDigitCutoffYear?1900+t:2e3+t}function w(t,e,n,s=null){const u=new Date(t),a={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};s&&(a.timeZone=s);const l={timeZoneName:e,...a},m=new Intl.DateTimeFormat(n,l).formatToParts(u).find(E=>E.type.toLowerCase()==="timezonename");return m?m.value:null}function x(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const s=parseInt(e,10)||0,u=n<0||Object.is(n,-0)?-s:s;return n*60+u}function B(t){const e=Number(t);if(typeof t=="boolean"||t===""||Number.isNaN(e))throw new g(`Invalid unit value ${t}`);return e}function L(t,e){const n={};for(const s in t)if(ft(t,s)){const u=t[s];if(u==null)continue;n[e(s)]=B(u)}return n}function P(t,e){const n=Math.trunc(Math.abs(t/60)),s=Math.trunc(Math.abs(t%60)),u=t>=0?"+":"-";switch(e){case"short":return`${u}${se(n,2)}:${se(s,2)}`;case"narrow":return`${u}${n}${s>0?`:${s}`:""}`;case"techie":return`${u}${se(n,2)}${se(s,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function Y(t){return Ar(t,["hour","minute","second","millisecond"])}const ne=["January","February","March","April","May","June","July","August","September","October","November","December"],we=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],Te=["J","F","M","A","M","J","J","A","S","O","N","D"];function mn(t){switch(t){case"narrow":return[...Te];case"short":return[...we];case"long":return[...ne];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const pn=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],gn=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Nr=["M","T","W","T","F","S","S"];function ps(t){switch(t){case"narrow":return[...Nr];case"short":return[...gn];case"long":return[...pn];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const gs=["AM","PM"],ru=["Before Christ","Anno Domini"],su=["BC","AD"],iu=["B","A"];function Fs(t){switch(t){case"narrow":return[...iu];case"short":return[...su];case"long":return[...ru];default:return null}}function uu(t){return gs[t.hour<12?0:1]}function au(t,e){return ps(e)[t.weekday-1]}function ou(t,e){return mn(e)[t.month-1]}function lu(t,e){return Fs(e)[t.year<0?0:1]}function cu(t,e,n="always",s=!1){const u={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},a=["hours","minutes","seconds"].indexOf(t)===-1;if(n==="auto"&&a){const V=t==="days";switch(e){case 1:return V?"tomorrow":`next ${u[t][0]}`;case-1:return V?"yesterday":`last ${u[t][0]}`;case 0:return V?"today":`this ${u[t][0]}`}}const l=Object.is(e,-0)||e<0,m=Math.abs(e),E=m===1,v=u[t],M=s?E?v[1]:v[2]||v[1]:E?u[t][0]:t;return l?`${m} ${M} ago`:`in ${m} ${M}`}function ys(t,e){let n="";for(const s of t)s.literal?n+=s.val:n+=e(s.val);return n}const fu={D:G,DD:ae,DDD:ye,DDDD:fe,t:de,tt:Xe,ttt:et,tttt:Z,T:ot,TT:xe,TTT:An,TTTT:nn,f:Nn,ff:Ft,fff:Nt,ffff:rn,F:gt,FF:Se,FFF:yt,FFFF:Be};class pe{static create(e,n={}){return new pe(e,n)}static parseFormat(e){let n=null,s="",u=!1;const a=[];for(let l=0;l<e.length;l++){const m=e.charAt(l);m==="'"?(s.length>0&&a.push({literal:u||/^\s+$/.test(s),val:s}),n=null,s="",u=!u):u||m===n?s+=m:(s.length>0&&a.push({literal:/^\s+$/.test(s),val:s}),s=m,n=m)}return s.length>0&&a.push({literal:u||/^\s+$/.test(s),val:s}),a}static macroTokenToFormatOpts(e){return fu[e]}constructor(e,n){this.opts=n,this.loc=e,this.systemLoc=null}formatWithSystemDefault(e,n){return this.systemLoc===null&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,{...this.opts,...n}).format()}dtFormatter(e,n={}){return this.loc.dtFormatter(e,{...this.opts,...n})}formatDateTime(e,n){return this.dtFormatter(e,n).format()}formatDateTimeParts(e,n){return this.dtFormatter(e,n).formatToParts()}formatInterval(e,n){return this.dtFormatter(e.start,n).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate())}resolvedOptions(e,n){return this.dtFormatter(e,n).resolvedOptions()}num(e,n=0){if(this.opts.forceSimple)return se(e,n);const s={...this.opts};return n>0&&(s.padTo=n),this.loc.numberFormatter(s).format(e)}formatDateTimeFromString(e,n){const s=this.loc.listingMode()==="en",u=this.loc.outputCalendar&&this.loc.outputCalendar!=="gregory",a=(I,H)=>this.loc.extract(e,I,H),l=I=>e.isOffsetFixed&&e.offset===0&&I.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,I.format):"",m=()=>s?uu(e):a({hour:"numeric",hourCycle:"h12"},"dayperiod"),E=(I,H)=>s?ou(e,I):a(H?{month:I}:{month:I,day:"numeric"},"month"),v=(I,H)=>s?au(e,I):a(H?{weekday:I}:{weekday:I,month:"long",day:"numeric"},"weekday"),M=I=>{const H=pe.macroTokenToFormatOpts(I);return H?this.formatWithSystemDefault(e,H):I},V=I=>s?lu(e,I):a({era:I},"era"),R=I=>{switch(I){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12===0?12:e.hour%12);case"hh":return this.num(e.hour%12===0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return l({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return l({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return l({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this.loc.locale});case"z":return e.zoneName;case"a":return m();case"d":return u?a({day:"numeric"},"day"):this.num(e.day);case"dd":return u?a({day:"2-digit"},"day"):this.num(e.day,2);case"c":return this.num(e.weekday);case"ccc":return v("short",!0);case"cccc":return v("long",!0);case"ccccc":return v("narrow",!0);case"E":return this.num(e.weekday);case"EEE":return v("short",!1);case"EEEE":return v("long",!1);case"EEEEE":return v("narrow",!1);case"L":return u?a({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return u?a({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return E("short",!0);case"LLLL":return E("long",!0);case"LLLLL":return E("narrow",!0);case"M":return u?a({month:"numeric"},"month"):this.num(e.month);case"MM":return u?a({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return E("short",!1);case"MMMM":return E("long",!1);case"MMMMM":return E("narrow",!1);case"y":return u?a({year:"numeric"},"year"):this.num(e.year);case"yy":return u?a({year:"2-digit"},"year"):this.num(e.year.toString().slice(-2),2);case"yyyy":return u?a({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return u?a({year:"numeric"},"year"):this.num(e.year,6);case"G":return V("short");case"GG":return V("long");case"GGGGG":return V("narrow");case"kk":return this.num(e.weekYear.toString().slice(-2),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return M(I)}};return ys(pe.parseFormat(n),R)}formatDurationFromString(e,n){const s=E=>{switch(E[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},u=E=>v=>{const M=s(v);return M?this.num(E.get(M),v.length):v},a=pe.parseFormat(n),l=a.reduce((E,{literal:v,val:M})=>v?E:E.concat(M),[]),m=e.shiftTo(...l.map(s).filter(E=>E));return ys(a,u(m))}}class Ie{constructor(e,n){this.reason=e,this.explanation=n}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const Es=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function jt(...t){const e=t.reduce((n,s)=>n+s.source,"");return RegExp(`^${e}$`)}function Pt(...t){return e=>t.reduce(([n,s,u],a)=>{const[l,m,E]=a(e,u);return[{...n,...l},m||s,E]},[{},null,1]).slice(0,2)}function Vt(t,...e){if(t==null)return[null,null];for(const[n,s]of e){const u=n.exec(t);if(u)return s(u)}return[null,null]}function ws(...t){return(e,n)=>{const s={};let u;for(u=0;u<t.length;u++)s[t[u]]=He(e[n+u]);return[s,null,n+u]}}const Cs=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,du=`(?:${Cs.source}?(?:\\[(${Es.source})\\])?)?`,Ir=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,bs=RegExp(`${Ir.source}${du}`),Lr=RegExp(`(?:T${bs.source})?`),hu=/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,Du=/(\d{4})-?W(\d\d)(?:-?(\d))?/,mu=/(\d{4})-?(\d{3})/,pu=ws("weekYear","weekNumber","weekDay"),gu=ws("year","ordinal"),Fu=/(\d{4})-(\d\d)-(\d\d)/,vs=RegExp(`${Ir.source} ?(?:${Cs.source}|(${Es.source}))?`),yu=RegExp(`(?: ${vs.source})?`);function Wt(t,e,n){const s=t[e];return q(s)?n:He(s)}function Eu(t,e){return[{year:Wt(t,e),month:Wt(t,e+1,1),day:Wt(t,e+2,1)},null,e+3]}function Zt(t,e){return[{hours:Wt(t,e,0),minutes:Wt(t,e+1,0),seconds:Wt(t,e+2,0),milliseconds:dn(t[e+3])},null,e+4]}function Fn(t,e){const n=!t[e]&&!t[e+1],s=x(t[e+1],t[e+2]),u=n?null:De.instance(s);return[{},u,e+3]}function yn(t,e){const n=t[e]?Ae.create(t[e]):null;return[{},n,e+1]}const wu=RegExp(`^T?${Ir.source}$`),Cu=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function bu(t){const[e,n,s,u,a,l,m,E,v]=t,M=e[0]==="-",V=E&&E[0]==="-",R=(I,H=!1)=>I!==void 0&&(H||I&&M)?-I:I;return[{years:R(nt(n)),months:R(nt(s)),weeks:R(nt(u)),days:R(nt(a)),hours:R(nt(l)),minutes:R(nt(m)),seconds:R(nt(E),E==="-0"),milliseconds:R(dn(v),V)}]}const vu={GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function _r(t,e,n,s,u,a,l){const m={year:e.length===2?Dn(He(e)):He(e),month:we.indexOf(n)+1,day:He(s),hour:He(u),minute:He(a)};return l&&(m.second=He(l)),t&&(m.weekday=t.length>3?pn.indexOf(t)+1:gn.indexOf(t)+1),m}const xu=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function Su(t){const[,e,n,s,u,a,l,m,E,v,M,V]=t,R=_r(e,u,s,n,a,l,m);let I;return E?I=vu[E]:v?I=0:I=x(M,V),[R,new De(I)]}function Tu(t){return t.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}const Ou=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,ku=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,Bu=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function xs(t){const[,e,n,s,u,a,l,m]=t;return[_r(e,u,s,n,a,l,m),De.utcInstance]}function Mu(t){const[,e,n,s,u,a,l,m]=t;return[_r(e,m,n,s,u,a,l),De.utcInstance]}const Au=jt(hu,Lr),Nu=jt(Du,Lr),Iu=jt(mu,Lr),Lu=jt(bs),Ss=Pt(Eu,Zt,Fn,yn),_u=Pt(pu,Zt,Fn,yn),$u=Pt(gu,Zt,Fn,yn),Ru=Pt(Zt,Fn,yn);function ju(t){return Vt(t,[Au,Ss],[Nu,_u],[Iu,$u],[Lu,Ru])}function Pu(t){return Vt(Tu(t),[xu,Su])}function Vu(t){return Vt(t,[Ou,xs],[ku,xs],[Bu,Mu])}function Wu(t){return Vt(t,[Cu,bu])}const Zu=Pt(Zt);function zu(t){return Vt(t,[wu,Zu])}const Uu=jt(Fu,yu),Hu=jt(vs),qu=Pt(Zt,Fn,yn);function Yu(t){return Vt(t,[Uu,Ss],[Hu,qu])}const Ts="Invalid Duration",Os={weeks:{days:7,hours:7*24,minutes:7*24*60,seconds:7*24*60*60,milliseconds:7*24*60*60*1e3},days:{hours:24,minutes:24*60,seconds:24*60*60,milliseconds:24*60*60*1e3},hours:{minutes:60,seconds:60*60,milliseconds:60*60*1e3},minutes:{seconds:60,milliseconds:60*1e3},seconds:{milliseconds:1e3}},Gu={years:{quarters:4,months:12,weeks:52,days:365,hours:365*24,minutes:365*24*60,seconds:365*24*60*60,milliseconds:365*24*60*60*1e3},quarters:{months:3,weeks:13,days:91,hours:91*24,minutes:91*24*60,seconds:91*24*60*60,milliseconds:91*24*60*60*1e3},months:{weeks:4,days:30,hours:30*24,minutes:30*24*60,seconds:30*24*60*60,milliseconds:30*24*60*60*1e3},...Os},Oe=146097/400,zt=146097/4800,Ju={years:{quarters:4,months:12,weeks:Oe/7,days:Oe,hours:Oe*24,minutes:Oe*24*60,seconds:Oe*24*60*60,milliseconds:Oe*24*60*60*1e3},quarters:{months:3,weeks:Oe/28,days:Oe/4,hours:Oe*24/4,minutes:Oe*24*60/4,seconds:Oe*24*60*60/4,milliseconds:Oe*24*60*60*1e3/4},months:{weeks:zt/7,days:zt,hours:zt*24,minutes:zt*24*60,seconds:zt*24*60*60,milliseconds:zt*24*60*60*1e3},...Os},xt=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Ku=xt.slice(0).reverse();function ht(t,e,n=!1){const s={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy,matrix:e.matrix||t.matrix};return new A(s)}function ks(t,e){let n=e.milliseconds??0;for(const s of Ku.slice(1))e[s]&&(n+=e[s]*t[s].milliseconds);return n}function Bs(t,e){const n=ks(t,e)<0?-1:1;xt.reduceRight((s,u)=>{if(q(e[u]))return s;if(s){const a=e[s]*n,l=t[u][s],m=Math.floor(a/l);e[u]+=m*n,e[s]-=m*l*n}return u},null),xt.reduce((s,u)=>{if(q(e[u]))return s;if(s){const a=e[s]%1;e[s]-=a,e[u]+=a*t[s][u]}return u},null)}function Qu(t){const e={};for(const[n,s]of Object.entries(t))s!==0&&(e[n]=s);return e}class A{constructor(e){const n=e.conversionAccuracy==="longterm"||!1;let s=n?Ju:Gu;e.matrix&&(s=e.matrix),this.values=e.values,this.loc=e.loc||X.create(),this.conversionAccuracy=n?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=s,this.isLuxonDuration=!0}static fromMillis(e,n){return A.fromObject({milliseconds:e},n)}static fromObject(e,n={}){if(e==null||typeof e!="object")throw new g(`Duration.fromObject: argument expected to be an object, got ${e===null?"null":typeof e}`);return new A({values:L(e,A.normalizeUnit),loc:X.fromObject(n),conversionAccuracy:n.conversionAccuracy,matrix:n.matrix})}static fromDurationLike(e){if(tt(e))return A.fromMillis(e);if(A.isDuration(e))return e;if(typeof e=="object")return A.fromObject(e);throw new g(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,n){const[s]=Wu(e);return s?A.fromObject(s,n):A.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,n){const[s]=zu(e);return s?A.fromObject(s,n):A.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,n=null){if(!e)throw new g("need to specify a reason the Duration is invalid");const s=e instanceof Ie?e:new Ie(e,n);if(re.throwOnInvalid)throw new o(s);return new A({invalid:s})}static normalizeUnit(e){const n={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e&&e.toLowerCase()];if(!n)throw new p(e);return n}static isDuration(e){return e&&e.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(e,n={}){const s={...n,floor:n.round!==!1&&n.floor!==!1};return this.isValid?pe.create(this.loc,s).formatDurationFromString(this,e):Ts}toHuman(e={}){if(!this.isValid)return Ts;const n=xt.map(s=>{const u=this.values[s];return q(u)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...e,unit:s.slice(0,-1)}).format(u)}).filter(s=>s);return this.loc.listFormatter({type:"conjunction",style:e.listStyle||"narrow",...e}).format(n)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let e="P";return this.years!==0&&(e+=this.years+"Y"),(this.months!==0||this.quarters!==0)&&(e+=this.months+this.quarters*3+"M"),this.weeks!==0&&(e+=this.weeks+"W"),this.days!==0&&(e+=this.days+"D"),(this.hours!==0||this.minutes!==0||this.seconds!==0||this.milliseconds!==0)&&(e+="T"),this.hours!==0&&(e+=this.hours+"H"),this.minutes!==0&&(e+=this.minutes+"M"),(this.seconds!==0||this.milliseconds!==0)&&(e+=hn(this.seconds+this.milliseconds/1e3,3)+"S"),e==="P"&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;const n=this.toMillis();return n<0||n>=864e5?null:(e={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...e,includeOffset:!1},$.fromMillis(n,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.isValid?ks(this.matrix,this.values):NaN}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const n=A.fromDurationLike(e),s={};for(const u of xt)(ft(n.values,u)||ft(this.values,u))&&(s[u]=n.get(u)+this.get(u));return ht(this,{values:s},!0)}minus(e){if(!this.isValid)return this;const n=A.fromDurationLike(e);return this.plus(n.negate())}mapUnits(e){if(!this.isValid)return this;const n={};for(const s of Object.keys(this.values))n[s]=B(e(this.values[s],s));return ht(this,{values:n},!0)}get(e){return this[A.normalizeUnit(e)]}set(e){if(!this.isValid)return this;const n={...this.values,...L(e,A.normalizeUnit)};return ht(this,{values:n})}reconfigure({locale:e,numberingSystem:n,conversionAccuracy:s,matrix:u}={}){const l={loc:this.loc.clone({locale:e,numberingSystem:n}),matrix:u,conversionAccuracy:s};return ht(this,l)}as(e){return this.isValid?this.shiftTo(e).get(e):NaN}normalize(){if(!this.isValid)return this;const e=this.toObject();return Bs(this.matrix,e),ht(this,{values:e},!0)}rescale(){if(!this.isValid)return this;const e=Qu(this.normalize().shiftToAll().toObject());return ht(this,{values:e},!0)}shiftTo(...e){if(!this.isValid)return this;if(e.length===0)return this;e=e.map(l=>A.normalizeUnit(l));const n={},s={},u=this.toObject();let a;for(const l of xt)if(e.indexOf(l)>=0){a=l;let m=0;for(const v in s)m+=this.matrix[v][l]*s[v],s[v]=0;tt(u[l])&&(m+=u[l]);const E=Math.trunc(m);n[l]=E,s[l]=(m*1e3-E*1e3)/1e3}else tt(u[l])&&(s[l]=u[l]);for(const l in s)s[l]!==0&&(n[a]+=l===a?s[l]:s[l]/this.matrix[a][l]);return Bs(this.matrix,n),ht(this,{values:n},!0)}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=this.values[n]===0?0:-this.values[n];return ht(this,{values:e},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(e){if(!this.isValid||!e.isValid||!this.loc.equals(e.loc))return!1;function n(s,u){return s===void 0||s===0?u===void 0||u===0:s===u}for(const s of xt)if(!n(this.values[s],e.values[s]))return!1;return!0}}const Ut="Invalid Interval";function Xu(t,e){return!t||!t.isValid?ie.invalid("missing or invalid start"):!e||!e.isValid?ie.invalid("missing or invalid end"):e<t?ie.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null}class ie{constructor(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}static invalid(e,n=null){if(!e)throw new g("need to specify a reason the Interval is invalid");const s=e instanceof Ie?e:new Ie(e,n);if(re.throwOnInvalid)throw new i(s);return new ie({invalid:s})}static fromDateTimes(e,n){const s=wn(e),u=wn(n),a=Xu(s,u);return a??new ie({start:s,end:u})}static after(e,n){const s=A.fromDurationLike(n),u=wn(e);return ie.fromDateTimes(u,u.plus(s))}static before(e,n){const s=A.fromDurationLike(n),u=wn(e);return ie.fromDateTimes(u.minus(s),u)}static fromISO(e,n){const[s,u]=(e||"").split("/",2);if(s&&u){let a,l;try{a=$.fromISO(s,n),l=a.isValid}catch{l=!1}let m,E;try{m=$.fromISO(u,n),E=m.isValid}catch{E=!1}if(l&&E)return ie.fromDateTimes(a,m);if(l){const v=A.fromISO(u,n);if(v.isValid)return ie.after(a,v)}else if(E){const v=A.fromISO(s,n);if(v.isValid)return ie.before(m,v)}}return ie.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isInterval(e){return e&&e.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return this.invalidReason===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(e="milliseconds"){return this.isValid?this.toDuration(e).get(e):NaN}count(e="milliseconds"){if(!this.isValid)return NaN;const n=this.start.startOf(e),s=this.end.startOf(e);return Math.floor(s.diff(n,e).get(e))+(s.valueOf()!==this.end.valueOf())}hasSame(e){return this.isValid?this.isEmpty()||this.e.minus(1).hasSame(this.s,e):!1}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(e){return this.isValid?this.s>e:!1}isBefore(e){return this.isValid?this.e<=e:!1}contains(e){return this.isValid?this.s<=e&&this.e>e:!1}set({start:e,end:n}={}){return this.isValid?ie.fromDateTimes(e||this.s,n||this.e):this}splitAt(...e){if(!this.isValid)return[];const n=e.map(wn).filter(l=>this.contains(l)).sort(),s=[];let{s:u}=this,a=0;for(;u<this.e;){const l=n[a]||this.e,m=+l>+this.e?this.e:l;s.push(ie.fromDateTimes(u,m)),u=m,a+=1}return s}splitBy(e){const n=A.fromDurationLike(e);if(!this.isValid||!n.isValid||n.as("milliseconds")===0)return[];let{s}=this,u=1,a;const l=[];for(;s<this.e;){const m=this.start.plus(n.mapUnits(E=>E*u));a=+m>+this.e?this.e:m,l.push(ie.fromDateTimes(s,a)),s=a,u+=1}return l}divideEqually(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]}overlaps(e){return this.e>e.s&&this.s<e.e}abutsStart(e){return this.isValid?+this.e==+e.s:!1}abutsEnd(e){return this.isValid?+e.e==+this.s:!1}engulfs(e){return this.isValid?this.s<=e.s&&this.e>=e.e:!1}equals(e){return!this.isValid||!e.isValid?!1:this.s.equals(e.s)&&this.e.equals(e.e)}intersection(e){if(!this.isValid)return this;const n=this.s>e.s?this.s:e.s,s=this.e<e.e?this.e:e.e;return n>=s?null:ie.fromDateTimes(n,s)}union(e){if(!this.isValid)return this;const n=this.s<e.s?this.s:e.s,s=this.e>e.e?this.e:e.e;return ie.fromDateTimes(n,s)}static merge(e){const[n,s]=e.sort((u,a)=>u.s-a.s).reduce(([u,a],l)=>a?a.overlaps(l)||a.abutsStart(l)?[u,a.union(l)]:[u.concat([a]),l]:[u,l],[[],null]);return s&&n.push(s),n}static xor(e){let n=null,s=0;const u=[],a=e.map(E=>[{time:E.s,type:"s"},{time:E.e,type:"e"}]),l=Array.prototype.concat(...a),m=l.sort((E,v)=>E.time-v.time);for(const E of m)s+=E.type==="s"?1:-1,s===1?n=E.time:(n&&+n!=+E.time&&u.push(ie.fromDateTimes(n,E.time)),n=null);return ie.merge(u)}difference(...e){return ie.xor([this].concat(e)).map(n=>this.intersection(n)).filter(n=>n&&!n.isEmpty())}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:Ut}toLocaleString(e=G,n={}){return this.isValid?pe.create(this.s.loc.clone(n),e).formatInterval(this):Ut}toISO(e){return this.isValid?`${this.s.toISO(e)}/${this.e.toISO(e)}`:Ut}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:Ut}toISOTime(e){return this.isValid?`${this.s.toISOTime(e)}/${this.e.toISOTime(e)}`:Ut}toFormat(e,{separator:n=" – "}={}){return this.isValid?`${this.s.toFormat(e)}${n}${this.e.toFormat(e)}`:Ut}toDuration(e,n){return this.isValid?this.e.diff(this.s,e,n):A.invalid(this.invalidReason)}mapEndpoints(e){return ie.fromDateTimes(e(this.s),e(this.e))}}class Gn{static hasDST(e=re.defaultZone){const n=$.now().setZone(e).set({month:12});return!e.isUniversal&&n.offset!==n.set({month:6}).offset}static isValidIANAZone(e){return Ae.isValidZone(e)}static normalizeZone(e){return Ue(e,re.defaultZone)}static months(e="long",{locale:n=null,numberingSystem:s=null,locObj:u=null,outputCalendar:a="gregory"}={}){return(u||X.create(n,s,a)).months(e)}static monthsFormat(e="long",{locale:n=null,numberingSystem:s=null,locObj:u=null,outputCalendar:a="gregory"}={}){return(u||X.create(n,s,a)).months(e,!0)}static weekdays(e="long",{locale:n=null,numberingSystem:s=null,locObj:u=null}={}){return(u||X.create(n,s,null)).weekdays(e)}static weekdaysFormat(e="long",{locale:n=null,numberingSystem:s=null,locObj:u=null}={}){return(u||X.create(n,s,null)).weekdays(e,!0)}static meridiems({locale:e=null}={}){return X.create(e).meridiems()}static eras(e="short",{locale:n=null}={}){return X.create(n,null,"gregory").eras(e)}static features(){return{relative:qn()}}}function Ms(t,e){const n=u=>u.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),s=n(e)-n(t);return Math.floor(A.fromMillis(s).as("days"))}function ea(t,e,n){const s=[["years",(E,v)=>v.year-E.year],["quarters",(E,v)=>v.quarter-E.quarter+(v.year-E.year)*4],["months",(E,v)=>v.month-E.month+(v.year-E.year)*12],["weeks",(E,v)=>{const M=Ms(E,v);return(M-M%7)/7}],["days",Ms]],u={},a=t;let l,m;for(const[E,v]of s)n.indexOf(E)>=0&&(l=E,u[E]=v(t,e),m=a.plus(u),m>e?(u[E]--,t=a.plus(u),t>e&&(m=t,u[E]--,t=a.plus(u))):t=m);return[t,u,m,l]}function ta(t,e,n,s){let[u,a,l,m]=ea(t,e,n);const E=e-u,v=n.filter(V=>["hours","minutes","seconds","milliseconds"].indexOf(V)>=0);v.length===0&&(l<e&&(l=u.plus({[m]:1})),l!==u&&(a[m]=(a[m]||0)+E/(l-u)));const M=A.fromObject(a,s);return v.length>0?A.fromMillis(E,s).shiftTo(...v).plus(M):M}const $r={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},As={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},na=$r.hanidec.replace(/[\[|\]]/g,"").split("");function ra(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const s=t.charCodeAt(n);if(t[n].search($r.hanidec)!==-1)e+=na.indexOf(t[n]);else for(const u in As){const[a,l]=As[u];s>=a&&s<=l&&(e+=s-a)}}return parseInt(e,10)}else return e}function Le({numberingSystem:t},e=""){return new RegExp(`${$r[t||"latn"]}${e}`)}const sa="missing Intl.DateTimeFormat.formatToParts support";function J(t,e=n=>n){return{regex:t,deser:([n])=>e(ra(n))}}const Ns="[  ]",Is=new RegExp(Ns,"g");function ia(t){return t.replace(/\./g,"\\.?").replace(Is,Ns)}function Ls(t){return t.replace(/\./g,"").replace(Is," ").toLowerCase()}function _e(t,e){return t===null?null:{regex:RegExp(t.map(ia).join("|")),deser:([n])=>t.findIndex(s=>Ls(n)===Ls(s))+e}}function _s(t,e){return{regex:t,deser:([,n,s])=>x(n,s),groups:e}}function Jn(t){return{regex:t,deser:([e])=>e}}function ua(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function aa(t,e){const n=Le(e),s=Le(e,"{2}"),u=Le(e,"{3}"),a=Le(e,"{4}"),l=Le(e,"{6}"),m=Le(e,"{1,2}"),E=Le(e,"{1,3}"),v=Le(e,"{1,6}"),M=Le(e,"{1,9}"),V=Le(e,"{2,4}"),R=Le(e,"{4,6}"),I=le=>({regex:RegExp(ua(le.val)),deser:([Ce])=>Ce,literal:!0}),oe=(le=>{if(t.literal)return I(le);switch(le.val){case"G":return _e(e.eras("short"),0);case"GG":return _e(e.eras("long"),0);case"y":return J(v);case"yy":return J(V,Dn);case"yyyy":return J(a);case"yyyyy":return J(R);case"yyyyyy":return J(l);case"M":return J(m);case"MM":return J(s);case"MMM":return _e(e.months("short",!0),1);case"MMMM":return _e(e.months("long",!0),1);case"L":return J(m);case"LL":return J(s);case"LLL":return _e(e.months("short",!1),1);case"LLLL":return _e(e.months("long",!1),1);case"d":return J(m);case"dd":return J(s);case"o":return J(E);case"ooo":return J(u);case"HH":return J(s);case"H":return J(m);case"hh":return J(s);case"h":return J(m);case"mm":return J(s);case"m":return J(m);case"q":return J(m);case"qq":return J(s);case"s":return J(m);case"ss":return J(s);case"S":return J(E);case"SSS":return J(u);case"u":return Jn(M);case"uu":return Jn(m);case"uuu":return J(n);case"a":return _e(e.meridiems(),0);case"kkkk":return J(a);case"kk":return J(V,Dn);case"W":return J(m);case"WW":return J(s);case"E":case"c":return J(n);case"EEE":return _e(e.weekdays("short",!1),1);case"EEEE":return _e(e.weekdays("long",!1),1);case"ccc":return _e(e.weekdays("short",!0),1);case"cccc":return _e(e.weekdays("long",!0),1);case"Z":case"ZZ":return _s(new RegExp(`([+-]${m.source})(?::(${s.source}))?`),2);case"ZZZ":return _s(new RegExp(`([+-]${m.source})(${s.source})?`),2);case"z":return Jn(/[a-z_+-/]{1,256}?/i);case" ":return Jn(/[^\S\n\r]/);default:return I(le)}})(t)||{invalidReason:sa};return oe.token=t,oe}const oa={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};function la(t,e,n){const{type:s,value:u}=t;if(s==="literal"){const E=/^\s+$/.test(u);return{literal:!E,val:E?" ":u}}const a=e[s];let l=s;s==="hour"&&(e.hour12!=null?l=e.hour12?"hour12":"hour24":e.hourCycle!=null?e.hourCycle==="h11"||e.hourCycle==="h12"?l="hour12":l="hour24":l=n.hour12?"hour12":"hour24");let m=oa[l];if(typeof m=="object"&&(m=m[a]),m)return{literal:!1,val:m}}function ca(t){return[`^${t.map(n=>n.regex).reduce((n,s)=>`${n}(${s.source})`,"")}$`,t]}function fa(t,e,n){const s=t.match(e);if(s){const u={};let a=1;for(const l in n)if(ft(n,l)){const m=n[l],E=m.groups?m.groups+1:1;!m.literal&&m.token&&(u[m.token.val[0]]=m.deser(s.slice(a,a+E))),a+=E}return[s,u]}else return[s,{}]}function da(t){const e=a=>{switch(a){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}};let n=null,s;return q(t.z)||(n=Ae.create(t.z)),q(t.Z)||(n||(n=new De(t.Z)),s=t.Z),q(t.q)||(t.M=(t.q-1)*3+1),q(t.h)||(t.h<12&&t.a===1?t.h+=12:t.h===12&&t.a===0&&(t.h=0)),t.G===0&&t.y&&(t.y=-t.y),q(t.u)||(t.S=dn(t.u)),[Object.keys(t).reduce((a,l)=>{const m=e(l);return m&&(a[m]=t[l]),a},{}),n,s]}let Rr=null;function ha(){return Rr||(Rr=$.fromMillis(1555555555555)),Rr}function Da(t,e){if(t.literal)return t;const n=pe.macroTokenToFormatOpts(t.val),s=js(n,e);return s==null||s.includes(void 0)?t:s}function $s(t,e){return Array.prototype.concat(...t.map(n=>Da(n,e)))}function Rs(t,e,n){const s=$s(pe.parseFormat(n),t),u=s.map(l=>aa(l,t)),a=u.find(l=>l.invalidReason);if(a)return{input:e,tokens:s,invalidReason:a.invalidReason};{const[l,m]=ca(u),E=RegExp(l,"i"),[v,M]=fa(e,E,m),[V,R,I]=M?da(M):[null,null,void 0];if(ft(M,"a")&&ft(M,"H"))throw new d("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:s,regex:E,rawMatches:v,matches:M,result:V,zone:R,specificOffset:I}}}function ma(t,e,n){const{result:s,zone:u,specificOffset:a,invalidReason:l}=Rs(t,e,n);return[s,u,a,l]}function js(t,e){if(!t)return null;const s=pe.create(e,t).dtFormatter(ha()),u=s.formatToParts(),a=s.resolvedOptions();return u.map(l=>la(l,t,a))}const Ps=[0,31,59,90,120,151,181,212,243,273,304,334],Vs=[0,31,60,91,121,152,182,213,244,274,305,335];function ke(t,e){return new Ie("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function Ws(t,e,n){const s=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&s.setUTCFullYear(s.getUTCFullYear()-1900);const u=s.getUTCDay();return u===0?7:u}function Zs(t,e,n){return n+(bt(t)?Vs:Ps)[e-1]}function zs(t,e){const n=bt(t)?Vs:Ps,s=n.findIndex(a=>a<e),u=e-n[s];return{month:s+1,day:u}}function jr(t){const{year:e,month:n,day:s}=t,u=Zs(e,n,s),a=Ws(e,n,s);let l=Math.floor((u-a+10)/7),m;return l<1?(m=e-1,l=dt(m)):l>dt(e)?(m=e+1,l=1):m=e,{weekYear:m,weekNumber:l,weekday:a,...Y(t)}}function Us(t){const{weekYear:e,weekNumber:n,weekday:s}=t,u=Ws(e,1,4),a=vt(e);let l=n*7+s-u-3,m;l<1?(m=e-1,l+=vt(m)):l>a?(m=e+1,l-=vt(e)):m=e;const{month:E,day:v}=zs(m,l);return{year:m,month:E,day:v,...Y(t)}}function Pr(t){const{year:e,month:n,day:s}=t,u=Zs(e,n,s);return{year:e,ordinal:u,...Y(t)}}function Hs(t){const{year:e,ordinal:n}=t,{month:s,day:u}=zs(e,n);return{year:e,month:s,day:u,...Y(t)}}function pa(t){const e=_t(t.weekYear),n=Ne(t.weekNumber,1,dt(t.weekYear)),s=Ne(t.weekday,1,7);return e?n?s?!1:ke("weekday",t.weekday):ke("week",t.week):ke("weekYear",t.weekYear)}function ga(t){const e=_t(t.year),n=Ne(t.ordinal,1,vt(t.year));return e?n?!1:ke("ordinal",t.ordinal):ke("year",t.year)}function qs(t){const e=_t(t.year),n=Ne(t.month,1,12),s=Ne(t.day,1,$t(t.year,t.month));return e?n?s?!1:ke("day",t.day):ke("month",t.month):ke("year",t.year)}function Ys(t){const{hour:e,minute:n,second:s,millisecond:u}=t,a=Ne(e,0,23)||e===24&&n===0&&s===0&&u===0,l=Ne(n,0,59),m=Ne(s,0,59),E=Ne(u,0,999);return a?l?m?E?!1:ke("millisecond",u):ke("second",s):ke("minute",n):ke("hour",e)}const Vr="Invalid DateTime",Fa=864e13;function Kn(t){return new Ie("unsupported zone",`the zone "${t.name}" is not supported`)}function Wr(t){return t.weekData===null&&(t.weekData=jr(t.c)),t.weekData}function St(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new $({...n,...e,old:n})}function Gs(t,e,n){let s=t-e*60*1e3;const u=n.offset(s);if(e===u)return[s,e];s-=(u-e)*60*1e3;const a=n.offset(s);return u===a?[s,u]:[t-Math.min(u,a)*60*1e3,Math.max(u,a)]}function Qn(t,e){t+=e*60*1e3;const n=new Date(t);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function Xn(t,e,n){return Gs(Rt(t),e,n)}function Js(t,e){const n=t.o,s=t.c.year+Math.trunc(e.years),u=t.c.month+Math.trunc(e.months)+Math.trunc(e.quarters)*3,a={...t.c,year:s,month:u,day:Math.min(t.c.day,$t(s,u))+Math.trunc(e.days)+Math.trunc(e.weeks)*7},l=A.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),m=Rt(a);let[E,v]=Gs(m,n,t.zone);return l!==0&&(E+=l,v=t.zone.offset(E)),{ts:E,o:v}}function En(t,e,n,s,u,a){const{setZone:l,zone:m}=n;if(t&&Object.keys(t).length!==0||e){const E=e||m,v=$.fromObject(t,{...n,zone:E,specificOffset:a});return l?v:v.setZone(m)}else return $.invalid(new Ie("unparsable",`the input "${u}" can't be parsed as ${s}`))}function er(t,e,n=!0){return t.isValid?pe.create(X.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function Zr(t,e){const n=t.c.year>9999||t.c.year<0;let s="";return n&&t.c.year>=0&&(s+="+"),s+=se(t.c.year,n?6:4),e?(s+="-",s+=se(t.c.month),s+="-",s+=se(t.c.day)):(s+=se(t.c.month),s+=se(t.c.day)),s}function Ks(t,e,n,s,u,a){let l=se(t.c.hour);return e?(l+=":",l+=se(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(l+=":")):l+=se(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(l+=se(t.c.second),(t.c.millisecond!==0||!s)&&(l+=".",l+=se(t.c.millisecond,3))),u&&(t.isOffsetFixed&&t.offset===0&&!a?l+="Z":t.o<0?(l+="-",l+=se(Math.trunc(-t.o/60)),l+=":",l+=se(Math.trunc(-t.o%60))):(l+="+",l+=se(Math.trunc(t.o/60)),l+=":",l+=se(Math.trunc(t.o%60)))),a&&(l+="["+t.zone.ianaName+"]"),l}const Qs={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},ya={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},Ea={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Xs=["year","month","day","hour","minute","second","millisecond"],wa=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],Ca=["year","ordinal","hour","minute","second","millisecond"];function ei(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new p(t);return e}function ti(t,e){const n=Ue(e.zone,re.defaultZone),s=X.fromObject(e),u=re.now();let a,l;if(q(t.year))a=u;else{for(const v of Xs)q(t[v])&&(t[v]=Qs[v]);const m=qs(t)||Ys(t);if(m)return $.invalid(m);const E=n.offset(u);[a,l]=Xn(t,E,n)}return new $({ts:a,zone:n,loc:s,o:l})}function ni(t,e,n){const s=q(n.round)?!0:n.round,u=(l,m)=>(l=hn(l,s||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(l,m)),a=l=>n.calendary?e.hasSame(t,l)?0:e.startOf(l).diff(t.startOf(l),l).get(l):e.diff(t,l).get(l);if(n.unit)return u(a(n.unit),n.unit);for(const l of n.units){const m=a(l);if(Math.abs(m)>=1)return u(m,l)}return u(t>e?-0:0,n.units[n.units.length-1])}function ri(t){let e={},n;return t.length>0&&typeof t[t.length-1]=="object"?(e=t[t.length-1],n=Array.from(t).slice(0,t.length-1)):n=Array.from(t),[e,n]}class ${constructor(e){const n=e.zone||re.defaultZone;let s=e.invalid||(Number.isNaN(e.ts)?new Ie("invalid input"):null)||(n.isValid?null:Kn(n));this.ts=q(e.ts)?re.now():e.ts;let u=null,a=null;if(!s)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(n))[u,a]=[e.old.c,e.old.o];else{const m=n.offset(this.ts);u=Qn(this.ts,m),s=Number.isNaN(u.year)?new Ie("invalid input"):null,u=s?null:u,a=s?null:m}this._zone=n,this.loc=e.loc||X.create(),this.invalid=s,this.weekData=null,this.c=u,this.o=a,this.isLuxonDateTime=!0}static now(){return new $({})}static local(){const[e,n]=ri(arguments),[s,u,a,l,m,E,v]=n;return ti({year:s,month:u,day:a,hour:l,minute:m,second:E,millisecond:v},e)}static utc(){const[e,n]=ri(arguments),[s,u,a,l,m,E,v]=n;return e.zone=De.utcInstance,ti({year:s,month:u,day:a,hour:l,minute:m,second:E,millisecond:v},e)}static fromJSDate(e,n={}){const s=Br(e)?e.valueOf():NaN;if(Number.isNaN(s))return $.invalid("invalid input");const u=Ue(n.zone,re.defaultZone);return u.isValid?new $({ts:s,zone:u,loc:X.fromObject(n)}):$.invalid(Kn(u))}static fromMillis(e,n={}){if(tt(e))return e<-864e13||e>Fa?$.invalid("Timestamp out of range"):new $({ts:e,zone:Ue(n.zone,re.defaultZone),loc:X.fromObject(n)});throw new g(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,n={}){if(tt(e))return new $({ts:e*1e3,zone:Ue(n.zone,re.defaultZone),loc:X.fromObject(n)});throw new g("fromSeconds requires a numerical input")}static fromObject(e,n={}){e=e||{};const s=Ue(n.zone,re.defaultZone);if(!s.isValid)return $.invalid(Kn(s));const u=re.now(),a=q(n.specificOffset)?s.offset(u):n.specificOffset,l=L(e,ei),m=!q(l.ordinal),E=!q(l.year),v=!q(l.month)||!q(l.day),M=E||v,V=l.weekYear||l.weekNumber,R=X.fromObject(n);if((M||m)&&V)throw new d("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(v&&m)throw new d("Can't mix ordinal dates with month/day");const I=V||l.weekday&&!M;let H,oe,le=Qn(u,a);I?(H=wa,oe=ya,le=jr(le)):m?(H=Ca,oe=Ea,le=Pr(le)):(H=Xs,oe=Qs);let Ce=!1;for(const z of H){const ee=l[z];q(ee)?Ce?l[z]=oe[z]:l[z]=le[z]:Ce=!0}const Ye=I?pa(l):m?ga(l):qs(l),Ge=Ye||Ys(l);if(Ge)return $.invalid(Ge);const S=I?Us(l):m?Hs(l):l,[U,ce]=Xn(S,a,s),N=new $({ts:U,zone:s,o:ce,loc:R});return l.weekday&&M&&e.weekday!==N.weekday?$.invalid("mismatched weekday",`you can't specify both a weekday of ${l.weekday} and a date of ${N.toISO()}`):N}static fromISO(e,n={}){const[s,u]=ju(e);return En(s,u,n,"ISO 8601",e)}static fromRFC2822(e,n={}){const[s,u]=Pu(e);return En(s,u,n,"RFC 2822",e)}static fromHTTP(e,n={}){const[s,u]=Vu(e);return En(s,u,n,"HTTP",n)}static fromFormat(e,n,s={}){if(q(e)||q(n))throw new g("fromFormat requires an input string and a format");const{locale:u=null,numberingSystem:a=null}=s,l=X.fromOpts({locale:u,numberingSystem:a,defaultToEN:!0}),[m,E,v,M]=ma(l,e,n);return M?$.invalid(M):En(m,E,s,`format ${n}`,e,v)}static fromString(e,n,s={}){return $.fromFormat(e,n,s)}static fromSQL(e,n={}){const[s,u]=Yu(e);return En(s,u,n,"SQL",e)}static invalid(e,n=null){if(!e)throw new g("need to specify a reason the DateTime is invalid");const s=e instanceof Ie?e:new Ie(e,n);if(re.throwOnInvalid)throw new r(s);return new $({invalid:s})}static isDateTime(e){return e&&e.isLuxonDateTime||!1}static parseFormatForOpts(e,n={}){const s=js(e,X.fromObject(n));return s?s.map(u=>u?u.val:null).join(""):null}static expandFormat(e,n={}){return $s(pe.parseFormat(e),X.fromObject(n)).map(u=>u.val).join("")}get(e){return this[e]}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?Wr(this).weekYear:NaN}get weekNumber(){return this.isValid?Wr(this).weekNumber:NaN}get weekday(){return this.isValid?Wr(this).weekday:NaN}get ordinal(){return this.isValid?Pr(this.c).ordinal:NaN}get monthShort(){return this.isValid?Gn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?Gn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?Gn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?Gn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return this.isOffsetFixed?!1:this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset}getPossibleOffsets(){if(!this.isValid||this.isOffsetFixed)return[this];const e=864e5,n=6e4,s=Rt(this.c),u=this.zone.offset(s-e),a=this.zone.offset(s+e),l=this.zone.offset(s-u*n),m=this.zone.offset(s-a*n);if(l===m)return[this];const E=s-l*n,v=s-m*n,M=Qn(E,l),V=Qn(v,m);return M.hour===V.hour&&M.minute===V.minute&&M.second===V.second&&M.millisecond===V.millisecond?[St(this,{ts:E}),St(this,{ts:v})]:[this]}get isInLeapYear(){return bt(this.year)}get daysInMonth(){return $t(this.year,this.month)}get daysInYear(){return this.isValid?vt(this.year):NaN}get weeksInWeekYear(){return this.isValid?dt(this.weekYear):NaN}resolvedLocaleOptions(e={}){const{locale:n,numberingSystem:s,calendar:u}=pe.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:n,numberingSystem:s,outputCalendar:u}}toUTC(e=0,n={}){return this.setZone(De.instance(e),n)}toLocal(){return this.setZone(re.defaultZone)}setZone(e,{keepLocalTime:n=!1,keepCalendarTime:s=!1}={}){if(e=Ue(e,re.defaultZone),e.equals(this.zone))return this;if(e.isValid){let u=this.ts;if(n||s){const a=e.offset(this.ts),l=this.toObject();[u]=Xn(l,a,e)}return St(this,{ts:u,zone:e})}else return $.invalid(Kn(e))}reconfigure({locale:e,numberingSystem:n,outputCalendar:s}={}){const u=this.loc.clone({locale:e,numberingSystem:n,outputCalendar:s});return St(this,{loc:u})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;const n=L(e,ei),s=!q(n.weekYear)||!q(n.weekNumber)||!q(n.weekday),u=!q(n.ordinal),a=!q(n.year),l=!q(n.month)||!q(n.day),m=a||l,E=n.weekYear||n.weekNumber;if((m||u)&&E)throw new d("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(l&&u)throw new d("Can't mix ordinal dates with month/day");let v;s?v=Us({...jr(this.c),...n}):q(n.ordinal)?(v={...this.toObject(),...n},q(n.day)&&(v.day=Math.min($t(v.year,v.month),v.day))):v=Hs({...Pr(this.c),...n});const[M,V]=Xn(v,this.o,this.zone);return St(this,{ts:M,o:V})}plus(e){if(!this.isValid)return this;const n=A.fromDurationLike(e);return St(this,Js(this,n))}minus(e){if(!this.isValid)return this;const n=A.fromDurationLike(e).negate();return St(this,Js(this,n))}startOf(e){if(!this.isValid)return this;const n={},s=A.normalizeUnit(e);switch(s){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0;break}if(s==="weeks"&&(n.weekday=1),s==="quarters"){const u=Math.ceil(this.month/3);n.month=(u-1)*3+1}return this.set(n)}endOf(e){return this.isValid?this.plus({[e]:1}).startOf(e).minus(1):this}toFormat(e,n={}){return this.isValid?pe.create(this.loc.redefaultToEN(n)).formatDateTimeFromString(this,e):Vr}toLocaleString(e=G,n={}){return this.isValid?pe.create(this.loc.clone(n),e).formatDateTime(this):Vr}toLocaleParts(e={}){return this.isValid?pe.create(this.loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:n=!1,suppressMilliseconds:s=!1,includeOffset:u=!0,extendedZone:a=!1}={}){if(!this.isValid)return null;const l=e==="extended";let m=Zr(this,l);return m+="T",m+=Ks(this,l,n,s,u,a),m}toISODate({format:e="extended"}={}){return this.isValid?Zr(this,e==="extended"):null}toISOWeekDate(){return er(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:n=!1,includeOffset:s=!0,includePrefix:u=!1,extendedZone:a=!1,format:l="extended"}={}){return this.isValid?(u?"T":"")+Ks(this,l==="extended",n,e,s,a):null}toRFC2822(){return er(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return er(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?Zr(this,!0):null}toSQLTime({includeOffset:e=!0,includeZone:n=!1,includeOffsetSpace:s=!0}={}){let u="HH:mm:ss.SSS";return(n||e)&&(s&&(u+=" "),n?u+="z":e&&(u+="ZZ")),er(this,u,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():Vr}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={}){if(!this.isValid)return{};const n={...this.c};return e.includeConfig&&(n.outputCalendar=this.outputCalendar,n.numberingSystem=this.loc.numberingSystem,n.locale=this.loc.locale),n}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(e,n="milliseconds",s={}){if(!this.isValid||!e.isValid)return A.invalid("created by diffing an invalid DateTime");const u={locale:this.locale,numberingSystem:this.numberingSystem,...s},a=Mr(n).map(A.normalizeUnit),l=e.valueOf()>this.valueOf(),m=l?this:e,E=l?e:this,v=ta(m,E,a,u);return l?v.negate():v}diffNow(e="milliseconds",n={}){return this.diff($.now(),e,n)}until(e){return this.isValid?ie.fromDateTimes(this,e):this}hasSame(e,n){if(!this.isValid)return!1;const s=e.valueOf(),u=this.setZone(e.zone,{keepLocalTime:!0});return u.startOf(n)<=s&&s<=u.endOf(n)}equals(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)}toRelative(e={}){if(!this.isValid)return null;const n=e.base||$.fromObject({},{zone:this.zone}),s=e.padding?this<n?-e.padding:e.padding:0;let u=["years","months","days","hours","minutes","seconds"],a=e.unit;return Array.isArray(e.unit)&&(u=e.unit,a=void 0),ni(n,this.plus(s),{...e,numeric:"always",units:u,unit:a})}toRelativeCalendar(e={}){return this.isValid?ni(e.base||$.fromObject({},{zone:this.zone}),this,{...e,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...e){if(!e.every($.isDateTime))throw new g("min requires all arguments be DateTimes");return fn(e,n=>n.valueOf(),Math.min)}static max(...e){if(!e.every($.isDateTime))throw new g("max requires all arguments be DateTimes");return fn(e,n=>n.valueOf(),Math.max)}static fromFormatExplain(e,n,s={}){const{locale:u=null,numberingSystem:a=null}=s,l=X.fromOpts({locale:u,numberingSystem:a,defaultToEN:!0});return Rs(l,e,n)}static fromStringExplain(e,n,s={}){return $.fromFormatExplain(e,n,s)}static get DATE_SHORT(){return G}static get DATE_MED(){return ae}static get DATE_MED_WITH_WEEKDAY(){return Q}static get DATE_FULL(){return ye}static get DATE_HUGE(){return fe}static get TIME_SIMPLE(){return de}static get TIME_WITH_SECONDS(){return Xe}static get TIME_WITH_SHORT_OFFSET(){return et}static get TIME_WITH_LONG_OFFSET(){return Z}static get TIME_24_SIMPLE(){return ot}static get TIME_24_WITH_SECONDS(){return xe}static get TIME_24_WITH_SHORT_OFFSET(){return An}static get TIME_24_WITH_LONG_OFFSET(){return nn}static get DATETIME_SHORT(){return Nn}static get DATETIME_SHORT_WITH_SECONDS(){return gt}static get DATETIME_MED(){return Ft}static get DATETIME_MED_WITH_SECONDS(){return Se}static get DATETIME_MED_WITH_WEEKDAY(){return In}static get DATETIME_FULL(){return Nt}static get DATETIME_FULL_WITH_SECONDS(){return yt}static get DATETIME_HUGE(){return rn}static get DATETIME_HUGE_WITH_SECONDS(){return Be}}function wn(t){if($.isDateTime(t))return t;if(t&&t.valueOf&&tt(t.valueOf()))return $.fromJSDate(t);if(t&&typeof t=="object")return $.fromObject(t);throw new g(`Unknown datetime argument: ${t}, of type ${typeof t}`)}const zr={renderNullAs:"\\-",taskCompletionTracking:!1,taskCompletionUseEmojiShorthand:!1,taskCompletionText:"completion",taskCompletionDateFormat:"yyyy-MM-dd",recursiveSubTaskCompletion:!1,warnOnEmptyResult:!0,refreshEnabled:!0,refreshInterval:2500,defaultDateFormat:"MMMM dd, yyyy",defaultDateTimeFormat:"h:mm a - MMMM dd, yyyy",maxRecursiveRenderDepth:4,tableIdColumnName:"File",tableGroupColumnName:"Group",showResultCount:!0};({...zr});class Ur{value;successful;constructor(e){this.value=e,this.successful=!0}map(e){return new Ur(e(this.value))}flatMap(e){return e(this.value)}mapErr(e){return this}bimap(e,n){return this.map(e)}orElse(e){return this.value}cast(){return this}orElseThrow(e){return this.value}}class Hr{error;successful;constructor(e){this.error=e,this.successful=!1}map(e){return this}flatMap(e){return this}mapErr(e){return new Hr(e(this.error))}bimap(e,n){return this.mapErr(n)}orElse(e){return e}cast(){return this}orElseThrow(e){throw e?new Error(e(this.error)):new Error(""+this.error)}}var tr;(function(t){function e(a){return new Ur(a)}t.success=e;function n(a){return new Hr(a)}t.failure=n;function s(a,l,m){return a.successful?l.successful?m(a.value,l.value):n(l.error):n(a.error)}t.flatMap2=s;function u(a,l,m){return s(a,l,(E,v)=>e(m(E,v)))}t.map2=u})(tr||(tr={}));var ba=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Ni<"u"?Ni:typeof self<"u"?self:{},si={exports:{}};(function(t,e){(function(n,s){t.exports=s()})(typeof self<"u"?self:ba,function(){return function(n){var s={};function u(a){if(s[a])return s[a].exports;var l=s[a]={i:a,l:!1,exports:{}};return n[a].call(l.exports,l,l.exports,u),l.l=!0,l.exports}return u.m=n,u.c=s,u.d=function(a,l,m){u.o(a,l)||Object.defineProperty(a,l,{configurable:!1,enumerable:!0,get:m})},u.r=function(a){Object.defineProperty(a,"__esModule",{value:!0})},u.n=function(a){var l=a&&a.__esModule?function(){return a.default}:function(){return a};return u.d(l,"a",l),l},u.o=function(a,l){return Object.prototype.hasOwnProperty.call(a,l)},u.p="",u(u.s=0)}([function(n,s,u){function a(f){if(!(this instanceof a))return new a(f);this._=f}var l=a.prototype;function m(f,D){for(var y=0;y<f;y++)D(y)}function E(f,D,y){return function(C,T){m(T.length,function(O){C(T[O],O,T)})}(function(C,T,O){D=f(D,C,T,O)},y),D}function v(f,D){return E(function(y,C,T,O){return y.concat([f(C,T,O)])},[],D)}function M(f,D){var y={v:0,buf:D};return m(f,function(){var C;y={v:y.v<<1|(C=y.buf,C[0]>>7),buf:function(T){var O=E(function(k,W,te,Ee){return k.concat(te===Ee.length-1?Buffer.from([W,0]).readUInt16BE(0):Ee.readUInt16BE(te))},[],T);return Buffer.from(v(function(k){return(k<<1&65535)>>8},O))}(y.buf)}}),y}function V(){return typeof Buffer<"u"}function R(){if(!V())throw new Error("Buffer global does not exist; please use webpack if you need to parse Buffers in the browser.")}function I(f){R();var D=E(function(O,k){return O+k},0,f);if(D%8!=0)throw new Error("The bits ["+f.join(", ")+"] add up to "+D+" which is not an even number of bytes; the total should be divisible by 8");var y,C=D/8,T=(y=function(O){return O>48},E(function(O,k){return O||(y(k)?k:O)},null,f));if(T)throw new Error(T+" bit range requested exceeds 48 bit (6 byte) Number max.");return new a(function(O,k){var W=C+k;return W>O.length?z(k,C.toString()+" bytes"):N(W,E(function(te,Ee){var me=M(Ee,te.buf);return{coll:te.coll.concat(me.v),buf:me.buf}},{coll:[],buf:O.slice(k,W)},f).coll)})}function H(f,D){return new a(function(y,C){return R(),C+D>y.length?z(C,D+" bytes for "+f):N(C+D,y.slice(C,C+D))})}function oe(f,D){if(typeof(y=D)!="number"||Math.floor(y)!==y||D<0||D>6)throw new Error(f+" requires integer length in range [0, 6].");var y}function le(f){return oe("uintBE",f),H("uintBE("+f+")",f).map(function(D){return D.readUIntBE(0,f)})}function Ce(f){return oe("uintLE",f),H("uintLE("+f+")",f).map(function(D){return D.readUIntLE(0,f)})}function Ye(f){return oe("intBE",f),H("intBE("+f+")",f).map(function(D){return D.readIntBE(0,f)})}function Ge(f){return oe("intLE",f),H("intLE("+f+")",f).map(function(D){return D.readIntLE(0,f)})}function S(f){return f instanceof a}function U(f){return{}.toString.call(f)==="[object Array]"}function ce(f){return V()&&Buffer.isBuffer(f)}function N(f,D){return{status:!0,index:f,value:D,furthest:-1,expected:[]}}function z(f,D){return U(D)||(D=[D]),{status:!1,index:-1,value:null,furthest:f,expected:D}}function ee(f,D){if(!D||f.furthest>D.furthest)return f;var y=f.furthest===D.furthest?function(C,T){if(function(){if(a._supportsSet!==void 0)return a._supportsSet;var ut=typeof Set<"u";return a._supportsSet=ut,ut}()&&Array.from){for(var O=new Set(C),k=0;k<T.length;k++)O.add(T[k]);var W=Array.from(O);return W.sort(),W}for(var te={},Ee=0;Ee<C.length;Ee++)te[C[Ee]]=!0;for(var me=0;me<T.length;me++)te[T[me]]=!0;var it=[];for(var be in te)({}).hasOwnProperty.call(te,be)&&it.push(be);return it.sort(),it}(f.expected,D.expected):D.expected;return{status:f.status,index:f.index,value:f.value,furthest:D.furthest,expected:y}}var Re={};function vn(f,D){if(ce(f))return{offset:D,line:-1,column:-1};f in Re||(Re[f]={});for(var y=Re[f],C=0,T=0,O=0,k=D;k>=0;){if(k in y){C=y[k].line,O===0&&(O=y[k].lineStart);break}(f.charAt(k)===`
`||f.charAt(k)==="\r"&&f.charAt(k+1)!==`
`)&&(T++,O===0&&(O=k+1)),k--}var W=C+T,te=D-O;return y[D]={line:W,lineStart:O},{offset:D,line:W+1,column:te+1}}function rt(f){if(!S(f))throw new Error("not a parser: "+f)}function Tt(f,D){return typeof f=="string"?f.charAt(D):f[D]}function Je(f){if(typeof f!="number")throw new Error("not a number: "+f)}function je(f){if(typeof f!="function")throw new Error("not a function: "+f)}function Dt(f){if(typeof f!="string")throw new Error("not a string: "+f)}var rr=2,xn=3,Pe=8,sr=5*Pe,Ve=4*Pe,mt="  ";function ir(f,D){return new Array(D+1).join(f)}function ur(f,D,y){var C=D-f.length;return C<=0?f:ir(y,C)+f}function di(f,D,y,C){return{from:f-D>0?f-D:0,to:f+y>C?C:f+y}}function $a(f,D){var y,C,T,O,k,W=D.index,te=W.offset,Ee=1;if(te===f.length)return"Got the end of the input";if(ce(f)){var me=te-te%Pe,it=te-me,be=di(me,sr,Ve+Pe,f.length),ut=v(function(he){return v(function(qt){return ur(qt.toString(16),2,"0")},he)},function(he,qt){var Yt=he.length,Bt=[],Gt=0;if(Yt<=qt)return[he.slice()];for(var Jt=0;Jt<Yt;Jt++)Bt[Gt]||Bt.push([]),Bt[Gt].push(he[Jt]),(Jt+1)%qt==0&&Gt++;return Bt}(f.slice(be.from,be.to).toJSON().data,Pe));O=function(he){return he.from===0&&he.to===1?{from:he.from,to:he.to}:{from:he.from/Pe,to:Math.floor(he.to/Pe)}}(be),C=me/Pe,y=3*it,it>=4&&(y+=1),Ee=2,T=v(function(he){return he.length<=4?he.join(" "):he.slice(0,4).join(" ")+"  "+he.slice(4).join(" ")},ut),(k=(8*(O.to>0?O.to-1:O.to)).toString(16).length)<2&&(k=2)}else{var Ht=f.split(/\r\n|[\n\r\u2028\u2029]/);y=W.column-1,C=W.line-1,O=di(C,rr,xn,Ht.length),T=Ht.slice(O.from,O.to),k=O.to.toString().length}var qa=C-O.from;return ce(f)&&(k=(8*(O.to>0?O.to-1:O.to)).toString(16).length)<2&&(k=2),E(function(he,qt,Yt){var Bt,Gt=Yt===qa,Jt=Gt?"> ":mt;return Bt=ce(f)?ur((8*(O.from+Yt)).toString(16),k,"0"):ur((O.from+Yt+1).toString(),k," "),[].concat(he,[Jt+Bt+" | "+qt],Gt?[mt+ir(" ",k)+" | "+ur("",y," ")+ir("^",Ee)]:[])},[],T).join(`
`)}function hi(f,D){return[`
`,"-- PARSING FAILED "+ir("-",50),`

`,$a(f,D),`

`,(y=D.expected,y.length===1?`Expected:

`+y[0]:`Expected one of the following: 

`+y.join(", ")),`
`].join("");var y}function Di(f){return f.flags!==void 0?f.flags:[f.global?"g":"",f.ignoreCase?"i":"",f.multiline?"m":"",f.unicode?"u":"",f.sticky?"y":""].join("")}function ar(){for(var f=[].slice.call(arguments),D=f.length,y=0;y<D;y+=1)rt(f[y]);return a(function(C,T){for(var O,k=new Array(D),W=0;W<D;W+=1){if(!(O=ee(f[W]._(C,T),O)).status)return O;k[W]=O.value,T=O.index}return ee(N(T,k),O)})}function Ot(){var f=[].slice.call(arguments);if(f.length===0)throw new Error("seqMap needs at least one argument");var D=f.pop();return je(D),ar.apply(null,f).map(function(y){return D.apply(null,y)})}function or(){var f=[].slice.call(arguments),D=f.length;if(D===0)return lr("zero alternates");for(var y=0;y<D;y+=1)rt(f[y]);return a(function(C,T){for(var O,k=0;k<f.length;k+=1)if((O=ee(f[k]._(C,T),O)).status)return O;return O})}function mi(f,D){return Xr(f,D).or(kt([]))}function Xr(f,D){return rt(f),rt(D),Ot(f,D.then(f).many(),function(y,C){return[y].concat(C)})}function Sn(f){Dt(f);var D="'"+f+"'";return a(function(y,C){var T=C+f.length,O=y.slice(C,T);return O===f?N(T,O):z(C,D)})}function st(f,D){(function(T){if(!(T instanceof RegExp))throw new Error("not a regexp: "+T);for(var O=Di(T),k=0;k<O.length;k++){var W=O.charAt(k);if(W!=="i"&&W!=="m"&&W!=="u"&&W!=="s")throw new Error('unsupported regexp flag "'+W+'": '+T)}})(f),arguments.length>=2?Je(D):D=0;var y=function(T){return RegExp("^(?:"+T.source+")",Di(T))}(f),C=""+f;return a(function(T,O){var k=y.exec(T.slice(O));if(k){if(0<=D&&D<=k.length){var W=k[0],te=k[D];return N(O+W.length,te)}return z(O,"valid match group (0 to "+k.length+") in "+C)}return z(O,C)})}function kt(f){return a(function(D,y){return N(y,f)})}function lr(f){return a(function(D,y){return z(y,f)})}function cr(f){if(S(f))return a(function(D,y){var C=f._(D,y);return C.index=y,C.value="",C});if(typeof f=="string")return cr(Sn(f));if(f instanceof RegExp)return cr(st(f));throw new Error("not a string, regexp, or parser: "+f)}function pi(f){return rt(f),a(function(D,y){var C=f._(D,y),T=D.slice(y,C.index);return C.status?z(y,'not "'+T+'"'):N(y,null)})}function fr(f){return je(f),a(function(D,y){var C=Tt(D,y);return y<D.length&&f(C)?N(y+1,C):z(y,"a character/byte matching "+f)})}function gi(f,D){arguments.length<2&&(D=f,f=void 0);var y=a(function(C,T){return y._=D()._,y._(C,T)});return f?y.desc(f):y}function es(){return lr("fantasy-land/empty")}l.parse=function(f){if(typeof f!="string"&&!ce(f))throw new Error(".parse must be called with a string or Buffer as its argument");var D,y=this.skip(ts)._(f,0);return D=y.status?{status:!0,value:y.value}:{status:!1,index:vn(f,y.furthest),expected:y.expected},delete Re[f],D},l.tryParse=function(f){var D=this.parse(f);if(D.status)return D.value;var y=hi(f,D),C=new Error(y);throw C.type="ParsimmonError",C.result=D,C},l.assert=function(f,D){return this.chain(function(y){return f(y)?kt(y):lr(D)})},l.or=function(f){return or(this,f)},l.trim=function(f){return this.wrap(f,f)},l.wrap=function(f,D){return Ot(f,this,D,function(y,C){return C})},l.thru=function(f){return f(this)},l.then=function(f){return rt(f),ar(this,f).map(function(D){return D[1]})},l.many=function(){var f=this;return a(function(D,y){for(var C=[],T=void 0;;){if(!(T=ee(f._(D,y),T)).status)return ee(N(y,C),T);if(y===T.index)throw new Error("infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause");y=T.index,C.push(T.value)}})},l.tieWith=function(f){return Dt(f),this.map(function(D){if(function(T){if(!U(T))throw new Error("not an array: "+T)}(D),D.length){Dt(D[0]);for(var y=D[0],C=1;C<D.length;C++)Dt(D[C]),y+=f+D[C];return y}return""})},l.tie=function(){return this.tieWith("")},l.times=function(f,D){var y=this;return arguments.length<2&&(D=f),Je(f),Je(D),a(function(C,T){for(var O=[],k=void 0,W=void 0,te=0;te<f;te+=1){if(W=ee(k=y._(C,T),W),!k.status)return W;T=k.index,O.push(k.value)}for(;te<D&&(W=ee(k=y._(C,T),W),k.status);te+=1)T=k.index,O.push(k.value);return ee(N(T,O),W)})},l.result=function(f){return this.map(function(){return f})},l.atMost=function(f){return this.times(0,f)},l.atLeast=function(f){return Ot(this.times(f),this.many(),function(D,y){return D.concat(y)})},l.map=function(f){je(f);var D=this;return a(function(y,C){var T=D._(y,C);return T.status?ee(N(T.index,f(T.value)),T):T})},l.contramap=function(f){je(f);var D=this;return a(function(y,C){var T=D.parse(f(y.slice(C)));return T.status?N(C+y.length,T.value):T})},l.promap=function(f,D){return je(f),je(D),this.contramap(f).map(D)},l.skip=function(f){return ar(this,f).map(function(D){return D[0]})},l.mark=function(){return Ot(Tn,this,Tn,function(f,D,y){return{start:f,value:D,end:y}})},l.node=function(f){return Ot(Tn,this,Tn,function(D,y,C){return{name:f,value:y,start:D,end:C}})},l.sepBy=function(f){return mi(this,f)},l.sepBy1=function(f){return Xr(this,f)},l.lookahead=function(f){return this.skip(cr(f))},l.notFollowedBy=function(f){return this.skip(pi(f))},l.desc=function(f){U(f)||(f=[f]);var D=this;return a(function(y,C){var T=D._(y,C);return T.status||(T.expected=f),T})},l.fallback=function(f){return this.or(kt(f))},l.ap=function(f){return Ot(f,this,function(D,y){return D(y)})},l.chain=function(f){var D=this;return a(function(y,C){var T=D._(y,C);return T.status?ee(f(T.value)._(y,T.index),T):T})},l.concat=l.or,l.empty=es,l.of=kt,l["fantasy-land/ap"]=l.ap,l["fantasy-land/chain"]=l.chain,l["fantasy-land/concat"]=l.concat,l["fantasy-land/empty"]=l.empty,l["fantasy-land/of"]=l.of,l["fantasy-land/map"]=l.map;var Tn=a(function(f,D){return N(D,vn(f,D))}),Ra=a(function(f,D){return D>=f.length?z(D,"any character/byte"):N(D+1,Tt(f,D))}),ja=a(function(f,D){return N(f.length,f.slice(D))}),ts=a(function(f,D){return D<f.length?z(D,"EOF"):N(D,null)}),Pa=st(/[0-9]/).desc("a digit"),Va=st(/[0-9]*/).desc("optional digits"),Wa=st(/[a-z]/i).desc("a letter"),Za=st(/[a-z]*/i).desc("optional letters"),za=st(/\s*/).desc("optional whitespace"),Ua=st(/\s+/).desc("whitespace"),Fi=Sn("\r"),yi=Sn(`
`),Ei=Sn(`\r
`),wi=or(Ei,yi,Fi).desc("newline"),Ha=or(wi,ts);a.all=ja,a.alt=or,a.any=Ra,a.cr=Fi,a.createLanguage=function(f){var D={};for(var y in f)({}).hasOwnProperty.call(f,y)&&function(C){D[C]=gi(function(){return f[C](D)})}(y);return D},a.crlf=Ei,a.custom=function(f){return a(f(N,z))},a.digit=Pa,a.digits=Va,a.empty=es,a.end=Ha,a.eof=ts,a.fail=lr,a.formatError=hi,a.index=Tn,a.isParser=S,a.lazy=gi,a.letter=Wa,a.letters=Za,a.lf=yi,a.lookahead=cr,a.makeFailure=z,a.makeSuccess=N,a.newline=wi,a.noneOf=function(f){return fr(function(D){return f.indexOf(D)<0}).desc("none of '"+f+"'")},a.notFollowedBy=pi,a.of=kt,a.oneOf=function(f){for(var D=f.split(""),y=0;y<D.length;y++)D[y]="'"+D[y]+"'";return fr(function(C){return f.indexOf(C)>=0}).desc(D)},a.optWhitespace=za,a.Parser=a,a.range=function(f,D){return fr(function(y){return f<=y&&y<=D}).desc(f+"-"+D)},a.regex=st,a.regexp=st,a.sepBy=mi,a.sepBy1=Xr,a.seq=ar,a.seqMap=Ot,a.seqObj=function(){for(var f,D={},y=0,C=(f=arguments,Array.prototype.slice.call(f)),T=C.length,O=0;O<T;O+=1){var k=C[O];if(!S(k)){if(U(k)&&k.length===2&&typeof k[0]=="string"&&S(k[1])){var W=k[0];if(Object.prototype.hasOwnProperty.call(D,W))throw new Error("seqObj: duplicate key "+W);D[W]=!0,y++;continue}throw new Error("seqObj arguments must be parsers or [string, parser] array pairs.")}}if(y===0)throw new Error("seqObj expects at least one named parser, found zero");return a(function(te,Ee){for(var me,it={},be=0;be<T;be+=1){var ut,Ht;if(U(C[be])?(ut=C[be][0],Ht=C[be][1]):(ut=null,Ht=C[be]),!(me=ee(Ht._(te,Ee),me)).status)return me;ut&&(it[ut]=me.value),Ee=me.index}return ee(N(Ee,it),me)})},a.string=Sn,a.succeed=kt,a.takeWhile=function(f){return je(f),a(function(D,y){for(var C=y;C<D.length&&f(Tt(D,C));)C++;return N(C,D.slice(y,C))})},a.test=fr,a.whitespace=Ua,a["fantasy-land/empty"]=es,a["fantasy-land/of"]=kt,a.Binary={bitSeq:I,bitSeqObj:function(f){R();var D={},y=0,C=v(function(O){if(U(O)){var k=O;if(k.length!==2)throw new Error("["+k.join(", ")+"] should be length 2, got length "+k.length);if(Dt(k[0]),Je(k[1]),Object.prototype.hasOwnProperty.call(D,k[0]))throw new Error("duplicate key in bitSeqObj: "+k[0]);return D[k[0]]=!0,y++,k}return Je(O),[null,O]},f);if(y<1)throw new Error("bitSeqObj expects at least one named pair, got ["+f.join(", ")+"]");var T=v(function(O){return O[0]},C);return I(v(function(O){return O[1]},C)).map(function(O){return E(function(k,W){return W[0]!==null&&(k[W[0]]=W[1]),k},{},v(function(k,W){return[k,O[W]]},T))})},byte:function(f){if(R(),Je(f),f>255)throw new Error("Value specified to byte constructor ("+f+"=0x"+f.toString(16)+") is larger in value than a single byte.");var D=(f>15?"0x":"0x0")+f.toString(16);return a(function(y,C){var T=Tt(y,C);return T===f?N(C+1,T):z(C,D)})},buffer:function(f){return H("buffer",f).map(function(D){return Buffer.from(D)})},encodedString:function(f,D){return H("string",D).map(function(y){return y.toString(f)})},uintBE:le,uint8BE:le(1),uint16BE:le(2),uint32BE:le(4),uintLE:Ce,uint8LE:Ce(1),uint16LE:Ce(2),uint32LE:Ce(4),intBE:Ye,int8BE:Ye(1),int16BE:Ye(2),int32BE:Ye(4),intLE:Ge,int8LE:Ge(1),int16LE:Ge(2),int32LE:Ge(4),floatBE:H("floatBE",4).map(function(f){return f.readFloatBE(0)}),floatLE:H("floatLE",4).map(function(f){return f.readFloatLE(0)}),doubleBE:H("doubleBE",8).map(function(f){return f.readDoubleBE(0)}),doubleLE:H("doubleLE",8).map(function(f){return f.readDoubleLE(0)})},n.exports=a}])})})(si);var h=si.exports,qr=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC08\uDC26](?:\u200D\u2B1B)?|[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;function ii(t){return t==null?t:t.shiftToAll().normalize()}function ui(t){return t.includes("/")&&(t=t.substring(t.lastIndexOf("/")+1)),t.endsWith(".md")&&(t=t.substring(0,t.length-3)),t}h.alt(h.regex(new RegExp(qr(),"")),h.regex(/[0-9\p{Letter}_-]+/u).map(t=>t.toLocaleLowerCase()),h.whitespace.map(t=>"-"),h.any.map(t=>"")).many().map(t=>t.join(""));const va=h.alt(h.regex(new RegExp(qr(),"")),h.regex(/[0-9\p{Letter}_-]+/u),h.whitespace.map(t=>" "),h.any.map(t=>" ")).many().map(t=>t.join("").split(/\s+/).join(" ").trim());function xa(t){return va.tryParse(t)}function Sa(t){return t=ii(t),t=A.fromObject(Object.fromEntries(Object.entries(t.toObject()).filter(([,e])=>e!=0))),t.toHuman()}var Cn;(function(t){function e(S,U=zr,ce=!1){let N=n(S);if(!N)return U.renderNullAs;switch(N.type){case"null":return U.renderNullAs;case"string":return N.value;case"number":case"boolean":return""+N.value;case"html":return N.value.outerHTML;case"widget":return N.value.markdown();case"link":return N.value.markdown();case"function":return"<function>";case"array":let z="";return ce&&(z+="["),z+=N.value.map(ee=>e(ee,U,!0)).join(", "),ce&&(z+="]"),z;case"object":return"{ "+Object.entries(N.value).map(ee=>ee[0]+": "+e(ee[1],U,!0)).join(", ")+" }";case"date":return N.value.second==0&&N.value.hour==0&&N.value.minute==0?N.value.toFormat(U.defaultDateFormat):N.value.toFormat(U.defaultDateTimeFormat);case"duration":return Sa(N.value)}}t.toString=e;function n(S){return R(S)?{type:"null",value:S}:v(S)?{type:"number",value:S}:E(S)?{type:"string",value:S}:H(S)?{type:"boolean",value:S}:V(S)?{type:"duration",value:S}:M(S)?{type:"date",value:S}:le(S)?{type:"widget",value:S}:I(S)?{type:"array",value:S}:oe(S)?{type:"link",value:S}:Ge(S)?{type:"function",value:S}:Ce(S)?{type:"html",value:S}:Ye(S)?{type:"object",value:S}:void 0}t.wrapValue=n;function s(S,U){if(Ye(S)){let ce={};for(let[N,z]of Object.entries(S))ce[N]=s(z,U);return ce}else if(I(S)){let ce=[];for(let N of S)ce.push(s(N,U));return ce}else return U(S)}t.mapLeaves=s;function u(S,U,ce){if(S===void 0&&(S=null),U===void 0&&(U=null),S===null&&U===null)return 0;if(S===null)return-1;if(U===null)return 1;let N=n(S),z=n(U);if(N===void 0&&z===void 0)return 0;if(N===void 0)return-1;if(z===void 0)return 1;if(N.type!=z.type)return N.type.localeCompare(z.type);if(N.value===z.value)return 0;switch(N.type){case"string":return N.value.localeCompare(z.value);case"number":return N.value<z.value?-1:N.value==z.value?0:1;case"null":return 0;case"boolean":return N.value==z.value?0:N.value?1:-1;case"link":let ee=N.value,Re=z.value,vn=ce??(Ve=>Ve),rt=vn(ee.path).localeCompare(vn(Re.path));if(rt!=0)return rt;let Tt=ee.type.localeCompare(Re.type);return Tt!=0?Tt:ee.subpath&&!Re.subpath?1:!ee.subpath&&Re.subpath?-1:!ee.subpath&&!Re.subpath?0:(ee.subpath??"").localeCompare(Re.subpath??"");case"date":return N.value<z.value?-1:N.value.equals(z.value)?0:1;case"duration":return N.value<z.value?-1:N.value.equals(z.value)?0:1;case"array":let Je=N.value,je=z.value;for(let Ve=0;Ve<Math.min(Je.length,je.length);Ve++){let mt=u(Je[Ve],je[Ve]);if(mt!=0)return mt}return Je.length-je.length;case"object":let Dt=N.value,rr=z.value,xn=Array.from(Object.keys(Dt)),Pe=Array.from(Object.keys(rr));xn.sort(),Pe.sort();let sr=u(xn,Pe);if(sr!=0)return sr;for(let Ve of xn){let mt=u(Dt[Ve],rr[Ve]);if(mt!=0)return mt}return 0;case"widget":case"html":case"function":return 0}}t.compareValue=u;function a(S){return n(S)?.type}t.typeOf=a;function l(S){let U=n(S);if(!U)return!1;switch(U.type){case"number":return U.value!=0;case"string":return U.value.length>0;case"boolean":return U.value;case"link":return!!U.value.path;case"date":return U.value.toMillis()!=0;case"duration":return U.value.as("seconds")!=0;case"object":return Object.keys(U.value).length>0;case"array":return U.value.length>0;case"null":return!1;case"html":case"widget":case"function":return!0}}t.isTruthy=l;function m(S){if(S==null)return S;if(t.isArray(S))return[].concat(S.map(U=>m(U)));if(t.isObject(S)){let U={};for(let[ce,N]of Object.entries(S))U[ce]=m(N);return U}else return S}t.deepCopy=m;function E(S){return typeof S=="string"}t.isString=E;function v(S){return typeof S=="number"}t.isNumber=v;function M(S){return S instanceof $}t.isDate=M;function V(S){return S instanceof A}t.isDuration=V;function R(S){return S==null}t.isNull=R;function I(S){return Array.isArray(S)}t.isArray=I;function H(S){return typeof S=="boolean"}t.isBoolean=H;function oe(S){return S instanceof ge}t.isLink=oe;function le(S){return S instanceof Yr}t.isWidget=le;function Ce(S){return typeof HTMLElement<"u"?S instanceof HTMLElement:!1}t.isHtml=Ce;function Ye(S){return typeof S=="object"&&!Ce(S)&&!le(S)&&!I(S)&&!V(S)&&!M(S)&&!oe(S)&&S!==void 0&&!R(S)}t.isObject=Ye;function Ge(S){return typeof S=="function"}t.isFunction=Ge})(Cn||(Cn={}));var ai;(function(t){function e(u){return Cn.isObject(u)&&Object.keys(u).length==2&&"key"in u&&"rows"in u}t.isElementGroup=e;function n(u){for(let a of u)if(!e(a))return!1;return!0}t.isGrouping=n;function s(u){if(n(u)){let a=0;for(let l of u)a+=s(l.rows);return a}else return u.length}t.count=s})(ai||(ai={}));class ge{path;display;subpath;embed;type;static file(e,n=!1,s){return new ge({path:e,embed:n,display:s,subpath:void 0,type:"file"})}static infer(e,n=!1,s){if(e.includes("#^")){let u=e.split("#^");return ge.block(u[0],u[1],n,s)}else if(e.includes("#")){let u=e.split("#");return ge.header(u[0],u[1],n,s)}else return ge.file(e,n,s)}static header(e,n,s,u){return new ge({path:e,embed:s,display:u,subpath:xa(n),type:"header"})}static block(e,n,s,u){return new ge({path:e,embed:s,display:u,subpath:n,type:"block"})}static fromObject(e){return new ge(e)}constructor(e){Object.assign(this,e)}equals(e){return e==null||e==null?!1:this.path==e.path&&this.type==e.type&&this.subpath==e.subpath}toString(){return this.markdown()}toObject(){return{path:this.path,type:this.type,subpath:this.subpath,display:this.display,embed:this.embed}}withPath(e){return new ge(Object.assign({},this,{path:e}))}withDisplay(e){return new ge(Object.assign({},this,{display:e}))}withHeader(e){return ge.header(this.path,e,this.embed,this.display)}toFile(){return ge.file(this.path,this.embed,this.display)}toEmbed(){if(this.embed)return this;{let e=new ge(this);return e.embed=!0,e}}fromEmbed(){if(this.embed){let e=new ge(this);return e.embed=!1,e}else return this}markdown(){let e=(this.embed?"!":"")+"[["+this.obsidianLink();return this.display?e+="|"+this.display:(e+="|"+ui(this.path),(this.type=="header"||this.type=="block")&&(e+=" > "+this.subpath)),e+="]]",e}obsidianLink(){const e=this.path.replaceAll("|","\\|");return this.type=="header"?e+"#"+this.subpath?.replaceAll("|","\\|"):this.type=="block"?e+"#^"+this.subpath?.replaceAll("|","\\|"):e}fileName(){return ui(this.path).replace(".md","")}}class Yr{$widget;constructor(e){this.$widget=e}}class Ta extends Yr{key;value;constructor(e,n){super("dataview:list-pair"),this.key=e,this.value=n}markdown(){return`${Cn.toString(this.key)}: ${Cn.toString(this.value)}`}}class Oa extends Yr{url;display;constructor(e,n){super("dataview:external-link"),this.url=e,this.display=n}markdown(){return`[${this.display??this.url}](${this.url})`}}var oi;(function(t){function e(l,m){return new Ta(l,m)}t.listPair=e;function n(l,m){return new Oa(l,m)}t.externalLink=n;function s(l){return l.$widget==="dataview:list-pair"}t.isListPair=s;function u(l){return l.$widget==="dataview:external-link"}t.isExternalLink=u;function a(l){return s(l)||u(l)}t.isBuiltin=a})(oi||(oi={}));var ue;(function(t){function e(R){return{type:"variable",name:R}}t.variable=e;function n(R){return{type:"literal",value:R}}t.literal=n;function s(R,I,H){return{type:"binaryop",left:R,op:I,right:H}}t.binaryOp=s;function u(R,I){return{type:"index",object:R,index:I}}t.index=u;function a(R){let I=R.split("."),H=t.variable(I[0]);for(let oe=1;oe<I.length;oe++)H=t.index(H,t.literal(I[oe]));return H}t.indexVariable=a;function l(R,I){return{type:"lambda",arguments:R,value:I}}t.lambda=l;function m(R,I){return{type:"function",func:R,arguments:I}}t.func=m;function E(R){return{type:"list",values:R}}t.list=E;function v(R){return{type:"object",values:R}}t.object=v;function M(R){return{type:"negated",child:R}}t.negate=M;function V(R){return R=="<="||R=="<"||R==">"||R==">="||R=="!="||R=="="}t.isCompareOp=V,t.NULL=t.literal(null)})(ue||(ue={}));var qe;(function(t){function e(M){return{type:"tag",tag:M}}t.tag=e;function n(M){return{type:"csv",path:M}}t.csv=n;function s(M){return{type:"folder",folder:M}}t.folder=s;function u(M,V){return{type:"link",file:M,direction:V?"incoming":"outgoing"}}t.link=u;function a(M,V,R){return{type:"binaryop",left:M,op:V,right:R}}t.binaryOp=a;function l(M,V){return{type:"binaryop",left:M,op:"&",right:V}}t.and=l;function m(M,V){return{type:"binaryop",left:M,op:"|",right:V}}t.or=m;function E(M){return{type:"negate",child:M}}t.negate=E;function v(){return{type:"empty"}}t.empty=v})(qe||(qe={}));const li=new RegExp(qr(),""),Gr={year:A.fromObject({years:1}),years:A.fromObject({years:1}),yr:A.fromObject({years:1}),yrs:A.fromObject({years:1}),month:A.fromObject({months:1}),months:A.fromObject({months:1}),mo:A.fromObject({months:1}),mos:A.fromObject({months:1}),week:A.fromObject({weeks:1}),weeks:A.fromObject({weeks:1}),wk:A.fromObject({weeks:1}),wks:A.fromObject({weeks:1}),w:A.fromObject({weeks:1}),day:A.fromObject({days:1}),days:A.fromObject({days:1}),d:A.fromObject({days:1}),hour:A.fromObject({hours:1}),hours:A.fromObject({hours:1}),hr:A.fromObject({hours:1}),hrs:A.fromObject({hours:1}),h:A.fromObject({hours:1}),minute:A.fromObject({minutes:1}),minutes:A.fromObject({minutes:1}),min:A.fromObject({minutes:1}),mins:A.fromObject({minutes:1}),m:A.fromObject({minutes:1}),second:A.fromObject({seconds:1}),seconds:A.fromObject({seconds:1}),sec:A.fromObject({seconds:1}),secs:A.fromObject({seconds:1}),s:A.fromObject({seconds:1})},Jr={now:()=>$.local(),today:()=>$.local().startOf("day"),yesterday:()=>$.local().startOf("day").minus(A.fromObject({days:1})),tomorrow:()=>$.local().startOf("day").plus(A.fromObject({days:1})),sow:()=>$.local().startOf("week"),"start-of-week":()=>$.local().startOf("week"),eow:()=>$.local().endOf("week"),"end-of-week":()=>$.local().endOf("week"),soy:()=>$.local().startOf("year"),"start-of-year":()=>$.local().startOf("year"),eoy:()=>$.local().endOf("year"),"end-of-year":()=>$.local().endOf("year"),som:()=>$.local().startOf("month"),"start-of-month":()=>$.local().startOf("month"),eom:()=>$.local().endOf("month"),"end-of-month":()=>$.local().endOf("month")},Kr=["FROM","WHERE","LIMIT","GROUP","FLATTEN"];function ka(t){let e=-1;for(;(e=t.indexOf("|",e+1))>=0;)if(!(e>0&&t[e-1]=="\\"))return[t.substring(0,e).replace(/\\\|/g,"|"),t.substring(e+1)];return[t.replace(/\\\|/g,"|"),void 0]}function Ba(t){let[e,n]=ka(t);return ge.infer(e,!1,n)}function bn(t,e,n){return h.seqMap(t,h.seq(h.optWhitespace,e,h.optWhitespace,t).many(),(s,u)=>{if(u.length==0)return s;let a=n(s,u[0][1],u[0][3]);for(let l=1;l<u.length;l++)a=n(a,u[l][1],u[l][3]);return a})}function Ma(t,...e){return h.custom((n,s)=>(u,a)=>{let l=t._(u,a);if(!l.status)return l;for(let m of e){let E=m(l.value)._(u,l.index);if(!E.status)return l;l=E}return l})}const $e=h.createLanguage({number:t=>h.regexp(/-?[0-9]+(\.[0-9]+)?/).map(e=>Number.parseFloat(e)).desc("number"),string:t=>h.string('"').then(h.alt(t.escapeCharacter,h.noneOf('"\\')).atLeast(0).map(e=>e.join(""))).skip(h.string('"')).desc("string"),escapeCharacter:t=>h.string("\\").then(h.any).map(e=>e==='"'?'"':e==="\\"?"\\":"\\"+e),bool:t=>h.regexp(/true|false|True|False/).map(e=>e.toLowerCase()=="true").desc("boolean ('true' or 'false')"),tag:t=>h.seqMap(h.string("#"),h.alt(h.regexp(/[^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\\s]/).desc("text")).many(),(e,n)=>e+n.join("")).desc("tag ('#hello/stuff')"),identifier:t=>h.seqMap(h.alt(h.regexp(/\p{Letter}/u),h.regexp(li).desc("text")),h.alt(h.regexp(/[0-9\p{Letter}_-]/u),h.regexp(li).desc("text")).many(),(e,n)=>e+n.join("")).desc("variable identifier"),link:t=>h.regexp(/\[\[([^\[\]]*?)\]\]/u,1).map(e=>Ba(e)).desc("file link"),embedLink:t=>h.seqMap(h.string("!").atMost(1),t.link,(e,n)=>(e.length>0&&(n.embed=!0),n)).desc("file link"),binaryPlusMinus:t=>h.regexp(/\+|-/).map(e=>e).desc("'+' or '-'"),binaryMulDiv:t=>h.regexp(/\*|\/|%/).map(e=>e).desc("'*' or '/' or '%'"),binaryCompareOp:t=>h.regexp(/>=|<=|!=|>|<|=/).map(e=>e).desc("'>=' or '<=' or '!=' or '=' or '>' or '<'"),binaryBooleanOp:t=>h.regexp(/and|or|&|\|/i).map(e=>e.toLowerCase()=="and"?"&":e.toLowerCase()=="or"?"|":e).desc("'and' or 'or'"),rootDate:t=>h.seqMap(h.regexp(/\d{4}/),h.string("-"),h.regexp(/\d{2}/),(e,n,s)=>$.fromObject({year:Number.parseInt(e),month:Number.parseInt(s)})).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),dateShorthand:t=>h.alt(...Object.keys(Jr).sort((e,n)=>n.length-e.length).map(h.string)),date:t=>Ma(t.rootDate,e=>h.seqMap(h.string("-"),h.regexp(/\d{2}/),(n,s)=>e.set({day:Number.parseInt(s)})),e=>h.seqMap(h.string("T"),h.regexp(/\d{2}/),(n,s)=>e.set({hour:Number.parseInt(s)})),e=>h.seqMap(h.string(":"),h.regexp(/\d{2}/),(n,s)=>e.set({minute:Number.parseInt(s)})),e=>h.seqMap(h.string(":"),h.regexp(/\d{2}/),(n,s)=>e.set({second:Number.parseInt(s)})),e=>h.alt(h.seqMap(h.string("."),h.regexp(/\d{3}/),(n,s)=>e.set({millisecond:Number.parseInt(s)})),h.succeed(e)),e=>h.alt(h.seqMap(h.string("+").or(h.string("-")),h.regexp(/\d{1,2}(:\d{2})?/),(n,s)=>e.setZone("UTC"+n+s,{keepLocalTime:!0})),h.seqMap(h.string("Z"),()=>e.setZone("utc",{keepLocalTime:!0})),h.seqMap(h.string("["),h.regexp(/[0-9A-Za-z+-\/]+/u),h.string("]"),(n,s,u)=>e.setZone(s,{keepLocalTime:!0})))).assert(e=>e.isValid,"valid date").desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),datePlus:t=>h.alt(t.dateShorthand.map(e=>Jr[e]()),t.date).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand"),durationType:t=>h.alt(...Object.keys(Gr).sort((e,n)=>n.length-e.length).map(h.string)),duration:t=>h.seqMap(t.number,h.optWhitespace,t.durationType,(e,n,s)=>Gr[s].mapUnits(u=>u*e)).sepBy1(h.string(",").trim(h.optWhitespace).or(h.optWhitespace)).map(e=>e.reduce((n,s)=>n.plus(s))).desc("duration like 4hr2min"),rawNull:t=>h.string("null"),tagSource:t=>t.tag.map(e=>qe.tag(e)),csvSource:t=>h.seqMap(h.string("csv(").skip(h.optWhitespace),t.string,h.string(")"),(e,n,s)=>qe.csv(n)),linkIncomingSource:t=>t.link.map(e=>qe.link(e.path,!0)),linkOutgoingSource:t=>h.seqMap(h.string("outgoing(").skip(h.optWhitespace),t.link,h.string(")"),(e,n,s)=>qe.link(n.path,!1)),folderSource:t=>t.string.map(e=>qe.folder(e)),parensSource:t=>h.seqMap(h.string("("),h.optWhitespace,t.source,h.optWhitespace,h.string(")"),(e,n,s,u,a)=>s),negateSource:t=>h.seqMap(h.alt(h.string("-"),h.string("!")),t.atomSource,(e,n)=>qe.negate(n)),atomSource:t=>h.alt(t.parensSource,t.negateSource,t.linkOutgoingSource,t.linkIncomingSource,t.folderSource,t.tagSource,t.csvSource),binaryOpSource:t=>bn(t.atomSource,t.binaryBooleanOp.map(e=>e),qe.binaryOp),source:t=>t.binaryOpSource,variableField:t=>t.identifier.chain(e=>Kr.includes(e.toUpperCase())?h.fail("Variable fields cannot be a keyword ("+Kr.join(" or ")+")"):h.succeed(ue.variable(e))).desc("variable"),numberField:t=>t.number.map(e=>ue.literal(e)).desc("number"),stringField:t=>t.string.map(e=>ue.literal(e)).desc("string"),boolField:t=>t.bool.map(e=>ue.literal(e)).desc("boolean"),dateField:t=>h.seqMap(h.string("date("),h.optWhitespace,t.datePlus,h.optWhitespace,h.string(")"),(e,n,s,u,a)=>ue.literal(s)).desc("date"),durationField:t=>h.seqMap(h.string("dur("),h.optWhitespace,t.duration,h.optWhitespace,h.string(")"),(e,n,s,u,a)=>ue.literal(s)).desc("duration"),nullField:t=>t.rawNull.map(e=>ue.NULL),linkField:t=>t.link.map(e=>ue.literal(e)),listField:t=>t.field.sepBy(h.string(",").trim(h.optWhitespace)).wrap(h.string("[").skip(h.optWhitespace),h.optWhitespace.then(h.string("]"))).map(e=>ue.list(e)).desc("list ('[1, 2, 3]')"),objectField:t=>h.seqMap(t.identifier.or(t.string),h.string(":").trim(h.optWhitespace),t.field,(e,n,s)=>({name:e,value:s})).sepBy(h.string(",").trim(h.optWhitespace)).wrap(h.string("{").skip(h.optWhitespace),h.optWhitespace.then(h.string("}"))).map(e=>{let n={};for(let s of e)n[s.name]=s.value;return ue.object(n)}).desc("object ('{ a: 1, b: 2 }')"),atomInlineField:t=>h.alt(t.date,t.duration.map(e=>ii(e)),t.string,t.tag,t.embedLink,t.bool,t.number,t.rawNull),inlineFieldList:t=>t.atomInlineField.sepBy(h.string(",").trim(h.optWhitespace).lookahead(t.atomInlineField)),inlineField:t=>h.alt(h.seqMap(t.atomInlineField,h.string(",").trim(h.optWhitespace),t.inlineFieldList,(e,n,s)=>[e].concat(s)),t.atomInlineField),atomField:t=>h.alt(t.embedLink.map(e=>ue.literal(e)),t.negatedField,t.linkField,t.listField,t.objectField,t.lambdaField,t.parensField,t.boolField,t.numberField,t.stringField,t.dateField,t.durationField,t.nullField,t.variableField),indexField:t=>h.seqMap(t.atomField,h.alt(t.dotPostfix,t.indexPostfix,t.functionPostfix).many(),(e,n)=>{let s=e;for(let u of n)switch(u.type){case"dot":s=ue.index(s,ue.literal(u.field));break;case"index":s=ue.index(s,u.field);break;case"function":s=ue.func(s,u.fields);break}return s}),negatedField:t=>h.seqMap(h.string("!"),t.indexField,(e,n)=>ue.negate(n)).desc("negated field"),parensField:t=>h.seqMap(h.string("("),h.optWhitespace,t.field,h.optWhitespace,h.string(")"),(e,n,s,u,a)=>s),lambdaField:t=>h.seqMap(t.identifier.sepBy(h.string(",").trim(h.optWhitespace)).wrap(h.string("(").trim(h.optWhitespace),h.string(")").trim(h.optWhitespace)),h.string("=>").trim(h.optWhitespace),t.field,(e,n,s)=>({type:"lambda",arguments:e,value:s})),dotPostfix:t=>h.seqMap(h.string("."),t.identifier,(e,n)=>({type:"dot",field:n})),indexPostfix:t=>h.seqMap(h.string("["),h.optWhitespace,t.field,h.optWhitespace,h.string("]"),(e,n,s,u,a)=>({type:"index",field:s})),functionPostfix:t=>h.seqMap(h.string("("),h.optWhitespace,t.field.sepBy(h.string(",").trim(h.optWhitespace)),h.optWhitespace,h.string(")"),(e,n,s,u,a)=>({type:"function",fields:s})),binaryMulDivField:t=>bn(t.indexField,t.binaryMulDiv,ue.binaryOp),binaryPlusMinusField:t=>bn(t.binaryMulDivField,t.binaryPlusMinus,ue.binaryOp),binaryCompareField:t=>bn(t.binaryPlusMinusField,t.binaryCompareOp,ue.binaryOp),binaryBooleanField:t=>bn(t.binaryCompareField,t.binaryBooleanOp,ue.binaryOp),binaryOpField:t=>t.binaryBooleanField,field:t=>t.binaryOpField});function Aa(t){try{return tr.success($e.field.tryParse(t))}catch(e){return tr.failure(""+e)}}var nr;(function(t){function e(s,u){return{name:s,field:u}}t.named=e;function n(s,u){return{field:s,direction:u}}t.sortBy=n})(nr||(nr={}));function Na(t){return h.custom((e,n)=>(s,u)=>{let a=t._(s,u);return a.status?Object.assign({},a,{value:[a.value,s.substring(u,a.index)]}):a})}function Ia(t){return t.split(/[\r\n]+/).map(e=>e.trim()).join("")}function ci(t,e){return h.eof.map(t).or(h.whitespace.then(e))}const fi=h.createLanguage({queryType:t=>h.alt(h.regexp(/TABLE|LIST|TASK|CALENDAR/i)).map(e=>e.toLowerCase()).desc("query type ('TABLE', 'LIST', 'TASK', or 'CALENDAR')"),explicitNamedField:t=>h.seqMap($e.field.skip(h.whitespace),h.regexp(/AS/i).skip(h.whitespace),$e.identifier.or($e.string),(e,n,s)=>nr.named(s,e)),comment:()=>h.Parser((t,e)=>{let n=t.substring(e);if(!n.startsWith("//"))return h.makeFailure(e,"Not a comment");n=n.split(`
`)[0];let s=n.substring(2).trim();return h.makeSuccess(e+n.length,s)}),namedField:t=>h.alt(t.explicitNamedField,Na($e.field).map(([e,n])=>nr.named(Ia(n),e))),sortField:t=>h.seqMap($e.field.skip(h.optWhitespace),h.regexp(/ASCENDING|DESCENDING|ASC|DESC/i).atMost(1),(e,n)=>{let s=n.length==0?"ascending":n[0].toLowerCase();return s=="desc"&&(s="descending"),s=="asc"&&(s="ascending"),{field:e,direction:s}}),headerClause:t=>t.queryType.chain(e=>{switch(e){case"table":return ci(()=>({type:e,fields:[],showId:!0}),h.seqMap(h.regexp(/WITHOUT\s+ID/i).skip(h.optWhitespace).atMost(1),h.sepBy(t.namedField,h.string(",").trim(h.optWhitespace)),(n,s)=>({type:e,fields:s,showId:n.length==0})));case"list":return ci(()=>({type:e,format:void 0,showId:!0}),h.seqMap(h.regexp(/WITHOUT\s+ID/i).skip(h.optWhitespace).atMost(1),$e.field.atMost(1),(n,s)=>({type:e,format:s.length==1?s[0]:void 0,showId:n.length==0})));case"task":return h.succeed({type:e});case"calendar":return h.whitespace.then(h.seqMap(t.namedField,n=>({type:e,showId:!0,field:n})));default:return h.fail(`Unrecognized query type '${e}'`)}}).desc("TABLE or LIST or TASK or CALENDAR"),fromClause:t=>h.seqMap(h.regexp(/FROM/i),h.whitespace,$e.source,(e,n,s)=>s),whereClause:t=>h.seqMap(h.regexp(/WHERE/i),h.whitespace,$e.field,(e,n,s)=>({type:"where",clause:s})).desc("WHERE <expression>"),sortByClause:t=>h.seqMap(h.regexp(/SORT/i),h.whitespace,t.sortField.sepBy1(h.string(",").trim(h.optWhitespace)),(e,n,s)=>({type:"sort",fields:s})).desc("SORT field [ASC/DESC]"),limitClause:t=>h.seqMap(h.regexp(/LIMIT/i),h.whitespace,$e.field,(e,n,s)=>({type:"limit",amount:s})).desc("LIMIT <value>"),flattenClause:t=>h.seqMap(h.regexp(/FLATTEN/i).skip(h.whitespace),t.namedField,(e,n)=>({type:"flatten",field:n})).desc("FLATTEN <value> [AS <name>]"),groupByClause:t=>h.seqMap(h.regexp(/GROUP BY/i).skip(h.whitespace),t.namedField,(e,n)=>({type:"group",field:n})).desc("GROUP BY <value> [AS <name>]"),clause:t=>h.alt(t.fromClause,t.whereClause,t.sortByClause,t.limitClause,t.groupByClause,t.flattenClause),query:t=>h.seqMap(t.headerClause.trim(Qr),t.fromClause.trim(Qr).atMost(1),t.clause.trim(Qr).many(),(e,n,s)=>({header:e,source:n.length==0?qe.folder(""):n[0],operations:s,settings:zr}))}),Qr=h.alt(h.whitespace,fi.comment).many().map(t=>t.join("")),La=t=>t?t.plugins.plugins.dataview?.api:window.DataviewAPI,_a=t=>t.plugins.enabledPlugins.has("dataview");return We.DATE_SHORTHANDS=Jr,We.DURATION_TYPES=Gr,We.EXPRESSION=$e,We.KEYWORDS=Kr,We.QUERY_LANGUAGE=fi,We.getAPI=La,We.isPluginEnabled=_a,We.parseField=Aa,We}var Li=sl();class il{constructor(r){this.plugin=r}id="dataview";test(r){return/^(TABLE|LIST|TASK|CALENDAR)/.test(r)}async parse(r,i){return Li.isPluginEnabled(this.plugin.app)?await Li.getAPI(this.plugin.app).query(r,i):{successful:!1,value:void 0}}}class ul{constructor(r){this.plugin=r,this.#e=[new il(r),new rl,new nl]}#e;#t(){if(!this.plugin.settings.enable_separators)return;const r=this.plugin.settings.usage_separator.replace(/[.+*?^${}()|[\]\\]/gi,"\\$&");return new RegExp(r,"gi")}async parse(r,i,o){o.trace(`Parsing from '${i}' <${r}>`);const d=this.#t();try{if(d?.test(r)){for(const p of this.#e)if(p.test(r)){o.debug(`Parsing as ${p.id}`);const g=[];for(const b of r.split(d))g.push(await p.parse(b,i));return{syntax:p.id,data:g}}}for(const p of this.#e)if(p.test(r))return o.debug(`Parsing as ${p.id}`),{syntax:p.id,data:await p.parse(r,i)}}catch(p){o.debug(p)}return o.debug("Failed parsing",r),{syntax:"unknown",data:r}}}class nu{constructor(r){this.plugin=r}renderHTML(r,i,o){o.debug("Rendering as HTML"),r.innerHTML=i}renderMarkdown(r,i,o,d){d.debug("Rendering as Markdown"),K.MarkdownRenderer.render(this.plugin.app,i,r,o,this.plugin)}}class al extends nu{test(r){return/\.(md|html)$/i.test(r.name)}async render(r,i,o,d,p){p.debug("Rendering from Template");const g=await this.#e(r,p),b=this.#t(g,d,p);r.name.endsWith("md")?this.renderMarkdown(o,b,i.notepath,p):this.renderHTML(o,b,p)}#e(r,i){return i.debug("Retrieving Template"),this.plugin.app.vault.read(r)}#t(r,i,o){return o.debug("Replacing Placeholders"),i?!eu(i)&&!Array.isArray(i)?r.replace(/\{\{ *(\w+) *\}\}/gi,String(i)):r.replace(/\{\{ *(\w+) *\}\}/gi,(d,p)=>i[p]?String(i[p]):`{{ ${p} }}`):r}}class ol extends nu{#e;constructor(r,i){super(r),this.#e=i}test(r){return/\.[cm]js$/.test(r.name)}async render(r,i,o,d,p){p.debug("Rendering from Javascript");const g=await this.#t(r,p);if(/\.md\.[cm]js$/i.test(r.name)){const b=await g(d,i);this.renderMarkdown(o,b,i.notepath,p)}else if(/\.html\.[cm]js$/i.test(r.name)){const b=await g(d,i);this.renderHTML(o,b,p)}else await g(o,d,i)}async#t(r,i){i.debug("Retrieving Javascript Renderer");const o=await this.#n(r,i);if(typeof o=="function")return o;if(!eu(o))throw new Mt(`component(${r.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"});if(typeof o.default=="function")return o.default;if(typeof o.render=="function")return o.render;throw new Mt(`component(${r.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"})}async#n(r,i){i.debug("Sourcing Renderer");try{if(r.extension==="mjs"){const d=this.#e.getResourcePath(r);return i.debug(`import('${d}')`),await import(d)}const o=this.#e.getAbsolutePath(r.path);return i.debug(`require('${o}')`),require(o)}catch(o){throw new Mt(`component(${r.name}) could not be imported/required`,{cause:o,code:"invalid-component-syntax"})}}}class ll{#e;constructor(r){const i=new fs(r);this.#e=[new al(r),new ol(r,i)]}async render(r,i,o,d,p){for(const g of this.#e)if(g.test(r))return o.empty(),g.render(r,i,o,d,p);throw new Mt(`component(${r.name}) is not supported`,{code:"unsupported-component"})}}const _i=()=>/(?<=from *['"`]|require *\( *['"`])(.+)(?=['"`])/gi;class ds{#e;#t;#n;#r;#s;#i=new en;#u=new en;constructor(r,i){this.#e=r.log.make(ds.name),this.#t=new fs(r),this.#n=r,this.#r=i,this.#s=this.#n.app.vault.on("modify",async o=>{if(!(o instanceof K.TFile))return;const d=this.#e.group();d.debug(`Listening changes on <${o.name}>`),d.debug("Listing affected files");const p=await this.#o(o,d);p.length&&(d.debug("Prepared affected files"),await this.#r(p,d)),d.flush(`Listened changes on <${o.name}>`)})}clear(){this.#n.app.vault.offref(this.#s),this.#i.clear(),this.#u.clear()}async resetCache(r){this.#n.isDesignModeEnabled&&(await this.#t.renewFolder(this.#t.getCachePath()),r.info("Cleared Versions Cache"))}resolveLatest(r){return this.#n.isDesignModeEnabled?this.#u.getFirst(r)??r:r}async#o(r,i){const o=[],d=[r],p=async g=>{i.debug(`Refreshing dependencies <${g.name}>`),await this.#a(g,i),i.debug(`Checking dependents <${g.name}>`);for(const b of this.#i.keysWithValue(g.path)){const F=this.#t.resolveFile(b);F?d.push(F):i.warn("Not found",b)}};for(;d.length;){const g=d.shift();if(!g||o.includes(g.path))continue;if(["html","md"].includes(g.extension)){i.debug(`Affected Template <${g.name}>`),o.push(g.path);continue}if(g.extension==="cjs"){i.debug(`Affected CommonJS <${g.name}>`),o.push(g.path),i.debug(`Deleting cache <${g.name}>`);const F=this.#t.getAbsolutePath(g.path);delete window.require.cache[window.require.resolve(F)],await p(g);continue}if(!this.#n.isDesignModeEnabled||!this.#i.has(g.path)&&!g.path.startsWith(this.#n.settings.components_folder))continue;i.debug(`Affected ESModule <${g.name}>`),o.push(g.path),i.debug(`Caching clone <${g.name}>`);const b=await this.#l(g,i);this.#u.prepend(g.path,b),await p(g)}return i.trace("Current cjs cache",{...window.require.cache}),o.unique()}async#l(r,i){const o=await this.#t.getFileHash(r),d=`${o}.${r.basename}.${r.extension}`,p=this.#t.getCachePath(d);if(await this.#t.missing(p))return i.debug(`Caching <${r.name}> to <${d}>`),await this.#t.copy(r,p,_=>this.#c(r,_,i)),p;const g=Date.now().toString(),b=`${o}-${g}.${r.basename}.${r.extension}`,F=this.#t.getCachePath(b);return i.debug(`Cloning <${d}> to <${b}>`),await this.#t.copy(r,F,_=>this.#c(r,_,i)),F}#c(r,i,o){const d=r.parent?.path??"";return i.replaceAll(_i(),p=>{const g=this.#t.join(d,p),b=this.resolveLatest(g);return o.trace(`Replacing import path <${b}>`),this.#t.getAbsolutePath(b)})}async indexAllComponents(r){const i=this.#n.settings.components_folder,o=this.#n.app.vault.getFolderByPath(i);if(!o)throw new Error(`path <${i}> is not a folder`);r.info("Indexing files"),await this.indexComponent(o,r),r.debug("Indexed files",{tracked:this.#i,versions:this.#u})}async indexComponent(r,i){if(this.#i.has(r.path))return;const o=[r];for(;o.length;){const d=o.shift();if(d instanceof K.TFolder){i.debug(`Indexing folder <${d.name}>`),o.push(...d.children);continue}if(d instanceof K.TFile&&!this.#i.has(d.path)){this.#i.store(d.path),i.debug(`Indexing dependencies on <${d.name}>`);for(const p of await this.#a(d,i)){const g=this.#t.resolveFile(p);g?o.push(g):i.warn("Not found",p)}}}}async#a(r,i){const o=r.parent?.path??"",d=await this.#t.read(r.path),p=[];for(const g of d.matchAll(_i())){const b=this.#t.join(o,g[0]||"");i.trace(`file <${r.name}> imports <${b}>`),this.#i.push(r.path,b),p.push(b)}return p}}class hs{#e;#t;#n;#r;#s;#i=new en;#u=[];constructor(r){this.#e=r.log.make(hs.name),this.#t=r,this.#n=new ul(r),this.#r=new ll(r),this.#s=new ds(r,this.refresh.bind(this))}async clear(r){r.info("Clearing in-memory cache"),this.#i.clear(),this.#s.clear(),await this.#s.resetCache(r)}async prepareDesignMode(){const r=this.#e.group("Preparing DesignMode");try{r.info("Clearing cache"),await this.#s.resetCache(r),await this.#s.indexAllComponents(r),r.info("Refreshing All Components"),await this.refresh(Array.from(this.#i.keys()),r)}catch(i){r.warn(i)}r.flush("DesignMode Enabled")}async refresh(r,i){const o=r.length?r:this.#i.keys();i.debug("Refreshing Components",r);for(const d of o){i.debug(`Refreshing Components(${d})`);try{for(const p of this.#i.get(d))i.trace("Refreshing Codeblock",p),await this.#a(d,p,i)}catch(p){i.warn(p)}}i.debug("Refreshed Components")}registerBaseCodeblock(){this.#t.registerMarkdownCodeBlockProcessor("use",this.#o.bind(this),-100)}registerCustomCodeblocks(){for(const[r,i]of this.#t.state.components_enabled.entries())for(const o of i)this.#u.includes(o)||(this.#u.push(o),this.#t.registerMarkdownCodeBlockProcessor(o,(d,p,g)=>{this.#o(d,p,g,r,o)},-100))}async#o(r,i,o,d,p){const g=this.#e.group();try{g.debug(`Parsing Codeblock Name '${p??"use"}'`);const b=o.sourcePath,F=p??this.#l(o,i);g.debug(`Parsing Codeblock Content '${F}'`);const _=await this.#n.parse(r,b,g),j=this.#c(d,F),G=await tu(r);g.debug(`Serializing Codeblock '${F}'`);const Q={context:{notepath:b,used_name:F,hash:G,syntax:_.syntax},element:i,data:_.data};g.trace("Serialized Codeblock",Q),g.debug(`Rendering Codeblock '${F}'`),i.classList.add("component",`${F}-component`),this.#i.push(j.path,Q),await this.#a(j.path,Q,g);const ye=this.#t.app.vault.getFileByPath(j.path);ye&&(g.debug(`Indexing Component '${j.path}'`),await this.#s.indexComponent(ye,g)),g.flush(`Rendered Component '${F}'`)}catch(b){g.error(b),g.flush(`Failed Component on '${o.sourcePath}'`);const F=i.createEl("pre");F.classList.add("component-error"),b instanceof Ai&&(b.cause=r),b instanceof Error?F.append(b.stack??b.message):F.append(JSON.stringify(b))}}#l(r,i){const o=r.getSectionInfo(i);if(o){const p=(o.text.split(`
`).at(o.lineStart)??"").replace("```use","").trim();if(p)return p}throw new Mt(`component name could not be found on '${r.sourcePath}'`,{cause:o,code:"missing-component-name"})}#c(r,i){if(r){for(const o of this.#t.state.components_matchers)if(o.id===r)return o}if(i){for(const o of this.#t.state.components_matchers)if(o.test(i))return o}throw new Ai(`component(${i}) was disabled recently`)}async#a(r,{context:i,element:o,data:d},p){const g=this.#s.resolveLatest(r);p.debug(`Rendering with LatestPath '${g}'`);const b=this.#t.app.vault.getFileByPath(g);if(b)return this.#r.render(b,i,o,d,p);throw new Mt(`component(${g}) could not be located, try reloading Obsidian`,{code:"missing-component-file"})}}class Ds{#e;#t;constructor(r){this.#e=r.log.make(Ds.name),this.#t=r}}const cl={plugin_level:"WARN",enable_codeblocks:!1,enable_separators:!1,usage_separator:"---",cache_folder:"__temp/",components_folder:"",components_config:[]};class ms extends K.Plugin{log=kn.consoleLogger(ms.name);settings={};state={};api;#e;constructor(r,i){super(r,i),this.log.setLevel(Fe.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new Ds(this),this.#e=new hs(this),window.Components=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new tl(this)),this.#e.registerBaseCodeblock()}onunload(){const r=this.log.group("Clearing State");this.#e.clear(r),r.flush("Cleared State")}async loadSettings(){const r=this.log.group("Loading Settings"),i=await this.loadData()||{};this.settings=Object.assign({},cl,i),r.debug("Loaded: ",this.settings),this.#t(r),r.flush("Loaded Settings")}async saveSettings(){const r=this.log.group("Saving Settings"),i=Object.assign({},this.settings);await this.saveData(i),r.debug("Saved: ",i),this.#t(r),r.flush("Saved Settings")}#t(r){r.info("Preparing state"),this.log.setLevel(Fe[this.settings.plugin_level]),this.state=qo(this),this.#e.registerCustomCodeblocks()}#n=!1;get isDesignModeEnabled(){return this.#n}enableDesignMode(){this.#n||(this.#n=!0,this.#e.prepareDesignMode())}}module.exports=ms;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
