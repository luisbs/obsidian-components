/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-components@0.5.0 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-components
 */
"use strict";const U=require("obsidian"),Hs=require("path"),ni=require("crypto");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class Ia{error(s,u){console.error(s,...u)}warn(s,u){console.warn(s,...u)}info(s,u){console.info(s,...u)}debug(s,u){console.debug(s,...u)}trace(s,u){console.trace(s,...u)}group(s,u){return console.groupCollapsed(s,...u),console.groupEnd}}const oe=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),La=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class jt{#e;#t;#n;#r=[];#s=[];get level(){return this.#t?this.#t:this.#e?.level??oe.WARN}get format(){return this.#n?this.#n:this.#e?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const s=[];for(let u=0;u<this.#s.length-1;u++)s.push(this.#s[u][0]);return s.push(this.#s.at(-1)??""),s.join(".")}get drivers(){return Object.freeze(this.#r)}setLevel(s){return this.#t=s,this}setFormat(s){return this.#n=s,this}addDrivers(...s){for(const u of s)Array.isArray(u)?this.#r.push(...u):u&&this.#r.push(u);return this}addNamespaces(...s){for(const u of s)Array.isArray(u)?this.#s.push(...u):u&&this.#s.push(u);return this}static consoleLogger(s){const u=new jt;return u.setLevel(oe.WARN),u.addDrivers(new Ia),u.addNamespaces(s),u}make(s){const u=new jt;return u.#e=this,u.addDrivers(this.#r),u.addNamespaces(this.#s,s),u}prefix(s,u){return this.format.replace("hh",String(s.getHours()).padStart(2,"0")).replace("mm",String(s.getMinutes()).padStart(2,"0")).replace("ss",String(s.getSeconds()).padStart(2,"0")).replace("ms",String(s.getMilliseconds()).padStart(3,"0")).replace("level",La[u]).replace("namespace",this.namespace)}log(s,u,l){if(this.level>u)return;const h=this.prefix(s,u);switch(this.level){case oe.ERROR:this.#r.forEach(p=>p.error(h,l));break;case oe.WARN:this.#r.forEach(p=>p.warn(h,l));break;case oe.INFO:this.#r.forEach(p=>p.info(h,l));break;case oe.DEBUG:this.#r.forEach(p=>p.debug(h,l));break;default:this.#r.forEach(p=>p.trace(h,l))}}error(...s){this.log(new Date,oe.ERROR,s)}warn(...s){this.log(new Date,oe.WARN,s)}info(...s){this.log(new Date,oe.INFO,s)}debug(...s){this.log(new Date,oe.DEBUG,s)}trace(...s){this.log(new Date,oe.TRACE,s)}group(...s){const u=new Ra;return u.#e=this,u.addDrivers(this.#r),u.addNamespaces(this.#s),s.length&&u.log(new Date,oe.INFO,s),u}}class Ra extends jt{#e=[];log(s,u,l){this.level>u||this.#e.push({timestamp:s,level:u,content:l})}flush(...s){if(this.#e.length===0){super.log(new Date,oe.INFO,s);return}const u=this.prefix(new Date,oe.INFO),l=this.drivers.map(h=>h.group(u,s));for(const{timestamp:h,level:p,content:F}of this.#e)super.log(h,p,F);l.forEach(h=>h()),this.#e=[]}}class _a{constructor(s,u){this.app=s,this.containerEl=u,this.scope=new U.Scope,this.wrapperEl=createDiv("suggestions-tooltip")}scope;wrapperEl;registerListeners(){this.scope.register([],"Escape",this.close.bind(this))}open(){this.app.keymap.pushScope(this.scope),this.containerEl.appendChild(this.wrapperEl)}close(){this.app.keymap.popScope(this.scope),this.wrapperEl.empty(),this.wrapperEl.detach()}}const Us=Math.min,Vt=Math.max,En=Math.round,Ie=f=>({x:f,y:f});function ri(f){return f.split("-")[0]}function $a(f){return f.split("-")[1]}function Pa(f){return f==="x"?"y":"x"}function Va(f){return f==="y"?"height":"width"}function si(f){return["top","bottom"].includes(ri(f))?"y":"x"}function ja(f){return Pa(si(f))}function ii(f){const{x:s,y:u,width:l,height:h}=f;return{width:l,height:h,top:u,left:s,right:s+l,bottom:u+h,x:s,y:u}}function Zs(f,s,u){let{reference:l,floating:h}=f;const p=si(s),F=ja(s),b=Va(F),g=ri(s),I=p==="y",L=l.x+l.width/2-h.width/2,H=l.y+l.height/2-h.height/2,ne=l[b]/2-h[b]/2;let z;switch(g){case"top":z={x:L,y:l.y-h.height};break;case"bottom":z={x:L,y:l.y+l.height};break;case"right":z={x:l.x+l.width,y:H};break;case"left":z={x:l.x-h.width,y:H};break;default:z={x:l.x,y:l.y}}switch($a(s)){case"start":z[F]-=ne*(u&&I?-1:1);break;case"end":z[F]+=ne*(u&&I?-1:1);break}return z}const Wa=async(f,s,u)=>{const{placement:l="bottom",strategy:h="absolute",middleware:p=[],platform:F}=u,b=p.filter(Boolean),g=await(F.isRTL==null?void 0:F.isRTL(s));let I=await F.getElementRects({reference:f,floating:s,strategy:h}),{x:L,y:H}=Zs(I,l,g),ne=l,z={},fe=0;for(let ie=0;ie<b.length;ie++){const{name:me,fn:Ge}=b[ie],{x:Je,y:ut,data:at,reset:ke}=await Ge({x:L,y:H,initialPlacement:l,placement:ne,strategy:h,middlewareData:z,rects:I,platform:F,elements:{reference:f,floating:s}});L=Je??L,H=ut??H,z={...z,[me]:{...z[me],...at}},ke&&fe<=50&&(fe++,typeof ke=="object"&&(ke.placement&&(ne=ke.placement),ke.rects&&(I=ke.rects===!0?await F.getElementRects({reference:f,floating:s,strategy:h}):ke.rects),{x:L,y:H}=Zs(I,ne,g)),ie=-1)}return{x:L,y:H,placement:ne,strategy:h,middlewareData:z}};function wn(){return typeof window<"u"}function vt(f){return ui(f)?(f.nodeName||"").toLowerCase():"#document"}function De(f){var s;return(f==null||(s=f.ownerDocument)==null?void 0:s.defaultView)||window}function We(f){var s;return(s=(ui(f)?f.ownerDocument:f.document)||window.document)==null?void 0:s.documentElement}function ui(f){return wn()?f instanceof Node||f instanceof De(f).Node:!1}function xe(f){return wn()?f instanceof Element||f instanceof De(f).Element:!1}function Le(f){return wn()?f instanceof HTMLElement||f instanceof De(f).HTMLElement:!1}function qs(f){return!wn()||typeof ShadowRoot>"u"?!1:f instanceof ShadowRoot||f instanceof De(f).ShadowRoot}function Ht(f){const{overflow:s,overflowX:u,overflowY:l,display:h}=Oe(f);return/auto|scroll|overlay|hidden|clip/.test(s+l+u)&&!["inline","contents"].includes(h)}function Ha(f){return["table","td","th"].includes(vt(f))}function Cn(f){return[":popover-open",":modal"].some(s=>{try{return f.matches(s)}catch{return!1}})}function rr(f){const s=sr(),u=xe(f)?Oe(f):f;return["transform","translate","scale","rotate","perspective"].some(l=>u[l]?u[l]!=="none":!1)||(u.containerType?u.containerType!=="normal":!1)||!s&&(u.backdropFilter?u.backdropFilter!=="none":!1)||!s&&(u.filter?u.filter!=="none":!1)||["transform","translate","scale","rotate","perspective","filter"].some(l=>(u.willChange||"").includes(l))||["paint","layout","strict","content"].some(l=>(u.contain||"").includes(l))}function Ua(f){let s=Ye(f);for(;Le(s)&&!Ct(s);){if(rr(s))return s;if(Cn(s))return null;s=Ye(s)}return null}function sr(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function Ct(f){return["html","body","#document"].includes(vt(f))}function Oe(f){return De(f).getComputedStyle(f)}function bn(f){return xe(f)?{scrollLeft:f.scrollLeft,scrollTop:f.scrollTop}:{scrollLeft:f.scrollX,scrollTop:f.scrollY}}function Ye(f){if(vt(f)==="html")return f;const s=f.assignedSlot||f.parentNode||qs(f)&&f.host||We(f);return qs(s)?s.host:s}function ai(f){const s=Ye(f);return Ct(s)?f.ownerDocument?f.ownerDocument.body:f.body:Le(s)&&Ht(s)?s:ai(s)}function oi(f,s,u){var l;s===void 0&&(s=[]);const h=ai(f),p=h===((l=f.ownerDocument)==null?void 0:l.body),F=De(h);return p?(nr(F),s.concat(F,F.visualViewport||[],Ht(h)?h:[],[])):s.concat(h,oi(h,[]))}function nr(f){return f.parent&&Object.getPrototypeOf(f.parent)?f.frameElement:null}function li(f){const s=Oe(f);let u=parseFloat(s.width)||0,l=parseFloat(s.height)||0;const h=Le(f),p=h?f.offsetWidth:u,F=h?f.offsetHeight:l,b=En(u)!==p||En(l)!==F;return b&&(u=p,l=F),{width:u,height:l,$:b}}function ci(f){return xe(f)?f:f.contextElement}function wt(f){const s=ci(f);if(!Le(s))return Ie(1);const u=s.getBoundingClientRect(),{width:l,height:h,$:p}=li(s);let F=(p?En(u.width):u.width)/l,b=(p?En(u.height):u.height)/h;return(!F||!Number.isFinite(F))&&(F=1),(!b||!Number.isFinite(b))&&(b=1),{x:F,y:b}}const Za=Ie(0);function fi(f){const s=De(f);return!sr()||!s.visualViewport?Za:{x:s.visualViewport.offsetLeft,y:s.visualViewport.offsetTop}}function qa(f,s,u){return s===void 0&&(s=!1),!u||s&&u!==De(f)?!1:s}function Wt(f,s,u,l){s===void 0&&(s=!1),u===void 0&&(u=!1);const h=f.getBoundingClientRect(),p=ci(f);let F=Ie(1);s&&(l?xe(l)&&(F=wt(l)):F=wt(f));const b=qa(p,u,l)?fi(p):Ie(0);let g=(h.left+b.x)/F.x,I=(h.top+b.y)/F.y,L=h.width/F.x,H=h.height/F.y;if(p){const ne=De(p),z=l&&xe(l)?De(l):l;let fe=ne,ie=nr(fe);for(;ie&&l&&z!==fe;){const me=wt(ie),Ge=ie.getBoundingClientRect(),Je=Oe(ie),ut=Ge.left+(ie.clientLeft+parseFloat(Je.paddingLeft))*me.x,at=Ge.top+(ie.clientTop+parseFloat(Je.paddingTop))*me.y;g*=me.x,I*=me.y,L*=me.x,H*=me.y,g+=ut,I+=at,fe=De(ie),ie=nr(fe)}}return ii({width:L,height:H,x:g,y:I})}function ir(f,s){const u=bn(f).scrollLeft;return s?s.left+u:Wt(We(f)).left+u}function di(f,s,u){u===void 0&&(u=!1);const l=f.getBoundingClientRect(),h=l.left+s.scrollLeft-(u?0:ir(f,l)),p=l.top+s.scrollTop;return{x:h,y:p}}function za(f){let{elements:s,rect:u,offsetParent:l,strategy:h}=f;const p=h==="fixed",F=We(l),b=s?Cn(s.floating):!1;if(l===F||b&&p)return u;let g={scrollLeft:0,scrollTop:0},I=Ie(1);const L=Ie(0),H=Le(l);if((H||!H&&!p)&&((vt(l)!=="body"||Ht(F))&&(g=bn(l)),Le(l))){const z=Wt(l);I=wt(l),L.x=z.x+l.clientLeft,L.y=z.y+l.clientTop}const ne=F&&!H&&!p?di(F,g,!0):Ie(0);return{width:u.width*I.x,height:u.height*I.y,x:u.x*I.x-g.scrollLeft*I.x+L.x+ne.x,y:u.y*I.y-g.scrollTop*I.y+L.y+ne.y}}function Ya(f){return Array.from(f.getClientRects())}function Ga(f){const s=We(f),u=bn(f),l=f.ownerDocument.body,h=Vt(s.scrollWidth,s.clientWidth,l.scrollWidth,l.clientWidth),p=Vt(s.scrollHeight,s.clientHeight,l.scrollHeight,l.clientHeight);let F=-u.scrollLeft+ir(f);const b=-u.scrollTop;return Oe(l).direction==="rtl"&&(F+=Vt(s.clientWidth,l.clientWidth)-h),{width:h,height:p,x:F,y:b}}function Ja(f,s){const u=De(f),l=We(f),h=u.visualViewport;let p=l.clientWidth,F=l.clientHeight,b=0,g=0;if(h){p=h.width,F=h.height;const I=sr();(!I||I&&s==="fixed")&&(b=h.offsetLeft,g=h.offsetTop)}return{width:p,height:F,x:b,y:g}}function Ka(f,s){const u=Wt(f,!0,s==="fixed"),l=u.top+f.clientTop,h=u.left+f.clientLeft,p=Le(f)?wt(f):Ie(1),F=f.clientWidth*p.x,b=f.clientHeight*p.y,g=h*p.x,I=l*p.y;return{width:F,height:b,x:g,y:I}}function zs(f,s,u){let l;if(s==="viewport")l=Ja(f,u);else if(s==="document")l=Ga(We(f));else if(xe(s))l=Ka(s,u);else{const h=fi(f);l={x:s.x-h.x,y:s.y-h.y,width:s.width,height:s.height}}return ii(l)}function hi(f,s){const u=Ye(f);return u===s||!xe(u)||Ct(u)?!1:Oe(u).position==="fixed"||hi(u,s)}function Qa(f,s){const u=s.get(f);if(u)return u;let l=oi(f,[]).filter(b=>xe(b)&&vt(b)!=="body"),h=null;const p=Oe(f).position==="fixed";let F=p?Ye(f):f;for(;xe(F)&&!Ct(F);){const b=Oe(F),g=rr(F);!g&&b.position==="fixed"&&(h=null),(p?!g&&!h:!g&&b.position==="static"&&h&&["absolute","fixed"].includes(h.position)||Ht(F)&&!g&&hi(f,F))?l=l.filter(I=>I!==F):h=b,F=Ye(F)}return s.set(f,l),l}function Xa(f){let{element:s,boundary:u,rootBoundary:l,strategy:h}=f;const p=[...u==="clippingAncestors"?Cn(s)?[]:Qa(s,this._c):[].concat(u),l],F=p[0],b=p.reduce((g,I)=>{const L=zs(s,I,h);return g.top=Vt(L.top,g.top),g.right=Us(L.right,g.right),g.bottom=Us(L.bottom,g.bottom),g.left=Vt(L.left,g.left),g},zs(s,F,h));return{width:b.right-b.left,height:b.bottom-b.top,x:b.left,y:b.top}}function eo(f){const{width:s,height:u}=li(f);return{width:s,height:u}}function to(f,s,u){const l=Le(s),h=We(s),p=u==="fixed",F=Wt(f,!0,p,s);let b={scrollLeft:0,scrollTop:0};const g=Ie(0);if(l||!l&&!p)if((vt(s)!=="body"||Ht(h))&&(b=bn(s)),l){const ne=Wt(s,!0,p,s);g.x=ne.x+s.clientLeft,g.y=ne.y+s.clientTop}else h&&(g.x=ir(h));const I=h&&!l&&!p?di(h,b):Ie(0),L=F.left+b.scrollLeft-g.x-I.x,H=F.top+b.scrollTop-g.y-I.y;return{x:L,y:H,width:F.width,height:F.height}}function tr(f){return Oe(f).position==="static"}function Ys(f,s){if(!Le(f)||Oe(f).position==="fixed")return null;if(s)return s(f);let u=f.offsetParent;return We(f)===u&&(u=u.ownerDocument.body),u}function Di(f,s){const u=De(f);if(Cn(f))return u;if(!Le(f)){let h=Ye(f);for(;h&&!Ct(h);){if(xe(h)&&!tr(h))return h;h=Ye(h)}return u}let l=Ys(f,s);for(;l&&Ha(l)&&tr(l);)l=Ys(l,s);return l&&Ct(l)&&tr(l)&&!rr(l)?u:l||Ua(f)||u}const no=async function(f){const s=this.getOffsetParent||Di,u=this.getDimensions,l=await u(f.floating);return{reference:to(f.reference,await s(f.floating),f.strategy),floating:{x:0,y:0,width:l.width,height:l.height}}};function ro(f){return Oe(f).direction==="rtl"}const so={convertOffsetParentRelativeRectToViewportRelativeRect:za,getDocumentElement:We,getClippingRect:Xa,getOffsetParent:Di,getElementRects:no,getClientRects:Ya,getDimensions:eo,getScale:wt,isElement:xe,isRTL:ro},io=(f,s,u)=>{const l=new Map,h={platform:so,...u},p={...h.platform,_c:l};return Wa(f,s,{...h,platform:p})};function uo(){return{name:"matchWidth",fn({elements:f,rects:s}){return f.floating.style.width=`${s.reference.width}px`,{reset:{rects:!0}}}}}function ao(){return{name:"makeItFloat",fn({elements:f,x:s,y:u}){return f.floating.style.top=`${u}px`,f.floating.style.left=`${s}px`,{}}}}function oo(f,s){return(f%s+s)%s}class lo extends _a{constructor(s,u,l){super(s,l??u.parentElement??document.body),this.inputEl=u,this.registerListeners()}#e=[];#t=[];#n=-1;open(){super.open(),io(this.inputEl,this.wrapperEl,{placement:"bottom-start",middleware:[uo(),ao()]})}close(){super.close(),this.#n=-1,this.#e=[],this.#t=[]}registerListeners(){super.registerListeners(),this.scope.register([],"Enter",s=>this.onKeypress(s,"enter")),this.scope.register([],"ArrowUp",s=>this.onKeypress(s,"up")),this.scope.register([],"ArrowDown",s=>this.onKeypress(s,"down")),this.wrapperEl.addEventListener("mousedown",()=>!1),this.wrapperEl.on("click",".suggestion-item",this.onClick.bind(this)),this.inputEl.addEventListener("blur",this.onBlur.bind(this)),this.inputEl.addEventListener("focus",this.onInputChange.bind(this)),this.inputEl.addEventListener("input",this.onInputChange.bind(this))}onBlur(){setTimeout(()=>this.close(),100)}onInputChange(s){if(!(s.currentTarget instanceof HTMLInputElement)&&!(s.currentTarget instanceof HTMLTextAreaElement))return;const u=this.getSuggestions(s.currentTarget.value);if(u.length>0){this.wrapperEl.empty(),this.#e=u,this.#t=u.map(l=>{const h=this.wrapperEl.createDiv("suggestion-item");return this.renderSuggestion(l,h),h}),this.open();return}this.close()}onKeypress(s,u){if(!s.isComposing)switch(s.preventDefault(),u){case"enter":this.selectSuggestion(this.#e[this.#n]);break;case"up":this.focusSuggestion(this.#n-1,!0);break;case"down":this.focusSuggestion(this.#n+1,!0);break}}onClick(s,u){s.preventDefault(),this.focusSuggestion(this.#t.indexOf(u),!1),this.selectSuggestion(this.#e[this.#n])}focusSuggestion(s,u){const l=oo(s,this.#e.length),h=this.#t[this.#n],p=this.#t[l];h.removeClass("is-selected"),p.addClass("is-selected"),this.#n=l,u&&p.scrollIntoView(!1)}}function co(f,s){return fo(f,s?u=>u instanceof U.TFolder&&s(u):u=>u instanceof U.TFolder)}function fo(f,s){let u=f.getAllLoadedFiles();return s&&(u=u.filter(s)),u.sort((l,h)=>l.path.localeCompare(h.path))}function ho(f,s,u){const l=Do(f,s),h=p=>p instanceof U.TFile;return l.children.filter(h)}function Do(f,s){const u=f.getAbstractFileByPath(U.normalizePath(s));if(!u)throw new Error(`Folder "${s}" doesn't exist.`);if(!(u instanceof U.TFolder))throw new Error(`${s} is a file, not a folder.`);return u}class Gs extends lo{getSuggestions(s){const u=s.trim().toLowerCase();return co(this.app.vault,l=>l.path.toLowerCase().contains(u))}renderSuggestion(s,u){u.setText(s.path)}selectSuggestion(s){this.inputEl.value=s.path,this.inputEl.trigger("input"),this.close()}}class ur{#e;#t;constructor(s){this.#t=s.app.vault,this.#e=s}getResourcePath(s){return this.#e.app.vault.getResourcePath(s)}getAbsolutePath(s){return Hs.resolve(this.#t.adapter.basePath,s)}getCachePath(...s){return this.join(this.#e.settings.cache_folder,"__components__",...s)}join(...s){return U.normalizePath(Hs.join(...s))}resolvePath(s){return String.isString(s)?s:s.path}resolveFile(s){return s instanceof U.TFile?s:this.#t.getFileByPath(s)}async#n(s){return await this.#t.adapter.exists(s)}async#r(s){return!await this.#t.adapter.exists(s)}async exists(s){return this.#n(s)}async missing(s){return this.#r(s)}async remove(s){await this.#t.adapter.remove(s)}async read(s){return await this.#t.adapter.read(s)}async edit(s,u){const l=this.resolvePath(s),h=await this.#t.adapter.read(l);await this.#t.adapter.write(l,u(h))}async copy(s,u,l){const h=this.resolvePath(s);if(!l)return this.#t.adapter.copy(h,u);const p=await this.#t.adapter.read(h);await this.#t.adapter.write(u,l(p))}async renewFolder(s){const u=this.resolvePath(s);await this.#n(u)&&await this.#t.adapter.rmdir(u,!0),await this.#r(u)&&await this.#t.adapter.mkdir(u)}async getFileHash(s,u=6){const l=this.resolvePath(s),h=await this.#t.adapter.read(l),p=ni.createHash("sha256").update(h).digest("hex");return u<1?p:p.substring(0,u)}}class bt{_values=new Map;clear(){this._values=new Map}keys(){return this._values.keys()}*keysWithValue(s){if(typeof s!="function"){for(const[u,l]of this._values.entries())l.includes(s)&&(yield u);return}for(const[u,l]of this._values.entries())l.some(s)&&(yield u)}values(){return this._values.values()}entries(){return this._values.entries()}has(s){return this._values.has(s)}hasValue(s){for(const u of this._values.values())if(u.includes(s))return!0;return!1}hasKeyValue(s,u){return this.get(s).includes(u)}get(s){return this._values.get(s)??[]}getFirst(s){return this.get(s).first()}store(s){this.has(s)||this._values.set(s,[])}prepend(s,u){const l=this.get(s);l.unshift(u),this._values.set(s,l.unique())}push(s,u){const l=this.get(s).reverse();l.unshift(u),this._values.set(s,l.unique().reverse())}static fromReversedObject(s){const u=new bt;for(const[l,h]of Object.entries(s))u.push(h,l);return u}}function mi(f){return typeof f=="object"&&f!==null}function mo(f){return f.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}function po(f){return ni.createHash("sha256").update(f).digest("hex").substring(0,64)}function go(f){const s=yo(f.settings);return{components_enabled:s,components_matchers:Eo(f.settings,s)}}function Fo(f){return f.split(/[|;,\s]+/gi).reduce((s,u)=>(u=u.replace(/\W*/gi,""),u.length>0&&!s.includes(u)&&s.push(u),s),[])}function yo(f){const s=new bt;for(const u of f.components_config)if(u.enabled)for(const l of Fo(u.names))s.hasValue(l)||s.push(u.id,l);return s}function Eo(f,s){const u=[];for(const l of f.components_config)l.enabled&&u.push({id:l.id,path:l.path,test:[].contains.bind(s.get(l.id))});return u}function wo(f,s,u){const l=ho(f,s);return l.sort((h,p)=>h.path.localeCompare(p.path,"en")),l.map(h=>{const p=u.find(F=>F.id===h.name);return{id:h.name,path:h.path,names:p?.names??h.basename.replaceAll(".","_"),enabled:p?.enabled??!1}})}function Co(f,s){return createEl(f,void 0,u=>u.append(s))}function Js(f,s,u){return f.createEl(s,void 0,l=>l.append(u))}class bo{#e;#t;#n=[];constructor(s,u){this.#e=s,this.#o(u),this.#t=u.createDiv("components-list"),this.#u()}async#r(s){this.#e.settings.components_config=s,await this.#e.saveSettings(),this.#l()}#s(s,u){const l=this.#e.settings.components_config.map(h=>s.includes(h.id)?{...h,enabled:u}:h);this.#r(l)}#i(s,u,l){const h=this.#e.settings.components_config.map(p=>p.id===s?{...p,[u]:l}:p);this.#r(h)}#u(){const s=wo(this.#e.app.vault,this.#e.settings.components_folder,this.#e.settings.components_config);this.#n=s.map(u=>u.id),this.#r(s)}#o(s){let u=null;const l=new U.Setting(s);l.setName("Vault Components"),l.setDesc("The entries are components found on the vault."),l.addExtraButton(h=>{h.setIcon("reset").setTooltip("Refresh"),h.onClick(()=>{this.#u(),u?.setValue("")})}),l.addSearch(h=>{u=h,h.onChange(p=>{let F=!1;const b=[];for(const g of this.#e.settings.components_config){const I=p?g.path.contains(p):!0,L=this.#n.includes(g.id);I?(b.push(g.id),L||(F=!0)):L&&(F=!0)}F&&(this.#n=b,this.#l())})}),l.addExtraButton(h=>{h.setIcon("badge-check").setTooltip("Enable Listed Components"),h.onClick(()=>this.#s(this.#n,!0))}),l.addExtraButton(h=>{h.setIcon("badge-x").setTooltip("Disable Listed Components"),h.onClick(()=>this.#s(this.#n,!1))})}#l(){this.#t.empty();for(const s of this.#e.settings.components_config){if(!this.#n.includes(s.id))continue;const u=new U.Setting(this.#t);u.setName(this.#c(s.id,s.enabled)),u.setDesc(this.#a(s.id)),u.addExtraButton(l=>{l.setTooltip("Edit names"),l.setIcon("pencil"),l.onClick(()=>this.#d(u,s))}),u.addToggle(l=>{l.setTooltip("Is enabled?"),l.setValue(s.enabled),l.onChange(this.#s.bind(this,[s.id]))})}}#c(s,u){const l=createFragment();return l.append(`${u?"Enabled":"Disabled"} component: `,Co("code",s)),l}#a(s){const u=createFragment(),l=u.createDiv("components-names");l.append("Usage: ");const h=this.#e.state.components_enabled.get(s);if(h.length===0)return Js(l,"b","Not available"),u;for(let p=0;p<h.length;p++)p>0&&l.appendText(" | "),Js(l,"code",h[p]);return u}#f=null;#d(s,u){this.#f?.remove(),this.#f=s.settingEl.createDiv("component-form");let l=null;const h=new U.Setting(this.#f);h.addTextArea(p=>{l=p,p.setValue(u.names)}),h.addButton(p=>{p.setButtonText("Cancel"),p.onClick(()=>this.#f?.remove())}),h.addButton(p=>{p.setButtonText("Save"),p.onClick(()=>{this.#i(u.id,"names",l?.getValue()??"")})})}}const vo={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"};function yn(f,s){return createFragment(u=>{u.appendText(s+". Check the "),u.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-components/blob/main/docs/settings.md#${mo(f)}`}),u.appendText(".")})}class So extends U.PluginSettingTab{#e;#t;constructor(s){super(s.app,s),this.#e=s,this.#t=new ur(s)}async#n(s,u){this.#e.settings[s]=u,await this.#e.saveSettings()}display(){this.containerEl.empty(),this.containerEl.addClass("components-settings"),new U.Setting(this.containerEl).setName("Plugin Settings").setHeading(),this.#r(),new U.Setting(this.containerEl).setName("Codeblock Settings").setHeading(),this.#s(),new U.Setting(this.containerEl).setName("Component Settings").setHeading(),this.#i(),new bo(this.#e,this.containerEl)}#r(){const s=new U.Setting(this.containerEl);s.setName("Plugging LogLevel"),s.setDesc(yn("Plugging LogLevel","To check the plugin logs")),s.addDropdown(l=>{l.addOptions(vo),l.setValue(this.#e.settings.plugin_level),l.onChange(this.#n.bind(this,"plugin_level"))});const u=new U.Setting(this.containerEl);u.setName("Design mode"),u.setDesc(yn("Design mode","Enable design mode only if you're editing your components code. It will not disabled until you close the app")),u.addToggle(l=>{const h=this.#e.isDesignModeEnabled;l.setDisabled(h),l.setValue(h),l.onChange(()=>{h||(l.setDisabled(!0),this.#e.enableDesignMode())})})}#s(){const s=new U.Setting(this.containerEl);s.setName("Custom Codeblocks"),s.setDesc(yn("Custom Codeblocks","Allows the usage of the components custom names as codeblocks identifiers")),s.addToggle(p=>{p.setValue(this.#e.settings.enable_codeblocks),p.onChange(this.#n.bind(this,"enable_codeblocks"))});let u=null;const l=new U.Setting(this.containerEl);l.setName("Enable Codeblocks Separators"),l.setDesc(yn("Enable Codeblocks Separators","Allows the usage of separators inside codeblocks")),l.addToggle(p=>{p.setValue(this.#e.settings.enable_separators),p.onChange(F=>{this.#n("enable_separators",F),u?.setDisabled(!F)})});const h=new U.Setting(this.containerEl);h.setName("Codeblocks Separator"),h.setDesc("Separator to use inside codeblocks."),h.addText(p=>{u=p,p.setDisabled(!this.#e.settings.enable_separators),p.setValue(this.#e.settings.usage_separator),p.onChange(this.#n.bind(this,"usage_separator"))})}#i(){const s=(g,I,L)=>{I.onChange(async H=>{if(L.empty(),!H||H==="/"||await this.#t.missing(H)){I.inputEl.classList.add("invalid-value"),L.appendText("Invalid path.");return}I.inputEl.classList.remove("invalid-value"),this.#n(g,H)})},u=createFragment();u.append("Files in this directory will be taken as components.");const l=u.createEl("p","invalid-value"),h=new U.Setting(this.containerEl);h.setName("Components templates folder"),h.setDesc(u),h.addText(g=>{new Gs(this.app,g.inputEl,this.containerEl),g.setPlaceholder("Example: folder1/folder2"),g.setValue(this.#e.settings.components_folder),s("components_folder",g,l)});const p=createFragment();p.append("Folder used to cache pre-processed components.");const F=p.createEl("p","invalid-value"),b=new U.Setting(this.containerEl);b.setName("Components cache folder"),b.setDesc(p),b.addText(g=>{new Gs(this.app,g.inputEl,this.containerEl),g.setPlaceholder("Example: folder1/folder2"),g.setValue(this.#e.settings.cache_folder),s("cache_folder",g,F)})}}class it extends Error{name="ComponentError";code;constructor(s,u){super(s),this.code=u.code,this.cause=u.cause}toString(){if(!this.cause)return`${this.name}: ${this.message}`;const s=`${this.name}: ${this.message}, cause:

`;return this.cause instanceof Error?`${s}${this.cause}`:`${s}${JSON.stringify(this.cause)}`}}class Ks extends it{constructor(s){super(s,{code:"disabled-component"})}}class To{id="yaml";test(s){return s.startsWith("-")?!0:/^\w+:/.test(s)}parse(s,u){return Promise.resolve(U.parseYaml(s))}}class xo{id="json";test(s){return/^\s*[[{]/gi.test(s)}parse(s,u){return Promise.resolve(JSON.parse(s))}}var Qs=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},Te={},Xs;function Oo(){if(Xs)return Te;Xs=1,Object.defineProperty(Te,"__esModule",{value:!0});class f extends Error{}class s extends f{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class u extends f{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class l extends f{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class h extends f{}class p extends f{constructor(e){super(`Invalid unit ${e}`)}}class F extends f{}class b extends f{constructor(){super("Zone is an abstract class")}}const g="numeric",I="short",L="long",H={year:g,month:g,day:g},ne={year:g,month:I,day:g},z={year:g,month:I,day:g,weekday:I},fe={year:g,month:L,day:g},ie={year:g,month:L,day:g,weekday:L},me={hour:g,minute:g},Ge={hour:g,minute:g,second:g},Je={hour:g,minute:g,second:g,timeZoneName:I},ut={hour:g,minute:g,second:g,timeZoneName:L},at={hour:g,minute:g,hourCycle:"h23"},ke={hour:g,minute:g,second:g,hourCycle:"h23"},fr={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:I},dr={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:L},hr={year:g,month:g,day:g,hour:g,minute:g},Dr={year:g,month:g,day:g,hour:g,minute:g,second:g},mr={year:g,month:I,day:g,hour:g,minute:g},pr={year:g,month:I,day:g,hour:g,minute:g,second:g},gi={year:g,month:I,day:g,weekday:I,hour:g,minute:g},gr={year:g,month:L,day:g,hour:g,minute:g,timeZoneName:I},Fr={year:g,month:L,day:g,hour:g,minute:g,second:g,timeZoneName:I},yr={year:g,month:L,day:g,weekday:L,hour:g,minute:g,timeZoneName:L},Er={year:g,month:L,day:g,weekday:L,hour:g,minute:g,second:g,timeZoneName:L};class St{get type(){throw new b}get name(){throw new b}get ianaName(){return this.name}get isUniversal(){throw new b}offsetName(e,n){throw new b}formatOffset(e,n){throw new b}offset(e){throw new b}equals(e){throw new b}get isValid(){throw new b}}let vn=null;class Ut extends St{static get instance(){return vn===null&&(vn=new Ut),vn}get type(){return"system"}get name(){return new Intl.DateTimeFormat().resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:n,locale:r}){return Mr(e,n,r)}formatOffset(e,n){return kt(this.offset(e),n)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return e.type==="system"}get isValid(){return!0}}let Zt={};function Fi(t){return Zt[t]||(Zt[t]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),Zt[t]}const yi={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};function Ei(t,e){const n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,i,a,o,m,E,C,O]=r;return[o,i,a,m,E,C,O]}function wi(t,e){const n=t.formatToParts(e),r=[];for(let i=0;i<n.length;i++){const{type:a,value:o}=n[i],m=yi[a];a==="era"?r[m]=o:j(m)||(r[m]=parseInt(o,10))}return r}let qt={};class Re extends St{static create(e){return qt[e]||(qt[e]=new Re(e)),qt[e]}static resetCache(){qt={},Zt={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch{return!1}}constructor(e){super(),this.zoneName=e,this.valid=Re.isValidZone(e)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:n,locale:r}){return Mr(e,n,r,this.name)}formatOffset(e,n){return kt(this.offset(e),n)}offset(e){const n=new Date(e);if(isNaN(n))return NaN;const r=Fi(this.name);let[i,a,o,m,E,C,O]=r.formatToParts?wi(r,n):Ei(r,n);m==="BC"&&(i=-Math.abs(i)+1);const N=Jt({year:i,month:a,day:o,hour:E===24?0:E,minute:C,second:O,millisecond:0});let M=+n;const V=M%1e3;return M-=V>=0?V:1e3+V,(N-M)/(60*1e3)}equals(e){return e.type==="iana"&&e.name===this.name}get isValid(){return this.valid}}let wr={};function Ci(t,e={}){const n=JSON.stringify([t,e]);let r=wr[n];return r||(r=new Intl.ListFormat(t,e),wr[n]=r),r}let Sn={};function Tn(t,e={}){const n=JSON.stringify([t,e]);let r=Sn[n];return r||(r=new Intl.DateTimeFormat(t,e),Sn[n]=r),r}let xn={};function bi(t,e={}){const n=JSON.stringify([t,e]);let r=xn[n];return r||(r=new Intl.NumberFormat(t,e),xn[n]=r),r}let On={};function vi(t,e={}){const{base:n,...r}=e,i=JSON.stringify([t,r]);let a=On[i];return a||(a=new Intl.RelativeTimeFormat(t,e),On[i]=a),a}let Tt=null;function Si(){return Tt||(Tt=new Intl.DateTimeFormat().resolvedOptions().locale,Tt)}function Ti(t){const e=t.indexOf("-x-");e!==-1&&(t=t.substring(0,e));const n=t.indexOf("-u-");if(n===-1)return[t];{let r,i;try{r=Tn(t).resolvedOptions(),i=t}catch{const E=t.substring(0,n);r=Tn(E).resolvedOptions(),i=E}const{numberingSystem:a,calendar:o}=r;return[i,a,o]}}function xi(t,e,n){return(n||e)&&(t.includes("-u-")||(t+="-u"),n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`)),t}function Oi(t){const e=[];for(let n=1;n<=12;n++){const r=A.utc(2009,n,1);e.push(t(r))}return e}function ki(t){const e=[];for(let n=1;n<=7;n++){const r=A.utc(2016,11,13+n);e.push(t(r))}return e}function zt(t,e,n,r){const i=t.listingMode();return i==="error"?null:i==="en"?n(e):r(e)}function Bi(t){return t.numberingSystem&&t.numberingSystem!=="latn"?!1:t.numberingSystem==="latn"||!t.locale||t.locale.startsWith("en")||new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem==="latn"}class Mi{constructor(e,n,r){this.padTo=r.padTo||0,this.floor=r.floor||!1;const{padTo:i,floor:a,...o}=r;if(!n||Object.keys(o).length>0){const m={useGrouping:!1,...r};r.padTo>0&&(m.minimumIntegerDigits=r.padTo),this.inf=bi(e,m)}}format(e){if(this.inf){const n=this.floor?Math.floor(e):e;return this.inf.format(n)}else{const n=this.floor?Math.floor(e):Mn(e,3);return Q(n,this.padTo)}}}class Ai{constructor(e,n,r){this.opts=r,this.originalZone=void 0;let i;if(this.opts.timeZone)this.dt=e;else if(e.zone.type==="fixed"){const o=-1*(e.offset/60),m=o>=0?`Etc/GMT+${o}`:`Etc/GMT${o}`;e.offset!==0&&Re.create(m).valid?(i=m,this.dt=e):(i="UTC",this.dt=e.offset===0?e:e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone)}else e.zone.type==="system"?this.dt=e:e.zone.type==="iana"?(this.dt=e,i=e.zone.name):(i="UTC",this.dt=e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone);const a={...this.opts};a.timeZone=a.timeZone||i,this.dtf=Tn(n,a)}format(){return this.originalZone?this.formatToParts().map(({value:e})=>e).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const e=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?e.map(n=>{if(n.type==="timeZoneName"){const r=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...n,value:r}}else return n}):e}resolvedOptions(){return this.dtf.resolvedOptions()}}class Ni{constructor(e,n,r){this.opts={style:"long",...r},!n&&kr()&&(this.rtf=vi(e,r))}format(e,n){return this.rtf?this.rtf.format(e,n):Ji(n,e,this.opts.numeric,this.opts.style!=="long")}formatToParts(e,n){return this.rtf?this.rtf.formatToParts(e,n):[]}}class Y{static fromOpts(e){return Y.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)}static create(e,n,r,i=!1){const a=e||K.defaultLocale,o=a||(i?"en-US":Si()),m=n||K.defaultNumberingSystem,E=r||K.defaultOutputCalendar;return new Y(o,m,E,a)}static resetCache(){Tt=null,Sn={},xn={},On={}}static fromObject({locale:e,numberingSystem:n,outputCalendar:r}={}){return Y.create(e,n,r)}constructor(e,n,r,i){const[a,o,m]=Ti(e);this.locale=a,this.numberingSystem=n||o||null,this.outputCalendar=r||m||null,this.intl=xi(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=i,this.fastNumbersCached=null}get fastNumbers(){return this.fastNumbersCached==null&&(this.fastNumbersCached=Bi(this)),this.fastNumbersCached}listingMode(){const e=this.isEnglish(),n=(this.numberingSystem===null||this.numberingSystem==="latn")&&(this.outputCalendar===null||this.outputCalendar==="gregory");return e&&n?"en":"intl"}clone(e){return!e||Object.getOwnPropertyNames(e).length===0?this:Y.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1)}redefaultToEN(e={}){return this.clone({...e,defaultToEN:!0})}redefaultToSystem(e={}){return this.clone({...e,defaultToEN:!1})}months(e,n=!1){return zt(this,e,Ir,()=>{const r=n?{month:e,day:"numeric"}:{month:e},i=n?"format":"standalone";return this.monthsCache[i][e]||(this.monthsCache[i][e]=Oi(a=>this.extract(a,r,"month"))),this.monthsCache[i][e]})}weekdays(e,n=!1){return zt(this,e,_r,()=>{const r=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},i=n?"format":"standalone";return this.weekdaysCache[i][e]||(this.weekdaysCache[i][e]=ki(a=>this.extract(a,r,"weekday"))),this.weekdaysCache[i][e]})}meridiems(){return zt(this,void 0,()=>$r,()=>{if(!this.meridiemCache){const e={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[A.utc(2016,11,13,9),A.utc(2016,11,13,19)].map(n=>this.extract(n,e,"dayperiod"))}return this.meridiemCache})}eras(e){return zt(this,e,Pr,()=>{const n={era:e};return this.eraCache[e]||(this.eraCache[e]=[A.utc(-40,1,1),A.utc(2017,1,1)].map(r=>this.extract(r,n,"era"))),this.eraCache[e]})}extract(e,n,r){const i=this.dtFormatter(e,n),a=i.formatToParts(),o=a.find(m=>m.type.toLowerCase()===r);return o?o.value:null}numberFormatter(e={}){return new Mi(this.intl,e.forceSimple||this.fastNumbers,e)}dtFormatter(e,n={}){return new Ai(e,this.intl,n)}relFormatter(e={}){return new Ni(this.intl,this.isEnglish(),e)}listFormatter(e={}){return Ci(this.intl,e)}isEnglish(){return this.locale==="en"||this.locale.toLowerCase()==="en-us"||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}}let kn=null;class le extends St{static get utcInstance(){return kn===null&&(kn=new le(0)),kn}static instance(e){return e===0?le.utcInstance:new le(e)}static parseSpecifier(e){if(e){const n=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(n)return new le(Qt(n[1],n[2]))}return null}constructor(e){super(),this.fixed=e}get type(){return"fixed"}get name(){return this.fixed===0?"UTC":`UTC${kt(this.fixed,"narrow")}`}get ianaName(){return this.fixed===0?"Etc/UTC":`Etc/GMT${kt(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(e,n){return kt(this.fixed,n)}get isUniversal(){return!0}offset(){return this.fixed}equals(e){return e.type==="fixed"&&e.fixed===this.fixed}get isValid(){return!0}}class Ii extends St{constructor(e){super(),this.zoneName=e}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function He(t,e){if(j(t)||t===null)return e;if(t instanceof St)return t;if(Li(t)){const n=t.toLowerCase();return n==="default"?e:n==="local"||n==="system"?Ut.instance:n==="utc"||n==="gmt"?le.utcInstance:le.parseSpecifier(n)||Re.create(t)}else return Ke(t)?le.instance(t):typeof t=="object"&&"offset"in t&&typeof t.offset=="function"?t:new Ii(t)}let Cr=()=>Date.now(),br="system",vr=null,Sr=null,Tr=null,xr=60,Or;class K{static get now(){return Cr}static set now(e){Cr=e}static set defaultZone(e){br=e}static get defaultZone(){return He(br,Ut.instance)}static get defaultLocale(){return vr}static set defaultLocale(e){vr=e}static get defaultNumberingSystem(){return Sr}static set defaultNumberingSystem(e){Sr=e}static get defaultOutputCalendar(){return Tr}static set defaultOutputCalendar(e){Tr=e}static get twoDigitCutoffYear(){return xr}static set twoDigitCutoffYear(e){xr=e%100}static get throwOnInvalid(){return Or}static set throwOnInvalid(e){Or=e}static resetCaches(){Y.resetCache(),Re.resetCache()}}function j(t){return typeof t>"u"}function Ke(t){return typeof t=="number"}function Yt(t){return typeof t=="number"&&t%1===0}function Li(t){return typeof t=="string"}function Ri(t){return Object.prototype.toString.call(t)==="[object Date]"}function kr(){try{return typeof Intl<"u"&&!!Intl.RelativeTimeFormat}catch{return!1}}function _i(t){return Array.isArray(t)?t:[t]}function Br(t,e,n){if(t.length!==0)return t.reduce((r,i)=>{const a=[e(i),i];return r&&n(r[0],a[0])===r[0]?r:a},null)[1]}function $i(t,e){return e.reduce((n,r)=>(n[r]=t[r],n),{})}function ot(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function _e(t,e,n){return Yt(t)&&t>=e&&t<=n}function Pi(t,e){return t-e*Math.floor(t/e)}function Q(t,e=2){const n=t<0;let r;return n?r="-"+(""+-t).padStart(e,"0"):r=(""+t).padStart(e,"0"),r}function Ue(t){if(!(j(t)||t===null||t===""))return parseInt(t,10)}function Qe(t){if(!(j(t)||t===null||t===""))return parseFloat(t)}function Bn(t){if(!(j(t)||t===null||t==="")){const e=parseFloat("0."+t)*1e3;return Math.floor(e)}}function Mn(t,e,n=!1){const r=10**e;return(n?Math.trunc:Math.round)(t*r)/r}function xt(t){return t%4===0&&(t%100!==0||t%400===0)}function Ot(t){return xt(t)?366:365}function Gt(t,e){const n=Pi(e-1,12)+1,r=t+(e-n)/12;return n===2?xt(r)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function Jt(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(t.year,t.month-1,t.day)),+e}function Kt(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,r=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return e===4||r===3?53:52}function An(t){return t>99?t:t>K.twoDigitCutoffYear?1900+t:2e3+t}function Mr(t,e,n,r=null){const i=new Date(t),a={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(a.timeZone=r);const o={timeZoneName:e,...a},m=new Intl.DateTimeFormat(n,o).formatToParts(i).find(E=>E.type.toLowerCase()==="timezonename");return m?m.value:null}function Qt(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const r=parseInt(e,10)||0,i=n<0||Object.is(n,-0)?-r:r;return n*60+i}function Ar(t){const e=Number(t);if(typeof t=="boolean"||t===""||Number.isNaN(e))throw new F(`Invalid unit value ${t}`);return e}function Xt(t,e){const n={};for(const r in t)if(ot(t,r)){const i=t[r];if(i==null)continue;n[e(r)]=Ar(i)}return n}function kt(t,e){const n=Math.trunc(Math.abs(t/60)),r=Math.trunc(Math.abs(t%60)),i=t>=0?"+":"-";switch(e){case"short":return`${i}${Q(n,2)}:${Q(r,2)}`;case"narrow":return`${i}${n}${r>0?`:${r}`:""}`;case"techie":return`${i}${Q(n,2)}${Q(r,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function en(t){return $i(t,["hour","minute","second","millisecond"])}const Vi=["January","February","March","April","May","June","July","August","September","October","November","December"],Nr=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ji=["J","F","M","A","M","J","J","A","S","O","N","D"];function Ir(t){switch(t){case"narrow":return[...ji];case"short":return[...Nr];case"long":return[...Vi];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const Lr=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Rr=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Wi=["M","T","W","T","F","S","S"];function _r(t){switch(t){case"narrow":return[...Wi];case"short":return[...Rr];case"long":return[...Lr];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const $r=["AM","PM"],Hi=["Before Christ","Anno Domini"],Ui=["BC","AD"],Zi=["B","A"];function Pr(t){switch(t){case"narrow":return[...Zi];case"short":return[...Ui];case"long":return[...Hi];default:return null}}function qi(t){return $r[t.hour<12?0:1]}function zi(t,e){return _r(e)[t.weekday-1]}function Yi(t,e){return Ir(e)[t.month-1]}function Gi(t,e){return Pr(e)[t.year<0?0:1]}function Ji(t,e,n="always",r=!1){const i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},a=["hours","minutes","seconds"].indexOf(t)===-1;if(n==="auto"&&a){const R=t==="days";switch(e){case 1:return R?"tomorrow":`next ${i[t][0]}`;case-1:return R?"yesterday":`last ${i[t][0]}`;case 0:return R?"today":`this ${i[t][0]}`}}const o=Object.is(e,-0)||e<0,m=Math.abs(e),E=m===1,C=i[t],O=r?E?C[1]:C[2]||C[1]:E?i[t][0]:t;return o?`${m} ${O} ago`:`in ${m} ${O}`}function Vr(t,e){let n="";for(const r of t)r.literal?n+=r.val:n+=e(r.val);return n}const Ki={D:H,DD:ne,DDD:fe,DDDD:ie,t:me,tt:Ge,ttt:Je,tttt:ut,T:at,TT:ke,TTT:fr,TTTT:dr,f:hr,ff:mr,fff:gr,ffff:yr,F:Dr,FF:pr,FFF:Fr,FFFF:Er};class ue{static create(e,n={}){return new ue(e,n)}static parseFormat(e){let n=null,r="",i=!1;const a=[];for(let o=0;o<e.length;o++){const m=e.charAt(o);m==="'"?(r.length>0&&a.push({literal:i||/^\s+$/.test(r),val:r}),n=null,r="",i=!i):i||m===n?r+=m:(r.length>0&&a.push({literal:/^\s+$/.test(r),val:r}),r=m,n=m)}return r.length>0&&a.push({literal:i||/^\s+$/.test(r),val:r}),a}static macroTokenToFormatOpts(e){return Ki[e]}constructor(e,n){this.opts=n,this.loc=e,this.systemLoc=null}formatWithSystemDefault(e,n){return this.systemLoc===null&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,{...this.opts,...n}).format()}dtFormatter(e,n={}){return this.loc.dtFormatter(e,{...this.opts,...n})}formatDateTime(e,n){return this.dtFormatter(e,n).format()}formatDateTimeParts(e,n){return this.dtFormatter(e,n).formatToParts()}formatInterval(e,n){return this.dtFormatter(e.start,n).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate())}resolvedOptions(e,n){return this.dtFormatter(e,n).resolvedOptions()}num(e,n=0){if(this.opts.forceSimple)return Q(e,n);const r={...this.opts};return n>0&&(r.padTo=n),this.loc.numberFormatter(r).format(e)}formatDateTimeFromString(e,n){const r=this.loc.listingMode()==="en",i=this.loc.outputCalendar&&this.loc.outputCalendar!=="gregory",a=(M,V)=>this.loc.extract(e,M,V),o=M=>e.isOffsetFixed&&e.offset===0&&M.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,M.format):"",m=()=>r?qi(e):a({hour:"numeric",hourCycle:"h12"},"dayperiod"),E=(M,V)=>r?Yi(e,M):a(V?{month:M}:{month:M,day:"numeric"},"month"),C=(M,V)=>r?zi(e,M):a(V?{weekday:M}:{weekday:M,month:"long",day:"numeric"},"weekday"),O=M=>{const V=ue.macroTokenToFormatOpts(M);return V?this.formatWithSystemDefault(e,V):M},R=M=>r?Gi(e,M):a({era:M},"era"),N=M=>{switch(M){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12===0?12:e.hour%12);case"hh":return this.num(e.hour%12===0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return o({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return o({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return o({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this.loc.locale});case"z":return e.zoneName;case"a":return m();case"d":return i?a({day:"numeric"},"day"):this.num(e.day);case"dd":return i?a({day:"2-digit"},"day"):this.num(e.day,2);case"c":return this.num(e.weekday);case"ccc":return C("short",!0);case"cccc":return C("long",!0);case"ccccc":return C("narrow",!0);case"E":return this.num(e.weekday);case"EEE":return C("short",!1);case"EEEE":return C("long",!1);case"EEEEE":return C("narrow",!1);case"L":return i?a({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return i?a({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return E("short",!0);case"LLLL":return E("long",!0);case"LLLLL":return E("narrow",!0);case"M":return i?a({month:"numeric"},"month"):this.num(e.month);case"MM":return i?a({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return E("short",!1);case"MMMM":return E("long",!1);case"MMMMM":return E("narrow",!1);case"y":return i?a({year:"numeric"},"year"):this.num(e.year);case"yy":return i?a({year:"2-digit"},"year"):this.num(e.year.toString().slice(-2),2);case"yyyy":return i?a({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return i?a({year:"numeric"},"year"):this.num(e.year,6);case"G":return R("short");case"GG":return R("long");case"GGGGG":return R("narrow");case"kk":return this.num(e.weekYear.toString().slice(-2),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return O(M)}};return Vr(ue.parseFormat(n),N)}formatDurationFromString(e,n){const r=E=>{switch(E[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},i=E=>C=>{const O=r(C);return O?this.num(E.get(O),C.length):C},a=ue.parseFormat(n),o=a.reduce((E,{literal:C,val:O})=>C?E:E.concat(O),[]),m=e.shiftTo(...o.map(r).filter(E=>E));return Vr(a,i(m))}}class Fe{constructor(e,n){this.reason=e,this.explanation=n}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const jr=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function lt(...t){const e=t.reduce((n,r)=>n+r.source,"");return RegExp(`^${e}$`)}function ct(...t){return e=>t.reduce(([n,r,i],a)=>{const[o,m,E]=a(e,i);return[{...n,...o},m||r,E]},[{},null,1]).slice(0,2)}function ft(t,...e){if(t==null)return[null,null];for(const[n,r]of e){const i=n.exec(t);if(i)return r(i)}return[null,null]}function Wr(...t){return(e,n)=>{const r={};let i;for(i=0;i<t.length;i++)r[t[i]]=Ue(e[n+i]);return[r,null,n+i]}}const Hr=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,Qi=`(?:${Hr.source}?(?:\\[(${jr.source})\\])?)?`,Nn=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,Ur=RegExp(`${Nn.source}${Qi}`),In=RegExp(`(?:T${Ur.source})?`),Xi=/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,eu=/(\d{4})-?W(\d\d)(?:-?(\d))?/,tu=/(\d{4})-?(\d{3})/,nu=Wr("weekYear","weekNumber","weekDay"),ru=Wr("year","ordinal"),su=/(\d{4})-(\d\d)-(\d\d)/,Zr=RegExp(`${Nn.source} ?(?:${Hr.source}|(${jr.source}))?`),iu=RegExp(`(?: ${Zr.source})?`);function dt(t,e,n){const r=t[e];return j(r)?n:Ue(r)}function uu(t,e){return[{year:dt(t,e),month:dt(t,e+1,1),day:dt(t,e+2,1)},null,e+3]}function ht(t,e){return[{hours:dt(t,e,0),minutes:dt(t,e+1,0),seconds:dt(t,e+2,0),milliseconds:Bn(t[e+3])},null,e+4]}function Bt(t,e){const n=!t[e]&&!t[e+1],r=Qt(t[e+1],t[e+2]),i=n?null:le.instance(r);return[{},i,e+3]}function Mt(t,e){const n=t[e]?Re.create(t[e]):null;return[{},n,e+1]}const au=RegExp(`^T?${Nn.source}$`),ou=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function lu(t){const[e,n,r,i,a,o,m,E,C]=t,O=e[0]==="-",R=E&&E[0]==="-",N=(M,V=!1)=>M!==void 0&&(V||M&&O)?-M:M;return[{years:N(Qe(n)),months:N(Qe(r)),weeks:N(Qe(i)),days:N(Qe(a)),hours:N(Qe(o)),minutes:N(Qe(m)),seconds:N(Qe(E),E==="-0"),milliseconds:N(Bn(C),R)}]}const cu={GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Ln(t,e,n,r,i,a,o){const m={year:e.length===2?An(Ue(e)):Ue(e),month:Nr.indexOf(n)+1,day:Ue(r),hour:Ue(i),minute:Ue(a)};return o&&(m.second=Ue(o)),t&&(m.weekday=t.length>3?Lr.indexOf(t)+1:Rr.indexOf(t)+1),m}const fu=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function du(t){const[,e,n,r,i,a,o,m,E,C,O,R]=t,N=Ln(e,i,r,n,a,o,m);let M;return E?M=cu[E]:C?M=0:M=Qt(O,R),[N,new le(M)]}function hu(t){return t.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}const Du=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,mu=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,pu=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function qr(t){const[,e,n,r,i,a,o,m]=t;return[Ln(e,i,r,n,a,o,m),le.utcInstance]}function gu(t){const[,e,n,r,i,a,o,m]=t;return[Ln(e,m,n,r,i,a,o),le.utcInstance]}const Fu=lt(Xi,In),yu=lt(eu,In),Eu=lt(tu,In),wu=lt(Ur),zr=ct(uu,ht,Bt,Mt),Cu=ct(nu,ht,Bt,Mt),bu=ct(ru,ht,Bt,Mt),vu=ct(ht,Bt,Mt);function Su(t){return ft(t,[Fu,zr],[yu,Cu],[Eu,bu],[wu,vu])}function Tu(t){return ft(hu(t),[fu,du])}function xu(t){return ft(t,[Du,qr],[mu,qr],[pu,gu])}function Ou(t){return ft(t,[ou,lu])}const ku=ct(ht);function Bu(t){return ft(t,[au,ku])}const Mu=lt(su,iu),Au=lt(Zr),Nu=ct(ht,Bt,Mt);function Iu(t){return ft(t,[Mu,zr],[Au,Nu])}const Yr="Invalid Duration",Gr={weeks:{days:7,hours:7*24,minutes:7*24*60,seconds:7*24*60*60,milliseconds:7*24*60*60*1e3},days:{hours:24,minutes:24*60,seconds:24*60*60,milliseconds:24*60*60*1e3},hours:{minutes:60,seconds:60*60,milliseconds:60*60*1e3},minutes:{seconds:60,milliseconds:60*1e3},seconds:{milliseconds:1e3}},Lu={years:{quarters:4,months:12,weeks:52,days:365,hours:365*24,minutes:365*24*60,seconds:365*24*60*60,milliseconds:365*24*60*60*1e3},quarters:{months:3,weeks:13,days:91,hours:91*24,minutes:91*24*60,seconds:91*24*60*60,milliseconds:91*24*60*60*1e3},months:{weeks:4,days:30,hours:30*24,minutes:30*24*60,seconds:30*24*60*60,milliseconds:30*24*60*60*1e3},...Gr},pe=146097/400,Dt=146097/4800,Ru={years:{quarters:4,months:12,weeks:pe/7,days:pe,hours:pe*24,minutes:pe*24*60,seconds:pe*24*60*60,milliseconds:pe*24*60*60*1e3},quarters:{months:3,weeks:pe/28,days:pe/4,hours:pe*24/4,minutes:pe*24*60/4,seconds:pe*24*60*60/4,milliseconds:pe*24*60*60*1e3/4},months:{weeks:Dt/7,days:Dt,hours:Dt*24,minutes:Dt*24*60,seconds:Dt*24*60*60,milliseconds:Dt*24*60*60*1e3},...Gr},Xe=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],_u=Xe.slice(0).reverse();function Ze(t,e,n=!1){const r={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy,matrix:e.matrix||t.matrix};return new k(r)}function Jr(t,e){let n=e.milliseconds??0;for(const r of _u.slice(1))e[r]&&(n+=e[r]*t[r].milliseconds);return n}function Kr(t,e){const n=Jr(t,e)<0?-1:1;Xe.reduceRight((r,i)=>{if(j(e[i]))return r;if(r){const a=e[r]*n,o=t[i][r],m=Math.floor(a/o);e[i]+=m*n,e[r]-=m*o*n}return i},null),Xe.reduce((r,i)=>{if(j(e[i]))return r;if(r){const a=e[r]%1;e[r]-=a,e[i]+=a*t[r][i]}return i},null)}function $u(t){const e={};for(const[n,r]of Object.entries(t))r!==0&&(e[n]=r);return e}class k{constructor(e){const n=e.conversionAccuracy==="longterm"||!1;let r=n?Ru:Lu;e.matrix&&(r=e.matrix),this.values=e.values,this.loc=e.loc||Y.create(),this.conversionAccuracy=n?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=r,this.isLuxonDuration=!0}static fromMillis(e,n){return k.fromObject({milliseconds:e},n)}static fromObject(e,n={}){if(e==null||typeof e!="object")throw new F(`Duration.fromObject: argument expected to be an object, got ${e===null?"null":typeof e}`);return new k({values:Xt(e,k.normalizeUnit),loc:Y.fromObject(n),conversionAccuracy:n.conversionAccuracy,matrix:n.matrix})}static fromDurationLike(e){if(Ke(e))return k.fromMillis(e);if(k.isDuration(e))return e;if(typeof e=="object")return k.fromObject(e);throw new F(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,n){const[r]=Ou(e);return r?k.fromObject(r,n):k.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,n){const[r]=Bu(e);return r?k.fromObject(r,n):k.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,n=null){if(!e)throw new F("need to specify a reason the Duration is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(K.throwOnInvalid)throw new l(r);return new k({invalid:r})}static normalizeUnit(e){const n={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e&&e.toLowerCase()];if(!n)throw new p(e);return n}static isDuration(e){return e&&e.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(e,n={}){const r={...n,floor:n.round!==!1&&n.floor!==!1};return this.isValid?ue.create(this.loc,r).formatDurationFromString(this,e):Yr}toHuman(e={}){if(!this.isValid)return Yr;const n=Xe.map(r=>{const i=this.values[r];return j(i)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...e,unit:r.slice(0,-1)}).format(i)}).filter(r=>r);return this.loc.listFormatter({type:"conjunction",style:e.listStyle||"narrow",...e}).format(n)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let e="P";return this.years!==0&&(e+=this.years+"Y"),(this.months!==0||this.quarters!==0)&&(e+=this.months+this.quarters*3+"M"),this.weeks!==0&&(e+=this.weeks+"W"),this.days!==0&&(e+=this.days+"D"),(this.hours!==0||this.minutes!==0||this.seconds!==0||this.milliseconds!==0)&&(e+="T"),this.hours!==0&&(e+=this.hours+"H"),this.minutes!==0&&(e+=this.minutes+"M"),(this.seconds!==0||this.milliseconds!==0)&&(e+=Mn(this.seconds+this.milliseconds/1e3,3)+"S"),e==="P"&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;const n=this.toMillis();return n<0||n>=864e5?null:(e={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...e,includeOffset:!1},A.fromMillis(n,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.isValid?Jr(this.matrix,this.values):NaN}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e),r={};for(const i of Xe)(ot(n.values,i)||ot(this.values,i))&&(r[i]=n.get(i)+this.get(i));return Ze(this,{values:r},!0)}minus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e);return this.plus(n.negate())}mapUnits(e){if(!this.isValid)return this;const n={};for(const r of Object.keys(this.values))n[r]=Ar(e(this.values[r],r));return Ze(this,{values:n},!0)}get(e){return this[k.normalizeUnit(e)]}set(e){if(!this.isValid)return this;const n={...this.values,...Xt(e,k.normalizeUnit)};return Ze(this,{values:n})}reconfigure({locale:e,numberingSystem:n,conversionAccuracy:r,matrix:i}={}){const o={loc:this.loc.clone({locale:e,numberingSystem:n}),matrix:i,conversionAccuracy:r};return Ze(this,o)}as(e){return this.isValid?this.shiftTo(e).get(e):NaN}normalize(){if(!this.isValid)return this;const e=this.toObject();return Kr(this.matrix,e),Ze(this,{values:e},!0)}rescale(){if(!this.isValid)return this;const e=$u(this.normalize().shiftToAll().toObject());return Ze(this,{values:e},!0)}shiftTo(...e){if(!this.isValid)return this;if(e.length===0)return this;e=e.map(o=>k.normalizeUnit(o));const n={},r={},i=this.toObject();let a;for(const o of Xe)if(e.indexOf(o)>=0){a=o;let m=0;for(const C in r)m+=this.matrix[C][o]*r[C],r[C]=0;Ke(i[o])&&(m+=i[o]);const E=Math.trunc(m);n[o]=E,r[o]=(m*1e3-E*1e3)/1e3}else Ke(i[o])&&(r[o]=i[o]);for(const o in r)r[o]!==0&&(n[a]+=o===a?r[o]:r[o]/this.matrix[a][o]);return Kr(this.matrix,n),Ze(this,{values:n},!0)}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=this.values[n]===0?0:-this.values[n];return Ze(this,{values:e},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(e){if(!this.isValid||!e.isValid||!this.loc.equals(e.loc))return!1;function n(r,i){return r===void 0||r===0?i===void 0||i===0:r===i}for(const r of Xe)if(!n(this.values[r],e.values[r]))return!1;return!0}}const mt="Invalid Interval";function Pu(t,e){return!t||!t.isValid?G.invalid("missing or invalid start"):!e||!e.isValid?G.invalid("missing or invalid end"):e<t?G.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null}class G{constructor(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}static invalid(e,n=null){if(!e)throw new F("need to specify a reason the Interval is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(K.throwOnInvalid)throw new u(r);return new G({invalid:r})}static fromDateTimes(e,n){const r=Nt(e),i=Nt(n),a=Pu(r,i);return a??new G({start:r,end:i})}static after(e,n){const r=k.fromDurationLike(n),i=Nt(e);return G.fromDateTimes(i,i.plus(r))}static before(e,n){const r=k.fromDurationLike(n),i=Nt(e);return G.fromDateTimes(i.minus(r),i)}static fromISO(e,n){const[r,i]=(e||"").split("/",2);if(r&&i){let a,o;try{a=A.fromISO(r,n),o=a.isValid}catch{o=!1}let m,E;try{m=A.fromISO(i,n),E=m.isValid}catch{E=!1}if(o&&E)return G.fromDateTimes(a,m);if(o){const C=k.fromISO(i,n);if(C.isValid)return G.after(a,C)}else if(E){const C=k.fromISO(r,n);if(C.isValid)return G.before(m,C)}}return G.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isInterval(e){return e&&e.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return this.invalidReason===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(e="milliseconds"){return this.isValid?this.toDuration(e).get(e):NaN}count(e="milliseconds"){if(!this.isValid)return NaN;const n=this.start.startOf(e),r=this.end.startOf(e);return Math.floor(r.diff(n,e).get(e))+(r.valueOf()!==this.end.valueOf())}hasSame(e){return this.isValid?this.isEmpty()||this.e.minus(1).hasSame(this.s,e):!1}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(e){return this.isValid?this.s>e:!1}isBefore(e){return this.isValid?this.e<=e:!1}contains(e){return this.isValid?this.s<=e&&this.e>e:!1}set({start:e,end:n}={}){return this.isValid?G.fromDateTimes(e||this.s,n||this.e):this}splitAt(...e){if(!this.isValid)return[];const n=e.map(Nt).filter(o=>this.contains(o)).sort(),r=[];let{s:i}=this,a=0;for(;i<this.e;){const o=n[a]||this.e,m=+o>+this.e?this.e:o;r.push(G.fromDateTimes(i,m)),i=m,a+=1}return r}splitBy(e){const n=k.fromDurationLike(e);if(!this.isValid||!n.isValid||n.as("milliseconds")===0)return[];let{s:r}=this,i=1,a;const o=[];for(;r<this.e;){const m=this.start.plus(n.mapUnits(E=>E*i));a=+m>+this.e?this.e:m,o.push(G.fromDateTimes(r,a)),r=a,i+=1}return o}divideEqually(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]}overlaps(e){return this.e>e.s&&this.s<e.e}abutsStart(e){return this.isValid?+this.e==+e.s:!1}abutsEnd(e){return this.isValid?+e.e==+this.s:!1}engulfs(e){return this.isValid?this.s<=e.s&&this.e>=e.e:!1}equals(e){return!this.isValid||!e.isValid?!1:this.s.equals(e.s)&&this.e.equals(e.e)}intersection(e){if(!this.isValid)return this;const n=this.s>e.s?this.s:e.s,r=this.e<e.e?this.e:e.e;return n>=r?null:G.fromDateTimes(n,r)}union(e){if(!this.isValid)return this;const n=this.s<e.s?this.s:e.s,r=this.e>e.e?this.e:e.e;return G.fromDateTimes(n,r)}static merge(e){const[n,r]=e.sort((i,a)=>i.s-a.s).reduce(([i,a],o)=>a?a.overlaps(o)||a.abutsStart(o)?[i,a.union(o)]:[i.concat([a]),o]:[i,o],[[],null]);return r&&n.push(r),n}static xor(e){let n=null,r=0;const i=[],a=e.map(E=>[{time:E.s,type:"s"},{time:E.e,type:"e"}]),o=Array.prototype.concat(...a),m=o.sort((E,C)=>E.time-C.time);for(const E of m)r+=E.type==="s"?1:-1,r===1?n=E.time:(n&&+n!=+E.time&&i.push(G.fromDateTimes(n,E.time)),n=null);return G.merge(i)}difference(...e){return G.xor([this].concat(e)).map(n=>this.intersection(n)).filter(n=>n&&!n.isEmpty())}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:mt}toLocaleString(e=H,n={}){return this.isValid?ue.create(this.s.loc.clone(n),e).formatInterval(this):mt}toISO(e){return this.isValid?`${this.s.toISO(e)}/${this.e.toISO(e)}`:mt}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:mt}toISOTime(e){return this.isValid?`${this.s.toISOTime(e)}/${this.e.toISOTime(e)}`:mt}toFormat(e,{separator:n=" – "}={}){return this.isValid?`${this.s.toFormat(e)}${n}${this.e.toFormat(e)}`:mt}toDuration(e,n){return this.isValid?this.e.diff(this.s,e,n):k.invalid(this.invalidReason)}mapEndpoints(e){return G.fromDateTimes(e(this.s),e(this.e))}}class tn{static hasDST(e=K.defaultZone){const n=A.now().setZone(e).set({month:12});return!e.isUniversal&&n.offset!==n.set({month:6}).offset}static isValidIANAZone(e){return Re.isValidZone(e)}static normalizeZone(e){return He(e,K.defaultZone)}static months(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null,outputCalendar:a="gregory"}={}){return(i||Y.create(n,r,a)).months(e)}static monthsFormat(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null,outputCalendar:a="gregory"}={}){return(i||Y.create(n,r,a)).months(e,!0)}static weekdays(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null}={}){return(i||Y.create(n,r,null)).weekdays(e)}static weekdaysFormat(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null}={}){return(i||Y.create(n,r,null)).weekdays(e,!0)}static meridiems({locale:e=null}={}){return Y.create(e).meridiems()}static eras(e="short",{locale:n=null}={}){return Y.create(n,null,"gregory").eras(e)}static features(){return{relative:kr()}}}function Qr(t,e){const n=i=>i.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),r=n(e)-n(t);return Math.floor(k.fromMillis(r).as("days"))}function Vu(t,e,n){const r=[["years",(E,C)=>C.year-E.year],["quarters",(E,C)=>C.quarter-E.quarter+(C.year-E.year)*4],["months",(E,C)=>C.month-E.month+(C.year-E.year)*12],["weeks",(E,C)=>{const O=Qr(E,C);return(O-O%7)/7}],["days",Qr]],i={},a=t;let o,m;for(const[E,C]of r)n.indexOf(E)>=0&&(o=E,i[E]=C(t,e),m=a.plus(i),m>e?(i[E]--,t=a.plus(i),t>e&&(m=t,i[E]--,t=a.plus(i))):t=m);return[t,i,m,o]}function ju(t,e,n,r){let[i,a,o,m]=Vu(t,e,n);const E=e-i,C=n.filter(R=>["hours","minutes","seconds","milliseconds"].indexOf(R)>=0);C.length===0&&(o<e&&(o=i.plus({[m]:1})),o!==i&&(a[m]=(a[m]||0)+E/(o-i)));const O=k.fromObject(a,r);return C.length>0?k.fromMillis(E,r).shiftTo(...C).plus(O):O}const Rn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Xr={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Wu=Rn.hanidec.replace(/[\[|\]]/g,"").split("");function Hu(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const r=t.charCodeAt(n);if(t[n].search(Rn.hanidec)!==-1)e+=Wu.indexOf(t[n]);else for(const i in Xr){const[a,o]=Xr[i];r>=a&&r<=o&&(e+=r-a)}}return parseInt(e,10)}else return e}function ye({numberingSystem:t},e=""){return new RegExp(`${Rn[t||"latn"]}${e}`)}const Uu="missing Intl.DateTimeFormat.formatToParts support";function W(t,e=n=>n){return{regex:t,deser:([n])=>e(Hu(n))}}const es="[  ]",ts=new RegExp(es,"g");function Zu(t){return t.replace(/\./g,"\\.?").replace(ts,es)}function ns(t){return t.replace(/\./g,"").replace(ts," ").toLowerCase()}function Ee(t,e){return t===null?null:{regex:RegExp(t.map(Zu).join("|")),deser:([n])=>t.findIndex(r=>ns(n)===ns(r))+e}}function rs(t,e){return{regex:t,deser:([,n,r])=>Qt(n,r),groups:e}}function nn(t){return{regex:t,deser:([e])=>e}}function qu(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function zu(t,e){const n=ye(e),r=ye(e,"{2}"),i=ye(e,"{3}"),a=ye(e,"{4}"),o=ye(e,"{6}"),m=ye(e,"{1,2}"),E=ye(e,"{1,3}"),C=ye(e,"{1,6}"),O=ye(e,"{1,9}"),R=ye(e,"{2,4}"),N=ye(e,"{4,6}"),M=ee=>({regex:RegExp(qu(ee.val)),deser:([de])=>de,literal:!0}),X=(ee=>{if(t.literal)return M(ee);switch(ee.val){case"G":return Ee(e.eras("short"),0);case"GG":return Ee(e.eras("long"),0);case"y":return W(C);case"yy":return W(R,An);case"yyyy":return W(a);case"yyyyy":return W(N);case"yyyyyy":return W(o);case"M":return W(m);case"MM":return W(r);case"MMM":return Ee(e.months("short",!0),1);case"MMMM":return Ee(e.months("long",!0),1);case"L":return W(m);case"LL":return W(r);case"LLL":return Ee(e.months("short",!1),1);case"LLLL":return Ee(e.months("long",!1),1);case"d":return W(m);case"dd":return W(r);case"o":return W(E);case"ooo":return W(i);case"HH":return W(r);case"H":return W(m);case"hh":return W(r);case"h":return W(m);case"mm":return W(r);case"m":return W(m);case"q":return W(m);case"qq":return W(r);case"s":return W(m);case"ss":return W(r);case"S":return W(E);case"SSS":return W(i);case"u":return nn(O);case"uu":return nn(m);case"uuu":return W(n);case"a":return Ee(e.meridiems(),0);case"kkkk":return W(a);case"kk":return W(R,An);case"W":return W(m);case"WW":return W(r);case"E":case"c":return W(n);case"EEE":return Ee(e.weekdays("short",!1),1);case"EEEE":return Ee(e.weekdays("long",!1),1);case"ccc":return Ee(e.weekdays("short",!0),1);case"cccc":return Ee(e.weekdays("long",!0),1);case"Z":case"ZZ":return rs(new RegExp(`([+-]${m.source})(?::(${r.source}))?`),2);case"ZZZ":return rs(new RegExp(`([+-]${m.source})(${r.source})?`),2);case"z":return nn(/[a-z_+-/]{1,256}?/i);case" ":return nn(/[^\S\n\r]/);default:return M(ee)}})(t)||{invalidReason:Uu};return X.token=t,X}const Yu={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};function Gu(t,e,n){const{type:r,value:i}=t;if(r==="literal"){const E=/^\s+$/.test(i);return{literal:!E,val:E?" ":i}}const a=e[r];let o=r;r==="hour"&&(e.hour12!=null?o=e.hour12?"hour12":"hour24":e.hourCycle!=null?e.hourCycle==="h11"||e.hourCycle==="h12"?o="hour12":o="hour24":o=n.hour12?"hour12":"hour24");let m=Yu[o];if(typeof m=="object"&&(m=m[a]),m)return{literal:!1,val:m}}function Ju(t){return[`^${t.map(n=>n.regex).reduce((n,r)=>`${n}(${r.source})`,"")}$`,t]}function Ku(t,e,n){const r=t.match(e);if(r){const i={};let a=1;for(const o in n)if(ot(n,o)){const m=n[o],E=m.groups?m.groups+1:1;!m.literal&&m.token&&(i[m.token.val[0]]=m.deser(r.slice(a,a+E))),a+=E}return[r,i]}else return[r,{}]}function Qu(t){const e=a=>{switch(a){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}};let n=null,r;return j(t.z)||(n=Re.create(t.z)),j(t.Z)||(n||(n=new le(t.Z)),r=t.Z),j(t.q)||(t.M=(t.q-1)*3+1),j(t.h)||(t.h<12&&t.a===1?t.h+=12:t.h===12&&t.a===0&&(t.h=0)),t.G===0&&t.y&&(t.y=-t.y),j(t.u)||(t.S=Bn(t.u)),[Object.keys(t).reduce((a,o)=>{const m=e(o);return m&&(a[m]=t[o]),a},{}),n,r]}let _n=null;function Xu(){return _n||(_n=A.fromMillis(1555555555555)),_n}function ea(t,e){if(t.literal)return t;const n=ue.macroTokenToFormatOpts(t.val),r=us(n,e);return r==null||r.includes(void 0)?t:r}function ss(t,e){return Array.prototype.concat(...t.map(n=>ea(n,e)))}function is(t,e,n){const r=ss(ue.parseFormat(n),t),i=r.map(o=>zu(o,t)),a=i.find(o=>o.invalidReason);if(a)return{input:e,tokens:r,invalidReason:a.invalidReason};{const[o,m]=Ju(i),E=RegExp(o,"i"),[C,O]=Ku(e,E,m),[R,N,M]=O?Qu(O):[null,null,void 0];if(ot(O,"a")&&ot(O,"H"))throw new h("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:r,regex:E,rawMatches:C,matches:O,result:R,zone:N,specificOffset:M}}}function ta(t,e,n){const{result:r,zone:i,specificOffset:a,invalidReason:o}=is(t,e,n);return[r,i,a,o]}function us(t,e){if(!t)return null;const r=ue.create(e,t).dtFormatter(Xu()),i=r.formatToParts(),a=r.resolvedOptions();return i.map(o=>Gu(o,t,a))}const as=[0,31,59,90,120,151,181,212,243,273,304,334],os=[0,31,60,91,121,152,182,213,244,274,305,335];function ge(t,e){return new Fe("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function ls(t,e,n){const r=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&r.setUTCFullYear(r.getUTCFullYear()-1900);const i=r.getUTCDay();return i===0?7:i}function cs(t,e,n){return n+(xt(t)?os:as)[e-1]}function fs(t,e){const n=xt(t)?os:as,r=n.findIndex(a=>a<e),i=e-n[r];return{month:r+1,day:i}}function $n(t){const{year:e,month:n,day:r}=t,i=cs(e,n,r),a=ls(e,n,r);let o=Math.floor((i-a+10)/7),m;return o<1?(m=e-1,o=Kt(m)):o>Kt(e)?(m=e+1,o=1):m=e,{weekYear:m,weekNumber:o,weekday:a,...en(t)}}function ds(t){const{weekYear:e,weekNumber:n,weekday:r}=t,i=ls(e,1,4),a=Ot(e);let o=n*7+r-i-3,m;o<1?(m=e-1,o+=Ot(m)):o>a?(m=e+1,o-=Ot(e)):m=e;const{month:E,day:C}=fs(m,o);return{year:m,month:E,day:C,...en(t)}}function Pn(t){const{year:e,month:n,day:r}=t,i=cs(e,n,r);return{year:e,ordinal:i,...en(t)}}function hs(t){const{year:e,ordinal:n}=t,{month:r,day:i}=fs(e,n);return{year:e,month:r,day:i,...en(t)}}function na(t){const e=Yt(t.weekYear),n=_e(t.weekNumber,1,Kt(t.weekYear)),r=_e(t.weekday,1,7);return e?n?r?!1:ge("weekday",t.weekday):ge("week",t.week):ge("weekYear",t.weekYear)}function ra(t){const e=Yt(t.year),n=_e(t.ordinal,1,Ot(t.year));return e?n?!1:ge("ordinal",t.ordinal):ge("year",t.year)}function Ds(t){const e=Yt(t.year),n=_e(t.month,1,12),r=_e(t.day,1,Gt(t.year,t.month));return e?n?r?!1:ge("day",t.day):ge("month",t.month):ge("year",t.year)}function ms(t){const{hour:e,minute:n,second:r,millisecond:i}=t,a=_e(e,0,23)||e===24&&n===0&&r===0&&i===0,o=_e(n,0,59),m=_e(r,0,59),E=_e(i,0,999);return a?o?m?E?!1:ge("millisecond",i):ge("second",r):ge("minute",n):ge("hour",e)}const Vn="Invalid DateTime",sa=864e13;function rn(t){return new Fe("unsupported zone",`the zone "${t.name}" is not supported`)}function jn(t){return t.weekData===null&&(t.weekData=$n(t.c)),t.weekData}function et(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new A({...n,...e,old:n})}function ps(t,e,n){let r=t-e*60*1e3;const i=n.offset(r);if(e===i)return[r,e];r-=(i-e)*60*1e3;const a=n.offset(r);return i===a?[r,i]:[t-Math.min(i,a)*60*1e3,Math.max(i,a)]}function sn(t,e){t+=e*60*1e3;const n=new Date(t);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function un(t,e,n){return ps(Jt(t),e,n)}function gs(t,e){const n=t.o,r=t.c.year+Math.trunc(e.years),i=t.c.month+Math.trunc(e.months)+Math.trunc(e.quarters)*3,a={...t.c,year:r,month:i,day:Math.min(t.c.day,Gt(r,i))+Math.trunc(e.days)+Math.trunc(e.weeks)*7},o=k.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),m=Jt(a);let[E,C]=ps(m,n,t.zone);return o!==0&&(E+=o,C=t.zone.offset(E)),{ts:E,o:C}}function At(t,e,n,r,i,a){const{setZone:o,zone:m}=n;if(t&&Object.keys(t).length!==0||e){const E=e||m,C=A.fromObject(t,{...n,zone:E,specificOffset:a});return o?C:C.setZone(m)}else return A.invalid(new Fe("unparsable",`the input "${i}" can't be parsed as ${r}`))}function an(t,e,n=!0){return t.isValid?ue.create(Y.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function Wn(t,e){const n=t.c.year>9999||t.c.year<0;let r="";return n&&t.c.year>=0&&(r+="+"),r+=Q(t.c.year,n?6:4),e?(r+="-",r+=Q(t.c.month),r+="-",r+=Q(t.c.day)):(r+=Q(t.c.month),r+=Q(t.c.day)),r}function Fs(t,e,n,r,i,a){let o=Q(t.c.hour);return e?(o+=":",o+=Q(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(o+=":")):o+=Q(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(o+=Q(t.c.second),(t.c.millisecond!==0||!r)&&(o+=".",o+=Q(t.c.millisecond,3))),i&&(t.isOffsetFixed&&t.offset===0&&!a?o+="Z":t.o<0?(o+="-",o+=Q(Math.trunc(-t.o/60)),o+=":",o+=Q(Math.trunc(-t.o%60))):(o+="+",o+=Q(Math.trunc(t.o/60)),o+=":",o+=Q(Math.trunc(t.o%60)))),a&&(o+="["+t.zone.ianaName+"]"),o}const ys={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},ia={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},ua={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Es=["year","month","day","hour","minute","second","millisecond"],aa=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],oa=["year","ordinal","hour","minute","second","millisecond"];function ws(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new p(t);return e}function Cs(t,e){const n=He(e.zone,K.defaultZone),r=Y.fromObject(e),i=K.now();let a,o;if(j(t.year))a=i;else{for(const C of Es)j(t[C])&&(t[C]=ys[C]);const m=Ds(t)||ms(t);if(m)return A.invalid(m);const E=n.offset(i);[a,o]=un(t,E,n)}return new A({ts:a,zone:n,loc:r,o})}function bs(t,e,n){const r=j(n.round)?!0:n.round,i=(o,m)=>(o=Mn(o,r||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(o,m)),a=o=>n.calendary?e.hasSame(t,o)?0:e.startOf(o).diff(t.startOf(o),o).get(o):e.diff(t,o).get(o);if(n.unit)return i(a(n.unit),n.unit);for(const o of n.units){const m=a(o);if(Math.abs(m)>=1)return i(m,o)}return i(t>e?-0:0,n.units[n.units.length-1])}function vs(t){let e={},n;return t.length>0&&typeof t[t.length-1]=="object"?(e=t[t.length-1],n=Array.from(t).slice(0,t.length-1)):n=Array.from(t),[e,n]}class A{constructor(e){const n=e.zone||K.defaultZone;let r=e.invalid||(Number.isNaN(e.ts)?new Fe("invalid input"):null)||(n.isValid?null:rn(n));this.ts=j(e.ts)?K.now():e.ts;let i=null,a=null;if(!r)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(n))[i,a]=[e.old.c,e.old.o];else{const m=n.offset(this.ts);i=sn(this.ts,m),r=Number.isNaN(i.year)?new Fe("invalid input"):null,i=r?null:i,a=r?null:m}this._zone=n,this.loc=e.loc||Y.create(),this.invalid=r,this.weekData=null,this.c=i,this.o=a,this.isLuxonDateTime=!0}static now(){return new A({})}static local(){const[e,n]=vs(arguments),[r,i,a,o,m,E,C]=n;return Cs({year:r,month:i,day:a,hour:o,minute:m,second:E,millisecond:C},e)}static utc(){const[e,n]=vs(arguments),[r,i,a,o,m,E,C]=n;return e.zone=le.utcInstance,Cs({year:r,month:i,day:a,hour:o,minute:m,second:E,millisecond:C},e)}static fromJSDate(e,n={}){const r=Ri(e)?e.valueOf():NaN;if(Number.isNaN(r))return A.invalid("invalid input");const i=He(n.zone,K.defaultZone);return i.isValid?new A({ts:r,zone:i,loc:Y.fromObject(n)}):A.invalid(rn(i))}static fromMillis(e,n={}){if(Ke(e))return e<-864e13||e>sa?A.invalid("Timestamp out of range"):new A({ts:e,zone:He(n.zone,K.defaultZone),loc:Y.fromObject(n)});throw new F(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,n={}){if(Ke(e))return new A({ts:e*1e3,zone:He(n.zone,K.defaultZone),loc:Y.fromObject(n)});throw new F("fromSeconds requires a numerical input")}static fromObject(e,n={}){e=e||{};const r=He(n.zone,K.defaultZone);if(!r.isValid)return A.invalid(rn(r));const i=K.now(),a=j(n.specificOffset)?r.offset(i):n.specificOffset,o=Xt(e,ws),m=!j(o.ordinal),E=!j(o.year),C=!j(o.month)||!j(o.day),O=E||C,R=o.weekYear||o.weekNumber,N=Y.fromObject(n);if((O||m)&&R)throw new h("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(C&&m)throw new h("Can't mix ordinal dates with month/day");const M=R||o.weekday&&!O;let V,X,ee=sn(i,a);M?(V=aa,X=ia,ee=$n(ee)):m?(V=oa,X=ua,ee=Pn(ee)):(V=Es,X=ys);let de=!1;for(const $ of V){const Z=o[$];j(Z)?de?o[$]=X[$]:o[$]=ee[$]:de=!0}const Me=M?na(o):m?ra(o):Ds(o),Ae=Me||ms(o);if(Ae)return A.invalid(Ae);const v=M?ds(o):m?hs(o):o,[P,te]=un(v,a,r),B=new A({ts:P,zone:r,o:te,loc:N});return o.weekday&&O&&e.weekday!==B.weekday?A.invalid("mismatched weekday",`you can't specify both a weekday of ${o.weekday} and a date of ${B.toISO()}`):B}static fromISO(e,n={}){const[r,i]=Su(e);return At(r,i,n,"ISO 8601",e)}static fromRFC2822(e,n={}){const[r,i]=Tu(e);return At(r,i,n,"RFC 2822",e)}static fromHTTP(e,n={}){const[r,i]=xu(e);return At(r,i,n,"HTTP",n)}static fromFormat(e,n,r={}){if(j(e)||j(n))throw new F("fromFormat requires an input string and a format");const{locale:i=null,numberingSystem:a=null}=r,o=Y.fromOpts({locale:i,numberingSystem:a,defaultToEN:!0}),[m,E,C,O]=ta(o,e,n);return O?A.invalid(O):At(m,E,r,`format ${n}`,e,C)}static fromString(e,n,r={}){return A.fromFormat(e,n,r)}static fromSQL(e,n={}){const[r,i]=Iu(e);return At(r,i,n,"SQL",e)}static invalid(e,n=null){if(!e)throw new F("need to specify a reason the DateTime is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(K.throwOnInvalid)throw new s(r);return new A({invalid:r})}static isDateTime(e){return e&&e.isLuxonDateTime||!1}static parseFormatForOpts(e,n={}){const r=us(e,Y.fromObject(n));return r?r.map(i=>i?i.val:null).join(""):null}static expandFormat(e,n={}){return ss(ue.parseFormat(e),Y.fromObject(n)).map(i=>i.val).join("")}get(e){return this[e]}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?jn(this).weekYear:NaN}get weekNumber(){return this.isValid?jn(this).weekNumber:NaN}get weekday(){return this.isValid?jn(this).weekday:NaN}get ordinal(){return this.isValid?Pn(this.c).ordinal:NaN}get monthShort(){return this.isValid?tn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?tn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?tn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?tn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return this.isOffsetFixed?!1:this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset}getPossibleOffsets(){if(!this.isValid||this.isOffsetFixed)return[this];const e=864e5,n=6e4,r=Jt(this.c),i=this.zone.offset(r-e),a=this.zone.offset(r+e),o=this.zone.offset(r-i*n),m=this.zone.offset(r-a*n);if(o===m)return[this];const E=r-o*n,C=r-m*n,O=sn(E,o),R=sn(C,m);return O.hour===R.hour&&O.minute===R.minute&&O.second===R.second&&O.millisecond===R.millisecond?[et(this,{ts:E}),et(this,{ts:C})]:[this]}get isInLeapYear(){return xt(this.year)}get daysInMonth(){return Gt(this.year,this.month)}get daysInYear(){return this.isValid?Ot(this.year):NaN}get weeksInWeekYear(){return this.isValid?Kt(this.weekYear):NaN}resolvedLocaleOptions(e={}){const{locale:n,numberingSystem:r,calendar:i}=ue.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:n,numberingSystem:r,outputCalendar:i}}toUTC(e=0,n={}){return this.setZone(le.instance(e),n)}toLocal(){return this.setZone(K.defaultZone)}setZone(e,{keepLocalTime:n=!1,keepCalendarTime:r=!1}={}){if(e=He(e,K.defaultZone),e.equals(this.zone))return this;if(e.isValid){let i=this.ts;if(n||r){const a=e.offset(this.ts),o=this.toObject();[i]=un(o,a,e)}return et(this,{ts:i,zone:e})}else return A.invalid(rn(e))}reconfigure({locale:e,numberingSystem:n,outputCalendar:r}={}){const i=this.loc.clone({locale:e,numberingSystem:n,outputCalendar:r});return et(this,{loc:i})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;const n=Xt(e,ws),r=!j(n.weekYear)||!j(n.weekNumber)||!j(n.weekday),i=!j(n.ordinal),a=!j(n.year),o=!j(n.month)||!j(n.day),m=a||o,E=n.weekYear||n.weekNumber;if((m||i)&&E)throw new h("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(o&&i)throw new h("Can't mix ordinal dates with month/day");let C;r?C=ds({...$n(this.c),...n}):j(n.ordinal)?(C={...this.toObject(),...n},j(n.day)&&(C.day=Math.min(Gt(C.year,C.month),C.day))):C=hs({...Pn(this.c),...n});const[O,R]=un(C,this.o,this.zone);return et(this,{ts:O,o:R})}plus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e);return et(this,gs(this,n))}minus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e).negate();return et(this,gs(this,n))}startOf(e){if(!this.isValid)return this;const n={},r=k.normalizeUnit(e);switch(r){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0;break}if(r==="weeks"&&(n.weekday=1),r==="quarters"){const i=Math.ceil(this.month/3);n.month=(i-1)*3+1}return this.set(n)}endOf(e){return this.isValid?this.plus({[e]:1}).startOf(e).minus(1):this}toFormat(e,n={}){return this.isValid?ue.create(this.loc.redefaultToEN(n)).formatDateTimeFromString(this,e):Vn}toLocaleString(e=H,n={}){return this.isValid?ue.create(this.loc.clone(n),e).formatDateTime(this):Vn}toLocaleParts(e={}){return this.isValid?ue.create(this.loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:n=!1,suppressMilliseconds:r=!1,includeOffset:i=!0,extendedZone:a=!1}={}){if(!this.isValid)return null;const o=e==="extended";let m=Wn(this,o);return m+="T",m+=Fs(this,o,n,r,i,a),m}toISODate({format:e="extended"}={}){return this.isValid?Wn(this,e==="extended"):null}toISOWeekDate(){return an(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:n=!1,includeOffset:r=!0,includePrefix:i=!1,extendedZone:a=!1,format:o="extended"}={}){return this.isValid?(i?"T":"")+Fs(this,o==="extended",n,e,r,a):null}toRFC2822(){return an(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return an(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?Wn(this,!0):null}toSQLTime({includeOffset:e=!0,includeZone:n=!1,includeOffsetSpace:r=!0}={}){let i="HH:mm:ss.SSS";return(n||e)&&(r&&(i+=" "),n?i+="z":e&&(i+="ZZ")),an(this,i,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():Vn}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={}){if(!this.isValid)return{};const n={...this.c};return e.includeConfig&&(n.outputCalendar=this.outputCalendar,n.numberingSystem=this.loc.numberingSystem,n.locale=this.loc.locale),n}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(e,n="milliseconds",r={}){if(!this.isValid||!e.isValid)return k.invalid("created by diffing an invalid DateTime");const i={locale:this.locale,numberingSystem:this.numberingSystem,...r},a=_i(n).map(k.normalizeUnit),o=e.valueOf()>this.valueOf(),m=o?this:e,E=o?e:this,C=ju(m,E,a,i);return o?C.negate():C}diffNow(e="milliseconds",n={}){return this.diff(A.now(),e,n)}until(e){return this.isValid?G.fromDateTimes(this,e):this}hasSame(e,n){if(!this.isValid)return!1;const r=e.valueOf(),i=this.setZone(e.zone,{keepLocalTime:!0});return i.startOf(n)<=r&&r<=i.endOf(n)}equals(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)}toRelative(e={}){if(!this.isValid)return null;const n=e.base||A.fromObject({},{zone:this.zone}),r=e.padding?this<n?-e.padding:e.padding:0;let i=["years","months","days","hours","minutes","seconds"],a=e.unit;return Array.isArray(e.unit)&&(i=e.unit,a=void 0),bs(n,this.plus(r),{...e,numeric:"always",units:i,unit:a})}toRelativeCalendar(e={}){return this.isValid?bs(e.base||A.fromObject({},{zone:this.zone}),this,{...e,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...e){if(!e.every(A.isDateTime))throw new F("min requires all arguments be DateTimes");return Br(e,n=>n.valueOf(),Math.min)}static max(...e){if(!e.every(A.isDateTime))throw new F("max requires all arguments be DateTimes");return Br(e,n=>n.valueOf(),Math.max)}static fromFormatExplain(e,n,r={}){const{locale:i=null,numberingSystem:a=null}=r,o=Y.fromOpts({locale:i,numberingSystem:a,defaultToEN:!0});return is(o,e,n)}static fromStringExplain(e,n,r={}){return A.fromFormatExplain(e,n,r)}static get DATE_SHORT(){return H}static get DATE_MED(){return ne}static get DATE_MED_WITH_WEEKDAY(){return z}static get DATE_FULL(){return fe}static get DATE_HUGE(){return ie}static get TIME_SIMPLE(){return me}static get TIME_WITH_SECONDS(){return Ge}static get TIME_WITH_SHORT_OFFSET(){return Je}static get TIME_WITH_LONG_OFFSET(){return ut}static get TIME_24_SIMPLE(){return at}static get TIME_24_WITH_SECONDS(){return ke}static get TIME_24_WITH_SHORT_OFFSET(){return fr}static get TIME_24_WITH_LONG_OFFSET(){return dr}static get DATETIME_SHORT(){return hr}static get DATETIME_SHORT_WITH_SECONDS(){return Dr}static get DATETIME_MED(){return mr}static get DATETIME_MED_WITH_SECONDS(){return pr}static get DATETIME_MED_WITH_WEEKDAY(){return gi}static get DATETIME_FULL(){return gr}static get DATETIME_FULL_WITH_SECONDS(){return Fr}static get DATETIME_HUGE(){return yr}static get DATETIME_HUGE_WITH_SECONDS(){return Er}}function Nt(t){if(A.isDateTime(t))return t;if(t&&t.valueOf&&Ke(t.valueOf()))return A.fromJSDate(t);if(t&&typeof t=="object")return A.fromObject(t);throw new F(`Unknown datetime argument: ${t}, of type ${typeof t}`)}const Hn={renderNullAs:"\\-",taskCompletionTracking:!1,taskCompletionUseEmojiShorthand:!1,taskCompletionText:"completion",taskCompletionDateFormat:"yyyy-MM-dd",recursiveSubTaskCompletion:!1,warnOnEmptyResult:!0,refreshEnabled:!0,refreshInterval:2500,defaultDateFormat:"MMMM dd, yyyy",defaultDateTimeFormat:"h:mm a - MMMM dd, yyyy",maxRecursiveRenderDepth:4,tableIdColumnName:"File",tableGroupColumnName:"Group",showResultCount:!0};({...Hn});class Un{value;successful;constructor(e){this.value=e,this.successful=!0}map(e){return new Un(e(this.value))}flatMap(e){return e(this.value)}mapErr(e){return this}bimap(e,n){return this.map(e)}orElse(e){return this.value}cast(){return this}orElseThrow(e){return this.value}}class Zn{error;successful;constructor(e){this.error=e,this.successful=!1}map(e){return this}flatMap(e){return this}mapErr(e){return new Zn(e(this.error))}bimap(e,n){return this.mapErr(n)}orElse(e){return e}cast(){return this}orElseThrow(e){throw e?new Error(e(this.error)):new Error(""+this.error)}}var on;(function(t){function e(a){return new Un(a)}t.success=e;function n(a){return new Zn(a)}t.failure=n;function r(a,o,m){return a.successful?o.successful?m(a.value,o.value):n(o.error):n(a.error)}t.flatMap2=r;function i(a,o,m){return r(a,o,(E,C)=>e(m(E,C)))}t.map2=i})(on||(on={}));var la=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Qs<"u"?Qs:typeof self<"u"?self:{},Ss={exports:{}};(function(t,e){(function(n,r){t.exports=r()})(typeof self<"u"?self:la,function(){return function(n){var r={};function i(a){if(r[a])return r[a].exports;var o=r[a]={i:a,l:!1,exports:{}};return n[a].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=n,i.c=r,i.d=function(a,o,m){i.o(a,o)||Object.defineProperty(a,o,{configurable:!1,enumerable:!0,get:m})},i.r=function(a){Object.defineProperty(a,"__esModule",{value:!0})},i.n=function(a){var o=a&&a.__esModule?function(){return a.default}:function(){return a};return i.d(o,"a",o),o},i.o=function(a,o){return Object.prototype.hasOwnProperty.call(a,o)},i.p="",i(i.s=0)}([function(n,r,i){function a(c){if(!(this instanceof a))return new a(c);this._=c}var o=a.prototype;function m(c,D){for(var y=0;y<c;y++)D(y)}function E(c,D,y){return function(w,S){m(S.length,function(T){w(S[T],T,S)})}(function(w,S,T){D=c(D,w,S,T)},y),D}function C(c,D){return E(function(y,w,S,T){return y.concat([c(w,S,T)])},[],D)}function O(c,D){var y={v:0,buf:D};return m(c,function(){var w;y={v:y.v<<1|(w=y.buf,w[0]>>7),buf:function(S){var T=E(function(x,_,q,ce){return x.concat(q===ce.length-1?Buffer.from([_,0]).readUInt16BE(0):ce.readUInt16BE(q))},[],S);return Buffer.from(C(function(x){return(x<<1&65535)>>8},T))}(y.buf)}}),y}function R(){return typeof Buffer<"u"}function N(){if(!R())throw new Error("Buffer global does not exist; please use webpack if you need to parse Buffers in the browser.")}function M(c){N();var D=E(function(T,x){return T+x},0,c);if(D%8!=0)throw new Error("The bits ["+c.join(", ")+"] add up to "+D+" which is not an even number of bytes; the total should be divisible by 8");var y,w=D/8,S=(y=function(T){return T>48},E(function(T,x){return T||(y(x)?x:T)},null,c));if(S)throw new Error(S+" bit range requested exceeds 48 bit (6 byte) Number max.");return new a(function(T,x){var _=w+x;return _>T.length?$(x,w.toString()+" bytes"):B(_,E(function(q,ce){var se=O(ce,q.buf);return{coll:q.coll.concat(se.v),buf:se.buf}},{coll:[],buf:T.slice(x,_)},c).coll)})}function V(c,D){return new a(function(y,w){return N(),w+D>y.length?$(w,D+" bytes for "+c):B(w+D,y.slice(w,w+D))})}function X(c,D){if(typeof(y=D)!="number"||Math.floor(y)!==y||D<0||D>6)throw new Error(c+" requires integer length in range [0, 6].");var y}function ee(c){return X("uintBE",c),V("uintBE("+c+")",c).map(function(D){return D.readUIntBE(0,c)})}function de(c){return X("uintLE",c),V("uintLE("+c+")",c).map(function(D){return D.readUIntLE(0,c)})}function Me(c){return X("intBE",c),V("intBE("+c+")",c).map(function(D){return D.readIntBE(0,c)})}function Ae(c){return X("intLE",c),V("intLE("+c+")",c).map(function(D){return D.readIntLE(0,c)})}function v(c){return c instanceof a}function P(c){return{}.toString.call(c)==="[object Array]"}function te(c){return R()&&Buffer.isBuffer(c)}function B(c,D){return{status:!0,index:c,value:D,furthest:-1,expected:[]}}function $(c,D){return P(D)||(D=[D]),{status:!1,index:-1,value:null,furthest:c,expected:D}}function Z(c,D){if(!D||c.furthest>D.furthest)return c;var y=c.furthest===D.furthest?function(w,S){if(function(){if(a._supportsSet!==void 0)return a._supportsSet;var je=typeof Set<"u";return a._supportsSet=je,je}()&&Array.from){for(var T=new Set(w),x=0;x<S.length;x++)T.add(S[x]);var _=Array.from(T);return _.sort(),_}for(var q={},ce=0;ce<w.length;ce++)q[w[ce]]=!0;for(var se=0;se<S.length;se++)q[S[se]]=!0;var Ve=[];for(var he in q)({}).hasOwnProperty.call(q,he)&&Ve.push(he);return Ve.sort(),Ve}(c.expected,D.expected):D.expected;return{status:c.status,index:c.index,value:c.value,furthest:D.furthest,expected:y}}var Ce={};function Rt(c,D){if(te(c))return{offset:D,line:-1,column:-1};c in Ce||(Ce[c]={});for(var y=Ce[c],w=0,S=0,T=0,x=D;x>=0;){if(x in y){w=y[x].line,T===0&&(T=y[x].lineStart);break}(c.charAt(x)===`
`||c.charAt(x)==="\r"&&c.charAt(x+1)!==`
`)&&(S++,T===0&&(T=x+1)),x--}var _=w+S,q=D-T;return y[D]={line:_,lineStart:T},{offset:D,line:_+1,column:q+1}}function $e(c){if(!v(c))throw new Error("not a parser: "+c)}function tt(c,D){return typeof c=="string"?c.charAt(D):c[D]}function Ne(c){if(typeof c!="number")throw new Error("not a number: "+c)}function be(c){if(typeof c!="function")throw new Error("not a function: "+c)}function qe(c){if(typeof c!="string")throw new Error("not a string: "+c)}var cn=2,_t=3,ve=8,fn=5*ve,Se=4*ve,ze="  ";function dn(c,D){return new Array(D+1).join(c)}function hn(c,D,y){var w=D-c.length;return w<=0?c:dn(y,w)+c}function Ns(c,D,y,w){return{from:c-D>0?c-D:0,to:c+y>w?w:c+y}}function ba(c,D){var y,w,S,T,x,_=D.index,q=_.offset,ce=1;if(q===c.length)return"Got the end of the input";if(te(c)){var se=q-q%ve,Ve=q-se,he=Ns(se,fn,Se+ve,c.length),je=C(function(re){return C(function(gt){return hn(gt.toString(16),2,"0")},re)},function(re,gt){var Ft=re.length,st=[],yt=0;if(Ft<=gt)return[re.slice()];for(var Et=0;Et<Ft;Et++)st[yt]||st.push([]),st[yt].push(re[Et]),(Et+1)%gt==0&&yt++;return st}(c.slice(he.from,he.to).toJSON().data,ve));T=function(re){return re.from===0&&re.to===1?{from:re.from,to:re.to}:{from:re.from/ve,to:Math.floor(re.to/ve)}}(he),w=se/ve,y=3*Ve,Ve>=4&&(y+=1),ce=2,S=C(function(re){return re.length<=4?re.join(" "):re.slice(0,4).join(" ")+"  "+re.slice(4).join(" ")},je),(x=(8*(T.to>0?T.to-1:T.to)).toString(16).length)<2&&(x=2)}else{var pt=c.split(/\r\n|[\n\r\u2028\u2029]/);y=_.column-1,w=_.line-1,T=Ns(w,cn,_t,pt.length),S=pt.slice(T.from,T.to),x=T.to.toString().length}var Na=w-T.from;return te(c)&&(x=(8*(T.to>0?T.to-1:T.to)).toString(16).length)<2&&(x=2),E(function(re,gt,Ft){var st,yt=Ft===Na,Et=yt?"> ":ze;return st=te(c)?hn((8*(T.from+Ft)).toString(16),x,"0"):hn((T.from+Ft+1).toString(),x," "),[].concat(re,[Et+st+" | "+gt],yt?[ze+dn(" ",x)+" | "+hn("",y," ")+dn("^",ce)]:[])},[],S).join(`
`)}function Is(c,D){return[`
`,"-- PARSING FAILED "+dn("-",50),`

`,ba(c,D),`

`,(y=D.expected,y.length===1?`Expected:

`+y[0]:`Expected one of the following: 

`+y.join(", ")),`
`].join("");var y}function Ls(c){return c.flags!==void 0?c.flags:[c.global?"g":"",c.ignoreCase?"i":"",c.multiline?"m":"",c.unicode?"u":"",c.sticky?"y":""].join("")}function Dn(){for(var c=[].slice.call(arguments),D=c.length,y=0;y<D;y+=1)$e(c[y]);return a(function(w,S){for(var T,x=new Array(D),_=0;_<D;_+=1){if(!(T=Z(c[_]._(w,S),T)).status)return T;x[_]=T.value,S=T.index}return Z(B(S,x),T)})}function nt(){var c=[].slice.call(arguments);if(c.length===0)throw new Error("seqMap needs at least one argument");var D=c.pop();return be(D),Dn.apply(null,c).map(function(y){return D.apply(null,y)})}function mn(){var c=[].slice.call(arguments),D=c.length;if(D===0)return pn("zero alternates");for(var y=0;y<D;y+=1)$e(c[y]);return a(function(w,S){for(var T,x=0;x<c.length;x+=1)if((T=Z(c[x]._(w,S),T)).status)return T;return T})}function Rs(c,D){return Qn(c,D).or(rt([]))}function Qn(c,D){return $e(c),$e(D),nt(c,D.then(c).many(),function(y,w){return[y].concat(w)})}function $t(c){qe(c);var D="'"+c+"'";return a(function(y,w){var S=w+c.length,T=y.slice(w,S);return T===c?B(S,T):$(w,D)})}function Pe(c,D){(function(S){if(!(S instanceof RegExp))throw new Error("not a regexp: "+S);for(var T=Ls(S),x=0;x<T.length;x++){var _=T.charAt(x);if(_!=="i"&&_!=="m"&&_!=="u"&&_!=="s")throw new Error('unsupported regexp flag "'+_+'": '+S)}})(c),arguments.length>=2?Ne(D):D=0;var y=function(S){return RegExp("^(?:"+S.source+")",Ls(S))}(c),w=""+c;return a(function(S,T){var x=y.exec(S.slice(T));if(x){if(0<=D&&D<=x.length){var _=x[0],q=x[D];return B(T+_.length,q)}return $(T,"valid match group (0 to "+x.length+") in "+w)}return $(T,w)})}function rt(c){return a(function(D,y){return B(y,c)})}function pn(c){return a(function(D,y){return $(y,c)})}function gn(c){if(v(c))return a(function(D,y){var w=c._(D,y);return w.index=y,w.value="",w});if(typeof c=="string")return gn($t(c));if(c instanceof RegExp)return gn(Pe(c));throw new Error("not a string, regexp, or parser: "+c)}function _s(c){return $e(c),a(function(D,y){var w=c._(D,y),S=D.slice(y,w.index);return w.status?$(y,'not "'+S+'"'):B(y,null)})}function Fn(c){return be(c),a(function(D,y){var w=tt(D,y);return y<D.length&&c(w)?B(y+1,w):$(y,"a character/byte matching "+c)})}function $s(c,D){arguments.length<2&&(D=c,c=void 0);var y=a(function(w,S){return y._=D()._,y._(w,S)});return c?y.desc(c):y}function Xn(){return pn("fantasy-land/empty")}o.parse=function(c){if(typeof c!="string"&&!te(c))throw new Error(".parse must be called with a string or Buffer as its argument");var D,y=this.skip(er)._(c,0);return D=y.status?{status:!0,value:y.value}:{status:!1,index:Rt(c,y.furthest),expected:y.expected},delete Ce[c],D},o.tryParse=function(c){var D=this.parse(c);if(D.status)return D.value;var y=Is(c,D),w=new Error(y);throw w.type="ParsimmonError",w.result=D,w},o.assert=function(c,D){return this.chain(function(y){return c(y)?rt(y):pn(D)})},o.or=function(c){return mn(this,c)},o.trim=function(c){return this.wrap(c,c)},o.wrap=function(c,D){return nt(c,this,D,function(y,w){return w})},o.thru=function(c){return c(this)},o.then=function(c){return $e(c),Dn(this,c).map(function(D){return D[1]})},o.many=function(){var c=this;return a(function(D,y){for(var w=[],S=void 0;;){if(!(S=Z(c._(D,y),S)).status)return Z(B(y,w),S);if(y===S.index)throw new Error("infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause");y=S.index,w.push(S.value)}})},o.tieWith=function(c){return qe(c),this.map(function(D){if(function(S){if(!P(S))throw new Error("not an array: "+S)}(D),D.length){qe(D[0]);for(var y=D[0],w=1;w<D.length;w++)qe(D[w]),y+=c+D[w];return y}return""})},o.tie=function(){return this.tieWith("")},o.times=function(c,D){var y=this;return arguments.length<2&&(D=c),Ne(c),Ne(D),a(function(w,S){for(var T=[],x=void 0,_=void 0,q=0;q<c;q+=1){if(_=Z(x=y._(w,S),_),!x.status)return _;S=x.index,T.push(x.value)}for(;q<D&&(_=Z(x=y._(w,S),_),x.status);q+=1)S=x.index,T.push(x.value);return Z(B(S,T),_)})},o.result=function(c){return this.map(function(){return c})},o.atMost=function(c){return this.times(0,c)},o.atLeast=function(c){return nt(this.times(c),this.many(),function(D,y){return D.concat(y)})},o.map=function(c){be(c);var D=this;return a(function(y,w){var S=D._(y,w);return S.status?Z(B(S.index,c(S.value)),S):S})},o.contramap=function(c){be(c);var D=this;return a(function(y,w){var S=D.parse(c(y.slice(w)));return S.status?B(w+y.length,S.value):S})},o.promap=function(c,D){return be(c),be(D),this.contramap(c).map(D)},o.skip=function(c){return Dn(this,c).map(function(D){return D[0]})},o.mark=function(){return nt(Pt,this,Pt,function(c,D,y){return{start:c,value:D,end:y}})},o.node=function(c){return nt(Pt,this,Pt,function(D,y,w){return{name:c,value:y,start:D,end:w}})},o.sepBy=function(c){return Rs(this,c)},o.sepBy1=function(c){return Qn(this,c)},o.lookahead=function(c){return this.skip(gn(c))},o.notFollowedBy=function(c){return this.skip(_s(c))},o.desc=function(c){P(c)||(c=[c]);var D=this;return a(function(y,w){var S=D._(y,w);return S.status||(S.expected=c),S})},o.fallback=function(c){return this.or(rt(c))},o.ap=function(c){return nt(c,this,function(D,y){return D(y)})},o.chain=function(c){var D=this;return a(function(y,w){var S=D._(y,w);return S.status?Z(c(S.value)._(y,S.index),S):S})},o.concat=o.or,o.empty=Xn,o.of=rt,o["fantasy-land/ap"]=o.ap,o["fantasy-land/chain"]=o.chain,o["fantasy-land/concat"]=o.concat,o["fantasy-land/empty"]=o.empty,o["fantasy-land/of"]=o.of,o["fantasy-land/map"]=o.map;var Pt=a(function(c,D){return B(D,Rt(c,D))}),va=a(function(c,D){return D>=c.length?$(D,"any character/byte"):B(D+1,tt(c,D))}),Sa=a(function(c,D){return B(c.length,c.slice(D))}),er=a(function(c,D){return D<c.length?$(D,"EOF"):B(D,null)}),Ta=Pe(/[0-9]/).desc("a digit"),xa=Pe(/[0-9]*/).desc("optional digits"),Oa=Pe(/[a-z]/i).desc("a letter"),ka=Pe(/[a-z]*/i).desc("optional letters"),Ba=Pe(/\s*/).desc("optional whitespace"),Ma=Pe(/\s+/).desc("whitespace"),Ps=$t("\r"),Vs=$t(`
`),js=$t(`\r
`),Ws=mn(js,Vs,Ps).desc("newline"),Aa=mn(Ws,er);a.all=Sa,a.alt=mn,a.any=va,a.cr=Ps,a.createLanguage=function(c){var D={};for(var y in c)({}).hasOwnProperty.call(c,y)&&function(w){D[w]=$s(function(){return c[w](D)})}(y);return D},a.crlf=js,a.custom=function(c){return a(c(B,$))},a.digit=Ta,a.digits=xa,a.empty=Xn,a.end=Aa,a.eof=er,a.fail=pn,a.formatError=Is,a.index=Pt,a.isParser=v,a.lazy=$s,a.letter=Oa,a.letters=ka,a.lf=Vs,a.lookahead=gn,a.makeFailure=$,a.makeSuccess=B,a.newline=Ws,a.noneOf=function(c){return Fn(function(D){return c.indexOf(D)<0}).desc("none of '"+c+"'")},a.notFollowedBy=_s,a.of=rt,a.oneOf=function(c){for(var D=c.split(""),y=0;y<D.length;y++)D[y]="'"+D[y]+"'";return Fn(function(w){return c.indexOf(w)>=0}).desc(D)},a.optWhitespace=Ba,a.Parser=a,a.range=function(c,D){return Fn(function(y){return c<=y&&y<=D}).desc(c+"-"+D)},a.regex=Pe,a.regexp=Pe,a.sepBy=Rs,a.sepBy1=Qn,a.seq=Dn,a.seqMap=nt,a.seqObj=function(){for(var c,D={},y=0,w=(c=arguments,Array.prototype.slice.call(c)),S=w.length,T=0;T<S;T+=1){var x=w[T];if(!v(x)){if(P(x)&&x.length===2&&typeof x[0]=="string"&&v(x[1])){var _=x[0];if(Object.prototype.hasOwnProperty.call(D,_))throw new Error("seqObj: duplicate key "+_);D[_]=!0,y++;continue}throw new Error("seqObj arguments must be parsers or [string, parser] array pairs.")}}if(y===0)throw new Error("seqObj expects at least one named parser, found zero");return a(function(q,ce){for(var se,Ve={},he=0;he<S;he+=1){var je,pt;if(P(w[he])?(je=w[he][0],pt=w[he][1]):(je=null,pt=w[he]),!(se=Z(pt._(q,ce),se)).status)return se;je&&(Ve[je]=se.value),ce=se.index}return Z(B(ce,Ve),se)})},a.string=$t,a.succeed=rt,a.takeWhile=function(c){return be(c),a(function(D,y){for(var w=y;w<D.length&&c(tt(D,w));)w++;return B(w,D.slice(y,w))})},a.test=Fn,a.whitespace=Ma,a["fantasy-land/empty"]=Xn,a["fantasy-land/of"]=rt,a.Binary={bitSeq:M,bitSeqObj:function(c){N();var D={},y=0,w=C(function(T){if(P(T)){var x=T;if(x.length!==2)throw new Error("["+x.join(", ")+"] should be length 2, got length "+x.length);if(qe(x[0]),Ne(x[1]),Object.prototype.hasOwnProperty.call(D,x[0]))throw new Error("duplicate key in bitSeqObj: "+x[0]);return D[x[0]]=!0,y++,x}return Ne(T),[null,T]},c);if(y<1)throw new Error("bitSeqObj expects at least one named pair, got ["+c.join(", ")+"]");var S=C(function(T){return T[0]},w);return M(C(function(T){return T[1]},w)).map(function(T){return E(function(x,_){return _[0]!==null&&(x[_[0]]=_[1]),x},{},C(function(x,_){return[x,T[_]]},S))})},byte:function(c){if(N(),Ne(c),c>255)throw new Error("Value specified to byte constructor ("+c+"=0x"+c.toString(16)+") is larger in value than a single byte.");var D=(c>15?"0x":"0x0")+c.toString(16);return a(function(y,w){var S=tt(y,w);return S===c?B(w+1,S):$(w,D)})},buffer:function(c){return V("buffer",c).map(function(D){return Buffer.from(D)})},encodedString:function(c,D){return V("string",D).map(function(y){return y.toString(c)})},uintBE:ee,uint8BE:ee(1),uint16BE:ee(2),uint32BE:ee(4),uintLE:de,uint8LE:de(1),uint16LE:de(2),uint32LE:de(4),intBE:Me,int8BE:Me(1),int16BE:Me(2),int32BE:Me(4),intLE:Ae,int8LE:Ae(1),int16LE:Ae(2),int32LE:Ae(4),floatBE:V("floatBE",4).map(function(c){return c.readFloatBE(0)}),floatLE:V("floatLE",4).map(function(c){return c.readFloatLE(0)}),doubleBE:V("doubleBE",8).map(function(c){return c.readDoubleBE(0)}),doubleLE:V("doubleLE",8).map(function(c){return c.readDoubleLE(0)})},n.exports=a}])})})(Ss);var d=Ss.exports,qn=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC08\uDC26](?:\u200D\u2B1B)?|[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;function Ts(t){return t==null?t:t.shiftToAll().normalize()}function xs(t){return t.includes("/")&&(t=t.substring(t.lastIndexOf("/")+1)),t.endsWith(".md")&&(t=t.substring(0,t.length-3)),t}d.alt(d.regex(new RegExp(qn(),"")),d.regex(/[0-9\p{Letter}_-]+/u).map(t=>t.toLocaleLowerCase()),d.whitespace.map(t=>"-"),d.any.map(t=>"")).many().map(t=>t.join(""));const ca=d.alt(d.regex(new RegExp(qn(),"")),d.regex(/[0-9\p{Letter}_-]+/u),d.whitespace.map(t=>" "),d.any.map(t=>" ")).many().map(t=>t.join("").split(/\s+/).join(" ").trim());function fa(t){return ca.tryParse(t)}function da(t){return t=Ts(t),t=k.fromObject(Object.fromEntries(Object.entries(t.toObject()).filter(([,e])=>e!=0))),t.toHuman()}var It;(function(t){function e(v,P=Hn,te=!1){let B=n(v);if(!B)return P.renderNullAs;switch(B.type){case"null":return P.renderNullAs;case"string":return B.value;case"number":case"boolean":return""+B.value;case"html":return B.value.outerHTML;case"widget":return B.value.markdown();case"link":return B.value.markdown();case"function":return"<function>";case"array":let $="";return te&&($+="["),$+=B.value.map(Z=>e(Z,P,!0)).join(", "),te&&($+="]"),$;case"object":return"{ "+Object.entries(B.value).map(Z=>Z[0]+": "+e(Z[1],P,!0)).join(", ")+" }";case"date":return B.value.second==0&&B.value.hour==0&&B.value.minute==0?B.value.toFormat(P.defaultDateFormat):B.value.toFormat(P.defaultDateTimeFormat);case"duration":return da(B.value)}}t.toString=e;function n(v){return N(v)?{type:"null",value:v}:C(v)?{type:"number",value:v}:E(v)?{type:"string",value:v}:V(v)?{type:"boolean",value:v}:R(v)?{type:"duration",value:v}:O(v)?{type:"date",value:v}:ee(v)?{type:"widget",value:v}:M(v)?{type:"array",value:v}:X(v)?{type:"link",value:v}:Ae(v)?{type:"function",value:v}:de(v)?{type:"html",value:v}:Me(v)?{type:"object",value:v}:void 0}t.wrapValue=n;function r(v,P){if(Me(v)){let te={};for(let[B,$]of Object.entries(v))te[B]=r($,P);return te}else if(M(v)){let te=[];for(let B of v)te.push(r(B,P));return te}else return P(v)}t.mapLeaves=r;function i(v,P,te){if(v===void 0&&(v=null),P===void 0&&(P=null),v===null&&P===null)return 0;if(v===null)return-1;if(P===null)return 1;let B=n(v),$=n(P);if(B===void 0&&$===void 0)return 0;if(B===void 0)return-1;if($===void 0)return 1;if(B.type!=$.type)return B.type.localeCompare($.type);if(B.value===$.value)return 0;switch(B.type){case"string":return B.value.localeCompare($.value);case"number":return B.value<$.value?-1:B.value==$.value?0:1;case"null":return 0;case"boolean":return B.value==$.value?0:B.value?1:-1;case"link":let Z=B.value,Ce=$.value,Rt=te??(Se=>Se),$e=Rt(Z.path).localeCompare(Rt(Ce.path));if($e!=0)return $e;let tt=Z.type.localeCompare(Ce.type);return tt!=0?tt:Z.subpath&&!Ce.subpath?1:!Z.subpath&&Ce.subpath?-1:!Z.subpath&&!Ce.subpath?0:(Z.subpath??"").localeCompare(Ce.subpath??"");case"date":return B.value<$.value?-1:B.value.equals($.value)?0:1;case"duration":return B.value<$.value?-1:B.value.equals($.value)?0:1;case"array":let Ne=B.value,be=$.value;for(let Se=0;Se<Math.min(Ne.length,be.length);Se++){let ze=i(Ne[Se],be[Se]);if(ze!=0)return ze}return Ne.length-be.length;case"object":let qe=B.value,cn=$.value,_t=Array.from(Object.keys(qe)),ve=Array.from(Object.keys(cn));_t.sort(),ve.sort();let fn=i(_t,ve);if(fn!=0)return fn;for(let Se of _t){let ze=i(qe[Se],cn[Se]);if(ze!=0)return ze}return 0;case"widget":case"html":case"function":return 0}}t.compareValue=i;function a(v){return n(v)?.type}t.typeOf=a;function o(v){let P=n(v);if(!P)return!1;switch(P.type){case"number":return P.value!=0;case"string":return P.value.length>0;case"boolean":return P.value;case"link":return!!P.value.path;case"date":return P.value.toMillis()!=0;case"duration":return P.value.as("seconds")!=0;case"object":return Object.keys(P.value).length>0;case"array":return P.value.length>0;case"null":return!1;case"html":case"widget":case"function":return!0}}t.isTruthy=o;function m(v){if(v==null)return v;if(t.isArray(v))return[].concat(v.map(P=>m(P)));if(t.isObject(v)){let P={};for(let[te,B]of Object.entries(v))P[te]=m(B);return P}else return v}t.deepCopy=m;function E(v){return typeof v=="string"}t.isString=E;function C(v){return typeof v=="number"}t.isNumber=C;function O(v){return v instanceof A}t.isDate=O;function R(v){return v instanceof k}t.isDuration=R;function N(v){return v==null}t.isNull=N;function M(v){return Array.isArray(v)}t.isArray=M;function V(v){return typeof v=="boolean"}t.isBoolean=V;function X(v){return v instanceof ae}t.isLink=X;function ee(v){return v instanceof zn}t.isWidget=ee;function de(v){return typeof HTMLElement<"u"?v instanceof HTMLElement:!1}t.isHtml=de;function Me(v){return typeof v=="object"&&!de(v)&&!ee(v)&&!M(v)&&!R(v)&&!O(v)&&!X(v)&&v!==void 0&&!N(v)}t.isObject=Me;function Ae(v){return typeof v=="function"}t.isFunction=Ae})(It||(It={}));var Os;(function(t){function e(i){return It.isObject(i)&&Object.keys(i).length==2&&"key"in i&&"rows"in i}t.isElementGroup=e;function n(i){for(let a of i)if(!e(a))return!1;return!0}t.isGrouping=n;function r(i){if(n(i)){let a=0;for(let o of i)a+=r(o.rows);return a}else return i.length}t.count=r})(Os||(Os={}));class ae{path;display;subpath;embed;type;static file(e,n=!1,r){return new ae({path:e,embed:n,display:r,subpath:void 0,type:"file"})}static infer(e,n=!1,r){if(e.includes("#^")){let i=e.split("#^");return ae.block(i[0],i[1],n,r)}else if(e.includes("#")){let i=e.split("#");return ae.header(i[0],i[1],n,r)}else return ae.file(e,n,r)}static header(e,n,r,i){return new ae({path:e,embed:r,display:i,subpath:fa(n),type:"header"})}static block(e,n,r,i){return new ae({path:e,embed:r,display:i,subpath:n,type:"block"})}static fromObject(e){return new ae(e)}constructor(e){Object.assign(this,e)}equals(e){return e==null||e==null?!1:this.path==e.path&&this.type==e.type&&this.subpath==e.subpath}toString(){return this.markdown()}toObject(){return{path:this.path,type:this.type,subpath:this.subpath,display:this.display,embed:this.embed}}withPath(e){return new ae(Object.assign({},this,{path:e}))}withDisplay(e){return new ae(Object.assign({},this,{display:e}))}withHeader(e){return ae.header(this.path,e,this.embed,this.display)}toFile(){return ae.file(this.path,this.embed,this.display)}toEmbed(){if(this.embed)return this;{let e=new ae(this);return e.embed=!0,e}}fromEmbed(){if(this.embed){let e=new ae(this);return e.embed=!1,e}else return this}markdown(){let e=(this.embed?"!":"")+"[["+this.obsidianLink();return this.display?e+="|"+this.display:(e+="|"+xs(this.path),(this.type=="header"||this.type=="block")&&(e+=" > "+this.subpath)),e+="]]",e}obsidianLink(){const e=this.path.replaceAll("|","\\|");return this.type=="header"?e+"#"+this.subpath?.replaceAll("|","\\|"):this.type=="block"?e+"#^"+this.subpath?.replaceAll("|","\\|"):e}fileName(){return xs(this.path).replace(".md","")}}class zn{$widget;constructor(e){this.$widget=e}}class ha extends zn{key;value;constructor(e,n){super("dataview:list-pair"),this.key=e,this.value=n}markdown(){return`${It.toString(this.key)}: ${It.toString(this.value)}`}}class Da extends zn{url;display;constructor(e,n){super("dataview:external-link"),this.url=e,this.display=n}markdown(){return`[${this.display??this.url}](${this.url})`}}var ks;(function(t){function e(o,m){return new ha(o,m)}t.listPair=e;function n(o,m){return new Da(o,m)}t.externalLink=n;function r(o){return o.$widget==="dataview:list-pair"}t.isListPair=r;function i(o){return o.$widget==="dataview:external-link"}t.isExternalLink=i;function a(o){return r(o)||i(o)}t.isBuiltin=a})(ks||(ks={}));var J;(function(t){function e(N){return{type:"variable",name:N}}t.variable=e;function n(N){return{type:"literal",value:N}}t.literal=n;function r(N,M,V){return{type:"binaryop",left:N,op:M,right:V}}t.binaryOp=r;function i(N,M){return{type:"index",object:N,index:M}}t.index=i;function a(N){let M=N.split("."),V=t.variable(M[0]);for(let X=1;X<M.length;X++)V=t.index(V,t.literal(M[X]));return V}t.indexVariable=a;function o(N,M){return{type:"lambda",arguments:N,value:M}}t.lambda=o;function m(N,M){return{type:"function",func:N,arguments:M}}t.func=m;function E(N){return{type:"list",values:N}}t.list=E;function C(N){return{type:"object",values:N}}t.object=C;function O(N){return{type:"negated",child:N}}t.negate=O;function R(N){return N=="<="||N=="<"||N==">"||N==">="||N=="!="||N=="="}t.isCompareOp=R,t.NULL=t.literal(null)})(J||(J={}));var Be;(function(t){function e(O){return{type:"tag",tag:O}}t.tag=e;function n(O){return{type:"csv",path:O}}t.csv=n;function r(O){return{type:"folder",folder:O}}t.folder=r;function i(O,R){return{type:"link",file:O,direction:R?"incoming":"outgoing"}}t.link=i;function a(O,R,N){return{type:"binaryop",left:O,op:R,right:N}}t.binaryOp=a;function o(O,R){return{type:"binaryop",left:O,op:"&",right:R}}t.and=o;function m(O,R){return{type:"binaryop",left:O,op:"|",right:R}}t.or=m;function E(O){return{type:"negate",child:O}}t.negate=E;function C(){return{type:"empty"}}t.empty=C})(Be||(Be={}));const Bs=new RegExp(qn(),""),Yn={year:k.fromObject({years:1}),years:k.fromObject({years:1}),yr:k.fromObject({years:1}),yrs:k.fromObject({years:1}),month:k.fromObject({months:1}),months:k.fromObject({months:1}),mo:k.fromObject({months:1}),mos:k.fromObject({months:1}),week:k.fromObject({weeks:1}),weeks:k.fromObject({weeks:1}),wk:k.fromObject({weeks:1}),wks:k.fromObject({weeks:1}),w:k.fromObject({weeks:1}),day:k.fromObject({days:1}),days:k.fromObject({days:1}),d:k.fromObject({days:1}),hour:k.fromObject({hours:1}),hours:k.fromObject({hours:1}),hr:k.fromObject({hours:1}),hrs:k.fromObject({hours:1}),h:k.fromObject({hours:1}),minute:k.fromObject({minutes:1}),minutes:k.fromObject({minutes:1}),min:k.fromObject({minutes:1}),mins:k.fromObject({minutes:1}),m:k.fromObject({minutes:1}),second:k.fromObject({seconds:1}),seconds:k.fromObject({seconds:1}),sec:k.fromObject({seconds:1}),secs:k.fromObject({seconds:1}),s:k.fromObject({seconds:1})},Gn={now:()=>A.local(),today:()=>A.local().startOf("day"),yesterday:()=>A.local().startOf("day").minus(k.fromObject({days:1})),tomorrow:()=>A.local().startOf("day").plus(k.fromObject({days:1})),sow:()=>A.local().startOf("week"),"start-of-week":()=>A.local().startOf("week"),eow:()=>A.local().endOf("week"),"end-of-week":()=>A.local().endOf("week"),soy:()=>A.local().startOf("year"),"start-of-year":()=>A.local().startOf("year"),eoy:()=>A.local().endOf("year"),"end-of-year":()=>A.local().endOf("year"),som:()=>A.local().startOf("month"),"start-of-month":()=>A.local().startOf("month"),eom:()=>A.local().endOf("month"),"end-of-month":()=>A.local().endOf("month")},Jn=["FROM","WHERE","LIMIT","GROUP","FLATTEN"];function ma(t){let e=-1;for(;(e=t.indexOf("|",e+1))>=0;)if(!(e>0&&t[e-1]=="\\"))return[t.substring(0,e).replace(/\\\|/g,"|"),t.substring(e+1)];return[t.replace(/\\\|/g,"|"),void 0]}function pa(t){let[e,n]=ma(t);return ae.infer(e,!1,n)}function Lt(t,e,n){return d.seqMap(t,d.seq(d.optWhitespace,e,d.optWhitespace,t).many(),(r,i)=>{if(i.length==0)return r;let a=n(r,i[0][1],i[0][3]);for(let o=1;o<i.length;o++)a=n(a,i[o][1],i[o][3]);return a})}function ga(t,...e){return d.custom((n,r)=>(i,a)=>{let o=t._(i,a);if(!o.status)return o;for(let m of e){let E=m(o.value)._(i,o.index);if(!E.status)return o;o=E}return o})}const we=d.createLanguage({number:t=>d.regexp(/-?[0-9]+(\.[0-9]+)?/).map(e=>Number.parseFloat(e)).desc("number"),string:t=>d.string('"').then(d.alt(t.escapeCharacter,d.noneOf('"\\')).atLeast(0).map(e=>e.join(""))).skip(d.string('"')).desc("string"),escapeCharacter:t=>d.string("\\").then(d.any).map(e=>e==='"'?'"':e==="\\"?"\\":"\\"+e),bool:t=>d.regexp(/true|false|True|False/).map(e=>e.toLowerCase()=="true").desc("boolean ('true' or 'false')"),tag:t=>d.seqMap(d.string("#"),d.alt(d.regexp(/[^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\\s]/).desc("text")).many(),(e,n)=>e+n.join("")).desc("tag ('#hello/stuff')"),identifier:t=>d.seqMap(d.alt(d.regexp(/\p{Letter}/u),d.regexp(Bs).desc("text")),d.alt(d.regexp(/[0-9\p{Letter}_-]/u),d.regexp(Bs).desc("text")).many(),(e,n)=>e+n.join("")).desc("variable identifier"),link:t=>d.regexp(/\[\[([^\[\]]*?)\]\]/u,1).map(e=>pa(e)).desc("file link"),embedLink:t=>d.seqMap(d.string("!").atMost(1),t.link,(e,n)=>(e.length>0&&(n.embed=!0),n)).desc("file link"),binaryPlusMinus:t=>d.regexp(/\+|-/).map(e=>e).desc("'+' or '-'"),binaryMulDiv:t=>d.regexp(/\*|\/|%/).map(e=>e).desc("'*' or '/' or '%'"),binaryCompareOp:t=>d.regexp(/>=|<=|!=|>|<|=/).map(e=>e).desc("'>=' or '<=' or '!=' or '=' or '>' or '<'"),binaryBooleanOp:t=>d.regexp(/and|or|&|\|/i).map(e=>e.toLowerCase()=="and"?"&":e.toLowerCase()=="or"?"|":e).desc("'and' or 'or'"),rootDate:t=>d.seqMap(d.regexp(/\d{4}/),d.string("-"),d.regexp(/\d{2}/),(e,n,r)=>A.fromObject({year:Number.parseInt(e),month:Number.parseInt(r)})).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),dateShorthand:t=>d.alt(...Object.keys(Gn).sort((e,n)=>n.length-e.length).map(d.string)),date:t=>ga(t.rootDate,e=>d.seqMap(d.string("-"),d.regexp(/\d{2}/),(n,r)=>e.set({day:Number.parseInt(r)})),e=>d.seqMap(d.string("T"),d.regexp(/\d{2}/),(n,r)=>e.set({hour:Number.parseInt(r)})),e=>d.seqMap(d.string(":"),d.regexp(/\d{2}/),(n,r)=>e.set({minute:Number.parseInt(r)})),e=>d.seqMap(d.string(":"),d.regexp(/\d{2}/),(n,r)=>e.set({second:Number.parseInt(r)})),e=>d.alt(d.seqMap(d.string("."),d.regexp(/\d{3}/),(n,r)=>e.set({millisecond:Number.parseInt(r)})),d.succeed(e)),e=>d.alt(d.seqMap(d.string("+").or(d.string("-")),d.regexp(/\d{1,2}(:\d{2})?/),(n,r)=>e.setZone("UTC"+n+r,{keepLocalTime:!0})),d.seqMap(d.string("Z"),()=>e.setZone("utc",{keepLocalTime:!0})),d.seqMap(d.string("["),d.regexp(/[0-9A-Za-z+-\/]+/u),d.string("]"),(n,r,i)=>e.setZone(r,{keepLocalTime:!0})))).assert(e=>e.isValid,"valid date").desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),datePlus:t=>d.alt(t.dateShorthand.map(e=>Gn[e]()),t.date).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand"),durationType:t=>d.alt(...Object.keys(Yn).sort((e,n)=>n.length-e.length).map(d.string)),duration:t=>d.seqMap(t.number,d.optWhitespace,t.durationType,(e,n,r)=>Yn[r].mapUnits(i=>i*e)).sepBy1(d.string(",").trim(d.optWhitespace).or(d.optWhitespace)).map(e=>e.reduce((n,r)=>n.plus(r))).desc("duration like 4hr2min"),rawNull:t=>d.string("null"),tagSource:t=>t.tag.map(e=>Be.tag(e)),csvSource:t=>d.seqMap(d.string("csv(").skip(d.optWhitespace),t.string,d.string(")"),(e,n,r)=>Be.csv(n)),linkIncomingSource:t=>t.link.map(e=>Be.link(e.path,!0)),linkOutgoingSource:t=>d.seqMap(d.string("outgoing(").skip(d.optWhitespace),t.link,d.string(")"),(e,n,r)=>Be.link(n.path,!1)),folderSource:t=>t.string.map(e=>Be.folder(e)),parensSource:t=>d.seqMap(d.string("("),d.optWhitespace,t.source,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>r),negateSource:t=>d.seqMap(d.alt(d.string("-"),d.string("!")),t.atomSource,(e,n)=>Be.negate(n)),atomSource:t=>d.alt(t.parensSource,t.negateSource,t.linkOutgoingSource,t.linkIncomingSource,t.folderSource,t.tagSource,t.csvSource),binaryOpSource:t=>Lt(t.atomSource,t.binaryBooleanOp.map(e=>e),Be.binaryOp),source:t=>t.binaryOpSource,variableField:t=>t.identifier.chain(e=>Jn.includes(e.toUpperCase())?d.fail("Variable fields cannot be a keyword ("+Jn.join(" or ")+")"):d.succeed(J.variable(e))).desc("variable"),numberField:t=>t.number.map(e=>J.literal(e)).desc("number"),stringField:t=>t.string.map(e=>J.literal(e)).desc("string"),boolField:t=>t.bool.map(e=>J.literal(e)).desc("boolean"),dateField:t=>d.seqMap(d.string("date("),d.optWhitespace,t.datePlus,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>J.literal(r)).desc("date"),durationField:t=>d.seqMap(d.string("dur("),d.optWhitespace,t.duration,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>J.literal(r)).desc("duration"),nullField:t=>t.rawNull.map(e=>J.NULL),linkField:t=>t.link.map(e=>J.literal(e)),listField:t=>t.field.sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("[").skip(d.optWhitespace),d.optWhitespace.then(d.string("]"))).map(e=>J.list(e)).desc("list ('[1, 2, 3]')"),objectField:t=>d.seqMap(t.identifier.or(t.string),d.string(":").trim(d.optWhitespace),t.field,(e,n,r)=>({name:e,value:r})).sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("{").skip(d.optWhitespace),d.optWhitespace.then(d.string("}"))).map(e=>{let n={};for(let r of e)n[r.name]=r.value;return J.object(n)}).desc("object ('{ a: 1, b: 2 }')"),atomInlineField:t=>d.alt(t.date,t.duration.map(e=>Ts(e)),t.string,t.tag,t.embedLink,t.bool,t.number,t.rawNull),inlineFieldList:t=>t.atomInlineField.sepBy(d.string(",").trim(d.optWhitespace).lookahead(t.atomInlineField)),inlineField:t=>d.alt(d.seqMap(t.atomInlineField,d.string(",").trim(d.optWhitespace),t.inlineFieldList,(e,n,r)=>[e].concat(r)),t.atomInlineField),atomField:t=>d.alt(t.embedLink.map(e=>J.literal(e)),t.negatedField,t.linkField,t.listField,t.objectField,t.lambdaField,t.parensField,t.boolField,t.numberField,t.stringField,t.dateField,t.durationField,t.nullField,t.variableField),indexField:t=>d.seqMap(t.atomField,d.alt(t.dotPostfix,t.indexPostfix,t.functionPostfix).many(),(e,n)=>{let r=e;for(let i of n)switch(i.type){case"dot":r=J.index(r,J.literal(i.field));break;case"index":r=J.index(r,i.field);break;case"function":r=J.func(r,i.fields);break}return r}),negatedField:t=>d.seqMap(d.string("!"),t.indexField,(e,n)=>J.negate(n)).desc("negated field"),parensField:t=>d.seqMap(d.string("("),d.optWhitespace,t.field,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>r),lambdaField:t=>d.seqMap(t.identifier.sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("(").trim(d.optWhitespace),d.string(")").trim(d.optWhitespace)),d.string("=>").trim(d.optWhitespace),t.field,(e,n,r)=>({type:"lambda",arguments:e,value:r})),dotPostfix:t=>d.seqMap(d.string("."),t.identifier,(e,n)=>({type:"dot",field:n})),indexPostfix:t=>d.seqMap(d.string("["),d.optWhitespace,t.field,d.optWhitespace,d.string("]"),(e,n,r,i,a)=>({type:"index",field:r})),functionPostfix:t=>d.seqMap(d.string("("),d.optWhitespace,t.field.sepBy(d.string(",").trim(d.optWhitespace)),d.optWhitespace,d.string(")"),(e,n,r,i,a)=>({type:"function",fields:r})),binaryMulDivField:t=>Lt(t.indexField,t.binaryMulDiv,J.binaryOp),binaryPlusMinusField:t=>Lt(t.binaryMulDivField,t.binaryPlusMinus,J.binaryOp),binaryCompareField:t=>Lt(t.binaryPlusMinusField,t.binaryCompareOp,J.binaryOp),binaryBooleanField:t=>Lt(t.binaryCompareField,t.binaryBooleanOp,J.binaryOp),binaryOpField:t=>t.binaryBooleanField,field:t=>t.binaryOpField});function Fa(t){try{return on.success(we.field.tryParse(t))}catch(e){return on.failure(""+e)}}var ln;(function(t){function e(r,i){return{name:r,field:i}}t.named=e;function n(r,i){return{field:r,direction:i}}t.sortBy=n})(ln||(ln={}));function ya(t){return d.custom((e,n)=>(r,i)=>{let a=t._(r,i);return a.status?Object.assign({},a,{value:[a.value,r.substring(i,a.index)]}):a})}function Ea(t){return t.split(/[\r\n]+/).map(e=>e.trim()).join("")}function Ms(t,e){return d.eof.map(t).or(d.whitespace.then(e))}const As=d.createLanguage({queryType:t=>d.alt(d.regexp(/TABLE|LIST|TASK|CALENDAR/i)).map(e=>e.toLowerCase()).desc("query type ('TABLE', 'LIST', 'TASK', or 'CALENDAR')"),explicitNamedField:t=>d.seqMap(we.field.skip(d.whitespace),d.regexp(/AS/i).skip(d.whitespace),we.identifier.or(we.string),(e,n,r)=>ln.named(r,e)),comment:()=>d.Parser((t,e)=>{let n=t.substring(e);if(!n.startsWith("//"))return d.makeFailure(e,"Not a comment");n=n.split(`
`)[0];let r=n.substring(2).trim();return d.makeSuccess(e+n.length,r)}),namedField:t=>d.alt(t.explicitNamedField,ya(we.field).map(([e,n])=>ln.named(Ea(n),e))),sortField:t=>d.seqMap(we.field.skip(d.optWhitespace),d.regexp(/ASCENDING|DESCENDING|ASC|DESC/i).atMost(1),(e,n)=>{let r=n.length==0?"ascending":n[0].toLowerCase();return r=="desc"&&(r="descending"),r=="asc"&&(r="ascending"),{field:e,direction:r}}),headerClause:t=>t.queryType.chain(e=>{switch(e){case"table":return Ms(()=>({type:e,fields:[],showId:!0}),d.seqMap(d.regexp(/WITHOUT\s+ID/i).skip(d.optWhitespace).atMost(1),d.sepBy(t.namedField,d.string(",").trim(d.optWhitespace)),(n,r)=>({type:e,fields:r,showId:n.length==0})));case"list":return Ms(()=>({type:e,format:void 0,showId:!0}),d.seqMap(d.regexp(/WITHOUT\s+ID/i).skip(d.optWhitespace).atMost(1),we.field.atMost(1),(n,r)=>({type:e,format:r.length==1?r[0]:void 0,showId:n.length==0})));case"task":return d.succeed({type:e});case"calendar":return d.whitespace.then(d.seqMap(t.namedField,n=>({type:e,showId:!0,field:n})));default:return d.fail(`Unrecognized query type '${e}'`)}}).desc("TABLE or LIST or TASK or CALENDAR"),fromClause:t=>d.seqMap(d.regexp(/FROM/i),d.whitespace,we.source,(e,n,r)=>r),whereClause:t=>d.seqMap(d.regexp(/WHERE/i),d.whitespace,we.field,(e,n,r)=>({type:"where",clause:r})).desc("WHERE <expression>"),sortByClause:t=>d.seqMap(d.regexp(/SORT/i),d.whitespace,t.sortField.sepBy1(d.string(",").trim(d.optWhitespace)),(e,n,r)=>({type:"sort",fields:r})).desc("SORT field [ASC/DESC]"),limitClause:t=>d.seqMap(d.regexp(/LIMIT/i),d.whitespace,we.field,(e,n,r)=>({type:"limit",amount:r})).desc("LIMIT <value>"),flattenClause:t=>d.seqMap(d.regexp(/FLATTEN/i).skip(d.whitespace),t.namedField,(e,n)=>({type:"flatten",field:n})).desc("FLATTEN <value> [AS <name>]"),groupByClause:t=>d.seqMap(d.regexp(/GROUP BY/i).skip(d.whitespace),t.namedField,(e,n)=>({type:"group",field:n})).desc("GROUP BY <value> [AS <name>]"),clause:t=>d.alt(t.fromClause,t.whereClause,t.sortByClause,t.limitClause,t.groupByClause,t.flattenClause),query:t=>d.seqMap(t.headerClause.trim(Kn),t.fromClause.trim(Kn).atMost(1),t.clause.trim(Kn).many(),(e,n,r)=>({header:e,source:n.length==0?Be.folder(""):n[0],operations:r,settings:Hn}))}),Kn=d.alt(d.whitespace,As.comment).many().map(t=>t.join("")),wa=t=>t?t.plugins.plugins.dataview?.api:window.DataviewAPI,Ca=t=>t.plugins.enabledPlugins.has("dataview");return Te.DATE_SHORTHANDS=Gn,Te.DURATION_TYPES=Yn,Te.EXPRESSION=we,Te.KEYWORDS=Jn,Te.QUERY_LANGUAGE=As,Te.getAPI=wa,Te.isPluginEnabled=Ca,Te.parseField=Fa,Te}var ei=Oo();class ko{constructor(s){this.plugin=s}id="dataview";test(s){return/^(TABLE|LIST|TASK|CALENDAR)/.test(s)}async parse(s,u){return ei.isPluginEnabled(this.plugin.app)?await ei.getAPI(this.plugin.app).query(s,u):{successful:!1,value:void 0}}}class Bo{constructor(s){this.plugin=s,this.#e=[new ko(s),new xo,new To]}#e;#t(){if(!this.plugin.settings.enable_separators)return;const s=this.plugin.settings.usage_separator.replace(/[.+*?^${}()|[\]\\]/gi,"\\$&");return new RegExp(s,"gi")}async parse(s,u,l){l.trace(`Parsing from '${u}' <${s}>`);const h=this.#t();try{if(h?.test(s)){for(const p of this.#e)if(p.test(s)){l.debug(`Parsing as ${p.id}`);const F=[];for(const b of s.split(h))F.push(await p.parse(b,u));return{syntax:p.id,data:F}}}for(const p of this.#e)if(p.test(s))return l.debug(`Parsing as ${p.id}`),{syntax:p.id,data:await p.parse(s,u)}}catch(p){l.debug(p)}return l.debug("Failed parsing",s),{syntax:"unknown",data:s}}}class pi{constructor(s){this.plugin=s}renderHTML(s,u,l){l.debug("Rendering as HTML"),s.innerHTML=u}renderMarkdown(s,u,l,h){h.debug("Rendering as Markdown"),U.MarkdownRenderer.render(this.plugin.app,u,s,l,this.plugin)}}class Mo extends pi{test(s){return/\.(md|html)$/i.test(s.name)}async render(s,u,l,h,p){p.debug("Rendering from Template");const F=await this.#e(s,p),b=this.#t(F,h,p);s.name.endsWith("md")?this.renderMarkdown(l,b,u.notepath,p):this.renderHTML(l,b,p)}#e(s,u){return u.debug("Retrieving Template"),this.plugin.app.vault.read(s)}#t(s,u,l){return l.debug("Replacing Placeholders"),u?!mi(u)&&!Array.isArray(u)?s.replace(/\{\{ *(\w+) *\}\}/gi,String(u)):s.replace(/\{\{ *(\w+) *\}\}/gi,(h,p)=>u[p]?String(u[p]):`{{ ${p} }}`):s}}class Ao extends pi{#e;constructor(s,u){super(s),this.#e=u}test(s){return/\.[cm]js$/.test(s.name)}async render(s,u,l,h,p){p.debug("Rendering from Javascript");const F=await this.#t(s,p);if(/\.md\.[cm]js$/i.test(s.name)){const b=await F(h,u);this.renderMarkdown(l,b,u.notepath,p)}else if(/\.html\.[cm]js$/i.test(s.name)){const b=await F(h,u);this.renderHTML(l,b,p)}else await F(l,h,u)}async#t(s,u){u.debug("Retrieving Javascript Renderer");const l=await this.#n(s,u);if(typeof l=="function")return l;if(!mi(l))throw new it(`component(${s.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"});if(typeof l.default=="function")return l.default;if(typeof l.render=="function")return l.render;throw new it(`component(${s.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"})}async#n(s,u){u.debug("Sourcing Renderer");try{if(s.extension==="mjs"){const h=this.#e.getResourcePath(s);return u.debug(`import('${h}')`),await import(h)}const l=this.#e.getAbsolutePath(s.path);return u.debug(`require('${l}')`),require(l)}catch(l){throw new it(`component(${s.name}) could not be imported/required`,{cause:l,code:"invalid-component-syntax"})}}}class No{#e;constructor(s){const u=new ur(s);this.#e=[new Mo(s),new Ao(s,u)]}async render(s,u,l,h,p){for(const F of this.#e)if(F.test(s))return l.empty(),F.render(s,u,l,h,p);throw new it(`component(${s.name}) is not supported`,{code:"unsupported-component"})}}const ti=()=>/(?<=from *['"`]|require *\( *['"`])(.+)(?=['"`])/gi;class ar{#e;#t;#n;#r;#s;#i=new bt;#u=new bt;constructor(s,u){this.#e=s.log.make(ar.name),this.#t=new ur(s),this.#n=s,this.#r=u,this.#s=this.#n.app.vault.on("modify",async l=>{if(!(l instanceof U.TFile))return;const h=this.#e.group();h.debug(`Listening changes on <${l.name}>`),h.debug("Listing affected files");const p=await this.#o(l,h);p.length&&(h.debug("Prepared affected files"),await this.#r(p,h)),h.flush(`Listened changes on <${l.name}>`)})}clear(){this.#n.app.vault.offref(this.#s),this.#i.clear(),this.#u.clear()}async resetCache(s){this.#n.isDesignModeEnabled&&(await this.#t.renewFolder(this.#t.getCachePath()),s.info("Cleared Versions Cache"))}resolveLatest(s){return this.#n.isDesignModeEnabled?this.#u.getFirst(s)??s:s}async#o(s,u){const l=[],h=[s],p=async F=>{u.debug(`Refreshing dependencies <${F.name}>`),await this.#a(F,u),u.debug(`Checking dependents <${F.name}>`);for(const b of this.#i.keysWithValue(F.path)){const g=this.#t.resolveFile(b);g?h.push(g):u.warn("Not found",b)}};for(;h.length;){const F=h.shift();if(!F||l.includes(F.path))continue;if(["html","md"].includes(F.extension)){u.debug(`Affected Template <${F.name}>`),l.push(F.path);continue}if(F.extension==="cjs"){u.debug(`Affected CommonJS <${F.name}>`),l.push(F.path),u.debug(`Deleting cache <${F.name}>`);const g=this.#t.getAbsolutePath(F.path);delete window.require.cache[window.require.resolve(g)],await p(F);continue}if(!this.#n.isDesignModeEnabled||!this.#i.has(F.path)&&!F.path.startsWith(this.#n.settings.components_folder))continue;u.debug(`Affected ESModule <${F.name}>`),l.push(F.path),u.debug(`Caching clone <${F.name}>`);const b=await this.#l(F,u);this.#u.prepend(F.path,b),await p(F)}return u.trace("Current cjs cache",{...window.require.cache}),l.unique()}async#l(s,u){const l=await this.#t.getFileHash(s),h=`${l}.${s.basename}.${s.extension}`,p=this.#t.getCachePath(h);if(await this.#t.missing(p))return u.debug(`Caching <${s.name}> to <${h}>`),await this.#t.copy(s,p,I=>this.#c(s,I,u)),p;const F=Date.now().toString(),b=`${l}-${F}.${s.basename}.${s.extension}`,g=this.#t.getCachePath(b);return u.debug(`Cloning <${h}> to <${b}>`),await this.#t.copy(s,g,I=>this.#c(s,I,u)),g}#c(s,u,l){const h=s.parent?.path??"";return u.replaceAll(ti(),p=>{const F=this.#t.join(h,p),b=this.resolveLatest(F);return l.trace(`Replacing import path <${b}>`),this.#t.getAbsolutePath(b)})}async indexAllComponents(s){const u=this.#n.settings.components_folder,l=this.#n.app.vault.getFolderByPath(u);if(!l)throw new Error(`path <${u}> is not a folder`);s.info("Indexing files"),await this.indexComponent(l,s),s.debug("Indexed files",{tracked:this.#i,versions:this.#u})}async indexComponent(s,u){if(this.#i.has(s.path))return;const l=[s];for(;l.length;){const h=l.shift();if(h instanceof U.TFolder){u.debug(`Indexing folder <${h.name}>`),l.push(...h.children);continue}if(h instanceof U.TFile&&!this.#i.has(h.path)){this.#i.store(h.path),u.debug(`Indexing dependencies on <${h.name}>`);for(const p of await this.#a(h,u)){const F=this.#t.resolveFile(p);F?l.push(F):u.warn("Not found",p)}}}}async#a(s,u){const l=s.parent?.path??"",h=await this.#t.read(s.path),p=[];for(const F of h.matchAll(ti())){const b=this.#t.join(l,F[0]||"");u.trace(`file <${s.name}> imports <${b}>`),this.#i.push(s.path,b),p.push(b)}return p}}class or{#e;#t;#n;#r;#s;#i=new bt;#u=[];constructor(s){this.#e=s.log.make(or.name),this.#t=s,this.#n=new Bo(s),this.#r=new No(s),this.#s=new ar(s,this.refresh.bind(this))}async clear(s){s.info("Clearing in-memory cache"),this.#i.clear(),this.#s.clear(),await this.#s.resetCache(s)}async prepareDesignMode(){const s=this.#e.group("Preparing DesignMode");try{s.info("Clearing cache"),await this.#s.resetCache(s),await this.#s.indexAllComponents(s),s.info("Refreshing All Components"),await this.refresh(Array.from(this.#i.keys()),s)}catch(u){s.warn(u)}s.flush("DesignMode Enabled")}async refresh(s,u){const l=s.length?s:this.#i.keys();u.debug("Refreshing Components",s);for(const h of l){u.debug(`Refreshing Components(${h})`);try{for(const p of this.#i.get(h))u.trace("Refreshing Codeblock",p),await this.#a(h,p,u)}catch(p){u.warn(p)}}u.debug("Refreshed Components")}registerBaseCodeblock(){this.#t.registerMarkdownCodeBlockProcessor("use",this.#o.bind(this),-100)}registerCustomCodeblocks(){for(const[s,u]of this.#t.state.components_enabled.entries())for(const l of u)this.#u.includes(l)||(this.#u.push(l),this.#t.registerMarkdownCodeBlockProcessor(l,(h,p,F)=>{this.#o(h,p,F,s,l)},-100))}async#o(s,u,l,h,p){const F=this.#e.group();try{F.debug(`Parsing Codeblock Name '${p??"use"}'`);const b=l.sourcePath,g=p??this.#l(l,u);F.debug(`Parsing Codeblock Content '${g}'`);const I=await this.#n.parse(s,b,F),L=this.#c(h,g),H=po(s);F.debug(`Serializing Codeblock '${g}'`);const z={context:{notepath:b,used_name:g,hash:H,syntax:I.syntax},element:u,data:I.data};F.trace("Serialized Codeblock",z),F.debug(`Rendering Codeblock '${g}'`),u.classList.add("component",`${g}-component`),this.#i.push(L.path,z),await this.#a(L.path,z,F);const fe=this.#t.app.vault.getFileByPath(L.path);fe&&(F.debug(`Indexing Component '${L.path}'`),await this.#s.indexComponent(fe,F)),F.flush(`Rendered Component '${g}'`)}catch(b){F.error(b),F.flush(`Failed Component on '${l.sourcePath}'`);const g=u.createEl("pre");g.classList.add("component-error"),b instanceof Ks&&(b.cause=s),b instanceof Error?g.append(b.stack??b.message):g.append(JSON.stringify(b))}}#l(s,u){const l=s.getSectionInfo(u);if(l){const p=(l.text.split(`
`).at(l.lineStart)??"").replace("```use","").trim();if(p)return p}throw new it(`component name could not be found on '${s.sourcePath}'`,{cause:l,code:"missing-component-name"})}#c(s,u){if(s){for(const l of this.#t.state.components_matchers)if(l.id===s)return l}if(u){for(const l of this.#t.state.components_matchers)if(l.test(u))return l}throw new Ks(`component(${u}) was disabled recently`)}async#a(s,{context:u,element:l,data:h},p){const F=this.#s.resolveLatest(s);p.debug(`Rendering with LatestPath '${F}'`);const b=this.#t.app.vault.getFileByPath(F);if(b)return this.#r.render(b,u,l,h,p);throw new it(`component(${F}) could not be located, try reloading Obsidian`,{code:"missing-component-file"})}}class lr{#e;#t;constructor(s){this.#e=s.log.make(lr.name),this.#t=s}}const Io={plugin_level:"WARN",enable_codeblocks:!1,enable_separators:!1,usage_separator:"---",cache_folder:"__temp/",components_folder:"",components_config:[]};class cr extends U.Plugin{log=jt.consoleLogger(cr.name);settings={};state={};api;#e;constructor(s,u){super(s,u),this.log.setLevel(oe.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new lr(this),this.#e=new or(this),window.Components=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new So(this)),this.#e.registerBaseCodeblock()}onunload(){const s=this.log.group("Clearing State");this.#e.clear(s),s.flush("Cleared State")}async loadSettings(){const s=this.log.group("Loading Settings"),u=await this.loadData()||{};this.settings=Object.assign({},Io,u),s.debug("Loaded: ",this.settings),this.#t(s),s.flush("Loaded Settings")}async saveSettings(){const s=this.log.group("Saving Settings"),u=Object.assign({},this.settings);await this.saveData(u),s.debug("Saved: ",u),this.#t(s),s.flush("Saved Settings")}#t(s){s.info("Preparing state"),this.log.setLevel(oe[this.settings.plugin_level]),this.state=go(this),this.#e.registerCustomCodeblocks()}#n=!1;get isDesignModeEnabled(){return this.#n}enableDesignMode(){this.#n||(this.#n=!0,this.#e.prepareDesignMode())}}module.exports=cr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
