/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-components@0.5.0 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-components
 */
"use strict";const p=require("obsidian"),te=require("path"),de=require("crypto");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class De{error(e,t){console.error(e,...t)}warn(e,t){console.warn(e,...t)}info(e,t){console.info(e,...t)}debug(e,t){console.debug(e,...t)}trace(e,t){console.trace(e,...t)}group(e,t){return console.groupCollapsed(e,...t),console.groupEnd}}const g=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),Re=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class _{#e;#t;#s;#n=[];#i=[];get level(){return this.#t?this.#t:this.#e?.level??g.WARN}get format(){return this.#s?this.#s:this.#e?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const e=[];for(let t=0;t<this.#i.length-1;t++)e.push(this.#i[t][0]);return e.push(this.#i.at(-1)??""),e.join(".")}get drivers(){return Object.freeze(this.#n)}setLevel(e){return this.#t=e,this}setFormat(e){return this.#s=e,this}addDrivers(...e){for(const t of e)Array.isArray(t)?this.#n.push(...t):t&&this.#n.push(t);return this}addNamespaces(...e){for(const t of e)Array.isArray(t)?this.#i.push(...t):t&&this.#i.push(t);return this}static consoleLogger(e){const t=new _;return t.setLevel(g.WARN),t.addDrivers(new De),t.addNamespaces(e),t}make(e){const t=new _;return t.#e=this,t.addDrivers(this.#n),t.addNamespaces(this.#i,e),t}prefix(e,t){return this.format.replace("hh",String(e.getHours()).padStart(2,"0")).replace("mm",String(e.getMinutes()).padStart(2,"0")).replace("ss",String(e.getSeconds()).padStart(2,"0")).replace("ms",String(e.getMilliseconds()).padStart(3,"0")).replace("level",Re[t]).replace("namespace",this.namespace)}log(e,t,s){if(this.level>t)return;const i=this.prefix(e,t);switch(this.level){case g.ERROR:this.#n.forEach(r=>r.error(i,s));break;case g.WARN:this.#n.forEach(r=>r.warn(i,s));break;case g.INFO:this.#n.forEach(r=>r.info(i,s));break;case g.DEBUG:this.#n.forEach(r=>r.debug(i,s));break;default:this.#n.forEach(r=>r.trace(i,s))}}error(...e){this.log(new Date,g.ERROR,e)}warn(...e){this.log(new Date,g.WARN,e)}info(...e){this.log(new Date,g.INFO,e)}debug(...e){this.log(new Date,g.DEBUG,e)}trace(...e){this.log(new Date,g.TRACE,e)}group(...e){const t=new Te;return t.#e=this,t.addDrivers(this.#n),t.addNamespaces(this.#i),e.length&&t.log(new Date,g.INFO,e),t}}class Te extends _{#e=[];log(e,t,s){this.level>t||this.#e.push({timestamp:e,level:t,content:s})}flush(...e){if(this.#e.length===0){super.log(new Date,g.INFO,e);return}const t=this.prefix(new Date,g.INFO),s=this.drivers.map(i=>i.group(t,e));for(const{timestamp:i,level:r,content:o}of this.#e)super.log(i,r,o);s.forEach(i=>i()),this.#e=[]}}class Le{constructor(e,t){this.app=e,this.containerEl=t,this.scope=new p.Scope,this.wrapperEl=createDiv("suggestions-tooltip")}scope;wrapperEl;registerListeners(){this.scope.register([],"Escape",this.close.bind(this))}open(){this.app.keymap.pushScope(this.scope),this.containerEl.appendChild(this.wrapperEl)}close(){this.app.keymap.popScope(this.scope),this.wrapperEl.empty(),this.wrapperEl.detach()}}const se=Math.min,P=Math.max,H=Math.round,x=n=>({x:n,y:n});function ue(n){return n.split("-")[0]}function $e(n){return n.split("-")[1]}function Fe(n){return n==="x"?"y":"x"}function Pe(n){return n==="y"?"height":"width"}function pe(n){return["top","bottom"].includes(ue(n))?"y":"x"}function _e(n){return Fe(pe(n))}function fe(n){const{x:e,y:t,width:s,height:i}=n;return{width:s,height:i,top:t,left:e,right:e+s,bottom:t+i,x:e,y:t}}function ne(n,e,t){let{reference:s,floating:i}=n;const r=pe(e),o=_e(e),a=Pe(o),c=ue(e),l=r==="y",h=s.x+s.width/2-i.width/2,d=s.y+s.height/2-i.height/2,f=s[a]/2-i[a]/2;let u;switch(c){case"top":u={x:h,y:s.y-i.height};break;case"bottom":u={x:h,y:s.y+s.height};break;case"right":u={x:s.x+s.width,y:d};break;case"left":u={x:s.x-i.width,y:d};break;default:u={x:s.x,y:s.y}}switch($e(e)){case"start":u[o]-=f*(t&&l?-1:1);break;case"end":u[o]+=f*(t&&l?-1:1);break}return u}const Ne=async(n,e,t)=>{const{placement:s="bottom",strategy:i="absolute",middleware:r=[],platform:o}=t,a=r.filter(Boolean),c=await(o.isRTL==null?void 0:o.isRTL(e));let l=await o.getElementRects({reference:n,floating:e,strategy:i}),{x:h,y:d}=ne(l,s,c),f=s,u={},b=0;for(let m=0;m<a.length;m++){const{name:E,fn:A}=a[m],{x:I,y:W,data:j,reset:D}=await A({x:h,y:d,initialPlacement:s,placement:f,strategy:i,middlewareData:u,rects:l,platform:o,elements:{reference:n,floating:e}});h=I??h,d=W??d,u={...u,[E]:{...u[E],...j}},D&&b<=50&&(b++,typeof D=="object"&&(D.placement&&(f=D.placement),D.rects&&(l=D.rects===!0?await o.getElementRects({reference:n,floating:e,strategy:i}):D.rects),{x:h,y:d}=ne(l,f,c)),m=-1)}return{x:h,y:d,placement:f,strategy:i,middlewareData:u}};function B(){return typeof window<"u"}function F(n){return ge(n)?(n.nodeName||"").toLowerCase():"#document"}function w(n){var e;return(n==null||(e=n.ownerDocument)==null?void 0:e.defaultView)||window}function S(n){var e;return(e=(ge(n)?n.ownerDocument:n.document)||window.document)==null?void 0:e.documentElement}function ge(n){return B()?n instanceof Node||n instanceof w(n).Node:!1}function y(n){return B()?n instanceof Element||n instanceof w(n).Element:!1}function C(n){return B()?n instanceof HTMLElement||n instanceof w(n).HTMLElement:!1}function ie(n){return!B()||typeof ShadowRoot>"u"?!1:n instanceof ShadowRoot||n instanceof w(n).ShadowRoot}function M(n){const{overflow:e,overflowX:t,overflowY:s,display:i}=v(n);return/auto|scroll|overlay|hidden|clip/.test(e+s+t)&&!["inline","contents"].includes(i)}function Me(n){return["table","td","th"].includes(F(n))}function V(n){return[":popover-open",":modal"].some(e=>{try{return n.matches(e)}catch{return!1}})}function G(n){const e=J(),t=y(n)?v(n):n;return["transform","translate","scale","rotate","perspective"].some(s=>t[s]?t[s]!=="none":!1)||(t.containerType?t.containerType!=="normal":!1)||!e&&(t.backdropFilter?t.backdropFilter!=="none":!1)||!e&&(t.filter?t.filter!=="none":!1)||["transform","translate","scale","rotate","perspective","filter"].some(s=>(t.willChange||"").includes(s))||["paint","layout","strict","content"].some(s=>(t.contain||"").includes(s))}function Ae(n){let e=k(n);for(;C(e)&&!L(e);){if(G(e))return e;if(V(e))return null;e=k(e)}return null}function J(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function L(n){return["html","body","#document"].includes(F(n))}function v(n){return w(n).getComputedStyle(n)}function O(n){return y(n)?{scrollLeft:n.scrollLeft,scrollTop:n.scrollTop}:{scrollLeft:n.scrollX,scrollTop:n.scrollY}}function k(n){if(F(n)==="html")return n;const e=n.assignedSlot||n.parentNode||ie(n)&&n.host||S(n);return ie(e)?e.host:e}function me(n){const e=k(n);return L(e)?n.ownerDocument?n.ownerDocument.body:n.body:C(e)&&M(e)?e:me(e)}function we(n,e,t){var s;e===void 0&&(e=[]);const i=me(n),r=i===((s=n.ownerDocument)==null?void 0:s.body),o=w(i);return r?(z(o),e.concat(o,o.visualViewport||[],M(i)?i:[],[])):e.concat(i,we(i,[]))}function z(n){return n.parent&&Object.getPrototypeOf(n.parent)?n.frameElement:null}function be(n){const e=v(n);let t=parseFloat(e.width)||0,s=parseFloat(e.height)||0;const i=C(n),r=i?n.offsetWidth:t,o=i?n.offsetHeight:s,a=H(t)!==r||H(s)!==o;return a&&(t=r,s=o),{width:t,height:s,$:a}}function ye(n){return y(n)?n:n.contextElement}function T(n){const e=ye(n);if(!C(e))return x(1);const t=e.getBoundingClientRect(),{width:s,height:i,$:r}=be(e);let o=(r?H(t.width):t.width)/s,a=(r?H(t.height):t.height)/i;return(!o||!Number.isFinite(o))&&(o=1),(!a||!Number.isFinite(a))&&(a=1),{x:o,y:a}}const Ie=x(0);function ve(n){const e=w(n);return!J()||!e.visualViewport?Ie:{x:e.visualViewport.offsetLeft,y:e.visualViewport.offsetTop}}function He(n,e,t){return e===void 0&&(e=!1),!t||e&&t!==w(n)?!1:e}function N(n,e,t,s){e===void 0&&(e=!1),t===void 0&&(t=!1);const i=n.getBoundingClientRect(),r=ye(n);let o=x(1);e&&(s?y(s)&&(o=T(s)):o=T(n));const a=He(r,t,s)?ve(r):x(0);let c=(i.left+a.x)/o.x,l=(i.top+a.y)/o.y,h=i.width/o.x,d=i.height/o.y;if(r){const f=w(r),u=s&&y(s)?w(s):s;let b=f,m=z(b);for(;m&&s&&u!==b;){const E=T(m),A=m.getBoundingClientRect(),I=v(m),W=A.left+(m.clientLeft+parseFloat(I.paddingLeft))*E.x,j=A.top+(m.clientTop+parseFloat(I.paddingTop))*E.y;c*=E.x,l*=E.y,h*=E.x,d*=E.y,c+=W,l+=j,b=w(m),m=z(b)}}return fe({width:h,height:d,x:c,y:l})}function K(n,e){const t=O(n).scrollLeft;return e?e.left+t:N(S(n)).left+t}function xe(n,e,t){t===void 0&&(t=!1);const s=n.getBoundingClientRect(),i=s.left+e.scrollLeft-(t?0:K(n,s)),r=s.top+e.scrollTop;return{x:i,y:r}}function Be(n){let{elements:e,rect:t,offsetParent:s,strategy:i}=n;const r=i==="fixed",o=S(s),a=e?V(e.floating):!1;if(s===o||a&&r)return t;let c={scrollLeft:0,scrollTop:0},l=x(1);const h=x(0),d=C(s);if((d||!d&&!r)&&((F(s)!=="body"||M(o))&&(c=O(s)),C(s))){const u=N(s);l=T(s),h.x=u.x+s.clientLeft,h.y=u.y+s.clientTop}const f=o&&!d&&!r?xe(o,c,!0):x(0);return{width:t.width*l.x,height:t.height*l.y,x:t.x*l.x-c.scrollLeft*l.x+h.x+f.x,y:t.y*l.y-c.scrollTop*l.y+h.y+f.y}}function Ve(n){return Array.from(n.getClientRects())}function Oe(n){const e=S(n),t=O(n),s=n.ownerDocument.body,i=P(e.scrollWidth,e.clientWidth,s.scrollWidth,s.clientWidth),r=P(e.scrollHeight,e.clientHeight,s.scrollHeight,s.clientHeight);let o=-t.scrollLeft+K(n);const a=-t.scrollTop;return v(s).direction==="rtl"&&(o+=P(e.clientWidth,s.clientWidth)-i),{width:i,height:r,x:o,y:a}}function We(n,e){const t=w(n),s=S(n),i=t.visualViewport;let r=s.clientWidth,o=s.clientHeight,a=0,c=0;if(i){r=i.width,o=i.height;const l=J();(!l||l&&e==="fixed")&&(a=i.offsetLeft,c=i.offsetTop)}return{width:r,height:o,x:a,y:c}}function je(n,e){const t=N(n,!0,e==="fixed"),s=t.top+n.clientTop,i=t.left+n.clientLeft,r=C(n)?T(n):x(1),o=n.clientWidth*r.x,a=n.clientHeight*r.y,c=i*r.x,l=s*r.y;return{width:o,height:a,x:c,y:l}}function re(n,e,t){let s;if(e==="viewport")s=We(n,t);else if(e==="document")s=Oe(S(n));else if(y(e))s=je(e,t);else{const i=ve(n);s={x:e.x-i.x,y:e.y-i.y,width:e.width,height:e.height}}return fe(s)}function Ce(n,e){const t=k(n);return t===e||!y(t)||L(t)?!1:v(t).position==="fixed"||Ce(t,e)}function qe(n,e){const t=e.get(n);if(t)return t;let s=we(n,[]).filter(a=>y(a)&&F(a)!=="body"),i=null;const r=v(n).position==="fixed";let o=r?k(n):n;for(;y(o)&&!L(o);){const a=v(o),c=G(o);!c&&a.position==="fixed"&&(i=null),(r?!c&&!i:!c&&a.position==="static"&&i&&["absolute","fixed"].includes(i.position)||M(o)&&!c&&Ce(n,o))?s=s.filter(l=>l!==o):i=a,o=k(o)}return e.set(n,s),s}function Ue(n){let{element:e,boundary:t,rootBoundary:s,strategy:i}=n;const r=[...t==="clippingAncestors"?V(e)?[]:qe(e,this._c):[].concat(t),s],o=r[0],a=r.reduce((c,l)=>{const h=re(e,l,i);return c.top=P(h.top,c.top),c.right=se(h.right,c.right),c.bottom=se(h.bottom,c.bottom),c.left=P(h.left,c.left),c},re(e,o,i));return{width:a.right-a.left,height:a.bottom-a.top,x:a.left,y:a.top}}function ze(n){const{width:e,height:t}=be(n);return{width:e,height:t}}function Ge(n,e,t){const s=C(e),i=S(e),r=t==="fixed",o=N(n,!0,r,e);let a={scrollLeft:0,scrollTop:0};const c=x(0);if(s||!s&&!r)if((F(e)!=="body"||M(i))&&(a=O(e)),s){const f=N(e,!0,r,e);c.x=f.x+e.clientLeft,c.y=f.y+e.clientTop}else i&&(c.x=K(i));const l=i&&!s&&!r?xe(i,a):x(0),h=o.left+a.scrollLeft-c.x-l.x,d=o.top+a.scrollTop-c.y-l.y;return{x:h,y:d,width:o.width,height:o.height}}function q(n){return v(n).position==="static"}function oe(n,e){if(!C(n)||v(n).position==="fixed")return null;if(e)return e(n);let t=n.offsetParent;return S(n)===t&&(t=t.ownerDocument.body),t}function Ee(n,e){const t=w(n);if(V(n))return t;if(!C(n)){let i=k(n);for(;i&&!L(i);){if(y(i)&&!q(i))return i;i=k(i)}return t}let s=oe(n,e);for(;s&&Me(s)&&q(s);)s=oe(s,e);return s&&L(s)&&q(s)&&!G(s)?t:s||Ae(n)||t}const Je=async function(n){const e=this.getOffsetParent||Ee,t=this.getDimensions,s=await t(n.floating);return{reference:Ge(n.reference,await e(n.floating),n.strategy),floating:{x:0,y:0,width:s.width,height:s.height}}};function Ke(n){return v(n).direction==="rtl"}const Ye={convertOffsetParentRelativeRectToViewportRelativeRect:Be,getDocumentElement:S,getClippingRect:Ue,getOffsetParent:Ee,getElementRects:Je,getClientRects:Ve,getDimensions:ze,getScale:T,isElement:y,isRTL:Ke},Xe=(n,e,t)=>{const s=new Map,i={platform:Ye,...t},r={...i.platform,_c:s};return Ne(n,e,{...i,platform:r})};function Qe(){return{name:"matchWidth",fn({elements:n,rects:e}){return n.floating.style.width=`${e.reference.width}px`,{reset:{rects:!0}}}}}function Ze(){return{name:"makeItFloat",fn({elements:n,x:e,y:t}){return n.floating.style.top=`${t}px`,n.floating.style.left=`${e}px`,{}}}}function et(n,e){return(n%e+e)%e}class tt extends Le{constructor(e,t,s){super(e,s??t.parentElement??document.body),this.inputEl=t,this.registerListeners()}#e=[];#t=[];#s=-1;open(){super.open(),Xe(this.inputEl,this.wrapperEl,{placement:"bottom-start",middleware:[Qe(),Ze()]})}close(){super.close(),this.#s=-1,this.#e=[],this.#t=[]}registerListeners(){super.registerListeners(),this.scope.register([],"Enter",e=>this.onKeypress(e,"enter")),this.scope.register([],"ArrowUp",e=>this.onKeypress(e,"up")),this.scope.register([],"ArrowDown",e=>this.onKeypress(e,"down")),this.wrapperEl.addEventListener("mousedown",()=>!1),this.wrapperEl.on("click",".suggestion-item",this.onClick.bind(this)),this.inputEl.addEventListener("blur",this.onBlur.bind(this)),this.inputEl.addEventListener("focus",this.onInputChange.bind(this)),this.inputEl.addEventListener("input",this.onInputChange.bind(this))}onBlur(){setTimeout(()=>this.close(),100)}onInputChange(e){if(!(e.currentTarget instanceof HTMLInputElement)&&!(e.currentTarget instanceof HTMLTextAreaElement))return;const t=this.getSuggestions(e.currentTarget.value);if(t.length>0){this.wrapperEl.empty(),this.#e=t,this.#t=t.map(s=>{const i=this.wrapperEl.createDiv("suggestion-item");return this.renderSuggestion(s,i),i}),this.open();return}this.close()}onKeypress(e,t){if(!e.isComposing)switch(e.preventDefault(),t){case"enter":this.selectSuggestion(this.#e[this.#s]);break;case"up":this.focusSuggestion(this.#s-1,!0);break;case"down":this.focusSuggestion(this.#s+1,!0);break}}onClick(e,t){e.preventDefault(),this.focusSuggestion(this.#t.indexOf(t),!1),this.selectSuggestion(this.#e[this.#s])}focusSuggestion(e,t){const s=et(e,this.#e.length),i=this.#t[this.#s],r=this.#t[s];i.removeClass("is-selected"),r.addClass("is-selected"),this.#s=s,t&&r.scrollIntoView(!1)}}function st(n,e){return nt(n,e?t=>t instanceof p.TFolder&&e(t):t=>t instanceof p.TFolder)}function nt(n,e){let t=n.getAllLoadedFiles();return e&&(t=t.filter(e)),t.sort((s,i)=>s.path.localeCompare(i.path))}function it(n,e,t){const s=rt(n,e),i=r=>r instanceof p.TFile;return s.children.filter(i)}function rt(n,e){const t=n.getAbstractFileByPath(p.normalizePath(e));if(!t)throw new Error(`Folder "${e}" doesn't exist.`);if(!(t instanceof p.TFolder))throw new Error(`${e} is a file, not a folder.`);return t}class ae extends tt{getSuggestions(e){const t=e.trim().toLowerCase();return st(this.app.vault,s=>s.path.toLowerCase().contains(t))}renderSuggestion(e,t){t.setText(e.path)}selectSuggestion(e){this.inputEl.value=e.path,this.inputEl.trigger("input"),this.close()}}class Y{#e;#t;constructor(e){this.#t=e.app.vault,this.#e=e}getRealPath(...e){return te.resolve(String(this.#t.adapter.basePath),...e);//! replaced by above, cause it make changes as URL
//! like replaces ' ' (space) to '%20'
}getCachePath(...e){return this.join(this.#e.settings.cache_folder,"__components__",...e)}join(...e){return p.normalizePath(te.join(...e))}resolvePath(e){return String.isString(e)?e:e.path}resolveFile(e){return e instanceof p.TFile?e:String.isString(e)?this.#t.getFileByPath(e):null}async#s(e){return await this.#t.adapter.exists(e)}async#n(e){return!await this.#t.adapter.exists(e)}async exists(e){return this.#s(this.resolvePath(e))}async missing(e){return this.#n(this.resolvePath(e))}async remove(e){const t=this.resolvePath(e);await this.#t.adapter.remove(t)}async read(e){const t=this.resolvePath(e);return await this.#t.adapter.read(t)}async edit(e,t){const s=this.resolvePath(e),i=await this.#t.adapter.read(s);await this.#t.adapter.write(s,t(i))}async copy(e,t,s){const i=this.resolvePath(e);if(!s)return this.#t.adapter.copy(i,t);const r=await this.#t.adapter.read(i);await this.#t.adapter.write(t,s(r))}async renewFolder(e){const t=this.resolvePath(e);await this.#s(t)&&await this.#t.adapter.rmdir(t,!0),await this.#n(t)&&await this.#t.adapter.mkdir(t)}async getFileHash(e,t=6){const s=this.resolvePath(e),i=await this.#t.adapter.read(s),r=de.createHash("sha256").update(i).digest("hex");return t<1?r:r.substring(0,t)}}class ${_values=new Map;clear(){this._values=new Map}keys(){return this._values.keys()}*keysWithValue(e){if(typeof e!="function"){for(const[t,s]of this._values.entries())s.includes(e)&&(yield t);return}for(const[t,s]of this._values.entries())s.some(e)&&(yield t)}values(){return this._values.values()}entries(){return this._values.entries()}has(e){return this._values.has(e)}hasValue(e){for(const t of this._values.values())if(t.includes(e))return!0;return!1}hasKeyValue(e,t){return this.get(e).includes(t)}get(e){return this._values.get(e)??[]}getFirst(e){return this.get(e).first()}prepend(e,t){const s=this.get(e);s.unshift(t),this._values.set(e,s.unique())}push(e,t){const s=this.get(e).reverse();s.unshift(t),this._values.set(e,s.unique().reverse())}static fromReversedObject(e){const t=new $;for(const[s,i]of Object.entries(e))t.push(i,s);return t}}function Se(n){return typeof n=="object"&&n!==null}function ot(n){return de.createHash("sha256").update(n).digest("hex").substring(0,64)}function at(n){const e=lt(n.settings);return{components_enabled:e,components_matchers:ht(n.settings,e)}}function ct(n){return n.split(/[|;,\s]+/gi).reduce((e,t)=>(t=t.replace(/\W*/gi,""),t.length>0&&!e.includes(t)&&e.push(t),e),[])}function lt(n){const e=new $;for(const t of n.components_config)if(t.enabled)for(const s of ct(t.names))e.hasValue(s)||e.push(t.id,s);return e}function ht(n,e){const t=[];for(const s of n.components_config)s.enabled&&t.push({id:s.id,path:s.path,test:[].contains.bind(e.get(s.id))});return t}function dt(n,e,t){const s=it(n,e);return s.sort((i,r)=>i.path.localeCompare(r.path,"en")),s.map(i=>{const r=t.find(o=>o.id===i.name);return{id:i.name,path:i.path,names:r?.names??i.basename.replaceAll(".","_"),enabled:r?.enabled??!1}})}function ut(n,e){return createEl(n,void 0,t=>t.append(e))}function ce(n,e,t){return n.createEl(e,void 0,s=>s.append(t))}function U(n,e){return createEl("a",{text:e,href:`https://github.com/luisbs/obsidian-components/blob/main/docs/settings.md#${n}`})}class pt{#e;#t;#s=[];constructor(e,t){this.#e=e,this.#a(t),this.#t=t.createDiv("components-list"),this.#o()}async#n(e){this.#e.settings.components_config=e,await this.#e.saveSettings(),this.#c()}#i(e,t){const s=this.#e.settings.components_config.map(i=>e.includes(i.id)?{...i,enabled:t}:i);this.#n(s)}#r(e,t,s){const i=this.#e.settings.components_config.map(r=>r.id===e?{...r,[t]:s}:r);this.#n(i)}#o(){const e=dt(this.#e.app.vault,this.#e.settings.components_folder,this.#e.settings.components_config);this.#s=e.map(t=>t.id),this.#n(e)}#a(e){let t=null;const s=new p.Setting(e);s.setName("Vault Components"),s.setDesc("The entries are components found on the vault."),s.addExtraButton(i=>{i.setIcon("reset").setTooltip("Refresh"),i.onClick(()=>{this.#o(),t?.setValue("")})}),s.addSearch(i=>{t=i,i.onChange(r=>{let o=!1;const a=[];for(const c of this.#e.settings.components_config){const l=r?c.path.contains(r):!0,h=this.#s.includes(c.id);l?(a.push(c.id),h||(o=!0)):h&&(o=!0)}o&&(this.#s=a,this.#c())})}),s.addExtraButton(i=>{i.setIcon("badge-check").setTooltip("Enable Listed Components"),i.onClick(()=>this.#i(this.#s,!0))}),s.addExtraButton(i=>{i.setIcon("badge-x").setTooltip("Disable Listed Components"),i.onClick(()=>this.#i(this.#s,!1))})}#c(){this.#t.empty();for(const e of this.#e.settings.components_config){if(!this.#s.includes(e.id))continue;const t=new p.Setting(this.#t);t.setName(this.#d(e.id,e.enabled)),t.setDesc(this.#h(e.id)),t.addExtraButton(s=>{s.setTooltip("Edit names"),s.setIcon("pencil"),s.onClick(()=>this.#u(t,e))}),t.addToggle(s=>{s.setTooltip("Is enabled?"),s.setValue(e.enabled),s.onChange(this.#i.bind(this,[e.id]))})}}#d(e,t){const s=createFragment();return s.append(`${t?"Enabled":"Disabled"} component: `,ut("code",e)),s}#h(e){const t=createFragment(),s=t.createDiv("components-names");s.append("Usage: ");const i=this.#e.state.components_enabled.get(e);if(i.length===0)return ce(s,"b","Not available"),t;for(let r=0;r<i.length;r++)r>0&&s.appendText(" | "),ce(s,"code",i[r]);return t}#l=null;#u(e,t){this.#l?.remove(),this.#l=e.settingEl.createDiv("component-form");let s=null;const i=new p.Setting(this.#l);i.addTextArea(r=>{s=r,r.setValue(t.names)}),i.addButton(r=>{r.setButtonText("Cancel"),r.onClick(()=>this.#l?.remove())}),i.addButton(r=>{r.setButtonText("Save"),r.onClick(()=>{this.#r(t.id,"names",s?.getValue()??"")})})}}class ft extends p.PluginSettingTab{#e;#t;constructor(e){super(e.app,e),this.#e=e,this.#t=new Y(e)}async#s(e,t){this.#e.settings[e]=t,await this.#e.saveSettings()}display(){this.containerEl.empty(),this.containerEl.addClass("components-settings"),this.#n().setName("Plugin Settings").setHeading(),this.#r(),this.#n().setName("Codeblocks Settings").setHeading(),this.#o(),this.#n().setName("Components Settings").setHeading(),this.#a(),new pt(this.#e,this.containerEl)}#n(){return this.#i(this.containerEl)}#i(e){return new p.Setting(e)}#r(){const e=createFragment(t=>{t.append("Enable design mode only if you're editing your components code.",createEl("br"),"It will not disabled until you close the app.",createEl("br"),"For more details see ",U("design-mode-setting","design mode"),".")});this.#n().setName("Design mode").setDesc(e).addToggle(t=>{const s=this.#e.isDesignModeEnabled;t.setDisabled(s),t.setValue(s),t.onChange(()=>{s||(t.setDisabled(!0),this.#e.enableDesignMode())})})}#o(){const e=createFragment();e.append("Allows the usage of the components custom names as codeblocks identifiers.",createEl("br"),"For more details see ",U("custom-codeblocks-setting","custom codeblocks"),"."),this.#n().setName("Custom Codeblocks").setDesc(e).addToggle(i=>{i.setValue(this.#e.settings.enable_codeblocks),i.onChange(this.#s.bind(this,"enable_codeblocks"))});let t=null;const s=createFragment(i=>{i.append("Allows the usage of separators inside codeblocks.",createEl("br"),"For more details see ",U("codeblocks-separators-setting","codeblock separators"),".")});this.#n().setName("Enable Codeblocks Separators").setDesc(s).addToggle(i=>{i.setValue(this.#e.settings.enable_separators),i.onChange(r=>{this.#s("enable_separators",r),t?.setDisabled(!r)})}),this.#n().setName("Codeblocks Separator").setDesc("Separator to use inside codeblocks.").addText(i=>{t=i,i.setDisabled(!this.#e.settings.enable_separators),i.setValue(this.#e.settings.usage_separator),i.onChange(this.#s.bind(this,"usage_separator"))})}#a(){const e=(o,a,c)=>{a.onChange(async l=>{if(c.empty(),!l||l==="/"||await this.#t.missing(l)){a.inputEl.classList.add("invalid-value"),c.appendText("Invalid path.");return}a.inputEl.classList.remove("invalid-value"),this.#s(o,l)})},t=createFragment();t.append("Files in this directory will be taken as components.");const s=t.createEl("p","invalid-value");this.#n().setName("Components templates folder").setDesc(t).addText(o=>{new ae(this.app,o.inputEl,this.containerEl),o.setPlaceholder("Example: folder1/folder2"),o.setValue(this.#e.settings.components_folder),e("components_folder",o,s)});const i=createFragment();i.append("Folder used to cache pre-processed components.");const r=i.createEl("p","invalid-value");this.#n().setName("Components cache folder").setDesc(i).addText(o=>{new ae(this.app,o.inputEl,this.containerEl),o.setPlaceholder("Example: folder1/folder2"),o.setValue(this.#e.settings.cache_folder),e("cache_folder",o,r)})}}class R extends Error{name="ComponentError";code;constructor(e,t){super(e),this.code=t.code,this.cause=t.cause}toString(){if(!this.cause)return`${this.name}: ${this.message}`;const e=`${this.name}: ${this.message}, cause:

`;return this.cause instanceof Error?`${e}${this.cause}`:`${e}${JSON.stringify(this.cause)}`}}class le extends R{constructor(e){super(e,{code:"disabled-component"})}}class gt{id="yaml";test(e){return/^\s*\w+:/.test(e)}parse(e,t){return p.parseYaml(e)}}class mt{id="json";test(e){return/^\s*[[{]/gi.test(e)}parse(e,t){return JSON.parse(e)}}class wt{constructor(e){this.plugin=e,this.#e=[new mt,new gt]}#e;#t(){if(!this.plugin.settings.enable_separators)return;const e=this.plugin.settings.usage_separator.replace(/[.+*?^${}()|[\]\\]/gi,"\\$&");return new RegExp(e,"gi")}parse(e,t,s){s.trace(`Parsing from '${t}' <${e}>`);const i=this.#t();try{if(i?.test(e)){for(const r of this.#e)if(r.test(e))return s.debug(`Parsing as ${r.id}`),{syntax:r.id,data:e.split(i).map(o=>r.parse(o,t))}}for(const r of this.#e)if(r.test(e))return s.debug(`Parsing as ${r.id}`),{syntax:r.id,data:r.parse(e,t)}}catch(r){s.debug(r)}return s.debug(`Failed parsing of <${e}>`),{syntax:"unknown",data:e}}}class ke{constructor(e){this.plugin=e}renderHTML(e,t,s){s.debug("Rendering as HTML"),e.innerHTML=t}renderMarkdown(e,t,s,i){i.debug("Rendering as Markdown"),p.MarkdownRenderer.render(this.plugin.app,t,e,s,this.plugin)}}class bt extends ke{test(e){return/\.(md|html)$/i.test(e.name)}async render(e,t,s,i,r){r.debug("Rendering from Template");const o=await this.#e(e,r),a=this.#t(o,i,r);e.name.endsWith("md")?this.renderMarkdown(s,a,t.notepath,r):this.renderHTML(s,a,r)}#e(e,t){return t.debug("Retrieving Template"),this.plugin.app.vault.read(e)}#t(e,t,s){return s.debug("Replacing Placeholders"),t?!Se(t)&&!Array.isArray(t)?e.replace(/\{\{ *(\w+) *\}\}/gi,String(t)):e.replace(/\{\{ *(\w+) *\}\}/gi,(i,r)=>t[r]?String(t[r]):`{{ ${r} }}`):e}}class yt extends ke{#e;constructor(e,t){super(e),this.#e=t}test(e){return/\.[cm]js$/.test(e.name)}async render(e,t,s,i,r){r.debug("Rendering from Javascript");const o=await this.#t(e,r);if(/\.md\.[cm]js$/i.test(e.name)){const a=await o(i,t);this.renderMarkdown(s,a,t.notepath,r)}else if(/\.html\.[cm]js$/i.test(e.name)){const a=await o(i,t);this.renderHTML(s,a,r)}else await o(s,i,t)}async#t(e,t){t.debug("Retrieving Javascript Renderer");const s=await this.#s(e,t);if(typeof s=="function")return s;if(!Se(s))throw new R(`component(${e.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"});if(typeof s.default=="function")return s.default;if(typeof s.render=="function")return s.render;throw new R(`component(${e.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"})}async#s(e,t){t.debug("Sourcing Renderer");try{if(e.name.endsWith("mjs")){const i=this.plugin.app.vault.getResourcePath(e);return t.debug(`import('${i}')`),await import(i)}const s=this.#e.getRealPath(e.path);return t.debug(`require('${s}')`),require(s)}catch(s){throw new R(`component(${e.name}) could not be imported/required`,{cause:s,code:"invalid-component-syntax"})}}}class vt{#e;constructor(e){const t=new Y(e);this.#e=[new bt(e),new yt(e,t)]}async render(e,t,s,i,r){for(const o of this.#e)if(o.test(e))return s.empty(),o.render(e,t,s,i,r);throw new R(`component(${e.name}) is not supported`,{code:"unsupported-component"})}}const he=()=>/(?<=from *['"`]|require *\( *['"`])(.+)(?=['"`])/gi;class X{#e;#t;#s;#n;#i;#r=new $;#o=new $;constructor(e,t){this.#e=e.log.make(X.name),this.#t=new Y(e),this.#s=e,this.#n=t,this.#i=this.#s.app.vault.on("modify",this.#a.bind(this))}clear(){this.#s.app.vault.offref(this.#i),this.#r.clear(),this.#o.clear()}async resetCache(e){this.#s.isDesignModeEnabled&&(await this.#t.renewFolder(this.#t.getCachePath()),e.info("Cleared Versions Cache"))}resolveLatest(e){return this.#s.isDesignModeEnabled?this.#o.getFirst(e)??e:e}async#a(e){if(!this.#s.isDesignModeEnabled||!(e instanceof p.TFile)||!e.path.startsWith(this.#s.settings.components_folder)&&!this.#r.has(e.path))return;const t=this.#e.group();t.debug(`Listening changes on <${e.path}>`),t.debug("Listing affected files");const s=this.#c(e.path);t.trace("Listed affected files",s),t.debug("Caching affected files");for(const i of s){const r=this.#t.resolveFile(i);if(!r){t.error(`Not Found <${i}>`);continue}const o=await this.#d(r,t);this.#o.prepend(i,o)}t.debug("Cached affected files"),await this.#n(s,t),t.flush(`Listened changes on <${e.path}>`)}#c(e){const t=this.#r.get(e),s=[e,...t];for(const i of t)s.push(...this.#c(i));return s.reverse().unique().reverse()}async#d(e,t){const s=await this.#t.getFileHash(e),i=`${e.basename}.${s}.${e.extension}`,r=this.#t.getCachePath(i);if(await this.#t.missing(r))return t.debug(`Caching <${e.name}>`),await this.#t.copy(e,r,l=>this.#h(e,l,t)),r;const o=Date.now().toString(),a=`${e.basename}.${s}-${o}.${e.extension}`,c=this.#t.getCachePath(a);return t.debug(`Cloning <${i}>`),await this.#t.copy(r,c),c}#h(e,t,s){const i=e.parent?.path??"";return t.replaceAll(he(),r=>{const o=this.#t.join(i,r),a=this.resolveLatest(o);return s.trace(`Replacing import path <${a}>`),this.#t.getRealPath(a)})}async indexComponents(e){if(!this.#s.isDesignModeEnabled)return;const t=this.#s.settings.components_folder,s=this.#s.app.vault.getFolderByPath(t);if(!s)throw new Error(`path <${t}> is not a folder`);e.info("Indexing Components"),await this.#l(s,e),e.debug("Indexed Components")}async#l(e,t){t.debug(`Indexing folder <${e.path}>`);for(const s of e.children)s instanceof p.TFolder?await this.#l(s,t):await this.#u(s.path,t);t.debug(`Indexed folder <${e.path}>`)}async#u(e,t){if(this.#r.hasValue(e))return;t.debug(`Indexing imports on <${e}>`);const s=e.replace(/[\\/][^\\/]*$/gi,""),i=await this.#t.read(e),r=[];for(const o of i.matchAll(he())){const a=this.#t.join(s,o[0]||"");t.trace(`file <${e}> imports <${a}>`),this.#r.push(a,e),r.push(a)}t.debug(`Indexed imports on <${e}>`);for(const o of r)await this.#u(o,t)}}class Q{#e;#t;#s;#n;#i;#r=new $;#o=[];constructor(e){this.#e=e.log.make(Q.name),this.#t=e,this.#s=new wt(e),this.#n=new vt(e),this.#i=new X(e,this.refresh.bind(this))}async clear(e){e.info("Clearing in-memory cache"),this.#r.clear(),this.#i.clear(),await this.#i.resetCache(e)}async prepareDesignMode(){const e=this.#e.group("Preparing DesignMode");try{e.info("Clearing cache"),await this.#i.resetCache(e),await this.#i.indexComponents(e),e.info("Refreshing All Components"),await this.refresh(Array.from(this.#r.keys()),e)}catch(t){e.warn(t)}e.flush("DesignMode Enabled")}async refresh(e,t){const s=e.length?e:this.#r.keys();t.debug("Refreshing Components",e);for(const i of s){t.debug(`Refreshing Components(${i})`);for(const r of this.#r.get(i))t.trace("Refreshing Codeblock",r),await this.#h(i,r,t)}t.info("Refreshed Components")}registerCodeblocks(){this.#t.registerMarkdownCodeBlockProcessor("use",this.#a.bind(this),-100);for(const[e,t]of this.#t.state.components_enabled.entries())for(const s of t)this.#o.includes(s)||(this.#o.push(s),this.#t.registerMarkdownCodeBlockProcessor(s,(i,r,o)=>{this.#a(i,r,o,e,s)},-100))}async#a(e,t,s,i,r){const o=this.#e.group();try{o.debug(`Parsing Codeblock Name '${r??"use"}'`);const a=s.sourcePath,c=r??this.#c(s,t);o.debug(`Parsing Codeblock Content '${c}'`);const{syntax:l,data:h}=this.#s.parse(e,a,o),d=this.#d(i,c),f=ot(e);o.debug(`Serializing Codeblock '${c}'`);const b={context:{notepath:a,used_name:c,syntax:l,hash:f},element:t,data:h};o.trace("Serialized Codeblock",b),o.debug(`Rendering Codeblock '${c}'`),t.classList.add("component",`${c}-component`),this.#r.push(d.path,b),await this.#h(d.path,b,o),o.flush(`Rendered Component '${c}'`)}catch(a){o.error(a),o.flush(`Failed Rendering Component on ${s.sourcePath}`);const c=t.createEl("pre");c.classList.add("component-error"),a instanceof le&&(a.cause=e),a instanceof Error?c.append(a.stack??a.message):c.append(JSON.stringify(a))}}#c(e,t){const s=e.getSectionInfo(t);if(s){const r=(s.text.split(`
`).at(s.lineStart)??"").replace("```use","").trim();if(r)return r}throw new R(`component name could not be found on '${e.sourcePath}'`,{cause:s,code:"missing-component-name"})}#d(e,t){if(e){for(const s of this.#t.state.components_matchers)if(s.id===e)return s}if(t){for(const s of this.#t.state.components_matchers)if(s.test(t))return s}throw new le(`component(${t}) was disabled recently`)}async#h(e,{context:t,element:s,data:i},r){const o=this.#i.resolveLatest(e);r.debug(`Rendering with LatestPath '${o}'`);const a=this.#t.app.vault.getFileByPath(o);throw a&&await this.#n.render(a,t,s,i,r),new R(`component(${o}) could not be located, try reloading Obsidian`,{code:"missing-component-file"})}}class Z{#e;#t;constructor(e){this.#e=e.log.make(Z.name),this.#t=e}}const xt={plugin_level:"WARN",enable_codeblocks:!1,enable_separators:!1,usage_separator:"---",cache_folder:"__temp/",components_folder:"",components_config:[]};class ee extends p.Plugin{log=_.consoleLogger(ee.name);settings={};state={};api;#e;constructor(e,t){super(e,t),this.log.setLevel(g.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new Z(this),this.#e=new Q(this),window.Components=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new ft(this))}onunload(){const e=this.log.group("Clearing State");this.#e.clear(e),e.flush("Cleared State")}async loadSettings(){const e=this.log.group("Loading Settings"),t=await this.loadData()||{};this.settings=Object.assign({},xt,t),e.debug("Loaded: ",this.settings),this.#t(e),e.flush("Loaded Settings")}async saveSettings(){const e=this.log.group("Saving Settings"),t=Object.assign({},this.settings);await this.saveData(t),e.debug("Saved: ",t),this.#t(e),e.flush("Saved Settings")}#t(e){e.info("Preparing state"),this.log.setLevel(g[this.settings.plugin_level]),this.state=at(this),this.#e.registerCodeblocks()}#s=!1;get isDesignModeEnabled(){return this.#s}enableDesignMode(){this.#s||(this.#s=!0,this.#e.prepareDesignMode())}}module.exports=ee;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
