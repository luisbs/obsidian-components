/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-components@0.5.0 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-components
 */
"use strict";const d=require("obsidian"),te=require("path"),de=require("crypto");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class Te{error(e,t){console.error(e,...t)}warn(e,t){console.warn(e,...t)}info(e,t){console.info(e,...t)}debug(e,t){console.debug(e,...t)}trace(e,t){console.trace(e,...t)}group(e,t){return console.groupCollapsed(e,...t),console.groupEnd}}const g=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),De=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class _{#e;#t;#s;#n=[];#i=[];get level(){return this.#t?this.#t:this.#e?.level??g.WARN}get format(){return this.#s?this.#s:this.#e?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const e=[];for(let t=0;t<this.#i.length-1;t++)e.push(this.#i[t][0]);return e.push(this.#i.at(-1)??""),e.join(".")}get drivers(){return Object.freeze(this.#n)}setLevel(e){return this.#t=e,this}setFormat(e){return this.#s=e,this}addDrivers(...e){for(const t of e)Array.isArray(t)?this.#n.push(...t):t&&this.#n.push(t);return this}addNamespaces(...e){for(const t of e)Array.isArray(t)?this.#i.push(...t):t&&this.#i.push(t);return this}static consoleLogger(e){const t=new _;return t.setLevel(g.WARN),t.addDrivers(new Te),t.addNamespaces(e),t}make(e){const t=new _;return t.#e=this,t.addDrivers(this.#n),t.addNamespaces(this.#i,e),t}prefix(e,t){return this.format.replace("hh",String(e.getHours()).padStart(2,"0")).replace("mm",String(e.getMinutes()).padStart(2,"0")).replace("ss",String(e.getSeconds()).padStart(2,"0")).replace("ms",String(e.getMilliseconds()).padStart(3,"0")).replace("level",De[t]).replace("namespace",this.namespace)}log(e,t,s){if(this.level>t)return;const i=this.prefix(e,t);switch(this.level){case g.ERROR:this.#n.forEach(r=>r.error(i,s));break;case g.WARN:this.#n.forEach(r=>r.warn(i,s));break;case g.INFO:this.#n.forEach(r=>r.info(i,s));break;case g.DEBUG:this.#n.forEach(r=>r.debug(i,s));break;default:this.#n.forEach(r=>r.trace(i,s))}}error(...e){this.log(new Date,g.ERROR,e)}warn(...e){this.log(new Date,g.WARN,e)}info(...e){this.log(new Date,g.INFO,e)}debug(...e){this.log(new Date,g.DEBUG,e)}trace(...e){this.log(new Date,g.TRACE,e)}group(...e){const t=new Le;return t.#e=this,t.addDrivers(this.#n),t.addNamespaces(this.#i),e.length&&t.log(new Date,g.INFO,e),t}}class Le extends _{#e=[];log(e,t,s){this.level>t||this.#e.push({timestamp:e,level:t,content:s})}flush(...e){if(this.#e.length===0){super.log(new Date,g.INFO,e);return}const t=this.prefix(new Date,g.INFO),s=this.drivers.map(i=>i.group(t,e));for(const{timestamp:i,level:r,content:o}of this.#e)super.log(i,r,o);s.forEach(i=>i()),this.#e=[]}}class ke{constructor(e,t){this.app=e,this.containerEl=t,this.scope=new d.Scope,this.wrapperEl=createDiv("suggestions-tooltip")}scope;wrapperEl;registerListeners(){this.scope.register([],"Escape",this.close.bind(this))}open(){this.app.keymap.pushScope(this.scope),this.containerEl.appendChild(this.wrapperEl)}close(){this.app.keymap.popScope(this.scope),this.wrapperEl.empty(),this.wrapperEl.detach()}}const se=Math.min,F=Math.max,O=Math.round,x=n=>({x:n,y:n});function ue(n){return n.split("-")[0]}function Pe(n){return n.split("-")[1]}function $e(n){return n==="x"?"y":"x"}function Fe(n){return n==="y"?"height":"width"}function pe(n){return["top","bottom"].includes(ue(n))?"y":"x"}function _e(n){return $e(pe(n))}function fe(n){const{x:e,y:t,width:s,height:i}=n;return{width:s,height:i,top:t,left:e,right:e+s,bottom:t+i,x:e,y:t}}function ne(n,e,t){let{reference:s,floating:i}=n;const r=pe(e),o=_e(e),a=Fe(o),c=ue(e),l=r==="y",h=s.x+s.width/2-i.width/2,u=s.y+s.height/2-i.height/2,f=s[a]/2-i[a]/2;let p;switch(c){case"top":p={x:h,y:s.y-i.height};break;case"bottom":p={x:h,y:s.y+s.height};break;case"right":p={x:s.x+s.width,y:u};break;case"left":p={x:s.x-i.width,y:u};break;default:p={x:s.x,y:s.y}}switch(Pe(e)){case"start":p[o]-=f*(t&&l?-1:1);break;case"end":p[o]+=f*(t&&l?-1:1);break}return p}const Ne=async(n,e,t)=>{const{placement:s="bottom",strategy:i="absolute",middleware:r=[],platform:o}=t,a=r.filter(Boolean),c=await(o.isRTL==null?void 0:o.isRTL(e));let l=await o.getElementRects({reference:n,floating:e,strategy:i}),{x:h,y:u}=ne(l,s,c),f=s,p={},y=0;for(let m=0;m<a.length;m++){const{name:C,fn:M}=a[m],{x:I,y:j,data:q,reset:T}=await M({x:h,y:u,initialPlacement:s,placement:f,strategy:i,middlewareData:p,rects:l,platform:o,elements:{reference:n,floating:e}});h=I??h,u=j??u,p={...p,[C]:{...p[C],...q}},T&&y<=50&&(y++,typeof T=="object"&&(T.placement&&(f=T.placement),T.rects&&(l=T.rects===!0?await o.getElementRects({reference:n,floating:e,strategy:i}):T.rects),{x:h,y:u}=ne(l,f,c)),m=-1)}return{x:h,y:u,placement:f,strategy:i,middlewareData:p}};function H(){return typeof window<"u"}function $(n){return ge(n)?(n.nodeName||"").toLowerCase():"#document"}function w(n){var e;return(n==null||(e=n.ownerDocument)==null?void 0:e.defaultView)||window}function S(n){var e;return(e=(ge(n)?n.ownerDocument:n.document)||window.document)==null?void 0:e.documentElement}function ge(n){return H()?n instanceof Node||n instanceof w(n).Node:!1}function b(n){return H()?n instanceof Element||n instanceof w(n).Element:!1}function E(n){return H()?n instanceof HTMLElement||n instanceof w(n).HTMLElement:!1}function ie(n){return!H()||typeof ShadowRoot>"u"?!1:n instanceof ShadowRoot||n instanceof w(n).ShadowRoot}function A(n){const{overflow:e,overflowX:t,overflowY:s,display:i}=v(n);return/auto|scroll|overlay|hidden|clip/.test(e+s+t)&&!["inline","contents"].includes(i)}function Ae(n){return["table","td","th"].includes($(n))}function V(n){return[":popover-open",":modal"].some(e=>{try{return n.matches(e)}catch{return!1}})}function z(n){const e=J(),t=b(n)?v(n):n;return["transform","translate","scale","rotate","perspective"].some(s=>t[s]?t[s]!=="none":!1)||(t.containerType?t.containerType!=="normal":!1)||!e&&(t.backdropFilter?t.backdropFilter!=="none":!1)||!e&&(t.filter?t.filter!=="none":!1)||["transform","translate","scale","rotate","perspective","filter"].some(s=>(t.willChange||"").includes(s))||["paint","layout","strict","content"].some(s=>(t.contain||"").includes(s))}function Me(n){let e=R(n);for(;E(e)&&!k(e);){if(z(e))return e;if(V(e))return null;e=R(e)}return null}function J(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function k(n){return["html","body","#document"].includes($(n))}function v(n){return w(n).getComputedStyle(n)}function W(n){return b(n)?{scrollLeft:n.scrollLeft,scrollTop:n.scrollTop}:{scrollLeft:n.scrollX,scrollTop:n.scrollY}}function R(n){if($(n)==="html")return n;const e=n.assignedSlot||n.parentNode||ie(n)&&n.host||S(n);return ie(e)?e.host:e}function me(n){const e=R(n);return k(e)?n.ownerDocument?n.ownerDocument.body:n.body:E(e)&&A(e)?e:me(e)}function we(n,e,t){var s;e===void 0&&(e=[]);const i=me(n),r=i===((s=n.ownerDocument)==null?void 0:s.body),o=w(i);return r?(G(o),e.concat(o,o.visualViewport||[],A(i)?i:[],[])):e.concat(i,we(i,[]))}function G(n){return n.parent&&Object.getPrototypeOf(n.parent)?n.frameElement:null}function ye(n){const e=v(n);let t=parseFloat(e.width)||0,s=parseFloat(e.height)||0;const i=E(n),r=i?n.offsetWidth:t,o=i?n.offsetHeight:s,a=O(t)!==r||O(s)!==o;return a&&(t=r,s=o),{width:t,height:s,$:a}}function be(n){return b(n)?n:n.contextElement}function L(n){const e=be(n);if(!E(e))return x(1);const t=e.getBoundingClientRect(),{width:s,height:i,$:r}=ye(e);let o=(r?O(t.width):t.width)/s,a=(r?O(t.height):t.height)/i;return(!o||!Number.isFinite(o))&&(o=1),(!a||!Number.isFinite(a))&&(a=1),{x:o,y:a}}const Ie=x(0);function ve(n){const e=w(n);return!J()||!e.visualViewport?Ie:{x:e.visualViewport.offsetLeft,y:e.visualViewport.offsetTop}}function Be(n,e,t){return e===void 0&&(e=!1),!t||e&&t!==w(n)?!1:e}function N(n,e,t,s){e===void 0&&(e=!1),t===void 0&&(t=!1);const i=n.getBoundingClientRect(),r=be(n);let o=x(1);e&&(s?b(s)&&(o=L(s)):o=L(n));const a=Be(r,t,s)?ve(r):x(0);let c=(i.left+a.x)/o.x,l=(i.top+a.y)/o.y,h=i.width/o.x,u=i.height/o.y;if(r){const f=w(r),p=s&&b(s)?w(s):s;let y=f,m=G(y);for(;m&&s&&p!==y;){const C=L(m),M=m.getBoundingClientRect(),I=v(m),j=M.left+(m.clientLeft+parseFloat(I.paddingLeft))*C.x,q=M.top+(m.clientTop+parseFloat(I.paddingTop))*C.y;c*=C.x,l*=C.y,h*=C.x,u*=C.y,c+=j,l+=q,y=w(m),m=G(y)}}return fe({width:h,height:u,x:c,y:l})}function K(n,e){const t=W(n).scrollLeft;return e?e.left+t:N(S(n)).left+t}function xe(n,e,t){t===void 0&&(t=!1);const s=n.getBoundingClientRect(),i=s.left+e.scrollLeft-(t?0:K(n,s)),r=s.top+e.scrollTop;return{x:i,y:r}}function Oe(n){let{elements:e,rect:t,offsetParent:s,strategy:i}=n;const r=i==="fixed",o=S(s),a=e?V(e.floating):!1;if(s===o||a&&r)return t;let c={scrollLeft:0,scrollTop:0},l=x(1);const h=x(0),u=E(s);if((u||!u&&!r)&&(($(s)!=="body"||A(o))&&(c=W(s)),E(s))){const p=N(s);l=L(s),h.x=p.x+s.clientLeft,h.y=p.y+s.clientTop}const f=o&&!u&&!r?xe(o,c,!0):x(0);return{width:t.width*l.x,height:t.height*l.y,x:t.x*l.x-c.scrollLeft*l.x+h.x+f.x,y:t.y*l.y-c.scrollTop*l.y+h.y+f.y}}function He(n){return Array.from(n.getClientRects())}function Ve(n){const e=S(n),t=W(n),s=n.ownerDocument.body,i=F(e.scrollWidth,e.clientWidth,s.scrollWidth,s.clientWidth),r=F(e.scrollHeight,e.clientHeight,s.scrollHeight,s.clientHeight);let o=-t.scrollLeft+K(n);const a=-t.scrollTop;return v(s).direction==="rtl"&&(o+=F(e.clientWidth,s.clientWidth)-i),{width:i,height:r,x:o,y:a}}function We(n,e){const t=w(n),s=S(n),i=t.visualViewport;let r=s.clientWidth,o=s.clientHeight,a=0,c=0;if(i){r=i.width,o=i.height;const l=J();(!l||l&&e==="fixed")&&(a=i.offsetLeft,c=i.offsetTop)}return{width:r,height:o,x:a,y:c}}function je(n,e){const t=N(n,!0,e==="fixed"),s=t.top+n.clientTop,i=t.left+n.clientLeft,r=E(n)?L(n):x(1),o=n.clientWidth*r.x,a=n.clientHeight*r.y,c=i*r.x,l=s*r.y;return{width:o,height:a,x:c,y:l}}function re(n,e,t){let s;if(e==="viewport")s=We(n,t);else if(e==="document")s=Ve(S(n));else if(b(e))s=je(e,t);else{const i=ve(n);s={x:e.x-i.x,y:e.y-i.y,width:e.width,height:e.height}}return fe(s)}function Ee(n,e){const t=R(n);return t===e||!b(t)||k(t)?!1:v(t).position==="fixed"||Ee(t,e)}function qe(n,e){const t=e.get(n);if(t)return t;let s=we(n,[]).filter(a=>b(a)&&$(a)!=="body"),i=null;const r=v(n).position==="fixed";let o=r?R(n):n;for(;b(o)&&!k(o);){const a=v(o),c=z(o);!c&&a.position==="fixed"&&(i=null),(r?!c&&!i:!c&&a.position==="static"&&i&&["absolute","fixed"].includes(i.position)||A(o)&&!c&&Ee(n,o))?s=s.filter(l=>l!==o):i=a,o=R(o)}return e.set(n,s),s}function Ue(n){let{element:e,boundary:t,rootBoundary:s,strategy:i}=n;const r=[...t==="clippingAncestors"?V(e)?[]:qe(e,this._c):[].concat(t),s],o=r[0],a=r.reduce((c,l)=>{const h=re(e,l,i);return c.top=F(h.top,c.top),c.right=se(h.right,c.right),c.bottom=se(h.bottom,c.bottom),c.left=F(h.left,c.left),c},re(e,o,i));return{width:a.right-a.left,height:a.bottom-a.top,x:a.left,y:a.top}}function Ge(n){const{width:e,height:t}=ye(n);return{width:e,height:t}}function ze(n,e,t){const s=E(e),i=S(e),r=t==="fixed",o=N(n,!0,r,e);let a={scrollLeft:0,scrollTop:0};const c=x(0);if(s||!s&&!r)if(($(e)!=="body"||A(i))&&(a=W(e)),s){const f=N(e,!0,r,e);c.x=f.x+e.clientLeft,c.y=f.y+e.clientTop}else i&&(c.x=K(i));const l=i&&!s&&!r?xe(i,a):x(0),h=o.left+a.scrollLeft-c.x-l.x,u=o.top+a.scrollTop-c.y-l.y;return{x:h,y:u,width:o.width,height:o.height}}function U(n){return v(n).position==="static"}function oe(n,e){if(!E(n)||v(n).position==="fixed")return null;if(e)return e(n);let t=n.offsetParent;return S(n)===t&&(t=t.ownerDocument.body),t}function Ce(n,e){const t=w(n);if(V(n))return t;if(!E(n)){let i=R(n);for(;i&&!k(i);){if(b(i)&&!U(i))return i;i=R(i)}return t}let s=oe(n,e);for(;s&&Ae(s)&&U(s);)s=oe(s,e);return s&&k(s)&&U(s)&&!z(s)?t:s||Me(n)||t}const Je=async function(n){const e=this.getOffsetParent||Ce,t=this.getDimensions,s=await t(n.floating);return{reference:ze(n.reference,await e(n.floating),n.strategy),floating:{x:0,y:0,width:s.width,height:s.height}}};function Ke(n){return v(n).direction==="rtl"}const Ye={convertOffsetParentRelativeRectToViewportRelativeRect:Oe,getDocumentElement:S,getClippingRect:Ue,getOffsetParent:Ce,getElementRects:Je,getClientRects:He,getDimensions:Ge,getScale:L,isElement:b,isRTL:Ke},Xe=(n,e,t)=>{const s=new Map,i={platform:Ye,...t},r={...i.platform,_c:s};return Ne(n,e,{...i,platform:r})};function Qe(){return{name:"matchWidth",fn({elements:n,rects:e}){return n.floating.style.width=`${e.reference.width}px`,{reset:{rects:!0}}}}}function Ze(){return{name:"makeItFloat",fn({elements:n,x:e,y:t}){return n.floating.style.top=`${t}px`,n.floating.style.left=`${e}px`,{}}}}function et(n,e){return(n%e+e)%e}class tt extends ke{constructor(e,t,s){super(e,s??t.parentElement??document.body),this.inputEl=t,this.registerListeners()}#e=[];#t=[];#s=-1;open(){super.open(),Xe(this.inputEl,this.wrapperEl,{placement:"bottom-start",middleware:[Qe(),Ze()]})}close(){super.close(),this.#s=-1,this.#e=[],this.#t=[]}registerListeners(){super.registerListeners(),this.scope.register([],"Enter",e=>this.onKeypress(e,"enter")),this.scope.register([],"ArrowUp",e=>this.onKeypress(e,"up")),this.scope.register([],"ArrowDown",e=>this.onKeypress(e,"down")),this.wrapperEl.addEventListener("mousedown",()=>!1),this.wrapperEl.on("click",".suggestion-item",this.onClick.bind(this)),this.inputEl.addEventListener("blur",this.onBlur.bind(this)),this.inputEl.addEventListener("focus",this.onInputChange.bind(this)),this.inputEl.addEventListener("input",this.onInputChange.bind(this))}onBlur(){setTimeout(()=>this.close(),100)}onInputChange(e){if(!(e.currentTarget instanceof HTMLInputElement)&&!(e.currentTarget instanceof HTMLTextAreaElement))return;const t=this.getSuggestions(e.currentTarget.value);if(t.length>0){this.wrapperEl.empty(),this.#e=t,this.#t=t.map(s=>{const i=this.wrapperEl.createDiv("suggestion-item");return this.renderSuggestion(s,i),i}),this.open();return}this.close()}onKeypress(e,t){if(!e.isComposing)switch(e.preventDefault(),t){case"enter":this.selectSuggestion(this.#e[this.#s]);break;case"up":this.focusSuggestion(this.#s-1,!0);break;case"down":this.focusSuggestion(this.#s+1,!0);break}}onClick(e,t){e.preventDefault(),this.focusSuggestion(this.#t.indexOf(t),!1),this.selectSuggestion(this.#e[this.#s])}focusSuggestion(e,t){const s=et(e,this.#e.length),i=this.#t[this.#s],r=this.#t[s];i.removeClass("is-selected"),r.addClass("is-selected"),this.#s=s,t&&r.scrollIntoView(!1)}}function st(n,e){return nt(n,e?t=>t instanceof d.TFolder&&e(t):t=>t instanceof d.TFolder)}function nt(n,e){let t=n.getAllLoadedFiles();return e&&(t=t.filter(e)),t.sort((s,i)=>s.path.localeCompare(i.path))}function it(n,e,t){const s=rt(n,e),i=r=>r instanceof d.TFile;return s.children.filter(i)}function rt(n,e){const t=n.getAbstractFileByPath(d.normalizePath(e));if(!t)throw new Error(`Folder "${e}" doesn't exist.`);if(!(t instanceof d.TFolder))throw new Error(`${e} is a file, not a folder.`);return t}class ae extends tt{getSuggestions(e){const t=e.trim().toLowerCase();return st(this.app.vault,s=>s.path.toLowerCase().contains(t))}renderSuggestion(e,t){t.setText(e.path)}selectSuggestion(e){this.inputEl.value=e.path,this.inputEl.trigger("input"),this.close()}}class Y{#e;#t;constructor(e){this.#t=e.app.vault,this.#e=e}getRealPath(...e){return te.resolve(String(this.#t.adapter.basePath),...e);//! replaced by above, cause it make changes as URL
//! like replaces ' ' (space) to '%20'
}getCachePath(...e){return this.join(this.#e.settings.cache_folder,"__components__",...e)}join(...e){return d.normalizePath(te.join(...e))}getResourcePath(e){const t=this.resolveFile(e);return t?this.#e.app.vault.getResourcePath(t):null}resolvePath(e){return String.isString(e)?e:e.path}resolveFile(e){return e instanceof d.TFile?e:this.#t.getFileByPath(e)}async#s(e){return await this.#t.adapter.exists(e)}async#n(e){return!await this.#t.adapter.exists(e)}async exists(e){return this.#s(this.resolvePath(e))}async missing(e){return this.#n(this.resolvePath(e))}async remove(e){const t=this.resolvePath(e);await this.#t.adapter.remove(t)}async read(e){const t=this.resolvePath(e);return await this.#t.adapter.read(t)}async edit(e,t){const s=this.resolvePath(e),i=await this.#t.adapter.read(s);await this.#t.adapter.write(s,t(i))}async copy(e,t,s){const i=this.resolvePath(e);if(!s)return this.#t.adapter.copy(i,t);const r=await this.#t.adapter.read(i);await this.#t.adapter.write(t,s(r))}async renewFolder(e){const t=this.resolvePath(e);await this.#s(t)&&await this.#t.adapter.rmdir(t,!0),await this.#n(t)&&await this.#t.adapter.mkdir(t)}async getFileHash(e,t=6){const s=this.resolvePath(e),i=await this.#t.adapter.read(s),r=de.createHash("sha256").update(i).digest("hex");return t<1?r:r.substring(0,t)}}class P{_values=new Map;clear(){this._values=new Map}keys(){return this._values.keys()}*keysWithValue(e){if(typeof e!="function"){for(const[t,s]of this._values.entries())s.includes(e)&&(yield t);return}for(const[t,s]of this._values.entries())s.some(e)&&(yield t)}values(){return this._values.values()}entries(){return this._values.entries()}has(e){return this._values.has(e)}hasValue(e){for(const t of this._values.values())if(t.includes(e))return!0;return!1}hasKeyValue(e,t){return this.get(e).includes(t)}get(e){return this._values.get(e)??[]}getFirst(e){return this.get(e).first()}prepend(e,t){const s=this.get(e);s.unshift(t),this._values.set(e,s.unique())}push(e,t){const s=this.get(e).reverse();s.unshift(t),this._values.set(e,s.unique().reverse())}static fromReversedObject(e){const t=new P;for(const[s,i]of Object.entries(e))t.push(i,s);return t}}function Se(n){return typeof n=="object"&&n!==null}function ot(n){return n.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}function at(n){return de.createHash("sha256").update(n).digest("hex").substring(0,64)}function ct(n){const e=ht(n.settings);return{components_enabled:e,components_matchers:dt(n.settings,e)}}function lt(n){return n.split(/[|;,\s]+/gi).reduce((e,t)=>(t=t.replace(/\W*/gi,""),t.length>0&&!e.includes(t)&&e.push(t),e),[])}function ht(n){const e=new P;for(const t of n.components_config)if(t.enabled)for(const s of lt(t.names))e.hasValue(s)||e.push(t.id,s);return e}function dt(n,e){const t=[];for(const s of n.components_config)s.enabled&&t.push({id:s.id,path:s.path,test:[].contains.bind(e.get(s.id))});return t}function ut(n,e,t){const s=it(n,e);return s.sort((i,r)=>i.path.localeCompare(r.path,"en")),s.map(i=>{const r=t.find(o=>o.id===i.name);return{id:i.name,path:i.path,names:r?.names??i.basename.replaceAll(".","_"),enabled:r?.enabled??!1}})}function pt(n,e){return createEl(n,void 0,t=>t.append(e))}function ce(n,e,t){return n.createEl(e,void 0,s=>s.append(t))}class ft{#e;#t;#s=[];constructor(e,t){this.#e=e,this.#h(t),this.#t=t.createDiv("components-list"),this.#o()}async#n(e){this.#e.settings.components_config=e,await this.#e.saveSettings(),this.#a()}#i(e,t){const s=this.#e.settings.components_config.map(i=>e.includes(i.id)?{...i,enabled:t}:i);this.#n(s)}#r(e,t,s){const i=this.#e.settings.components_config.map(r=>r.id===e?{...r,[t]:s}:r);this.#n(i)}#o(){const e=ut(this.#e.app.vault,this.#e.settings.components_folder,this.#e.settings.components_config);this.#s=e.map(t=>t.id),this.#n(e)}#h(e){let t=null;const s=new d.Setting(e);s.setName("Vault Components"),s.setDesc("The entries are components found on the vault."),s.addExtraButton(i=>{i.setIcon("reset").setTooltip("Refresh"),i.onClick(()=>{this.#o(),t?.setValue("")})}),s.addSearch(i=>{t=i,i.onChange(r=>{let o=!1;const a=[];for(const c of this.#e.settings.components_config){const l=r?c.path.contains(r):!0,h=this.#s.includes(c.id);l?(a.push(c.id),h||(o=!0)):h&&(o=!0)}o&&(this.#s=a,this.#a())})}),s.addExtraButton(i=>{i.setIcon("badge-check").setTooltip("Enable Listed Components"),i.onClick(()=>this.#i(this.#s,!0))}),s.addExtraButton(i=>{i.setIcon("badge-x").setTooltip("Disable Listed Components"),i.onClick(()=>this.#i(this.#s,!1))})}#a(){this.#t.empty();for(const e of this.#e.settings.components_config){if(!this.#s.includes(e.id))continue;const t=new d.Setting(this.#t);t.setName(this.#d(e.id,e.enabled)),t.setDesc(this.#c(e.id)),t.addExtraButton(s=>{s.setTooltip("Edit names"),s.setIcon("pencil"),s.onClick(()=>this.#u(t,e))}),t.addToggle(s=>{s.setTooltip("Is enabled?"),s.setValue(e.enabled),s.onChange(this.#i.bind(this,[e.id]))})}}#d(e,t){const s=createFragment();return s.append(`${t?"Enabled":"Disabled"} component: `,pt("code",e)),s}#c(e){const t=createFragment(),s=t.createDiv("components-names");s.append("Usage: ");const i=this.#e.state.components_enabled.get(e);if(i.length===0)return ce(s,"b","Not available"),t;for(let r=0;r<i.length;r++)r>0&&s.appendText(" | "),ce(s,"code",i[r]);return t}#l=null;#u(e,t){this.#l?.remove(),this.#l=e.settingEl.createDiv("component-form");let s=null;const i=new d.Setting(this.#l);i.addTextArea(r=>{s=r,r.setValue(t.names)}),i.addButton(r=>{r.setButtonText("Cancel"),r.onClick(()=>this.#l?.remove())}),i.addButton(r=>{r.setButtonText("Save"),r.onClick(()=>{this.#r(t.id,"names",s?.getValue()??"")})})}}const gt={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"};function B(n,e){return createFragment(t=>{t.appendText(e+". Check the "),t.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-components/blob/main/docs/settings.md#${ot(n)}`}),t.appendText(".")})}class mt extends d.PluginSettingTab{#e;#t;constructor(e){super(e.app,e),this.#e=e,this.#t=new Y(e)}async#s(e,t){this.#e.settings[e]=t,await this.#e.saveSettings()}display(){this.containerEl.empty(),this.containerEl.addClass("components-settings"),new d.Setting(this.containerEl).setName("Plugin Settings").setHeading(),this.#n(),new d.Setting(this.containerEl).setName("Codeblock Settings").setHeading(),this.#i(),new d.Setting(this.containerEl).setName("Component Settings").setHeading(),this.#r(),new ft(this.#e,this.containerEl)}#n(){const e=new d.Setting(this.containerEl);e.setName("Plugging LogLevel"),e.setDesc(B("Plugging LogLevel","To check the plugin logs")),e.addDropdown(s=>{s.addOptions(gt),s.setValue(this.#e.settings.plugin_level),s.onChange(this.#s.bind(this,"plugin_level"))});const t=new d.Setting(this.containerEl);t.setName("Design mode"),t.setDesc(B("Design mode","Enable design mode only if you're editing your components code. It will not disabled until you close the app")),t.addToggle(s=>{const i=this.#e.isDesignModeEnabled;s.setDisabled(i),s.setValue(i),s.onChange(()=>{i||(s.setDisabled(!0),this.#e.enableDesignMode())})})}#i(){const e=new d.Setting(this.containerEl);e.setName("Custom Codeblocks"),e.setDesc(B("Custom Codeblocks","Allows the usage of the components custom names as codeblocks identifiers")),e.addToggle(r=>{r.setValue(this.#e.settings.enable_codeblocks),r.onChange(this.#s.bind(this,"enable_codeblocks"))});let t=null;const s=new d.Setting(this.containerEl);s.setName("Enable Codeblocks Separators"),s.setDesc(B("Enable Codeblocks Separators","Allows the usage of separators inside codeblocks")),s.addToggle(r=>{r.setValue(this.#e.settings.enable_separators),r.onChange(o=>{this.#s("enable_separators",o),t?.setDisabled(!o)})});const i=new d.Setting(this.containerEl);i.setName("Codeblocks Separator"),i.setDesc("Separator to use inside codeblocks."),i.addText(r=>{t=r,r.setDisabled(!this.#e.settings.enable_separators),r.setValue(this.#e.settings.usage_separator),r.onChange(this.#s.bind(this,"usage_separator"))})}#r(){const e=(c,l,h)=>{l.onChange(async u=>{if(h.empty(),!u||u==="/"||await this.#t.missing(u)){l.inputEl.classList.add("invalid-value"),h.appendText("Invalid path.");return}l.inputEl.classList.remove("invalid-value"),this.#s(c,u)})},t=createFragment();t.append("Files in this directory will be taken as components.");const s=t.createEl("p","invalid-value"),i=new d.Setting(this.containerEl);i.setName("Components templates folder"),i.setDesc(t),i.addText(c=>{new ae(this.app,c.inputEl,this.containerEl),c.setPlaceholder("Example: folder1/folder2"),c.setValue(this.#e.settings.components_folder),e("components_folder",c,s)});const r=createFragment();r.append("Folder used to cache pre-processed components.");const o=r.createEl("p","invalid-value"),a=new d.Setting(this.containerEl);a.setName("Components cache folder"),a.setDesc(r),a.addText(c=>{new ae(this.app,c.inputEl,this.containerEl),c.setPlaceholder("Example: folder1/folder2"),c.setValue(this.#e.settings.cache_folder),e("cache_folder",c,o)})}}class D extends Error{name="ComponentError";code;constructor(e,t){super(e),this.code=t.code,this.cause=t.cause}toString(){if(!this.cause)return`${this.name}: ${this.message}`;const e=`${this.name}: ${this.message}, cause:

`;return this.cause instanceof Error?`${e}${this.cause}`:`${e}${JSON.stringify(this.cause)}`}}class le extends D{constructor(e){super(e,{code:"disabled-component"})}}class wt{id="yaml";test(e){return e.startsWith("-")?!0:/^\w+:/.test(e)}parse(e,t){return d.parseYaml(e)}}class yt{id="json";test(e){return/^\s*[[{]/gi.test(e)}parse(e,t){return JSON.parse(e)}}class bt{constructor(e){this.plugin=e,this.#e=[new yt,new wt]}#e;#t(){if(!this.plugin.settings.enable_separators)return;const e=this.plugin.settings.usage_separator.replace(/[.+*?^${}()|[\]\\]/gi,"\\$&");return new RegExp(e,"gi")}parse(e,t,s){s.trace(`Parsing from '${t}' <${e}>`);const i=this.#t();try{if(i?.test(e)){for(const r of this.#e)if(r.test(e))return s.debug(`Parsing as ${r.id}`),{syntax:r.id,data:e.split(i).map(o=>r.parse(o,t))}}for(const r of this.#e)if(r.test(e))return s.debug(`Parsing as ${r.id}`),{syntax:r.id,data:r.parse(e,t)}}catch(r){s.debug(r)}return s.debug("Failed parsing",e),{syntax:"unknown",data:e}}}class Re{constructor(e){this.plugin=e}renderHTML(e,t,s){s.debug("Rendering as HTML"),e.innerHTML=t}renderMarkdown(e,t,s,i){i.debug("Rendering as Markdown"),d.MarkdownRenderer.render(this.plugin.app,t,e,s,this.plugin)}}class vt extends Re{test(e){return/\.(md|html)$/i.test(e.name)}async render(e,t,s,i,r){r.debug("Rendering from Template");const o=await this.#e(e,r),a=this.#t(o,i,r);e.name.endsWith("md")?this.renderMarkdown(s,a,t.notepath,r):this.renderHTML(s,a,r)}#e(e,t){return t.debug("Retrieving Template"),this.plugin.app.vault.read(e)}#t(e,t,s){return s.debug("Replacing Placeholders"),t?!Se(t)&&!Array.isArray(t)?e.replace(/\{\{ *(\w+) *\}\}/gi,String(t)):e.replace(/\{\{ *(\w+) *\}\}/gi,(i,r)=>t[r]?String(t[r]):`{{ ${r} }}`):e}}class xt extends Re{#e;constructor(e,t){super(e),this.#e=t}test(e){return/\.[cm]js$/.test(e.name)}async render(e,t,s,i,r){r.debug("Rendering from Javascript");const o=await this.#t(e,r);if(/\.md\.[cm]js$/i.test(e.name)){const a=await o(i,t);this.renderMarkdown(s,a,t.notepath,r)}else if(/\.html\.[cm]js$/i.test(e.name)){const a=await o(i,t);this.renderHTML(s,a,r)}else await o(s,i,t)}async#t(e,t){t.debug("Retrieving Javascript Renderer");const s=await this.#s(e,t);if(typeof s=="function")return s;if(!Se(s))throw new D(`component(${e.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"});if(typeof s.default=="function")return s.default;if(typeof s.render=="function")return s.render;throw new D(`component(${e.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"})}async#s(e,t){t.debug("Sourcing Renderer");try{if(/\.mjs(\?|$)/gi.test(e.name)){const i=this.#e.getResourcePath(e);return t.debug(`import('${i}')`),await import(i)}const s=this.#e.getRealPath(e.path);return t.debug(`require('${s}')`),require(s)}catch(s){throw new D(`component(${e.name}) could not be imported/required`,{cause:s,code:"invalid-component-syntax"})}}}class Et{#e;constructor(e){const t=new Y(e);this.#e=[new vt(e),new xt(e,t)]}async render(e,t,s,i,r){for(const o of this.#e)if(o.test(e))return s.empty(),o.render(e,t,s,i,r);throw new D(`component(${e.name}) is not supported`,{code:"unsupported-component"})}}const he=()=>/(?<=from *['"`]|require *\( *['"`])(.+)(?=['"`])/gi;class X{#e;#t;#s;#n;#i;#r=new P;#o=new P;constructor(e,t){this.#e=e.log.make(X.name),this.#t=new Y(e),this.#s=e,this.#n=t,this.#i=this.#s.app.vault.on("modify",this.#h.bind(this))}clear(){this.#s.app.vault.offref(this.#i),this.#r.clear(),this.#o.clear()}async resetCache(e){this.#s.isDesignModeEnabled&&(await this.#t.renewFolder(this.#t.getCachePath()),e.info("Cleared Versions Cache"))}resolveLatest(e){return this.#s.isDesignModeEnabled?this.#o.getFirst(e)??e:e}async#h(e){if(!this.#s.isDesignModeEnabled||!(e instanceof d.TFile)||!e.path.startsWith(this.#s.settings.components_folder)&&!this.#r.has(e.path))return;const t=this.#e.group();t.debug(`Listening changes on <${e.path}>`),t.debug("Listing affected files");const s=this.#a(e.path);t.trace("Listed affected files",s),t.debug("Prepare affected files");for(const i of s){const r=this.#t.resolveFile(i);if(!r){t.error(`Not Found <${i}>`);continue}if(r.extension==="cjs"){const a=window.require.resolve(this.#t.getRealPath(i));delete window.require.cache[a],t.trace(`Deleted cache of <${a}>`);continue}const o=await this.#d(r,t);this.#o.prepend(i,o)}t.trace("Current cjs cache",{...window.require.cache}),t.debug("Prepared affected files"),await this.#n(s,t),t.flush(`Listened changes on <${e.path}>`)}#a(e){const t=this.#r.get(e),s=[e,...t];for(const i of t)s.push(...this.#a(i));return s.reverse().unique().reverse()}async#d(e,t){const s=await this.#t.getFileHash(e),i=`${s}.${e.basename}.${e.extension}`,r=this.#t.getCachePath(i);if(await this.#t.missing(r))return t.debug(`Caching <${e.name}> to <${i}>`),await this.#t.copy(e,r,l=>this.#c(e,l,t)),r;const o=Date.now().toString(),a=`${s}-${o}.${e.basename}.${e.extension}`,c=this.#t.getCachePath(a);return t.debug(`Cloning <${i}> to <${a}>`),await this.#t.copy(e,c,l=>this.#c(e,l,t)),c}#c(e,t,s){const i=e.parent?.path??"";return t.replaceAll(he(),r=>{const o=this.#t.join(i,r),a=this.resolveLatest(o);return s.trace(`Replacing import path <${a}>`),this.#t.getRealPath(a)})}async indexComponents(e){if(!this.#s.isDesignModeEnabled)return;const t=this.#s.settings.components_folder,s=this.#s.app.vault.getFolderByPath(t);if(!s)throw new Error(`path <${t}> is not a folder`);e.info("Indexing Components"),await this.#l(s,e),e.debug("Indexed Components")}async#l(e,t){t.debug(`Indexing folder <${e.path}>`);for(const s of e.children)s instanceof d.TFolder?await this.#l(s,t):await this.#u(s.path,t);t.debug(`Indexed folder <${e.path}>`)}async#u(e,t){if(this.#r.hasValue(e))return;t.debug(`Indexing imports on <${e}>`);const s=e.replace(/[\\/][^\\/]*$/gi,""),i=await this.#t.read(e),r=[];for(const o of i.matchAll(he())){const a=this.#t.join(s,o[0]||"");t.trace(`file <${e}> imports <${a}>`),this.#r.push(a,e),r.push(a)}for(const o of r)await this.#u(o,t)}}class Q{#e;#t;#s;#n;#i;#r=new P;#o=[];constructor(e){this.#e=e.log.make(Q.name),this.#t=e,this.#s=new bt(e),this.#n=new Et(e),this.#i=new X(e,this.refresh.bind(this))}async clear(e){e.info("Clearing in-memory cache"),this.#r.clear(),this.#i.clear(),await this.#i.resetCache(e)}async prepareDesignMode(){const e=this.#e.group("Preparing DesignMode");try{e.info("Clearing cache"),await this.#i.resetCache(e),await this.#i.indexComponents(e),e.info("Refreshing All Components"),await this.refresh(Array.from(this.#r.keys()),e)}catch(t){e.warn(t)}e.flush("DesignMode Enabled")}async refresh(e,t){const s=e.length?e:this.#r.keys();t.debug("Refreshing Components",e);for(const i of s){t.debug(`Refreshing Components(${i})`);try{for(const r of this.#r.get(i))t.trace("Refreshing Codeblock",r),await this.#c(i,r,t)}catch(r){t.warn(r)}}t.info("Refreshed Components")}registerBaseCodeblock(){this.#t.registerMarkdownCodeBlockProcessor("use",this.#h.bind(this),-100)}registerCustomCodeblocks(){for(const[e,t]of this.#t.state.components_enabled.entries())for(const s of t)this.#o.includes(s)||(this.#o.push(s),this.#t.registerMarkdownCodeBlockProcessor(s,(i,r,o)=>{this.#h(i,r,o,e,s)},-100))}async#h(e,t,s,i,r){const o=this.#e.group();try{o.debug(`Parsing Codeblock Name '${r??"use"}'`);const a=s.sourcePath,c=r??this.#a(s,t);o.debug(`Parsing Codeblock Content '${c}'`);const{syntax:l,data:h}=this.#s.parse(e,a,o),u=this.#d(i,c),f=at(e);o.debug(`Serializing Codeblock '${c}'`);const y={context:{notepath:a,used_name:c,syntax:l,hash:f},element:t,data:h};o.trace("Serialized Codeblock",y),o.debug(`Rendering Codeblock '${c}'`),t.classList.add("component",`${c}-component`),this.#r.push(u.path,y),await this.#c(u.path,y,o),o.flush(`Rendered Component '${c}'`)}catch(a){o.error(a),o.flush(`Failed Component on '${s.sourcePath}'`);const c=t.createEl("pre");c.classList.add("component-error"),a instanceof le&&(a.cause=e),a instanceof Error?c.append(a.stack??a.message):c.append(JSON.stringify(a))}}#a(e,t){const s=e.getSectionInfo(t);if(s){const r=(s.text.split(`
`).at(s.lineStart)??"").replace("```use","").trim();if(r)return r}throw new D(`component name could not be found on '${e.sourcePath}'`,{cause:s,code:"missing-component-name"})}#d(e,t){if(e){for(const s of this.#t.state.components_matchers)if(s.id===e)return s}if(t){for(const s of this.#t.state.components_matchers)if(s.test(t))return s}throw new le(`component(${t}) was disabled recently`)}async#c(e,{context:t,element:s,data:i},r){const o=this.#i.resolveLatest(e);r.debug(`Rendering with LatestPath '${o}'`);const a=this.#t.app.vault.getFileByPath(o);if(a)return this.#n.render(a,t,s,i,r);throw new D(`component(${o}) could not be located, try reloading Obsidian`,{code:"missing-component-file"})}}class Z{#e;#t;constructor(e){this.#e=e.log.make(Z.name),this.#t=e}}const Ct={plugin_level:"WARN",enable_codeblocks:!1,enable_separators:!1,usage_separator:"---",cache_folder:"__temp/",components_folder:"",components_config:[]};class ee extends d.Plugin{log=_.consoleLogger(ee.name);settings={};state={};api;#e;constructor(e,t){super(e,t),this.log.setLevel(g.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new Z(this),this.#e=new Q(this),window.Components=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new mt(this)),this.#e.registerBaseCodeblock()}onunload(){const e=this.log.group("Clearing State");this.#e.clear(e),e.flush("Cleared State")}async loadSettings(){const e=this.log.group("Loading Settings"),t=await this.loadData()||{};this.settings=Object.assign({},Ct,t),e.debug("Loaded: ",this.settings),this.#t(e),e.flush("Loaded Settings")}async saveSettings(){const e=this.log.group("Saving Settings"),t=Object.assign({},this.settings);await this.saveData(t),e.debug("Saved: ",t),this.#t(e),e.flush("Saved Settings")}#t(e){e.info("Preparing state"),this.log.setLevel(g[this.settings.plugin_level]),this.state=ct(this),this.#e.registerCustomCodeblocks()}#s=!1;get isDesignModeEnabled(){return this.#s}enableDesignMode(){this.#s||(this.#s=!0,this.#e.prepareDesignMode())}}module.exports=ee;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsdWlzLmJzK29ic2lkaWFuLWZuY0AxLjQuMi9ub2RlX21vZHVsZXMvQGx1aXMuYnMvb2JzaWRpYW4tZm5jL2xpYi9vYnNpZGlhbi1mbmMuZXNtLmpzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxpdHkvRmlsZXN5c3RlbUFkYXB0ZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbGl0eS9NYXBTdG9yZS50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L2NvbW1vbi50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L3N0YXRlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL1NldHRpbmdzVGFiVG9vbHMudHMiLCIuLi8uLi8uLi8uLi9zcmMvc2V0dGluZ3MvU2V0dGluZ3NUYWJDb21wb25lbnRzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL3ZhbHVlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zZXR0aW5ncy9TZXR0aW5nc1RhYi50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL0NvbXBvbmVudEVycm9yLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9ZYW1sUGFyc2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9Kc29uUGFyc2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9pbmRleC50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL3JlbmRlcmVycy9CYXNlUmVuZGVyZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvY29kZWJsb2Nrcy9yZW5kZXJlcnMvVGVtcGxhdGVSZW5kZXJlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL3JlbmRlcmVycy9KYXZhc2NyaXB0UmVuZGVyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcmVuZGVyZXJzL2luZGV4LnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvVmVyc2lvbnNNYW5hZ2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvQ29kZWJsb2NrSGFuZGxlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9Db21wb25lbnRzQVBJLnRzIiwiLi4vLi4vLi4vLi4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjItcHJlc2VudCBMdWlzIEJyYXlhblxuICogQGx1aXMuYnMvb2JzaWRpYW4tZm5jQDEuNC4yIGlzIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogQHNvdXJjZSBodHRwczovL2dpdGh1Yi5jb20vbHVpc2JzL29ic2lkaWFuLWZuY1xuICovXG5pbXBvcnQgeyBTY29wZSBhcyBkdCwgbm9ybWFsaXplUGF0aCBhcyBndCwgVEZvbGRlciBhcyBGLCBURmlsZSBhcyBCIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5jbGFzcyBwdCB7XG4gIGVycm9yKHQsIG4pIHtcbiAgICBjb25zb2xlLmVycm9yKHQsIC4uLm4pO1xuICB9XG4gIHdhcm4odCwgbikge1xuICAgIGNvbnNvbGUud2Fybih0LCAuLi5uKTtcbiAgfVxuICBpbmZvKHQsIG4pIHtcbiAgICBjb25zb2xlLmluZm8odCwgLi4ubik7XG4gIH1cbiAgZGVidWcodCwgbikge1xuICAgIGNvbnNvbGUuZGVidWcodCwgLi4ubik7XG4gIH1cbiAgdHJhY2UodCwgbikge1xuICAgIGNvbnNvbGUudHJhY2UodCwgLi4ubik7XG4gIH1cbiAgZ3JvdXAodCwgbikge1xuICAgIHJldHVybiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKHQsIC4uLm4pLCBjb25zb2xlLmdyb3VwRW5kO1xuICB9XG59XG5jb25zdCBnID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFRSQUNFOiAxLFxuICBERUJVRzogMixcbiAgSU5GTzogMyxcbiAgV0FSTjogNCxcbiAgRVJST1I6IDVcbn0pLCB3dCA9IE9iamVjdC5mcmVlemUoe1xuICAxOiBcIlRSQUNFXCIsXG4gIDI6IFwiREVCVUdcIixcbiAgMzogXCIgSU5GT1wiLFxuICA0OiBcIiBXQVJOXCIsXG4gIDU6IFwiRVJST1JcIlxufSk7XG5jbGFzcyBWIHtcbiAgI3Q7XG4gICNzO1xuICAjZTtcbiAgI24gPSBbXTtcbiAgI2kgPSBbXTtcbiAgLyoqIE92ZXJyaWRlcyBjaGFpbiBpbmhlcml0ZWQgdmFsdWUuICovXG4gIGdldCBsZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy4jcyA/IHRoaXMuI3MgOiB0aGlzLiN0Py5sZXZlbCA/PyBnLldBUk47XG4gIH1cbiAgZ2V0IGZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy4jZSA/IHRoaXMuI2UgOiB0aGlzLiN0Py5mb3JtYXQgPz8gXCJbaGg6bW06c3MubXNdIGxldmVsIChuYW1lc3BhY2UpOlwiO1xuICB9XG4gIGdldCBuYW1lc3BhY2UoKSB7XG4gICAgY29uc3QgdCA9IFtdO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdGhpcy4jaS5sZW5ndGggLSAxOyBuKyspXG4gICAgICB0LnB1c2godGhpcy4jaVtuXVswXSk7XG4gICAgcmV0dXJuIHQucHVzaCh0aGlzLiNpLmF0KC0xKSA/PyBcIlwiKSwgdC5qb2luKFwiLlwiKTtcbiAgfVxuICBnZXQgZHJpdmVycygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh0aGlzLiNuKTtcbiAgfVxuICAvKiogQ2hhbmdlIG9uIGxldmVsIGlzIHByb3BhZ2F0ZWQuICovXG4gIHNldExldmVsKHQpIHtcbiAgICByZXR1cm4gdGhpcy4jcyA9IHQsIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSBvbiBmb3JtYXQgaXMgcHJvcGFnZXRlZC5cbiAgICogVGhlIHZhbGlkIHBsYWNlaG9sZGVycyBhcmU6XG4gICAqIC0gYGhoYCAoaG91cilcbiAgICogLSBgbW1gIChtaW51dGUpXG4gICAqIC0gYHNzYCAoc2Vjb25kKVxuICAgKiAtIGBtc2AgKG1pbGxpc2Vjb25kKVxuICAgKiAtIGBsZXZlbGBcbiAgICogLSBgbmFtZXNwYWNlYFxuICAgKiBAZXhhbXBsZSAnW2hoOm1tOnNzLm1zXSBsZXZlbCAobmFtZXNwYWNlKTonXG4gICAqL1xuICBzZXRGb3JtYXQodCkge1xuICAgIHJldHVybiB0aGlzLiNlID0gdCwgdGhpcztcbiAgfVxuICAvKiogQ2hhbmdlIG9uIGRyaXZlcnMgaXMgbm90IHByb3BhZ2F0ZWQgYWZ0ZXIgY29uc3RydWN0aW9uLiAqL1xuICBhZGREcml2ZXJzKC4uLnQpIHtcbiAgICBmb3IgKGNvbnN0IG4gb2YgdClcbiAgICAgIEFycmF5LmlzQXJyYXkobikgPyB0aGlzLiNuLnB1c2goLi4ubikgOiBuICYmIHRoaXMuI24ucHVzaChuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogQ2hhbmdlIG9uIG5hbWVzcGFjZXMgaXMgbm90IHByb3BhZ2F0ZWQgYWZ0ZXIgY29uc3RydWN0aW9uLiAqL1xuICBhZGROYW1lc3BhY2VzKC4uLnQpIHtcbiAgICBmb3IgKGNvbnN0IG4gb2YgdClcbiAgICAgIEFycmF5LmlzQXJyYXkobikgPyB0aGlzLiNpLnB1c2goLi4ubikgOiBuICYmIHRoaXMuI2kucHVzaChuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogU3RhcnRzIGEgTG9nZ2VycyBjaGFpbi4gKi9cbiAgc3RhdGljIGNvbnNvbGVMb2dnZXIodCkge1xuICAgIGNvbnN0IG4gPSBuZXcgVigpO1xuICAgIHJldHVybiBuLnNldExldmVsKGcuV0FSTiksIG4uYWRkRHJpdmVycyhuZXcgcHQoKSksIG4uYWRkTmFtZXNwYWNlcyh0KSwgbjtcbiAgfVxuICAvKiogU3Bhd25zIGEgU3ViLUxvZ2dlci4gKi9cbiAgbWFrZSh0KSB7XG4gICAgY29uc3QgbiA9IG5ldyBWKCk7XG4gICAgcmV0dXJuIG4uI3QgPSB0aGlzLCBuLmFkZERyaXZlcnModGhpcy4jbiksIG4uYWRkTmFtZXNwYWNlcyh0aGlzLiNpLCB0KSwgbjtcbiAgfVxuICAvKiogUHJlcGFyZSB0aGUgbG9nIHByZWZpeCBiYXNlZCBvbiBgdGhpcy5mb3JtYXRgICovXG4gIHByZWZpeCh0LCBuKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0LnJlcGxhY2UoXCJoaFwiLCBTdHJpbmcodC5nZXRIb3VycygpKS5wYWRTdGFydCgyLCBcIjBcIikpLnJlcGxhY2UoXCJtbVwiLCBTdHJpbmcodC5nZXRNaW51dGVzKCkpLnBhZFN0YXJ0KDIsIFwiMFwiKSkucmVwbGFjZShcInNzXCIsIFN0cmluZyh0LmdldFNlY29uZHMoKSkucGFkU3RhcnQoMiwgXCIwXCIpKS5yZXBsYWNlKFwibXNcIiwgU3RyaW5nKHQuZ2V0TWlsbGlzZWNvbmRzKCkpLnBhZFN0YXJ0KDMsIFwiMFwiKSkucmVwbGFjZShcImxldmVsXCIsIHd0W25dKS5yZXBsYWNlKFwibmFtZXNwYWNlXCIsIHRoaXMubmFtZXNwYWNlKTtcbiAgfVxuICBsb2codCwgbiwgcykge1xuICAgIGlmICh0aGlzLmxldmVsID4gbikgcmV0dXJuO1xuICAgIGNvbnN0IGkgPSB0aGlzLnByZWZpeCh0LCBuKTtcbiAgICBzd2l0Y2ggKHRoaXMubGV2ZWwpIHtcbiAgICAgIGNhc2UgZy5FUlJPUjpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLmVycm9yKGksIHMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGcuV0FSTjpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLndhcm4oaSwgcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZy5JTkZPOlxuICAgICAgICB0aGlzLiNuLmZvckVhY2goKHIpID0+IHIuaW5mbyhpLCBzKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnLkRFQlVHOlxuICAgICAgICB0aGlzLiNuLmZvckVhY2goKHIpID0+IHIuZGVidWcoaSwgcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuI24uZm9yRWFjaCgocikgPT4gci50cmFjZShpLCBzKSk7XG4gICAgfVxuICB9XG4gIGVycm9yKC4uLnQpIHtcbiAgICB0aGlzLmxvZygvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgZy5FUlJPUiwgdCk7XG4gIH1cbiAgd2FybiguLi50KSB7XG4gICAgdGhpcy5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuV0FSTiwgdCk7XG4gIH1cbiAgaW5mbyguLi50KSB7XG4gICAgdGhpcy5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuSU5GTywgdCk7XG4gIH1cbiAgZGVidWcoLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLkRFQlVHLCB0KTtcbiAgfVxuICB0cmFjZSguLi50KSB7XG4gICAgdGhpcy5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuVFJBQ0UsIHQpO1xuICB9XG4gIC8vIG9uKGxvZ2dlcjogdW5rbm93bik6IExvZ2dlciB7XG4gIC8vICAgcmV0dXJuIGxvZ2dlciAmJiBsb2dnZXIgaW5zdGFuY2VvZiBMb2dnZXIgPyBuZXcgTG9nZ2VyV3JhcHBlcih0aGlzLm5hbWVzcGFjZSwgbG9nZ2VyKSA6IHRoaXNcbiAgLy8gfVxuICAvLyAvKiogU3Bhd25zIGEgU3ViLUxvZ2dlciwgdGhhdCBncm91cHMgdGhlIGxvZ3MuICovXG4gIGdyb3VwKC4uLnQpIHtcbiAgICBjb25zdCBuID0gbmV3IG10KCk7XG4gICAgcmV0dXJuIG4uI3QgPSB0aGlzLCBuLmFkZERyaXZlcnModGhpcy4jbiksIG4uYWRkTmFtZXNwYWNlcyh0aGlzLiNpKSwgdC5sZW5ndGggJiYgbi5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuSU5GTywgdCksIG47XG4gIH1cbn1cbmNsYXNzIG10IGV4dGVuZHMgViB7XG4gICN0ID0gW107XG4gIGxvZyh0LCBuLCBzKSB7XG4gICAgdGhpcy5sZXZlbCA+IG4gfHwgdGhpcy4jdC5wdXNoKHsgdGltZXN0YW1wOiB0LCBsZXZlbDogbiwgY29udGVudDogcyB9KTtcbiAgfVxuICBmbHVzaCguLi50KSB7XG4gICAgaWYgKHRoaXMuI3QubGVuZ3RoID09PSAwKSB7XG4gICAgICBzdXBlci5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuSU5GTywgdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG4gPSB0aGlzLnByZWZpeCgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgZy5JTkZPKSwgcyA9IHRoaXMuZHJpdmVycy5tYXAoXG4gICAgICAoaSkgPT4gaS5ncm91cChuLCB0KVxuICAgICk7XG4gICAgZm9yIChjb25zdCB7IHRpbWVzdGFtcDogaSwgbGV2ZWw6IHIsIGNvbnRlbnQ6IG8gfSBvZiB0aGlzLiN0KVxuICAgICAgc3VwZXIubG9nKGksIHIsIG8pO1xuICAgIHMuZm9yRWFjaCgoaSkgPT4gaSgpKSwgdGhpcy4jdCA9IFtdO1xuICB9XG59XG5jbGFzcyB5dCB7XG4gIGNvbnN0cnVjdG9yKHQsIG4pIHtcbiAgICB0aGlzLmFwcCA9IHQsIHRoaXMuY29udGFpbmVyRWwgPSBuLCB0aGlzLnNjb3BlID0gbmV3IGR0KCksIHRoaXMud3JhcHBlckVsID0gY3JlYXRlRGl2KFwic3VnZ2VzdGlvbnMtdG9vbHRpcFwiKTtcbiAgfVxuICBzY29wZTtcbiAgd3JhcHBlckVsO1xuICByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVzY2FwZVwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICB9XG4gIG9wZW4oKSB7XG4gICAgdGhpcy5hcHAua2V5bWFwLnB1c2hTY29wZSh0aGlzLnNjb3BlKSwgdGhpcy5jb250YWluZXJFbC5hcHBlbmRDaGlsZCh0aGlzLndyYXBwZXJFbCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5hcHAua2V5bWFwLnBvcFNjb3BlKHRoaXMuc2NvcGUpLCB0aGlzLndyYXBwZXJFbC5lbXB0eSgpLCB0aGlzLndyYXBwZXJFbC5kZXRhY2goKTtcbiAgfVxufVxuY29uc3QgWSA9IE1hdGgubWluLCBBID0gTWF0aC5tYXgsIEggPSBNYXRoLnJvdW5kLCB4ID0gKGUpID0+ICh7XG4gIHg6IGUsXG4gIHk6IGVcbn0pO1xuZnVuY3Rpb24gWihlKSB7XG4gIHJldHVybiBlLnNwbGl0KFwiLVwiKVswXTtcbn1cbmZ1bmN0aW9uIHh0KGUpIHtcbiAgcmV0dXJuIGUuc3BsaXQoXCItXCIpWzFdO1xufVxuZnVuY3Rpb24gRXQoZSkge1xuICByZXR1cm4gZSA9PT0gXCJ4XCIgPyBcInlcIiA6IFwieFwiO1xufVxuZnVuY3Rpb24gYnQoZSkge1xuICByZXR1cm4gZSA9PT0gXCJ5XCIgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiO1xufVxuZnVuY3Rpb24gdHQoZSkge1xuICByZXR1cm4gW1widG9wXCIsIFwiYm90dG9tXCJdLmluY2x1ZGVzKFooZSkpID8gXCJ5XCIgOiBcInhcIjtcbn1cbmZ1bmN0aW9uIHZ0KGUpIHtcbiAgcmV0dXJuIEV0KHR0KGUpKTtcbn1cbmZ1bmN0aW9uIGV0KGUpIHtcbiAgY29uc3Qge1xuICAgIHg6IHQsXG4gICAgeTogbixcbiAgICB3aWR0aDogcyxcbiAgICBoZWlnaHQ6IGlcbiAgfSA9IGU7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHMsXG4gICAgaGVpZ2h0OiBpLFxuICAgIHRvcDogbixcbiAgICBsZWZ0OiB0LFxuICAgIHJpZ2h0OiB0ICsgcyxcbiAgICBib3R0b206IG4gKyBpLFxuICAgIHg6IHQsXG4gICAgeTogblxuICB9O1xufVxuZnVuY3Rpb24gWChlLCB0LCBuKSB7XG4gIGxldCB7XG4gICAgcmVmZXJlbmNlOiBzLFxuICAgIGZsb2F0aW5nOiBpXG4gIH0gPSBlO1xuICBjb25zdCByID0gdHQodCksIG8gPSB2dCh0KSwgYyA9IGJ0KG8pLCBhID0gWih0KSwgbCA9IHIgPT09IFwieVwiLCB1ID0gcy54ICsgcy53aWR0aCAvIDIgLSBpLndpZHRoIC8gMiwgZiA9IHMueSArIHMuaGVpZ2h0IC8gMiAtIGkuaGVpZ2h0IC8gMiwgZCA9IHNbY10gLyAyIC0gaVtjXSAvIDI7XG4gIGxldCBoO1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwidG9wXCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiB1LFxuICAgICAgICB5OiBzLnkgLSBpLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgIGggPSB7XG4gICAgICAgIHg6IHUsXG4gICAgICAgIHk6IHMueSArIHMuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiBzLnggKyBzLndpZHRoLFxuICAgICAgICB5OiBmXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImxlZnRcIjpcbiAgICAgIGggPSB7XG4gICAgICAgIHg6IHMueCAtIGkud2lkdGgsXG4gICAgICAgIHk6IGZcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaCA9IHtcbiAgICAgICAgeDogcy54LFxuICAgICAgICB5OiBzLnlcbiAgICAgIH07XG4gIH1cbiAgc3dpdGNoICh4dCh0KSkge1xuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgaFtvXSAtPSBkICogKG4gJiYgbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW5kXCI6XG4gICAgICBoW29dICs9IGQgKiAobiAmJiBsID8gLTEgOiAxKTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBoO1xufVxuY29uc3QgUnQgPSBhc3luYyAoZSwgdCwgbikgPT4ge1xuICBjb25zdCB7XG4gICAgcGxhY2VtZW50OiBzID0gXCJib3R0b21cIixcbiAgICBzdHJhdGVneTogaSA9IFwiYWJzb2x1dGVcIixcbiAgICBtaWRkbGV3YXJlOiByID0gW10sXG4gICAgcGxhdGZvcm06IG9cbiAgfSA9IG4sIGMgPSByLmZpbHRlcihCb29sZWFuKSwgYSA9IGF3YWl0IChvLmlzUlRMID09IG51bGwgPyB2b2lkIDAgOiBvLmlzUlRMKHQpKTtcbiAgbGV0IGwgPSBhd2FpdCBvLmdldEVsZW1lbnRSZWN0cyh7XG4gICAgcmVmZXJlbmNlOiBlLFxuICAgIGZsb2F0aW5nOiB0LFxuICAgIHN0cmF0ZWd5OiBpXG4gIH0pLCB7XG4gICAgeDogdSxcbiAgICB5OiBmXG4gIH0gPSBYKGwsIHMsIGEpLCBkID0gcywgaCA9IHt9LCBMID0gMDtcbiAgZm9yIChsZXQgcCA9IDA7IHAgPCBjLmxlbmd0aDsgcCsrKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZTogYixcbiAgICAgIGZuOiBJXG4gICAgfSA9IGNbcF0sIHtcbiAgICAgIHg6IE8sXG4gICAgICB5OiBXLFxuICAgICAgZGF0YTogUCxcbiAgICAgIHJlc2V0OiBDXG4gICAgfSA9IGF3YWl0IEkoe1xuICAgICAgeDogdSxcbiAgICAgIHk6IGYsXG4gICAgICBpbml0aWFsUGxhY2VtZW50OiBzLFxuICAgICAgcGxhY2VtZW50OiBkLFxuICAgICAgc3RyYXRlZ3k6IGksXG4gICAgICBtaWRkbGV3YXJlRGF0YTogaCxcbiAgICAgIHJlY3RzOiBsLFxuICAgICAgcGxhdGZvcm06IG8sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IGUsXG4gICAgICAgIGZsb2F0aW5nOiB0XG4gICAgICB9XG4gICAgfSk7XG4gICAgdSA9IE8gPz8gdSwgZiA9IFcgPz8gZiwgaCA9IHtcbiAgICAgIC4uLmgsXG4gICAgICBbYl06IHtcbiAgICAgICAgLi4uaFtiXSxcbiAgICAgICAgLi4uUFxuICAgICAgfVxuICAgIH0sIEMgJiYgTCA8PSA1MCAmJiAoTCsrLCB0eXBlb2YgQyA9PSBcIm9iamVjdFwiICYmIChDLnBsYWNlbWVudCAmJiAoZCA9IEMucGxhY2VtZW50KSwgQy5yZWN0cyAmJiAobCA9IEMucmVjdHMgPT09ICEwID8gYXdhaXQgby5nZXRFbGVtZW50UmVjdHMoe1xuICAgICAgcmVmZXJlbmNlOiBlLFxuICAgICAgZmxvYXRpbmc6IHQsXG4gICAgICBzdHJhdGVneTogaVxuICAgIH0pIDogQy5yZWN0cyksIHtcbiAgICAgIHg6IHUsXG4gICAgICB5OiBmXG4gICAgfSA9IFgobCwgZCwgYSkpLCBwID0gLTEpO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogdSxcbiAgICB5OiBmLFxuICAgIHBsYWNlbWVudDogZCxcbiAgICBzdHJhdGVneTogaSxcbiAgICBtaWRkbGV3YXJlRGF0YTogaFxuICB9O1xufTtcbmZ1bmN0aW9uICQoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93IDwgXCJ1XCI7XG59XG5mdW5jdGlvbiBEKGUpIHtcbiAgcmV0dXJuIG50KGUpID8gKGUubm9kZU5hbWUgfHwgXCJcIikudG9Mb3dlckNhc2UoKSA6IFwiI2RvY3VtZW50XCI7XG59XG5mdW5jdGlvbiB3KGUpIHtcbiAgdmFyIHQ7XG4gIHJldHVybiAoZSA9PSBudWxsIHx8ICh0ID0gZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogdC5kZWZhdWx0VmlldykgfHwgd2luZG93O1xufVxuZnVuY3Rpb24gdihlKSB7XG4gIHZhciB0O1xuICByZXR1cm4gKHQgPSAobnQoZSkgPyBlLm93bmVyRG9jdW1lbnQgOiBlLmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiB0LmRvY3VtZW50RWxlbWVudDtcbn1cbmZ1bmN0aW9uIG50KGUpIHtcbiAgcmV0dXJuICQoKSA/IGUgaW5zdGFuY2VvZiBOb2RlIHx8IGUgaW5zdGFuY2VvZiB3KGUpLk5vZGUgOiAhMTtcbn1cbmZ1bmN0aW9uIG0oZSkge1xuICByZXR1cm4gJCgpID8gZSBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgZSBpbnN0YW5jZW9mIHcoZSkuRWxlbWVudCA6ICExO1xufVxuZnVuY3Rpb24gRShlKSB7XG4gIHJldHVybiAkKCkgPyBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgZSBpbnN0YW5jZW9mIHcoZSkuSFRNTEVsZW1lbnQgOiAhMTtcbn1cbmZ1bmN0aW9uIHEoZSkge1xuICByZXR1cm4gISQoKSB8fCB0eXBlb2YgU2hhZG93Um9vdCA+IFwidVwiID8gITEgOiBlIGluc3RhbmNlb2YgU2hhZG93Um9vdCB8fCBlIGluc3RhbmNlb2YgdyhlKS5TaGFkb3dSb290O1xufVxuZnVuY3Rpb24gayhlKSB7XG4gIGNvbnN0IHtcbiAgICBvdmVyZmxvdzogdCxcbiAgICBvdmVyZmxvd1g6IG4sXG4gICAgb3ZlcmZsb3dZOiBzLFxuICAgIGRpc3BsYXk6IGlcbiAgfSA9IHkoZSk7XG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW58Y2xpcC8udGVzdCh0ICsgcyArIG4pICYmICFbXCJpbmxpbmVcIiwgXCJjb250ZW50c1wiXS5pbmNsdWRlcyhpKTtcbn1cbmZ1bmN0aW9uIEx0KGUpIHtcbiAgcmV0dXJuIFtcInRhYmxlXCIsIFwidGRcIiwgXCJ0aFwiXS5pbmNsdWRlcyhEKGUpKTtcbn1cbmZ1bmN0aW9uIE0oZSkge1xuICByZXR1cm4gW1wiOnBvcG92ZXItb3BlblwiLCBcIjptb2RhbFwiXS5zb21lKCh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlLm1hdGNoZXModCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHooZSkge1xuICBjb25zdCB0ID0gRygpLCBuID0gbShlKSA/IHkoZSkgOiBlO1xuICByZXR1cm4gW1widHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlXCIsIFwic2NhbGVcIiwgXCJyb3RhdGVcIiwgXCJwZXJzcGVjdGl2ZVwiXS5zb21lKChzKSA9PiBuW3NdID8gbltzXSAhPT0gXCJub25lXCIgOiAhMSkgfHwgKG4uY29udGFpbmVyVHlwZSA/IG4uY29udGFpbmVyVHlwZSAhPT0gXCJub3JtYWxcIiA6ICExKSB8fCAhdCAmJiAobi5iYWNrZHJvcEZpbHRlciA/IG4uYmFja2Ryb3BGaWx0ZXIgIT09IFwibm9uZVwiIDogITEpIHx8ICF0ICYmIChuLmZpbHRlciA/IG4uZmlsdGVyICE9PSBcIm5vbmVcIiA6ICExKSB8fCBbXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVcIiwgXCJzY2FsZVwiLCBcInJvdGF0ZVwiLCBcInBlcnNwZWN0aXZlXCIsIFwiZmlsdGVyXCJdLnNvbWUoKHMpID0+IChuLndpbGxDaGFuZ2UgfHwgXCJcIikuaW5jbHVkZXMocykpIHx8IFtcInBhaW50XCIsIFwibGF5b3V0XCIsIFwic3RyaWN0XCIsIFwiY29udGVudFwiXS5zb21lKChzKSA9PiAobi5jb250YWluIHx8IFwiXCIpLmluY2x1ZGVzKHMpKTtcbn1cbmZ1bmN0aW9uIEN0KGUpIHtcbiAgbGV0IHQgPSBSKGUpO1xuICBmb3IgKDsgRSh0KSAmJiAhUyh0KTsgKSB7XG4gICAgaWYgKHoodCkpXG4gICAgICByZXR1cm4gdDtcbiAgICBpZiAoTSh0KSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHQgPSBSKHQpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gRygpIHtcbiAgcmV0dXJuIHR5cGVvZiBDU1MgPiBcInVcIiB8fCAhQ1NTLnN1cHBvcnRzID8gITEgOiBDU1Muc3VwcG9ydHMoXCItd2Via2l0LWJhY2tkcm9wLWZpbHRlclwiLCBcIm5vbmVcIik7XG59XG5mdW5jdGlvbiBTKGUpIHtcbiAgcmV0dXJuIFtcImh0bWxcIiwgXCJib2R5XCIsIFwiI2RvY3VtZW50XCJdLmluY2x1ZGVzKEQoZSkpO1xufVxuZnVuY3Rpb24geShlKSB7XG4gIHJldHVybiB3KGUpLmdldENvbXB1dGVkU3R5bGUoZSk7XG59XG5mdW5jdGlvbiBfKGUpIHtcbiAgcmV0dXJuIG0oZSkgPyB7XG4gICAgc2Nyb2xsTGVmdDogZS5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZS5zY3JvbGxUb3BcbiAgfSA6IHtcbiAgICBzY3JvbGxMZWZ0OiBlLnNjcm9sbFgsXG4gICAgc2Nyb2xsVG9wOiBlLnNjcm9sbFlcbiAgfTtcbn1cbmZ1bmN0aW9uIFIoZSkge1xuICBpZiAoRChlKSA9PT0gXCJodG1sXCIpXG4gICAgcmV0dXJuIGU7XG4gIGNvbnN0IHQgPSAoXG4gICAgLy8gU3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGUuXG4gICAgZS5hc3NpZ25lZFNsb3QgfHwgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWQuXG4gICAgZS5wYXJlbnROb2RlIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWQuXG4gICAgcShlKSAmJiBlLmhvc3QgfHwgLy8gRmFsbGJhY2suXG4gICAgdihlKVxuICApO1xuICByZXR1cm4gcSh0KSA/IHQuaG9zdCA6IHQ7XG59XG5mdW5jdGlvbiBzdChlKSB7XG4gIGNvbnN0IHQgPSBSKGUpO1xuICByZXR1cm4gUyh0KSA/IGUub3duZXJEb2N1bWVudCA/IGUub3duZXJEb2N1bWVudC5ib2R5IDogZS5ib2R5IDogRSh0KSAmJiBrKHQpID8gdCA6IHN0KHQpO1xufVxuZnVuY3Rpb24gaXQoZSwgdCwgbikge1xuICB2YXIgcztcbiAgdCA9PT0gdm9pZCAwICYmICh0ID0gW10pO1xuICBjb25zdCBpID0gc3QoZSksIHIgPSBpID09PSAoKHMgPSBlLm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBzLmJvZHkpLCBvID0gdyhpKTtcbiAgcmV0dXJuIHIgPyAoaihvKSwgdC5jb25jYXQobywgby52aXN1YWxWaWV3cG9ydCB8fCBbXSwgayhpKSA/IGkgOiBbXSwgW10pKSA6IHQuY29uY2F0KGksIGl0KGksIFtdKSk7XG59XG5mdW5jdGlvbiBqKGUpIHtcbiAgcmV0dXJuIGUucGFyZW50ICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnBhcmVudCkgPyBlLmZyYW1lRWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiBydChlKSB7XG4gIGNvbnN0IHQgPSB5KGUpO1xuICBsZXQgbiA9IHBhcnNlRmxvYXQodC53aWR0aCkgfHwgMCwgcyA9IHBhcnNlRmxvYXQodC5oZWlnaHQpIHx8IDA7XG4gIGNvbnN0IGkgPSBFKGUpLCByID0gaSA/IGUub2Zmc2V0V2lkdGggOiBuLCBvID0gaSA/IGUub2Zmc2V0SGVpZ2h0IDogcywgYyA9IEgobikgIT09IHIgfHwgSChzKSAhPT0gbztcbiAgcmV0dXJuIGMgJiYgKG4gPSByLCBzID0gbyksIHtcbiAgICB3aWR0aDogbixcbiAgICBoZWlnaHQ6IHMsXG4gICAgJDogY1xuICB9O1xufVxuZnVuY3Rpb24gb3QoZSkge1xuICByZXR1cm4gbShlKSA/IGUgOiBlLmNvbnRleHRFbGVtZW50O1xufVxuZnVuY3Rpb24gVChlKSB7XG4gIGNvbnN0IHQgPSBvdChlKTtcbiAgaWYgKCFFKHQpKVxuICAgIHJldHVybiB4KDEpO1xuICBjb25zdCBuID0gdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwge1xuICAgIHdpZHRoOiBzLFxuICAgIGhlaWdodDogaSxcbiAgICAkOiByXG4gIH0gPSBydCh0KTtcbiAgbGV0IG8gPSAociA/IEgobi53aWR0aCkgOiBuLndpZHRoKSAvIHMsIGMgPSAociA/IEgobi5oZWlnaHQpIDogbi5oZWlnaHQpIC8gaTtcbiAgcmV0dXJuICghbyB8fCAhTnVtYmVyLmlzRmluaXRlKG8pKSAmJiAobyA9IDEpLCAoIWMgfHwgIU51bWJlci5pc0Zpbml0ZShjKSkgJiYgKGMgPSAxKSwge1xuICAgIHg6IG8sXG4gICAgeTogY1xuICB9O1xufVxuY29uc3QgVHQgPSAvKiBAX19QVVJFX18gKi8geCgwKTtcbmZ1bmN0aW9uIGN0KGUpIHtcbiAgY29uc3QgdCA9IHcoZSk7XG4gIHJldHVybiAhRygpIHx8ICF0LnZpc3VhbFZpZXdwb3J0ID8gVHQgOiB7XG4gICAgeDogdC52aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0LFxuICAgIHk6IHQudmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wXG4gIH07XG59XG5mdW5jdGlvbiBTdChlLCB0LCBuKSB7XG4gIHJldHVybiB0ID09PSB2b2lkIDAgJiYgKHQgPSAhMSksICFuIHx8IHQgJiYgbiAhPT0gdyhlKSA/ICExIDogdDtcbn1cbmZ1bmN0aW9uIE4oZSwgdCwgbiwgcykge1xuICB0ID09PSB2b2lkIDAgJiYgKHQgPSAhMSksIG4gPT09IHZvaWQgMCAmJiAobiA9ICExKTtcbiAgY29uc3QgaSA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHIgPSBvdChlKTtcbiAgbGV0IG8gPSB4KDEpO1xuICB0ICYmIChzID8gbShzKSAmJiAobyA9IFQocykpIDogbyA9IFQoZSkpO1xuICBjb25zdCBjID0gU3QociwgbiwgcykgPyBjdChyKSA6IHgoMCk7XG4gIGxldCBhID0gKGkubGVmdCArIGMueCkgLyBvLngsIGwgPSAoaS50b3AgKyBjLnkpIC8gby55LCB1ID0gaS53aWR0aCAvIG8ueCwgZiA9IGkuaGVpZ2h0IC8gby55O1xuICBpZiAocikge1xuICAgIGNvbnN0IGQgPSB3KHIpLCBoID0gcyAmJiBtKHMpID8gdyhzKSA6IHM7XG4gICAgbGV0IEwgPSBkLCBwID0gaihMKTtcbiAgICBmb3IgKDsgcCAmJiBzICYmIGggIT09IEw7ICkge1xuICAgICAgY29uc3QgYiA9IFQocCksIEkgPSBwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBPID0geShwKSwgVyA9IEkubGVmdCArIChwLmNsaWVudExlZnQgKyBwYXJzZUZsb2F0KE8ucGFkZGluZ0xlZnQpKSAqIGIueCwgUCA9IEkudG9wICsgKHAuY2xpZW50VG9wICsgcGFyc2VGbG9hdChPLnBhZGRpbmdUb3ApKSAqIGIueTtcbiAgICAgIGEgKj0gYi54LCBsICo9IGIueSwgdSAqPSBiLngsIGYgKj0gYi55LCBhICs9IFcsIGwgKz0gUCwgTCA9IHcocCksIHAgPSBqKEwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXQoe1xuICAgIHdpZHRoOiB1LFxuICAgIGhlaWdodDogZixcbiAgICB4OiBhLFxuICAgIHk6IGxcbiAgfSk7XG59XG5mdW5jdGlvbiBLKGUsIHQpIHtcbiAgY29uc3QgbiA9IF8oZSkuc2Nyb2xsTGVmdDtcbiAgcmV0dXJuIHQgPyB0LmxlZnQgKyBuIDogTih2KGUpKS5sZWZ0ICsgbjtcbn1cbmZ1bmN0aW9uIGx0KGUsIHQsIG4pIHtcbiAgbiA9PT0gdm9pZCAwICYmIChuID0gITEpO1xuICBjb25zdCBzID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgaSA9IHMubGVmdCArIHQuc2Nyb2xsTGVmdCAtIChuID8gMCA6IChcbiAgICAvLyBSVEwgPGJvZHk+IHNjcm9sbGJhci5cbiAgICBLKGUsIHMpXG4gICkpLCByID0gcy50b3AgKyB0LnNjcm9sbFRvcDtcbiAgcmV0dXJuIHtcbiAgICB4OiBpLFxuICAgIHk6IHJcbiAgfTtcbn1cbmZ1bmN0aW9uIER0KGUpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50czogdCxcbiAgICByZWN0OiBuLFxuICAgIG9mZnNldFBhcmVudDogcyxcbiAgICBzdHJhdGVneTogaVxuICB9ID0gZTtcbiAgY29uc3QgciA9IGkgPT09IFwiZml4ZWRcIiwgbyA9IHYocyksIGMgPSB0ID8gTSh0LmZsb2F0aW5nKSA6ICExO1xuICBpZiAocyA9PT0gbyB8fCBjICYmIHIpXG4gICAgcmV0dXJuIG47XG4gIGxldCBhID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH0sIGwgPSB4KDEpO1xuICBjb25zdCB1ID0geCgwKSwgZiA9IEUocyk7XG4gIGlmICgoZiB8fCAhZiAmJiAhcikgJiYgKChEKHMpICE9PSBcImJvZHlcIiB8fCBrKG8pKSAmJiAoYSA9IF8ocykpLCBFKHMpKSkge1xuICAgIGNvbnN0IGggPSBOKHMpO1xuICAgIGwgPSBUKHMpLCB1LnggPSBoLnggKyBzLmNsaWVudExlZnQsIHUueSA9IGgueSArIHMuY2xpZW50VG9wO1xuICB9XG4gIGNvbnN0IGQgPSBvICYmICFmICYmICFyID8gbHQobywgYSwgITApIDogeCgwKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogbi53aWR0aCAqIGwueCxcbiAgICBoZWlnaHQ6IG4uaGVpZ2h0ICogbC55LFxuICAgIHg6IG4ueCAqIGwueCAtIGEuc2Nyb2xsTGVmdCAqIGwueCArIHUueCArIGQueCxcbiAgICB5OiBuLnkgKiBsLnkgLSBhLnNjcm9sbFRvcCAqIGwueSArIHUueSArIGQueVxuICB9O1xufVxuZnVuY3Rpb24gT3QoZSkge1xuICByZXR1cm4gQXJyYXkuZnJvbShlLmdldENsaWVudFJlY3RzKCkpO1xufVxuZnVuY3Rpb24gQXQoZSkge1xuICBjb25zdCB0ID0gdihlKSwgbiA9IF8oZSksIHMgPSBlLm93bmVyRG9jdW1lbnQuYm9keSwgaSA9IEEodC5zY3JvbGxXaWR0aCwgdC5jbGllbnRXaWR0aCwgcy5zY3JvbGxXaWR0aCwgcy5jbGllbnRXaWR0aCksIHIgPSBBKHQuc2Nyb2xsSGVpZ2h0LCB0LmNsaWVudEhlaWdodCwgcy5zY3JvbGxIZWlnaHQsIHMuY2xpZW50SGVpZ2h0KTtcbiAgbGV0IG8gPSAtbi5zY3JvbGxMZWZ0ICsgSyhlKTtcbiAgY29uc3QgYyA9IC1uLnNjcm9sbFRvcDtcbiAgcmV0dXJuIHkocykuZGlyZWN0aW9uID09PSBcInJ0bFwiICYmIChvICs9IEEodC5jbGllbnRXaWR0aCwgcy5jbGllbnRXaWR0aCkgLSBpKSwge1xuICAgIHdpZHRoOiBpLFxuICAgIGhlaWdodDogcixcbiAgICB4OiBvLFxuICAgIHk6IGNcbiAgfTtcbn1cbmZ1bmN0aW9uIEZ0KGUsIHQpIHtcbiAgY29uc3QgbiA9IHcoZSksIHMgPSB2KGUpLCBpID0gbi52aXN1YWxWaWV3cG9ydDtcbiAgbGV0IHIgPSBzLmNsaWVudFdpZHRoLCBvID0gcy5jbGllbnRIZWlnaHQsIGMgPSAwLCBhID0gMDtcbiAgaWYgKGkpIHtcbiAgICByID0gaS53aWR0aCwgbyA9IGkuaGVpZ2h0O1xuICAgIGNvbnN0IGwgPSBHKCk7XG4gICAgKCFsIHx8IGwgJiYgdCA9PT0gXCJmaXhlZFwiKSAmJiAoYyA9IGkub2Zmc2V0TGVmdCwgYSA9IGkub2Zmc2V0VG9wKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByLFxuICAgIGhlaWdodDogbyxcbiAgICB4OiBjLFxuICAgIHk6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIE50KGUsIHQpIHtcbiAgY29uc3QgbiA9IE4oZSwgITAsIHQgPT09IFwiZml4ZWRcIiksIHMgPSBuLnRvcCArIGUuY2xpZW50VG9wLCBpID0gbi5sZWZ0ICsgZS5jbGllbnRMZWZ0LCByID0gRShlKSA/IFQoZSkgOiB4KDEpLCBvID0gZS5jbGllbnRXaWR0aCAqIHIueCwgYyA9IGUuY2xpZW50SGVpZ2h0ICogci55LCBhID0gaSAqIHIueCwgbCA9IHMgKiByLnk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IG8sXG4gICAgaGVpZ2h0OiBjLFxuICAgIHg6IGEsXG4gICAgeTogbFxuICB9O1xufVxuZnVuY3Rpb24gSihlLCB0LCBuKSB7XG4gIGxldCBzO1xuICBpZiAodCA9PT0gXCJ2aWV3cG9ydFwiKVxuICAgIHMgPSBGdChlLCBuKTtcbiAgZWxzZSBpZiAodCA9PT0gXCJkb2N1bWVudFwiKVxuICAgIHMgPSBBdCh2KGUpKTtcbiAgZWxzZSBpZiAobSh0KSlcbiAgICBzID0gTnQodCwgbik7XG4gIGVsc2Uge1xuICAgIGNvbnN0IGkgPSBjdChlKTtcbiAgICBzID0ge1xuICAgICAgeDogdC54IC0gaS54LFxuICAgICAgeTogdC55IC0gaS55LFxuICAgICAgd2lkdGg6IHQud2lkdGgsXG4gICAgICBoZWlnaHQ6IHQuaGVpZ2h0XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZXQocyk7XG59XG5mdW5jdGlvbiBhdChlLCB0KSB7XG4gIGNvbnN0IG4gPSBSKGUpO1xuICByZXR1cm4gbiA9PT0gdCB8fCAhbShuKSB8fCBTKG4pID8gITEgOiB5KG4pLnBvc2l0aW9uID09PSBcImZpeGVkXCIgfHwgYXQobiwgdCk7XG59XG5mdW5jdGlvbiBrdChlLCB0KSB7XG4gIGNvbnN0IG4gPSB0LmdldChlKTtcbiAgaWYgKG4pXG4gICAgcmV0dXJuIG47XG4gIGxldCBzID0gaXQoZSwgW10pLmZpbHRlcigoYykgPT4gbShjKSAmJiBEKGMpICE9PSBcImJvZHlcIiksIGkgPSBudWxsO1xuICBjb25zdCByID0geShlKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiO1xuICBsZXQgbyA9IHIgPyBSKGUpIDogZTtcbiAgZm9yICg7IG0obykgJiYgIVMobyk7ICkge1xuICAgIGNvbnN0IGMgPSB5KG8pLCBhID0geihvKTtcbiAgICAhYSAmJiBjLnBvc2l0aW9uID09PSBcImZpeGVkXCIgJiYgKGkgPSBudWxsKSwgKHIgPyAhYSAmJiAhaSA6ICFhICYmIGMucG9zaXRpb24gPT09IFwic3RhdGljXCIgJiYgISFpICYmIFtcImFic29sdXRlXCIsIFwiZml4ZWRcIl0uaW5jbHVkZXMoaS5wb3NpdGlvbikgfHwgayhvKSAmJiAhYSAmJiBhdChlLCBvKSkgPyBzID0gcy5maWx0ZXIoKHUpID0+IHUgIT09IG8pIDogaSA9IGMsIG8gPSBSKG8pO1xuICB9XG4gIHJldHVybiB0LnNldChlLCBzKSwgcztcbn1cbmZ1bmN0aW9uIEl0KGUpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50OiB0LFxuICAgIGJvdW5kYXJ5OiBuLFxuICAgIHJvb3RCb3VuZGFyeTogcyxcbiAgICBzdHJhdGVneTogaVxuICB9ID0gZTtcbiAgY29uc3QgbyA9IFsuLi5uID09PSBcImNsaXBwaW5nQW5jZXN0b3JzXCIgPyBNKHQpID8gW10gOiBrdCh0LCB0aGlzLl9jKSA6IFtdLmNvbmNhdChuKSwgc10sIGMgPSBvWzBdLCBhID0gby5yZWR1Y2UoKGwsIHUpID0+IHtcbiAgICBjb25zdCBmID0gSih0LCB1LCBpKTtcbiAgICByZXR1cm4gbC50b3AgPSBBKGYudG9wLCBsLnRvcCksIGwucmlnaHQgPSBZKGYucmlnaHQsIGwucmlnaHQpLCBsLmJvdHRvbSA9IFkoZi5ib3R0b20sIGwuYm90dG9tKSwgbC5sZWZ0ID0gQShmLmxlZnQsIGwubGVmdCksIGw7XG4gIH0sIEoodCwgYywgaSkpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBhLnJpZ2h0IC0gYS5sZWZ0LFxuICAgIGhlaWdodDogYS5ib3R0b20gLSBhLnRvcCxcbiAgICB4OiBhLmxlZnQsXG4gICAgeTogYS50b3BcbiAgfTtcbn1cbmZ1bmN0aW9uIFd0KGUpIHtcbiAgY29uc3Qge1xuICAgIHdpZHRoOiB0LFxuICAgIGhlaWdodDogblxuICB9ID0gcnQoZSk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHQsXG4gICAgaGVpZ2h0OiBuXG4gIH07XG59XG5mdW5jdGlvbiBCdChlLCB0LCBuKSB7XG4gIGNvbnN0IHMgPSBFKHQpLCBpID0gdih0KSwgciA9IG4gPT09IFwiZml4ZWRcIiwgbyA9IE4oZSwgITAsIHIsIHQpO1xuICBsZXQgYyA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICBjb25zdCBhID0geCgwKTtcbiAgaWYgKHMgfHwgIXMgJiYgIXIpXG4gICAgaWYgKChEKHQpICE9PSBcImJvZHlcIiB8fCBrKGkpKSAmJiAoYyA9IF8odCkpLCBzKSB7XG4gICAgICBjb25zdCBkID0gTih0LCAhMCwgciwgdCk7XG4gICAgICBhLnggPSBkLnggKyB0LmNsaWVudExlZnQsIGEueSA9IGQueSArIHQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpICYmIChhLnggPSBLKGkpKTtcbiAgY29uc3QgbCA9IGkgJiYgIXMgJiYgIXIgPyBsdChpLCBjKSA6IHgoMCksIHUgPSBvLmxlZnQgKyBjLnNjcm9sbExlZnQgLSBhLnggLSBsLngsIGYgPSBvLnRvcCArIGMuc2Nyb2xsVG9wIC0gYS55IC0gbC55O1xuICByZXR1cm4ge1xuICAgIHg6IHUsXG4gICAgeTogZixcbiAgICB3aWR0aDogby53aWR0aCxcbiAgICBoZWlnaHQ6IG8uaGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiBVKGUpIHtcbiAgcmV0dXJuIHkoZSkucG9zaXRpb24gPT09IFwic3RhdGljXCI7XG59XG5mdW5jdGlvbiBRKGUsIHQpIHtcbiAgaWYgKCFFKGUpIHx8IHkoZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHQpXG4gICAgcmV0dXJuIHQoZSk7XG4gIGxldCBuID0gZS5vZmZzZXRQYXJlbnQ7XG4gIHJldHVybiB2KGUpID09PSBuICYmIChuID0gbi5vd25lckRvY3VtZW50LmJvZHkpLCBuO1xufVxuZnVuY3Rpb24gdXQoZSwgdCkge1xuICBjb25zdCBuID0gdyhlKTtcbiAgaWYgKE0oZSkpXG4gICAgcmV0dXJuIG47XG4gIGlmICghRShlKSkge1xuICAgIGxldCBpID0gUihlKTtcbiAgICBmb3IgKDsgaSAmJiAhUyhpKTsgKSB7XG4gICAgICBpZiAobShpKSAmJiAhVShpKSlcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICBpID0gUihpKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgbGV0IHMgPSBRKGUsIHQpO1xuICBmb3IgKDsgcyAmJiBMdChzKSAmJiBVKHMpOyApXG4gICAgcyA9IFEocywgdCk7XG4gIHJldHVybiBzICYmIFMocykgJiYgVShzKSAmJiAheihzKSA/IG4gOiBzIHx8IEN0KGUpIHx8IG47XG59XG5jb25zdCBWdCA9IGFzeW5jIGZ1bmN0aW9uKGUpIHtcbiAgY29uc3QgdCA9IHRoaXMuZ2V0T2Zmc2V0UGFyZW50IHx8IHV0LCBuID0gdGhpcy5nZXREaW1lbnNpb25zLCBzID0gYXdhaXQgbihlLmZsb2F0aW5nKTtcbiAgcmV0dXJuIHtcbiAgICByZWZlcmVuY2U6IEJ0KGUucmVmZXJlbmNlLCBhd2FpdCB0KGUuZmxvYXRpbmcpLCBlLnN0cmF0ZWd5KSxcbiAgICBmbG9hdGluZzoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogcy53aWR0aCxcbiAgICAgIGhlaWdodDogcy5oZWlnaHRcbiAgICB9XG4gIH07XG59O1xuZnVuY3Rpb24gSHQoZSkge1xuICByZXR1cm4geShlKS5kaXJlY3Rpb24gPT09IFwicnRsXCI7XG59XG5jb25zdCAkdCA9IHtcbiAgY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3Q6IER0LFxuICBnZXREb2N1bWVudEVsZW1lbnQ6IHYsXG4gIGdldENsaXBwaW5nUmVjdDogSXQsXG4gIGdldE9mZnNldFBhcmVudDogdXQsXG4gIGdldEVsZW1lbnRSZWN0czogVnQsXG4gIGdldENsaWVudFJlY3RzOiBPdCxcbiAgZ2V0RGltZW5zaW9uczogV3QsXG4gIGdldFNjYWxlOiBULFxuICBpc0VsZW1lbnQ6IG0sXG4gIGlzUlRMOiBIdFxufSwgTXQgPSAoZSwgdCwgbikgPT4ge1xuICBjb25zdCBzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgaSA9IHtcbiAgICBwbGF0Zm9ybTogJHQsXG4gICAgLi4ublxuICB9LCByID0ge1xuICAgIC4uLmkucGxhdGZvcm0sXG4gICAgX2M6IHNcbiAgfTtcbiAgcmV0dXJuIFJ0KGUsIHQsIHtcbiAgICAuLi5pLFxuICAgIHBsYXRmb3JtOiByXG4gIH0pO1xufTtcbmZ1bmN0aW9uIF90KCkge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwibWF0Y2hXaWR0aFwiLFxuICAgIGZuKHsgZWxlbWVudHM6IGUsIHJlY3RzOiB0IH0pIHtcbiAgICAgIHJldHVybiBlLmZsb2F0aW5nLnN0eWxlLndpZHRoID0gYCR7dC5yZWZlcmVuY2Uud2lkdGh9cHhgLCB7IHJlc2V0OiB7IHJlY3RzOiAhMCB9IH07XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gUHQoKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogXCJtYWtlSXRGbG9hdFwiLFxuICAgIGZuKHsgZWxlbWVudHM6IGUsIHg6IHQsIHk6IG4gfSkge1xuICAgICAgcmV0dXJuIGUuZmxvYXRpbmcuc3R5bGUudG9wID0gYCR7bn1weGAsIGUuZmxvYXRpbmcuc3R5bGUubGVmdCA9IGAke3R9cHhgLCB7fTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBVdChlLCB0KSB7XG4gIHJldHVybiAoZSAlIHQgKyB0KSAlIHQ7XG59XG5jbGFzcyBqdCBleHRlbmRzIHl0IHtcbiAgY29uc3RydWN0b3IodCwgbiwgcykge1xuICAgIHN1cGVyKHQsIHMgPz8gbi5wYXJlbnRFbGVtZW50ID8/IGRvY3VtZW50LmJvZHkpLCB0aGlzLmlucHV0RWwgPSBuLCB0aGlzLnJlZ2lzdGVyTGlzdGVuZXJzKCk7XG4gIH1cbiAgI3QgPSBbXTtcbiAgI3MgPSBbXTtcbiAgI2UgPSAtMTtcbiAgb3BlbigpIHtcbiAgICBzdXBlci5vcGVuKCksIE10KHRoaXMuaW5wdXRFbCwgdGhpcy53cmFwcGVyRWwsIHtcbiAgICAgIHBsYWNlbWVudDogXCJib3R0b20tc3RhcnRcIixcbiAgICAgIG1pZGRsZXdhcmU6IFtfdCgpLCBQdCgpXVxuICAgIH0pO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCksIHRoaXMuI2UgPSAtMSwgdGhpcy4jdCA9IFtdLCB0aGlzLiNzID0gW107XG4gIH1cbiAgcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIucmVnaXN0ZXJMaXN0ZW5lcnMoKSwgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJFbnRlclwiLCAodCkgPT4gdGhpcy5vbktleXByZXNzKHQsIFwiZW50ZXJcIikpLCB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93VXBcIiwgKHQpID0+IHRoaXMub25LZXlwcmVzcyh0LCBcInVwXCIpKSwgdGhpcy5zY29wZS5yZWdpc3RlcihcbiAgICAgIFtdLFxuICAgICAgXCJBcnJvd0Rvd25cIixcbiAgICAgICh0KSA9PiB0aGlzLm9uS2V5cHJlc3ModCwgXCJkb3duXCIpXG4gICAgKSwgdGhpcy53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoKSA9PiAhMSksIHRoaXMud3JhcHBlckVsLm9uKFwiY2xpY2tcIiwgXCIuc3VnZ2VzdGlvbi1pdGVtXCIsIHRoaXMub25DbGljay5iaW5kKHRoaXMpKSwgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMub25CbHVyLmJpbmQodGhpcykpLCB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwiZm9jdXNcIixcbiAgICAgIHRoaXMub25JbnB1dENoYW5nZS5iaW5kKHRoaXMpXG4gICAgKSwgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImlucHV0XCIsXG4gICAgICB0aGlzLm9uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKVxuICAgICk7XG4gIH1cbiAgb25CbHVyKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jbG9zZSgpLCAxMDApO1xuICB9XG4gIG9uSW5wdXRDaGFuZ2UodCkge1xuICAgIGlmICghKHQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpICYmICEodC5jdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgbiA9IHRoaXMuZ2V0U3VnZ2VzdGlvbnModC5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAobi5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLndyYXBwZXJFbC5lbXB0eSgpLCB0aGlzLiN0ID0gbiwgdGhpcy4jcyA9IG4ubWFwKChzKSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSB0aGlzLndyYXBwZXJFbC5jcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWl0ZW1cIik7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclN1Z2dlc3Rpb24ocywgaSksIGk7XG4gICAgICB9KSwgdGhpcy5vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuICBvbktleXByZXNzKHQsIG4pIHtcbiAgICBpZiAoIXQuaXNDb21wb3NpbmcpXG4gICAgICBzd2l0Y2ggKHQucHJldmVudERlZmF1bHQoKSwgbikge1xuICAgICAgICBjYXNlIFwiZW50ZXJcIjpcbiAgICAgICAgICB0aGlzLnNlbGVjdFN1Z2dlc3Rpb24odGhpcy4jdFt0aGlzLiNlXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ1cFwiOlxuICAgICAgICAgIHRoaXMuZm9jdXNTdWdnZXN0aW9uKHRoaXMuI2UgLSAxLCAhMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgICAgdGhpcy5mb2N1c1N1Z2dlc3Rpb24odGhpcy4jZSArIDEsICEwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuICBvbkNsaWNrKHQsIG4pIHtcbiAgICB0LnByZXZlbnREZWZhdWx0KCksIHRoaXMuZm9jdXNTdWdnZXN0aW9uKHRoaXMuI3MuaW5kZXhPZihuKSwgITEpLCB0aGlzLnNlbGVjdFN1Z2dlc3Rpb24odGhpcy4jdFt0aGlzLiNlXSk7XG4gIH1cbiAgZm9jdXNTdWdnZXN0aW9uKHQsIG4pIHtcbiAgICBjb25zdCBzID0gVXQodCwgdGhpcy4jdC5sZW5ndGgpLCBpID0gdGhpcy4jc1t0aGlzLiNlXSwgciA9IHRoaXMuI3Nbc107XG4gICAgaS5yZW1vdmVDbGFzcyhcImlzLXNlbGVjdGVkXCIpLCByLmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIiksIHRoaXMuI2UgPSBzLCBuICYmIHIuc2Nyb2xsSW50b1ZpZXcoITEpO1xuICB9XG59XG5mdW5jdGlvbiBLdChlLCB0KSB7XG4gIHJldHVybiBmdChlLCB0ID8gKHMpID0+IHMgaW5zdGFuY2VvZiBCICYmIHQocykgOiAocykgPT4gcyBpbnN0YW5jZW9mIEIpO1xufVxuZnVuY3Rpb24genQoZSwgdCkge1xuICByZXR1cm4gZnQoZSwgdCA/IChzKSA9PiBzIGluc3RhbmNlb2YgRiAmJiB0KHMpIDogKHMpID0+IHMgaW5zdGFuY2VvZiBGKTtcbn1cbmZ1bmN0aW9uIGZ0KGUsIHQpIHtcbiAgbGV0IG4gPSBlLmdldEFsbExvYWRlZEZpbGVzKCk7XG4gIHJldHVybiB0ICYmIChuID0gbi5maWx0ZXIodCkpLCBuLnNvcnQoKHMsIGkpID0+IHMucGF0aC5sb2NhbGVDb21wYXJlKGkucGF0aCkpO1xufVxuZnVuY3Rpb24gWXQoZSwgdCwgbikge1xuICBjb25zdCBzID0gaHQoZSwgdCksIGkgPSBuID8gKHIpID0+IHIgaW5zdGFuY2VvZiBCICYmIG4ocikgOiAocikgPT4gciBpbnN0YW5jZW9mIEI7XG4gIHJldHVybiBzLmNoaWxkcmVuLmZpbHRlcihpKTtcbn1cbmZ1bmN0aW9uIFh0KGUsIHQsIG4pIHtcbiAgY29uc3QgcyA9IGh0KGUsIHQpLCBpID0gbiA/IChyKSA9PiByIGluc3RhbmNlb2YgRiAmJiBuKHIpIDogKHIpID0+IHIgaW5zdGFuY2VvZiBGO1xuICByZXR1cm4gcy5jaGlsZHJlbi5maWx0ZXIoaSk7XG59XG5mdW5jdGlvbiBodChlLCB0KSB7XG4gIGNvbnN0IG4gPSBlLmdldEFic3RyYWN0RmlsZUJ5UGF0aChndCh0KSk7XG4gIGlmICghbilcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZvbGRlciBcIiR7dH1cIiBkb2Vzbid0IGV4aXN0LmApO1xuICBpZiAoIShuIGluc3RhbmNlb2YgRikpXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3R9IGlzIGEgZmlsZSwgbm90IGEgZm9sZGVyLmApO1xuICByZXR1cm4gbjtcbn1cbmNsYXNzIHF0IGV4dGVuZHMganQge1xuICBnZXRTdWdnZXN0aW9ucyh0KSB7XG4gICAgY29uc3QgbiA9IHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHp0KFxuICAgICAgdGhpcy5hcHAudmF1bHQsXG4gICAgICAvL1xuICAgICAgKHMpID0+IHMucGF0aC50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKG4pXG4gICAgKTtcbiAgfVxuICByZW5kZXJTdWdnZXN0aW9uKHQsIG4pIHtcbiAgICBuLnNldFRleHQodC5wYXRoKTtcbiAgfVxuICBzZWxlY3RTdWdnZXN0aW9uKHQpIHtcbiAgICB0aGlzLmlucHV0RWwudmFsdWUgPSB0LnBhdGgsIHRoaXMuaW5wdXRFbC50cmlnZ2VyKFwiaW5wdXRcIiksIHRoaXMuY2xvc2UoKTtcbiAgfVxufVxuY2xhc3MgSnQge1xuICBzdGF0aWMgam9pbiguLi50KSB7XG4gICAgcmV0dXJuIHQucmVkdWNlKChuLCBzKSA9PiBzID8gbiA/IG4ucmVwbGFjZSgvW1xcXFwvXSskL2dpLCBcIlwiKSArIC8vXG4gICAgXCIvXCIgKyBzLnJlcGxhY2UoL15bXFxcXC9dKy9naSwgXCJcIikgOiBzIDogbiwgXCJcIik7XG4gIH1cbiAgc3RhdGljIG5vcm1hbGl6ZSh0KSB7XG4gICAgcmV0dXJuIHQucmVwbGFjZUFsbCgvW15cXHctXFxcXC8jPyY9JzosLiBdKy9naSwgXCJfXCIpO1xuICB9XG4gIHN0YXRpYyBnZXROYW1lKHQpIHtcbiAgICByZXR1cm4gdC5tYXRjaCgvW15cXFxcL10rJC9naSk/LmF0KDApO1xuICB9XG4gIHN0YXRpYyBnZXRCYXNlbmFtZSh0KSB7XG4gICAgY29uc3QgbiA9IHRoaXMuZ2V0TmFtZSh0KTtcbiAgICByZXR1cm4gbiA/IHRoaXMucmVtb3ZlRXh0KG4pIDogdm9pZCAwO1xuICB9XG4gIHN0YXRpYyBnZXRQYXJlbnQodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2UoL1tcXFxcL11bXlxcXFwvXSokL2dpLCBcIlwiKTtcbiAgfVxuICBzdGF0aWMgaGFzRXh0KHQpIHtcbiAgICByZXR1cm4gL1xcLlteXFxcXC9dKiQvZ2kudGVzdCh0KTtcbiAgfVxuICAvKiogU2hvdWxkIHVzZSBgaGFzRXh0KClgIGJlZm9yZSAqL1xuICBzdGF0aWMgZ2V0RXh0KHQpIHtcbiAgICByZXR1cm4gLyg/PD1cXC4pKFteXFxcXC8jP10qKShbIz9dLiopPyQvZ2kuZXhlYyh0KT8uYXQoMSk7XG4gIH1cbiAgc3RhdGljIHJlbW92ZUV4dCh0KSB7XG4gICAgcmV0dXJuIHQucmVwbGFjZSgvKFxcLlteXFxcXC9dKik/KFsjP10uKik/JC9naSwgXCJcIik7XG4gIH1cbn1cbmNsYXNzIFF0IHtcbiAgc3RhdGljIGlzVXJsKHQpIHtcbiAgICByZXR1cm4gL15odHRwcz86XFwvXFwvL2dpLnRlc3QodCk7XG4gIH1cbiAgLyoqIFNob3VsZCB1c2UgYGlzVXJsKClgIGJlZm9yZSAqL1xuICBzdGF0aWMgZ2V0T3JpZ2luKHQpIHtcbiAgICByZXR1cm4gL15odHRwcz86XFwvXFwvW15cXFxcL10rL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG4gIC8qKiBTaG91bGQgdXNlIGBpc1VybCgpYCBiZWZvcmUgKi9cbiAgc3RhdGljIGdldEJhc2V1cmwodCkge1xuICAgIHJldHVybiAvXmh0dHBzPzpcXC9cXC9bXiM/XSovZ2kuZXhlYyh0KT8uYXQoMCk7XG4gIH1cbiAgc3RhdGljIGdldEhhc2godCkge1xuICAgIHJldHVybiAvKD88PSMpW14/XSovZ2kuZXhlYyh0KT8uYXQoMCk7XG4gIH1cbiAgc3RhdGljIGdldHBhcmFtcyh0KSB7XG4gICAgcmV0dXJuIC8oPzw9XFw/KS4qL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG59XG5leHBvcnQge1xuICBxdCBhcyBGb2xkZXJTdWdnZXN0ZXIsXG4gIGp0IGFzIElucHV0U3VnZ2VzdGVyLFxuICBnIGFzIExvZ0xldmVsLFxuICB3dCBhcyBMb2dMZXZlbFJldmVyc2UsXG4gIFYgYXMgTG9nZ2VyLFxuICBtdCBhcyBMb2dnaW5nR3JvdXAsXG4gIHl0IGFzIFN1Z2dlc3RlcixcbiAgSnQgYXMgVVJJLFxuICBRdCBhcyBVUkwsXG4gIGZ0IGFzIGdldEFsbEFic3RyYWN0RmlsZXNJblZhdWx0LFxuICBLdCBhcyBnZXRBbGxGaWxlc0luVmF1bHQsXG4gIHp0IGFzIGdldEFsbEZvbGRlcnNJblZhdWx0LFxuICBZdCBhcyBnZXRGaWxlc09uRm9sZGVyLFxuICBodCBhcyBnZXRGb2xkZXJJblZhdWx0LFxuICBYdCBhcyBnZXRGb2xkZXJzT25Gb2xkZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNpZGlhbi1mbmMuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgVEFic3RyYWN0RmlsZSwgVEZpbGUsIFRGb2xkZXIsIFZhdWx0LCBub3JtYWxpemVQYXRoIH0gZnJvbSAnb2JzaWRpYW4nXG5cbnR5cGUgQ29udGVudEVkaXRvciA9IChjb250ZW50OiBzdHJpbmcpID0+IHN0cmluZ1xuXG5leHBvcnQgY2xhc3MgRmlsZXN5c3RlbUFkYXB0ZXIge1xuICAgICNwbHVnaW46IENvbXBvbmVudHNQbHVnaW5cbiAgICAjdmF1bHQ6IFZhdWx0XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4pIHtcbiAgICAgICAgdGhpcy4jdmF1bHQgPSBwbHVnaW4uYXBwLnZhdWx0XG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcmVhbCBwYXRoIG9mIHRoZSBmaWxlIG9uIHRoZSB1c2VyIHN5c3RlbS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmVhbFBhdGgoLi4ucGF0aHM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgLy8/IHNpbXBsaWVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgIC8vPyBub3QgdXNlZCBjYXVzZSBgYmFzZVBhdGhgIGlzIG5vdCBwdWJsaWMvZG9jdW1lbnRhdGVkXG4gICAgICAgIC8vPyBzbyBpdCBtYXkgY2hhbmdlIGFzIGFuIGludGVybmFsIGltcGxlbWVudGF0aW9uXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90LXB1YmxpYy1hcGktdXNhZ2VcbiAgICAgICAgcmV0dXJuIFBhdGgucmVzb2x2ZShTdHJpbmcodGhpcy4jdmF1bHQuYWRhcHRlci5iYXNlUGF0aCksIC4uLnBhdGhzKVxuXG4gICAgICAgIC8vISByZXBsYWNlZCBieSBhYm92ZSwgY2F1c2UgaXQgbWFrZSBjaGFuZ2VzIGFzIFVSTFxuICAgICAgICAvLyEgbGlrZSByZXBsYWNlcyAnICcgKHNwYWNlKSB0byAnJTIwJ1xuICAgICAgICAvLz8gYGdldFJlc291cmNlUGF0aGAgYWRkcyBhIHByZWZpeCBhbmQgYSBwb3N0Zml4IHRvIGlkZW50aWZ5IGZpbGUgdmVyc2lvblxuICAgICAgICAvLz8gaXQgbmVlZHMgdG8gYmUgcmVtb3ZlZCB0byBiZSByZWNvZ25pemVkIGFzIGEgcmVhbCByb3V0ZVxuICAgICAgICAvLyByZXR1cm4gdGhpcy4jdmF1bHQuYWRhcHRlclxuICAgICAgICAvLyAgICAgLmdldFJlc291cmNlUGF0aChQYXRoLmpvaW4oLi4ucGF0aHMpKVxuICAgICAgICAvLyAgICAgLnJlcGxhY2UoL2FwcDpcXC9cXC9sb2NhbC9pLCAnJykgLy8gcmVtb3ZlcyB0aGUgcHJlZml4XG4gICAgICAgIC8vICAgICAucmVwbGFjZSgvXlxcLyg/PVtcXHddKzopL2ksICcnKSAvLyBmaXggcm91dGUgZm9yIHdpbmRvd3Mgc3lzdGVtc1xuICAgICAgICAvLyAgICAgLnJlcGxhY2UoL1xcP1xcZCskL2ksICcnKSAvLyByZW1vdmVzIHRoZSBwb3N0Zml4XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdmF1bHQtcGF0aCB0byB0aGUgZmlsZSxcbiAgICAgKiBAbm90ZSBpZiBubyBwYXJhbXMgYXJlIHBhc3NlZCB0aGUgcm91dGUgb2YgdGhlIGNhY2hlIGZvbGRlciBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2FjaGVQYXRoKC4uLnBhdGhzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmpvaW4oXG4gICAgICAgICAgICB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY2FjaGVfZm9sZGVyLFxuICAgICAgICAgICAgJ19fY29tcG9uZW50c19fJyxcbiAgICAgICAgICAgIC4uLnBhdGhzLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIGFmdGVyIGpvaW5pbmcgdGhlIHBhdGguXG4gICAgICovXG4gICAgcHVibGljIGpvaW4oLi4ucGF0aHM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgoUGF0aC5qb2luKC4uLnBhdGhzKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIFVSSSBmb3IgdGhlIGJyb3dzZXIgZW5naW5lIHRvIHVzZSwgZm9yIGV4YW1wbGUgdG8gZW1iZWQgYW4gaW1hZ2UuXG4gICAgICovXG4gICAgcHVibGljIGdldFJlc291cmNlUGF0aChmaWxlOiBURmlsZSk6IHN0cmluZ1xuICAgIHB1YmxpYyBnZXRSZXNvdXJjZVBhdGgocGF0aDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbFxuICAgIHB1YmxpYyBnZXRSZXNvdXJjZVBhdGgoZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMucmVzb2x2ZUZpbGUoZmlsZU9yUGF0aClcbiAgICAgICAgcmV0dXJuIGZpbGUgPyB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKSA6IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGFuICoqZmlsZU9yUGF0aCoqIHRvIGEgKipzdHJpbmcqKi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb2x2ZVBhdGgoZmlsZU9yUGF0aDogVEFic3RyYWN0RmlsZSB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuaXNTdHJpbmcoZmlsZU9yUGF0aCkgPyBmaWxlT3JQYXRoIDogZmlsZU9yUGF0aC5wYXRoXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBhbiAqKmZpbGVPclBhdGgqKiB0byBhICoqVEZpbGUqKiBvbmx5IGlmIHBvc3NpYmxlLlxuICAgICAqIEBub3RlIHRoaXMgbWV0aG9kIGNhbiBub3QgYmUgdXNlZCB3aXRoIGZpbGVzIGluc2lkZSBoaWRkZW4gZm9sZGVycyBsaWtlIGAub2JzaWRpYW5gXG4gICAgICovXG4gICAgcHVibGljIHJlc29sdmVGaWxlKGZpbGVPclBhdGg6IFRGaWxlIHwgc3RyaW5nKTogVEZpbGUgfCBudWxsIHtcbiAgICAgICAgaWYgKGZpbGVPclBhdGggaW5zdGFuY2VvZiBURmlsZSkgcmV0dXJuIGZpbGVPclBhdGhcbiAgICAgICAgcmV0dXJuIHRoaXMuI3ZhdWx0LmdldEZpbGVCeVBhdGgoZmlsZU9yUGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCB1dGlsaXR5IG1ldGhvZC5cbiAgICAgKi9cbiAgICBhc3luYyAjZXhpc3RzKGZpbGVwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIuZXhpc3RzKGZpbGVwYXRoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHV0aWxpdHkgbWV0aG9kLlxuICAgICAqL1xuICAgIGFzeW5jICNtaXNzaW5nKGZpbGVwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuICEoYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5leGlzdHMoZmlsZXBhdGgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGZpbGUgZXhpc3RzLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBleGlzdHMoZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2V4aXN0cyh0aGlzLnJlc29sdmVQYXRoKGZpbGVPclBhdGgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGZpbGUgZXhpc3RzLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBtaXNzaW5nKGZpbGVPclBhdGg6IFRGaWxlIHwgc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtaXNzaW5nKHRoaXMucmVzb2x2ZVBhdGgoZmlsZU9yUGF0aCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGZpbGUgZnJvbSB0aGUgZmlsZXN5c3RlbS5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVtb3ZlKGZpbGVPclBhdGg6IFRGaWxlIHwgc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdGhpcy5yZXNvbHZlUGF0aChmaWxlT3JQYXRoKVxuICAgICAgICBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlbW92ZShmaWxlcGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGNvbnRlbnQgb2YgYSBmaWxlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZWFkKGZpbGVPclBhdGg6IFRGaWxlIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLnJlc29sdmVQYXRoKGZpbGVPclBhdGgpXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlYWQoZmlsZXBhdGgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRWRpdHMgYSBmaWxlIGNvbnRlbnQgdXNpbmcgYSBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0gZWRpdG9yIGNhbGxiYWNrIHVzZWQgdG8gcGVyZm9ybSB0aGUgZWRpdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBlZGl0KFxuICAgICAgICBmaWxlT3JQYXRoOiBURmlsZSB8IHN0cmluZyxcbiAgICAgICAgZWRpdG9yOiBDb250ZW50RWRpdG9yLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmaWxlcGF0aCA9IHRoaXMucmVzb2x2ZVBhdGgoZmlsZU9yUGF0aClcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIucmVhZChmaWxlcGF0aClcbiAgICAgICAgYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci53cml0ZShmaWxlcGF0aCwgZWRpdG9yKGNvbnRlbnQpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgY29udGVudCBvZiBhIGZpbGUgaW50byBhbm90aGVyLlxuICAgICAqIEBwYXJhbSBlZGl0b3IgY2FsbGJhY2sgdXNlZCB0byBwZXJmb3JtIGFuIGVkaXRpb24gYmVmb3JlIHNhdmluZ1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjb3B5KFxuICAgICAgICBmaWxlT3JQYXRoOiBURmlsZSB8IHN0cmluZyxcbiAgICAgICAgbmV3RmlsZVBhdGg6IHN0cmluZyxcbiAgICAgICAgZWRpdG9yPzogQ29udGVudEVkaXRvcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLnJlc29sdmVQYXRoKGZpbGVPclBhdGgpXG5cbiAgICAgICAgLy8gc2ltcGxpZXIgY29weVxuICAgICAgICBpZiAoIWVkaXRvcikgcmV0dXJuIHRoaXMuI3ZhdWx0LmFkYXB0ZXIuY29weShmaWxlcGF0aCwgbmV3RmlsZVBhdGgpXG5cbiAgICAgICAgLy8gY29weSB3aXRoIGVkaXRcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIucmVhZChmaWxlcGF0aClcbiAgICAgICAgYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci53cml0ZShuZXdGaWxlUGF0aCwgZWRpdG9yKGNvbnRlbnQpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlcnl0aGluZyBmcm9tIGEgZm9sZGVyXG4gICAgICogYW5kIGNyZWF0ZXMgYSBuZXcgZW1wdHkgZm9sZGVyIHdpdGggdGhlIHNhbWUgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVuZXdGb2xkZXIoZm9sZGVyT3JQYXRoOiBURm9sZGVyIHwgc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZvbGRlcnBhdGggPSB0aGlzLnJlc29sdmVQYXRoKGZvbGRlck9yUGF0aClcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuI2V4aXN0cyhmb2xkZXJwYXRoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5ybWRpcihmb2xkZXJwYXRoLCB0cnVlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLiNtaXNzaW5nKGZvbGRlcnBhdGgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLm1rZGlyKGZvbGRlcnBhdGgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBoYXNoIG9mIGNlcnRhaW4gbGVuZ3RoIGJhc2VkIG9uIHRoZSBjb250ZW50IG9mIGEgZmlsZS5cbiAgICAgKiBAcGFyYW0gbGVuZ3RoIHByZWZlcnJlZCBvZiB0aGUgaGFzaCwgaWYgaXMgcGFzc2VkIGEgbnVtYmVyIGxvd2VyIHRvIGAxYCB0aGUgY29tcGxldGUgaGFzaCBpcyByZXR1cm5lZFxuICAgICAqIEBub3RlIGJ5IGRlZmF1bHQgb25seSB0aGUgZmlyc3QgNiBjaGFyYWN0ZXJzIGFyZSByZXR1cm5lZFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRGaWxlSGFzaChcbiAgICAgICAgZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcsXG4gICAgICAgIGxlbmd0aCA9IDYsXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLnJlc29sdmVQYXRoKGZpbGVPclBhdGgpXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlYWQoZmlsZXBhdGgpXG4gICAgICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoY29udGVudCkuZGlnZXN0KCdoZXgnKVxuICAgICAgICByZXR1cm4gbGVuZ3RoIDwgMSA/IGhhc2ggOiBoYXNoLnN1YnN0cmluZygwLCBsZW5ndGgpXG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE1hcFN0b3JlPFQ+IHtcbiAgICBwcm90ZWN0ZWQgX3ZhbHVlcyA9IG5ldyBNYXA8c3RyaW5nLCBUW10+KClcblxuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gbmV3IE1hcCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpdGVyYWJsZSBvZiBrZXlzIGluIHRoZSBNYXBTdG9yZS5cbiAgICAgKi9cbiAgICBwdWJsaWMga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmtleXMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2Yga2V5cyBpbiB0aGUgTWFwU3RvcmUgdGhhdCBpcyByZWxhdGVkIHRvIGEgdmFsdWUuXG4gICAgICovXG4gICAgcHVibGljIGtleXNXaXRoVmFsdWUodmFsdWU6IFQpOiBJdGVyYWJsZTxzdHJpbmc+XG4gICAgcHVibGljIGtleXNXaXRoVmFsdWUobWF0Y2hlcjogKHZhbHVlOiBUKSA9PiBib29sZWFuKTogSXRlcmFibGU8c3RyaW5nPlxuICAgIHB1YmxpYyAqa2V5c1dpdGhWYWx1ZShcbiAgICAgICAgdmFsdWVPck1hdGNoZXI6IFQgfCAoKHZhbHVlOiBUKSA9PiBib29sZWFuKSxcbiAgICApOiBJdGVyYWJsZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZU9yTWF0Y2hlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZXNdIG9mIHRoaXMuX3ZhbHVlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmluY2x1ZGVzKHZhbHVlT3JNYXRjaGVyKSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBrZXlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiB0aGlzLl92YWx1ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLnNvbWUodmFsdWVPck1hdGNoZXIgYXMgKHZhbHVlOiBUKSA9PiBib29sZWFuKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGtleVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpdGVyYWJsZSBvZiB2YWx1ZXMgaW4gdGhlIE1hcFN0b3JlLlxuICAgICAqL1xuICAgIHB1YmxpYyB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxUW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy52YWx1ZXMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2Yga2V5LCB2YWx1ZSBwYWlycyBmb3IgZXZlcnkgZW50cnkgaW4gdGhlIE1hcFN0b3JlLlxuICAgICAqL1xuICAgIHB1YmxpYyBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W3N0cmluZywgVFtdXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmVudHJpZXMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEga2V5IGlzIHN0b3JlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMuaGFzKGtleSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHZhbHVlIGlzIHN0b3JlZCBpbiByZWxhdGlvbiB0byBhIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzVmFsdWUodmFsdWU6IFQpOiBib29sZWFuIHtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZXMgb2YgdGhpcy5fdmFsdWVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmluY2x1ZGVzKHZhbHVlKSkgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHZhbHVlIGlzIHN0b3JlZCBpbiByZWxhdGlvbiB0byBhIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzS2V5VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpLmluY2x1ZGVzKHZhbHVlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RvcmVkIHZhbHVlcyByZWxhdGVkIHRvIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IFRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMuZ2V0KGtleSkgPz8gW11cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpcnN0IHN0b3JlZCB2YWx1ZSByZWxhdGVkIHRvIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldEZpcnN0KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpLmZpcnN0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhIHZhbHVlIGFzIHRoZSBmaXJzdCB2YWx1ZSByZWxhdGVkIHRvIGEga2V5LlxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVwZW5kKGtleTogc3RyaW5nLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmdldChrZXkpXG4gICAgICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKVxuICAgICAgICB0aGlzLl92YWx1ZXMuc2V0KGtleSwgdmFsdWVzLnVuaXF1ZSgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3JlIGEgdmFsdWUgYXMgdGhlIGxhc3QgdmFsdWUgcmVsYXRlZCB0byBhIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHVzaChrZXk6IHN0cmluZywgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgICAgLy8gcmV2ZXJzZSB0aGUgbGlzdCBzbyB0aGUgbmV3bHkgaW5zZXJ0ZWQgdmFsdWUgaXMga2VwdCB3aGVuIHVuaXF1ZSBzaSBhcHBsaWVkXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuZ2V0KGtleSkucmV2ZXJzZSgpXG4gICAgICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKVxuICAgICAgICB0aGlzLl92YWx1ZXMuc2V0KGtleSwgdmFsdWVzLnVuaXF1ZSgpLnJldmVyc2UoKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgTWFwU3RvcmUgZnJvbSBhbiBvYmplY3RcbiAgICAgKiB1c2VzIHRoZSBzb3VyY2UgdmFsdWVzIGFzIHJlc3VsdCBrZXlzLFxuICAgICAqIGFuZCB0aGUgc291cmNlIGtleXMgYXMgcmVzdWx0IHZhbHVlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb21SZXZlcnNlZE9iamVjdChcbiAgICAgICAgdmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgICk6IE1hcFN0b3JlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwU3RvcmU8c3RyaW5nPigpXG5cbiAgICAgICAgZm9yIChjb25zdCBbdmFsdWUsIGtleV0gb2YgT2JqZWN0LmVudHJpZXModmFsdWVzKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goa2V5LCB2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJ1xuXG5leHBvcnQgZnVuY3Rpb24gaXNSZWNvcmQodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVIYXNoKHNvdXJjZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc291cmNlXG4gICAgICAgIC5yZXBsYWNlQWxsKCcgJywgJy0nKVxuICAgICAgICAucmVwbGFjZUFsbCgvW15cXHctXS9naSwgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogT2J0YWlucyBhIHBvcnRpb24gb2YgYSBgU0hBLTI1NmAgaGFzaCBmcm9tIHRoZSBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaChkYXRhOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoZGF0YSkuZGlnZXN0KCdoZXgnKS5zdWJzdHJpbmcoMCwgNjQpXG4gICAgLy8gY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG4gICAgLy8gY29uc3QgZW5jb2RlZERhdGEgPSBlbmNvZGVyLmVuY29kZShkYXRhKVxuICAgIC8vIGNvbnN0IGhhc2hCeXRlcyA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMScsIGVuY29kZWREYXRhKVxuICAgIC8vIGNvbnN0IGhhc2hBcnJheSA9IG5ldyBVaW50OEFycmF5KGhhc2hCeXRlcylcbiAgICAvLyBjb25zdCBoYXNoU3RyaW5nID0gQXJyYXkuZnJvbShoYXNoQXJyYXkpXG4gICAgLy8gICAgIC5tYXAoKGJ5dGUpID0+IGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpIC8vIGhleFxuICAgIC8vICAgICAuam9pbignJylcbiAgICAvLyByZXR1cm4gaGFzaFN0cmluZ1xufVxuIiwiaW1wb3J0IHR5cGUge1xuICAgIENvbXBvbmVudE1hdGNoZXIsXG4gICAgQ29tcG9uZW50c1BsdWdpbixcbiAgICBQbHVnaW5TZXR0aW5ncyxcbiAgICBQbHVnaW5TdGF0ZSxcbn0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IE1hcFN0b3JlIH0gZnJvbSAnLi9NYXBTdG9yZSdcblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVTdGF0ZShwbHVnaW46IENvbXBvbmVudHNQbHVnaW4pOiBQbHVnaW5TdGF0ZSB7XG4gICAgY29uc3QgbmFtZXMgPSBwcmVwYXJlQ29tcG9uZW50TmFtZXMocGx1Z2luLnNldHRpbmdzKVxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudHNfZW5hYmxlZDogbmFtZXMsXG4gICAgICAgIGNvbXBvbmVudHNfbWF0Y2hlcnM6IHByZXBhcmVDb21wb25lbnRNYXRjaGVycyhwbHVnaW4uc2V0dGluZ3MsIG5hbWVzKSxcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZ0xpc3Qoc291cmNlOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHNvdXJjZS5zcGxpdCgvW3w7LFxcc10rL2dpKS5yZWR1Y2U8c3RyaW5nW10+KChhcnIsIHN0cikgPT4ge1xuICAgICAgICAvLyBrZWVwIG9ubHkgYmFzaWMgdmFsdWVzIFtBLVphLXowLTlfXVxuICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxXKi9naSwgJycpXG4gICAgICAgIC8vIGFkZCB2YWx1ZXMgb25seSBvbmNlc1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IDAgJiYgIWFyci5pbmNsdWRlcyhzdHIpKSBhcnIucHVzaChzdHIpXG4gICAgICAgIHJldHVybiBhcnJcbiAgICB9LCBbXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVDb21wb25lbnROYW1lcyhcbiAgICBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MsXG4pOiBNYXBTdG9yZTxzdHJpbmc+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwU3RvcmU8c3RyaW5nPigpXG5cbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBzZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZykge1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5lbmFibGVkKSBjb250aW51ZVxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgcGFyc2VTdHJpbmdMaXN0KGNvbXBvbmVudC5uYW1lcykpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgdXNlcyBmcmVlLW5hbWVzXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmhhc1ZhbHVlKG5hbWUpKSBjb250aW51ZVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goY29tcG9uZW50LmlkLCBuYW1lKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUNvbXBvbmVudE1hdGNoZXJzKFxuICAgIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncyxcbiAgICBjb21wb25lbnRzRW5hYmxlZDogTWFwU3RvcmU8c3RyaW5nPixcbik6IENvbXBvbmVudE1hdGNoZXJbXSB7XG4gICAgY29uc3QgcmVzdWx0OiBDb21wb25lbnRNYXRjaGVyW10gPSBbXVxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHNldHRpbmdzLmNvbXBvbmVudHNfY29uZmlnKSB7XG4gICAgICAgIGlmICghY29tcG9uZW50LmVuYWJsZWQpIGNvbnRpbnVlXG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBjb21wb25lbnQuaWQsXG4gICAgICAgICAgICBwYXRoOiBjb21wb25lbnQucGF0aCxcbiAgICAgICAgICAgIHRlc3Q6IFtdLmNvbnRhaW5zLmJpbmQoY29tcG9uZW50c0VuYWJsZWQuZ2V0KGNvbXBvbmVudC5pZCkpLFxuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudENvbmZpZyB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFZhdWx0IH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBnZXRGaWxlc09uRm9sZGVyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZENvbXBvbmVudHNPblZhdWx0KFxuICAgIHZhdWx0OiBWYXVsdCxcbiAgICBjb21wb25lbnRzRm9sZGVyOiBzdHJpbmcsXG4gICAgcHJldmlvdXNDb21wb25lbnRzOiBDb21wb25lbnRDb25maWdbXSxcbik6IENvbXBvbmVudENvbmZpZ1tdIHtcbiAgICBjb25zdCBmaWxlcyA9IGdldEZpbGVzT25Gb2xkZXIodmF1bHQsIGNvbXBvbmVudHNGb2xkZXIpXG4gICAgZmlsZXMuc29ydCgoYSwgYikgPT4gYS5wYXRoLmxvY2FsZUNvbXBhcmUoYi5wYXRoLCAnZW4nKSlcblxuICAgIC8vIGtlZXAgcHJldmlvdXMgY29uZmlndXJhdGlvblxuICAgIHJldHVybiBmaWxlcy5tYXAoKGZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgcHJldiA9IHByZXZpb3VzQ29tcG9uZW50cy5maW5kKChjKSA9PiBjLmlkID09PSBmaWxlLm5hbWUpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogZmlsZS5uYW1lLFxuICAgICAgICAgICAgcGF0aDogZmlsZS5wYXRoLFxuICAgICAgICAgICAgbmFtZXM6IHByZXY/Lm5hbWVzID8/IGZpbGUuYmFzZW5hbWUucmVwbGFjZUFsbCgnLicsICdfJyksXG4gICAgICAgICAgICBlbmFibGVkOiBwcmV2Py5lbmFibGVkID8/IGZhbHNlLFxuICAgICAgICB9IGFzIENvbXBvbmVudENvbmZpZ1xuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKG5hbWVzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5hbWVzLm1hcCgodikgPT4gYCcke3Z9J2ApLmpvaW4oJywgJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVsPEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+KFxuICAgIHRhZzogSyxcbiAgICBjb250ZW50OiBzdHJpbmcsXG4pOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10ge1xuICAgIHJldHVybiBjcmVhdGVFbCh0YWcsIHVuZGVmaW5lZCwgKGVsKSA9PiBlbC5hcHBlbmQoY29udGVudCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQ8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcD4oXG4gICAgcGFyZW50OiBIVE1MRWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnQsXG4gICAgdGFnOiBLLFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbik6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSB7XG4gICAgcmV0dXJuIHBhcmVudC5jcmVhdGVFbCh0YWcsIHVuZGVmaW5lZCwgKGVsKSA9PiBlbC5hcHBlbmQoY29udGVudCkpXG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudENvbmZpZywgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBTZWFyY2hDb21wb25lbnQsIFNldHRpbmcsIFRleHRBcmVhQ29tcG9uZW50IH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgKiBhcyBUb29scyBmcm9tICcuL1NldHRpbmdzVGFiVG9vbHMnXG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1RhYkNvbXBvbmVudHMge1xuICAgICNwbHVnaW46IENvbXBvbmVudHNQbHVnaW5cbiAgICAjY29tcG9uZW50c0VsOiBIVE1MRGl2RWxlbWVudFxuXG4gICAgLyogSWQncyBvZiBjdXJyZW50bHkgc2hvd24gY29tcG9uZW50cy4gKi9cbiAgICAjZmlsdGVyZWQ6IHN0cmluZ1tdID0gW11cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbiwgcGFyZW50RWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlDb21wb25lbnRzSGVhZGVyKHBhcmVudEVsKVxuICAgICAgICB0aGlzLiNjb21wb25lbnRzRWwgPSBwYXJlbnRFbC5jcmVhdGVEaXYoJ2NvbXBvbmVudHMtbGlzdCcpXG5cbiAgICAgICAgLy8gcmVmcmVzaCBjb21wb25lbnRzIGxpc3RcbiAgICAgICAgdGhpcy4jc2VhcmNoQ29tcG9uZW50c09uVmF1bHQoKVxuICAgICAgICAvLyB0aGlzLiNkaXNwbGF5Q29tcG9uZW50c0xpc3QoKSAvLyBjYWxsZWQgYWZ0ZXIgY29tcG9uZW50cyBzZWFyY2hcbiAgICB9XG5cbiAgICBhc3luYyAjc2F2ZUNvbXBvbmVudHModmFsdWU6IENvbXBvbmVudENvbmZpZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZyA9IHZhbHVlXG4gICAgICAgIGF3YWl0IHRoaXMuI3BsdWdpbi5zYXZlU2V0dGluZ3MoKVxuXG4gICAgICAgIC8vIHJlLXJlbmRlclxuICAgICAgICB0aGlzLiNkaXNwbGF5Q29tcG9uZW50c0xpc3QoKVxuICAgIH1cblxuICAgICN0b2dnbGVDb21wb25lbnRzKGlkczogc3RyaW5nW10sIGVuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZyAvL1xuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgICAgICAgICBpZHMuaW5jbHVkZXMoaXRlbS5pZCkgPyB7IC4uLml0ZW0sIGVuYWJsZWQgfSA6IGl0ZW0sXG4gICAgICAgICAgICApXG4gICAgICAgIHZvaWQgdGhpcy4jc2F2ZUNvbXBvbmVudHMoY29tcG9uZW50cylcbiAgICB9XG5cbiAgICAjY2hhbmdlQ29tcG9uZW50KGlkOiBzdHJpbmcsIGs6IGtleW9mIENvbXBvbmVudENvbmZpZywgdjogdW5rbm93bik6IHZvaWQge1xuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy4jcGx1Z2luLnNldHRpbmdzLmNvbXBvbmVudHNfY29uZmlnIC8vXG4gICAgICAgICAgICAubWFwKChpdGVtKSA9PiAoaXRlbS5pZCA9PT0gaWQgPyB7IC4uLml0ZW0sIFtrXTogdiB9IDogaXRlbSkpXG4gICAgICAgIHZvaWQgdGhpcy4jc2F2ZUNvbXBvbmVudHMoY29tcG9uZW50cylcbiAgICB9XG5cbiAgICAjc2VhcmNoQ29tcG9uZW50c09uVmF1bHQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBUb29scy5sb2FkQ29tcG9uZW50c09uVmF1bHQoXG4gICAgICAgICAgICB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LFxuICAgICAgICAgICAgdGhpcy4jcGx1Z2luLnNldHRpbmdzLmNvbXBvbmVudHNfZm9sZGVyLFxuICAgICAgICAgICAgdGhpcy4jcGx1Z2luLnNldHRpbmdzLmNvbXBvbmVudHNfY29uZmlnLFxuICAgICAgICApXG5cbiAgICAgICAgLy8gY2xlYXIgc2V0dGluZ3Mgc3RhdGUgJiByZS1yZW5kZXJzIGNvbXBvbmVudHMgbGlzdFxuICAgICAgICB0aGlzLiNmaWx0ZXJlZCA9IGNvbXBvbmVudHMubWFwKChjb21wb25lbnQpID0+IGNvbXBvbmVudC5pZClcbiAgICAgICAgdm9pZCB0aGlzLiNzYXZlQ29tcG9uZW50cyhjb21wb25lbnRzKVxuICAgIH1cblxuICAgICNkaXNwbGF5Q29tcG9uZW50c0hlYWRlcihwYXJlbnRFbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudHNGaWx0ZXI6IFNlYXJjaENvbXBvbmVudCB8IG51bGwgPSBudWxsXG5cbiAgICAgICAgY29uc3QgZWwgPSBuZXcgU2V0dGluZyhwYXJlbnRFbClcbiAgICAgICAgZWwuc2V0TmFtZSgnVmF1bHQgQ29tcG9uZW50cycpXG4gICAgICAgIGVsLnNldERlc2MoJ1RoZSBlbnRyaWVzIGFyZSBjb21wb25lbnRzIGZvdW5kIG9uIHRoZSB2YXVsdC4nKVxuICAgICAgICBlbC5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uc2V0SWNvbigncmVzZXQnKS5zZXRUb29sdGlwKCdSZWZyZXNoJylcbiAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNzZWFyY2hDb21wb25lbnRzT25WYXVsdCgpXG4gICAgICAgICAgICAgICAgY29tcG9uZW50c0ZpbHRlcj8uc2V0VmFsdWUoJycpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGZpbHRlciBjb21wb25lbnRzXG4gICAgICAgIGVsLmFkZFNlYXJjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHNGaWx0ZXIgPSBpbnB1dFxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UoKGZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZDogc3RyaW5nW10gPSBbXVxuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy4jcGx1Z2luLnNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIC5jb21wb25lbnRzX2NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0luY2x1ZGVkID0gZmlsdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbXBvbmVudC5wYXRoLmNvbnRhaW5zKGZpbHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXNJbmNsdWRlZCA9IHRoaXMuI2ZpbHRlcmVkLmluY2x1ZGVzKGNvbXBvbmVudC5pZClcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbmNsdWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChjb21wb25lbnQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhc0luY2x1ZGVkKSBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhc0luY2x1ZGVkKSBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgdGhpcy4jZmlsdGVyZWQgPSBmaWx0ZXJlZFxuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy4jZGlzcGxheUNvbXBvbmVudHNMaXN0KClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gZW5hYmxlIGZpbHRlcmVkIGNvbXBvbmVudHNcbiAgICAgICAgZWwuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLnNldEljb24oJ2JhZGdlLWNoZWNrJykuc2V0VG9vbHRpcCgnRW5hYmxlIExpc3RlZCBDb21wb25lbnRzJylcbiAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMuI3RvZ2dsZUNvbXBvbmVudHModGhpcy4jZmlsdGVyZWQsIHRydWUpKVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGRpc2FibGUgZmlsdGVyZWQgY29tcG9uZW50c1xuICAgICAgICBlbC5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uc2V0SWNvbignYmFkZ2UteCcpLnNldFRvb2x0aXAoJ0Rpc2FibGUgTGlzdGVkIENvbXBvbmVudHMnKVxuICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy4jdG9nZ2xlQ29tcG9uZW50cyh0aGlzLiNmaWx0ZXJlZCwgZmFsc2UpKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgICNkaXNwbGF5Q29tcG9uZW50c0xpc3QoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuI2NvbXBvbmVudHNFbC5lbXB0eSgpXG5cbiAgICAgICAgZm9yIChjb25zdCBjIG9mIHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiNmaWx0ZXJlZC5pbmNsdWRlcyhjLmlkKSkgY29udGludWVcblxuICAgICAgICAgICAgY29uc3QgZWwgPSBuZXcgU2V0dGluZyh0aGlzLiNjb21wb25lbnRzRWwpXG4gICAgICAgICAgICBlbC5zZXROYW1lKHRoaXMuI2NvbXBvbmVudE5hbWUoYy5pZCwgYy5lbmFibGVkKSlcbiAgICAgICAgICAgIGVsLnNldERlc2ModGhpcy4jY29tcG9uZW50RGVzYyhjLmlkKSlcbiAgICAgICAgICAgIGVsLmFkZEV4dHJhQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0VG9vbHRpcCgnRWRpdCBuYW1lcycpXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldEljb24oJ3BlbmNpbCcpXG4gICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy4jY29tcG9uZW50Rm9ybShlbCwgYykpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZWwuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VG9vbHRpcCgnSXMgZW5hYmxlZD8nKVxuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShjLmVuYWJsZWQpXG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKHRoaXMuI3RvZ2dsZUNvbXBvbmVudHMuYmluZCh0aGlzLCBbYy5pZF0pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgICNjb21wb25lbnROYW1lKGlkOiBzdHJpbmcsIHN0YXR1czogYm9vbGVhbik6IERvY3VtZW50RnJhZ21lbnQge1xuICAgICAgICBjb25zdCBkaXYgPSBjcmVhdGVGcmFnbWVudCgpXG4gICAgICAgIGRpdi5hcHBlbmQoXG4gICAgICAgICAgICBgJHtzdGF0dXMgPyAnRW5hYmxlZCcgOiAnRGlzYWJsZWQnfSBjb21wb25lbnQ6IGAsXG4gICAgICAgICAgICBUb29scy5lbCgnY29kZScsIGlkKSxcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gZGl2XG4gICAgfVxuXG4gICAgI2NvbXBvbmVudERlc2MoaWQ6IHN0cmluZyk6IERvY3VtZW50RnJhZ21lbnQge1xuICAgICAgICBjb25zdCBmcmFnID0gY3JlYXRlRnJhZ21lbnQoKVxuICAgICAgICBjb25zdCBkaXYgPSBmcmFnLmNyZWF0ZURpdignY29tcG9uZW50cy1uYW1lcycpXG4gICAgICAgIGRpdi5hcHBlbmQoJ1VzYWdlOiAnKVxuXG4gICAgICAgIGNvbnN0IG5hbWVzID0gdGhpcy4jcGx1Z2luLnN0YXRlLmNvbXBvbmVudHNfZW5hYmxlZC5nZXQoaWQpXG4gICAgICAgIGlmIChuYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIFRvb2xzLmFwcGVuZChkaXYsICdiJywgJ05vdCBhdmFpbGFibGUnKVxuICAgICAgICAgICAgcmV0dXJuIGZyYWdcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID4gMCkgZGl2LmFwcGVuZFRleHQoJyB8ICcpXG4gICAgICAgICAgICBUb29scy5hcHBlbmQoZGl2LCAnY29kZScsIG5hbWVzW2ldKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnXG4gICAgfVxuXG4gICAgI2FjdGl2ZUZvcm06IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGxcbiAgICAjY29tcG9uZW50Rm9ybShzZXR0aW5nOiBTZXR0aW5nLCBjOiBDb21wb25lbnRDb25maWcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jYWN0aXZlRm9ybT8ucmVtb3ZlKClcbiAgICAgICAgdGhpcy4jYWN0aXZlRm9ybSA9IHNldHRpbmcuc2V0dGluZ0VsLmNyZWF0ZURpdignY29tcG9uZW50LWZvcm0nKVxuXG4gICAgICAgIGxldCBmb3JtSW5wdXQ6IFRleHRBcmVhQ29tcG9uZW50IHwgbnVsbCA9IG51bGxcbiAgICAgICAgY29uc3QgZWwgPSBuZXcgU2V0dGluZyh0aGlzLiNhY3RpdmVGb3JtKVxuICAgICAgICBlbC5hZGRUZXh0QXJlYSgodGV4dGFyZWEpID0+IHtcbiAgICAgICAgICAgIGZvcm1JbnB1dCA9IHRleHRhcmVhXG4gICAgICAgICAgICB0ZXh0YXJlYS5zZXRWYWx1ZShjLm5hbWVzKVxuICAgICAgICB9KVxuICAgICAgICBlbC5hZGRCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQoJ0NhbmNlbCcpXG4gICAgICAgICAgICBidXR0b24ub25DbGljaygoKSA9PiB0aGlzLiNhY3RpdmVGb3JtPy5yZW1vdmUoKSlcbiAgICAgICAgfSlcbiAgICAgICAgZWwuYWRkQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdTYXZlJylcbiAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjaGFuZ2VDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgICAgIGMuaWQsXG4gICAgICAgICAgICAgICAgICAgICduYW1lcycsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1JbnB1dD8uZ2V0VmFsdWUoKSA/PyAnJyxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgTG9nTGV2ZWwgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5cbi8vI3JlZ2lvbiBMb2dMZXZlbFxuZXhwb3J0IHR5cGUgUGx1Z2luTGV2ZWwgPSBrZXlvZiB0eXBlb2YgTG9nTGV2ZWxcbmV4cG9ydCBjb25zdCBMRVZFTF9MQUJFTFM6IFJlY29yZDxQbHVnaW5MZXZlbCwgc3RyaW5nPiA9IHtcbiAgICBFUlJPUjogJ0VSUk9SJyxcbiAgICBXQVJOOiAnIFdBUk4nLFxuICAgIElORk86ICcgSU5GTycsXG4gICAgREVCVUc6ICdERUJVRycsXG4gICAgVFJBQ0U6ICdUUkFDRScsXG59XG4vLyNlbmRyZWdpb24gTG9nTGV2ZWxcbiIsImltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiwgUGx1Z2luU2V0dGluZ3MgfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHsgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVGV4dENvbXBvbmVudCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgRm9sZGVyU3VnZ2VzdGVyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHsgRmlsZXN5c3RlbUFkYXB0ZXIsIHByZXBhcmVIYXNoIH0gZnJvbSAnQC91dGlsaXR5J1xuaW1wb3J0IHsgU2V0dGluZ3NUYWJDb21wb25lbnRzIH0gZnJvbSAnLi9TZXR0aW5nc1RhYkNvbXBvbmVudHMnXG5pbXBvcnQgeyBMRVZFTF9MQUJFTFMgfSBmcm9tICcuL3ZhbHVlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGRvY3MobmFtZTogc3RyaW5nLCBkZXNjOiBzdHJpbmcpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnQoKGRpdikgPT4ge1xuICAgICAgICBkaXYuYXBwZW5kVGV4dChkZXNjICsgJy4gQ2hlY2sgdGhlICcpXG4gICAgICAgIGRpdi5jcmVhdGVFbCgnYScsIHtcbiAgICAgICAgICAgIHRleHQ6ICdEb2NzJyxcbiAgICAgICAgICAgIGhyZWY6IGBodHRwczovL2dpdGh1Yi5jb20vbHVpc2JzL29ic2lkaWFuLWNvbXBvbmVudHMvYmxvYi9tYWluL2RvY3Mvc2V0dGluZ3MubWQjJHtwcmVwYXJlSGFzaChuYW1lKX1gLFxuICAgICAgICB9KVxuICAgICAgICBkaXYuYXBwZW5kVGV4dCgnLicpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgI3BsdWdpbjogQ29tcG9uZW50c1BsdWdpblxuICAgICNmczogRmlsZXN5c3RlbUFkYXB0ZXJcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwLCBwbHVnaW4pXG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuICAgICAgICB0aGlzLiNmcyA9IG5ldyBGaWxlc3lzdGVtQWRhcHRlcihwbHVnaW4pXG4gICAgfVxuXG4gICAgYXN5bmMgI3VwZGF0ZShrZXk6IGtleW9mIFBsdWdpblNldHRpbmdzLCB2YWx1ZTogdW5rbm93bik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGR5bmFtaWMgYXNzaWduYXRpb25cbiAgICAgICAgdGhpcy4jcGx1Z2luLnNldHRpbmdzW2tleV0gPSB2YWx1ZVxuICAgICAgICBhd2FpdCB0aGlzLiNwbHVnaW4uc2F2ZVNldHRpbmdzKClcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KClcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcygnY29tcG9uZW50cy1zZXR0aW5ncycpXG5cbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbCkuc2V0TmFtZSgnUGx1Z2luIFNldHRpbmdzJykuc2V0SGVhZGluZygpXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlHZW5lcmFsU2V0dGluZ3MoKVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpLnNldE5hbWUoJ0NvZGVibG9jayBTZXR0aW5ncycpLnNldEhlYWRpbmcoKVxuICAgICAgICB0aGlzLiNkaXNwbGF5Q29kZWJsb2Nrc1NldHRpbmdzKClcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKS5zZXROYW1lKCdDb21wb25lbnQgU2V0dGluZ3MnKS5zZXRIZWFkaW5nKClcbiAgICAgICAgdGhpcy4jZGlzcGxheUNvbXBvbmVudHNTZXR0aW5ncygpXG5cbiAgICAgICAgbmV3IFNldHRpbmdzVGFiQ29tcG9uZW50cyh0aGlzLiNwbHVnaW4sIHRoaXMuY29udGFpbmVyRWwpXG4gICAgfVxuXG4gICAgI2Rpc3BsYXlHZW5lcmFsU2V0dGluZ3MoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxldmVsU2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIGxldmVsU2V0dGluZy5zZXROYW1lKCdQbHVnZ2luZyBMb2dMZXZlbCcpXG4gICAgICAgIGxldmVsU2V0dGluZy5zZXREZXNjKFxuICAgICAgICAgICAgZG9jcygnUGx1Z2dpbmcgTG9nTGV2ZWwnLCAnVG8gY2hlY2sgdGhlIHBsdWdpbiBsb2dzJyksXG4gICAgICAgIClcbiAgICAgICAgbGV2ZWxTZXR0aW5nLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xuICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9ucyhMRVZFTF9MQUJFTFMpXG4gICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZSh0aGlzLiNwbHVnaW4uc2V0dGluZ3MucGx1Z2luX2xldmVsKVxuICAgICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UodGhpcy4jdXBkYXRlLmJpbmQodGhpcywgJ3BsdWdpbl9sZXZlbCcpKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IG1vZGVTZXR0aW5nID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgbW9kZVNldHRpbmcuc2V0TmFtZSgnRGVzaWduIG1vZGUnKVxuICAgICAgICBtb2RlU2V0dGluZy5zZXREZXNjKFxuICAgICAgICAgICAgZG9jcyhcbiAgICAgICAgICAgICAgICAnRGVzaWduIG1vZGUnLFxuICAgICAgICAgICAgICAgIFwiRW5hYmxlIGRlc2lnbiBtb2RlIG9ubHkgaWYgeW91J3JlIGVkaXRpbmcgeW91ciBjb21wb25lbnRzIGNvZGUuIEl0IHdpbGwgbm90IGRpc2FibGVkIHVudGlsIHlvdSBjbG9zZSB0aGUgYXBwXCIsXG4gICAgICAgICAgICApLFxuICAgICAgICApXG4gICAgICAgIG1vZGVTZXR0aW5nLmFkZFRvZ2dsZSgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVuYWJsZWQgPSB0aGlzLiNwbHVnaW4uaXNEZXNpZ25Nb2RlRW5hYmxlZFxuICAgICAgICAgICAgaW5wdXQuc2V0RGlzYWJsZWQoZW5hYmxlZClcbiAgICAgICAgICAgIGlucHV0LnNldFZhbHVlKGVuYWJsZWQpXG4gICAgICAgICAgICBpbnB1dC5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIG9ubHkgZW5hYmxlXG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHJldHVyblxuICAgICAgICAgICAgICAgIGlucHV0LnNldERpc2FibGVkKHRydWUpXG4gICAgICAgICAgICAgICAgdGhpcy4jcGx1Z2luLmVuYWJsZURlc2lnbk1vZGUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAjZGlzcGxheUNvZGVibG9ja3NTZXR0aW5ncygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29kZWJsb2NrU2V0dGluZ3MgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBjb2RlYmxvY2tTZXR0aW5ncy5zZXROYW1lKCdDdXN0b20gQ29kZWJsb2NrcycpXG4gICAgICAgIGNvZGVibG9ja1NldHRpbmdzLnNldERlc2MoXG4gICAgICAgICAgICBkb2NzKFxuICAgICAgICAgICAgICAgICdDdXN0b20gQ29kZWJsb2NrcycsXG4gICAgICAgICAgICAgICAgJ0FsbG93cyB0aGUgdXNhZ2Ugb2YgdGhlIGNvbXBvbmVudHMgY3VzdG9tIG5hbWVzIGFzIGNvZGVibG9ja3MgaWRlbnRpZmllcnMnLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICBjb2RlYmxvY2tTZXR0aW5ncy5hZGRUb2dnbGUoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNwbHVnaW4uc2V0dGluZ3MuZW5hYmxlX2NvZGVibG9ja3MpXG4gICAgICAgICAgICBpbnB1dC5vbkNoYW5nZSh0aGlzLiN1cGRhdGUuYmluZCh0aGlzLCAnZW5hYmxlX2NvZGVibG9ja3MnKSlcbiAgICAgICAgfSlcblxuICAgICAgICAvL1xuICAgICAgICBsZXQgdXNhZ2VTZXBhcmF0b3JJbnB1dDogVGV4dENvbXBvbmVudCB8IG51bGwgPSBudWxsXG4gICAgICAgIGNvbnN0IGVuYWJsZVNlcGFyYXRvclNldHRpbmdzID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgZW5hYmxlU2VwYXJhdG9yU2V0dGluZ3Muc2V0TmFtZSgnRW5hYmxlIENvZGVibG9ja3MgU2VwYXJhdG9ycycpXG4gICAgICAgIGVuYWJsZVNlcGFyYXRvclNldHRpbmdzLnNldERlc2MoXG4gICAgICAgICAgICBkb2NzKFxuICAgICAgICAgICAgICAgICdFbmFibGUgQ29kZWJsb2NrcyBTZXBhcmF0b3JzJyxcbiAgICAgICAgICAgICAgICAnQWxsb3dzIHRoZSB1c2FnZSBvZiBzZXBhcmF0b3JzIGluc2lkZSBjb2RlYmxvY2tzJyxcbiAgICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgZW5hYmxlU2VwYXJhdG9yU2V0dGluZ3MuYWRkVG9nZ2xlKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodGhpcy4jcGx1Z2luLnNldHRpbmdzLmVuYWJsZV9zZXBhcmF0b3JzKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdm9pZCB0aGlzLiN1cGRhdGUoJ2VuYWJsZV9zZXBhcmF0b3JzJywgdmFsdWUpXG4gICAgICAgICAgICAgICAgdXNhZ2VTZXBhcmF0b3JJbnB1dD8uc2V0RGlzYWJsZWQoIXZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBzZXBhcmF0b3JTZXR0aW5nID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgc2VwYXJhdG9yU2V0dGluZy5zZXROYW1lKCdDb2RlYmxvY2tzIFNlcGFyYXRvcicpXG4gICAgICAgIHNlcGFyYXRvclNldHRpbmcuc2V0RGVzYygnU2VwYXJhdG9yIHRvIHVzZSBpbnNpZGUgY29kZWJsb2Nrcy4nKVxuICAgICAgICBzZXBhcmF0b3JTZXR0aW5nLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICB1c2FnZVNlcGFyYXRvcklucHV0ID0gaW5wdXRcbiAgICAgICAgICAgIGlucHV0LnNldERpc2FibGVkKCF0aGlzLiNwbHVnaW4uc2V0dGluZ3MuZW5hYmxlX3NlcGFyYXRvcnMpXG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNwbHVnaW4uc2V0dGluZ3MudXNhZ2Vfc2VwYXJhdG9yKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UodGhpcy4jdXBkYXRlLmJpbmQodGhpcywgJ3VzYWdlX3NlcGFyYXRvcicpKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgICNkaXNwbGF5Q29tcG9uZW50c1NldHRpbmdzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBhdHRhY2hQYXRoSGFuZGxlciA9IChcbiAgICAgICAgICAgIGtleToga2V5b2YgUGx1Z2luU2V0dGluZ3MsXG4gICAgICAgICAgICBpbnB1dDogVGV4dENvbXBvbmVudCxcbiAgICAgICAgICAgIGxvZ3M6IEhUTUxFbGVtZW50LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKGFzeW5jIChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dzLmVtcHR5KClcblxuICAgICAgICAgICAgICAgIGlmICghcGF0aCB8fCBwYXRoID09PSAnLycgfHwgKGF3YWl0IHRoaXMuI2ZzLm1pc3NpbmcocGF0aCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0RWwuY2xhc3NMaXN0LmFkZCgnaW52YWxpZC12YWx1ZScpXG4gICAgICAgICAgICAgICAgICAgIGxvZ3MuYXBwZW5kVGV4dCgnSW52YWxpZCBwYXRoLicpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZC12YWx1ZScpXG4gICAgICAgICAgICAgICAgdm9pZCB0aGlzLiN1cGRhdGUoa2V5LCBwYXRoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIENvbXBvbmVudHMgZm9sZGVyIHNldHRpbmdcbiAgICAgICAgY29uc3Qgc291cmNlRGVzYyA9IGNyZWF0ZUZyYWdtZW50KClcbiAgICAgICAgc291cmNlRGVzYy5hcHBlbmQoXG4gICAgICAgICAgICAnRmlsZXMgaW4gdGhpcyBkaXJlY3Rvcnkgd2lsbCBiZSB0YWtlbiBhcyBjb21wb25lbnRzLicsXG4gICAgICAgIClcbiAgICAgICAgY29uc3Qgc291cmNlTG9nID0gc291cmNlRGVzYy5jcmVhdGVFbCgncCcsICdpbnZhbGlkLXZhbHVlJylcblxuICAgICAgICBjb25zdCBjb21wb25lbnRzZm9sZGVyU2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIGNvbXBvbmVudHNmb2xkZXJTZXR0aW5nLnNldE5hbWUoJ0NvbXBvbmVudHMgdGVtcGxhdGVzIGZvbGRlcicpXG4gICAgICAgIGNvbXBvbmVudHNmb2xkZXJTZXR0aW5nLnNldERlc2Moc291cmNlRGVzYylcbiAgICAgICAgY29tcG9uZW50c2ZvbGRlclNldHRpbmcuYWRkVGV4dCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIG5ldyBGb2xkZXJTdWdnZXN0ZXIodGhpcy5hcHAsIGlucHV0LmlucHV0RWwsIHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgICAgICBpbnB1dC5zZXRQbGFjZWhvbGRlcignRXhhbXBsZTogZm9sZGVyMS9mb2xkZXIyJylcbiAgICAgICAgICAgIGlucHV0LnNldFZhbHVlKHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2ZvbGRlcilcbiAgICAgICAgICAgIGF0dGFjaFBhdGhIYW5kbGVyKCdjb21wb25lbnRzX2ZvbGRlcicsIGlucHV0LCBzb3VyY2VMb2cpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQ2FjaGUgZm9sZGVyIHNldHRpbmdcbiAgICAgICAgY29uc3QgY2FjaGVEZXNjID0gY3JlYXRlRnJhZ21lbnQoKVxuICAgICAgICBjYWNoZURlc2MuYXBwZW5kKCdGb2xkZXIgdXNlZCB0byBjYWNoZSBwcmUtcHJvY2Vzc2VkIGNvbXBvbmVudHMuJylcbiAgICAgICAgY29uc3QgY2FjaGVMb2cgPSBjYWNoZURlc2MuY3JlYXRlRWwoJ3AnLCAnaW52YWxpZC12YWx1ZScpXG5cbiAgICAgICAgY29uc3QgY2FjaGVmb2xkZXJTZXR0aW5nID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgY2FjaGVmb2xkZXJTZXR0aW5nLnNldE5hbWUoJ0NvbXBvbmVudHMgY2FjaGUgZm9sZGVyJylcbiAgICAgICAgY2FjaGVmb2xkZXJTZXR0aW5nLnNldERlc2MoY2FjaGVEZXNjKVxuICAgICAgICBjYWNoZWZvbGRlclNldHRpbmcuYWRkVGV4dCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIG5ldyBGb2xkZXJTdWdnZXN0ZXIodGhpcy5hcHAsIGlucHV0LmlucHV0RWwsIHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgICAgICBpbnB1dC5zZXRQbGFjZWhvbGRlcignRXhhbXBsZTogZm9sZGVyMS9mb2xkZXIyJylcbiAgICAgICAgICAgIGlucHV0LnNldFZhbHVlKHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jYWNoZV9mb2xkZXIpXG4gICAgICAgICAgICBhdHRhY2hQYXRoSGFuZGxlcignY2FjaGVfZm9sZGVyJywgaW5wdXQsIGNhY2hlTG9nKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBDb21wb25lbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBwdWJsaWMgbmFtZSA9ICdDb21wb25lbnRFcnJvcidcbiAgICBwdWJsaWMgY29kZTogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIG9wdGlvbnM6IHsgY29kZTogc3RyaW5nOyBjYXVzZT86IHVua25vd24gfSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKVxuICAgICAgICB0aGlzLmNvZGUgPSBvcHRpb25zLmNvZGVcbiAgICAgICAgdGhpcy5jYXVzZSA9IG9wdGlvbnMuY2F1c2VcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuY2F1c2UpIHJldHVybiBgJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX1gXG5cbiAgICAgICAgY29uc3QgYmFzZSA9IGAke3RoaXMubmFtZX06ICR7dGhpcy5tZXNzYWdlfSwgY2F1c2U6XFxuXFxuYFxuICAgICAgICBpZiAodGhpcy5jYXVzZSBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gYCR7YmFzZX0ke3RoaXMuY2F1c2V9YFxuICAgICAgICByZXR1cm4gYCR7YmFzZX0ke0pTT04uc3RyaW5naWZ5KHRoaXMuY2F1c2UpfWBcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEaXNhYmxlZENvbXBvbmVudEVycm9yIGV4dGVuZHMgQ29tcG9uZW50RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCB7IGNvZGU6ICdkaXNhYmxlZC1jb21wb25lbnQnIH0pXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb2RlYmxvY2tQYXJzZXIsIENvZGVibG9ja1N5bnRheCB9IGZyb20gJy4vQmFzZVBhcnNlcidcbmltcG9ydCB7IHBhcnNlWWFtbCB9IGZyb20gJ29ic2lkaWFuJ1xuXG5leHBvcnQgY2xhc3MgWWFtbFBhcnNlciBpbXBsZW1lbnRzIENvZGVibG9ja1BhcnNlciB7XG4gICAgaWQ6IENvZGVibG9ja1N5bnRheCA9ICd5YW1sJ1xuXG4gICAgdGVzdChzb3VyY2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBBcnJheXMsIGV4OiBgLSB2YWx1ZWBcbiAgICAgICAgaWYgKHNvdXJjZS5zdGFydHNXaXRoKCctJykpIHJldHVybiB0cnVlXG4gICAgICAgIC8vIE9iamVjdHM6IGV4OiBgcGFyYW06IHZhbHVlYFxuICAgICAgICByZXR1cm4gL15cXHcrOi8udGVzdChzb3VyY2UpXG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlOiBzdHJpbmcsIF9ub3RlcGF0aDogc3RyaW5nKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgICAgICByZXR1cm4gcGFyc2VZYW1sKHNvdXJjZSlcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvZGVibG9ja1BhcnNlciwgQ29kZWJsb2NrU3ludGF4IH0gZnJvbSAnLi9CYXNlUGFyc2VyJ1xuXG5leHBvcnQgY2xhc3MgSnNvblBhcnNlciBpbXBsZW1lbnRzIENvZGVibG9ja1BhcnNlciB7XG4gICAgaWQ6IENvZGVibG9ja1N5bnRheCA9ICdqc29uJ1xuXG4gICAgdGVzdChzb3VyY2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL15cXHMqW1t7XS9naS50ZXN0KHNvdXJjZSlcbiAgICB9XG5cbiAgICBwYXJzZShzb3VyY2U6IHN0cmluZywgX25vdGVwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHNvdXJjZSlcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgdHlwZSB7IENvZGVibG9ja0NvbnRlbnQsIENvZGVibG9ja1BhcnNlciB9IGZyb20gJy4vQmFzZVBhcnNlcidcbmltcG9ydCB7IFlhbWxQYXJzZXIgfSBmcm9tICcuL1lhbWxQYXJzZXInXG5pbXBvcnQgeyBKc29uUGFyc2VyIH0gZnJvbSAnLi9Kc29uUGFyc2VyJ1xuXG5leHBvcnQgdHlwZSB7IENvZGVibG9ja0NvbnRlbnQsIENvZGVibG9ja1N5bnRheCB9IGZyb20gJy4vQmFzZVBhcnNlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyc2VyTWFuYWdlciB7XG4gICAgI3BhcnNlcnM6IENvZGVibG9ja1BhcnNlcltdXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge1xuICAgICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgcGFyc2luZyBkYXRhIHdpdGggRGF0YXZpZXdcbiAgICAgICAgdGhpcy4jcGFyc2VycyA9IFtuZXcgSnNvblBhcnNlcigpLCBuZXcgWWFtbFBhcnNlcigpXVxuICAgIH1cblxuICAgICNzZXBhcmF0b3IoKTogUmVnRXhwIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVfc2VwYXJhdG9ycykgcmV0dXJuXG5cbiAgICAgICAgLy8gc2VwYXJhdG9yIGNvdWxkIGNoYW5nZSBvbiBydW50aW1lXG4gICAgICAgIC8vIGVzY2FwZSByZWdleCBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICAgICAgY29uc3QgZXNjYXBlZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnVzYWdlX3NlcGFyYXRvciAvL1xuICAgICAgICAgICAgLnJlcGxhY2UoL1suKyo/XiR7fSgpfFtcXF1cXFxcXS9naSwgJ1xcXFwkJicpXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGVzY2FwZWQsICdnaScpXG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlOiBzdHJpbmcsIG5vdGVwYXRoOiBzdHJpbmcsIGxvZzogTG9nZ2VyKTogQ29kZWJsb2NrQ29udGVudCB7XG4gICAgICAgIGxvZy50cmFjZShgUGFyc2luZyBmcm9tICcke25vdGVwYXRofScgPCR7c291cmNlfT5gKVxuICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSB0aGlzLiNzZXBhcmF0b3IoKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yPy50ZXN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnNlciBvZiB0aGlzLiNwYXJzZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZXIudGVzdChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcoYFBhcnNpbmcgYXMgJHtwYXJzZXIuaWR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ludGF4OiBwYXJzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChzZXBhcmF0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGkpID0+IHBhcnNlci5wYXJzZShpLCBub3RlcGF0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnNlciBvZiB0aGlzLiNwYXJzZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlci50ZXN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBQYXJzaW5nIGFzICR7cGFyc2VyLmlkfWApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeW50YXg6IHBhcnNlci5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcnNlci5wYXJzZShzb3VyY2UsIG5vdGVwYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoZXJyKVxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLmRlYnVnKGBGYWlsZWQgcGFyc2luZ2AsIHNvdXJjZSlcbiAgICAgICAgcmV0dXJuIHsgc3ludGF4OiAndW5rbm93bicsIGRhdGE6IHNvdXJjZSB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB0eXBlIHsgTG9nZ2VyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJlciwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcblxuZXhwb3J0IGludGVyZmFjZSBDb2RlYmxvY2tDb250ZXh0IHtcbiAgICAvKiogVmF1bHQtcGF0aCBvZiB0aGUgbm90ZSBjb250YWluaW5nIHRoZSAqKkNvZGVibG9jayoqLiAqL1xuICAgIG5vdGVwYXRoOiBzdHJpbmdcbiAgICAvKiogQ29tcG9uZW50IG5hbWUgdXNlZCBvbiB0aGUgKipDb2RlYmxvY2sqKi4gKi9cbiAgICB1c2VkX25hbWU6IHN0cmluZ1xuICAgIC8qKiBTeW50YXggb2YgdGhlICoqQ29kZWJsb2NrKiouICovXG4gICAgc3ludGF4OiBzdHJpbmdcbiAgICAvKiogSGFzaCByZXN1bHQgb2YgdGhlICoqQ29kZWJsb2NrKiogY29udGVudC4gKi9cbiAgICBoYXNoOiBzdHJpbmdcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKSB7fVxuXG4gICAgLyoqIFRlc3QgaWYgdGhlICoqUmVuZGVyZXIqKiBzdXBwb3J0cyB0aGUgKipDb21wb25lbnQqKi4gKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgdGVzdChjb21wb25lbnQ6IFRGaWxlKTogYm9vbGVhblxuXG4gICAgLyoqIFJlbmRlcnMgdGhlIF9kYXRhXyBpbnRvIHRoZSBfZWxlbWVudF8gdXNpbmcgdGhlICoqQ29tcG9uZW50KiouICovXG4gICAgcHVibGljIGFic3RyYWN0IHJlbmRlcihcbiAgICAgICAgY29tcG9uZW50OiBURmlsZSxcbiAgICAgICAgY29udGV4dDogQ29kZWJsb2NrQ29udGV4dCxcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGRhdGE6IHVua25vd24sXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IFByb21pc2U8dm9pZD5cblxuICAgIC8qKiBSZW5kZXIgdGhlICoqSFRNTCBfY29udGVudF8qKiBpbnNpZGUgdGhlIF9lbGVtZW50Xy4gKi9cbiAgICBwcm90ZWN0ZWQgcmVuZGVySFRNTChcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICAgICAgbG9nOiBMb2dnZXIsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmVuZGVyaW5nIGFzIEhUTUwnKVxuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlICoqTWFya2Rvd24gX2NvbnRlbnRfKiogaW5zaWRlIHRoZSBfZWxlbWVudF8uXG4gICAgICpcbiAgICAgKiBBbnkgbGluayBwcmVzZW50IHdpbGwgYmUgcmVzb2x2ZWQgZnJvbSB0aGUgX25vdGVwYXRoXy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVuZGVyTWFya2Rvd24oXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBjb250ZW50OiBzdHJpbmcsXG4gICAgICAgIG5vdGVwYXRoOiBzdHJpbmcsXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IHZvaWQge1xuICAgICAgICBsb2cuZGVidWcoJ1JlbmRlcmluZyBhcyBNYXJrZG93bicpXG4gICAgICAgIHZvaWQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAsXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIG5vdGVwYXRoLFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4sXG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB0eXBlIHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IGlzUmVjb3JkIH0gZnJvbSAnQC91dGlsaXR5J1xuaW1wb3J0IEJhc2VSZW5kZXJlciwgeyBDb2RlYmxvY2tDb250ZXh0IH0gZnJvbSAnLi9CYXNlUmVuZGVyZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbXBsYXRlUmVuZGVyZXIgZXh0ZW5kcyBCYXNlUmVuZGVyZXIge1xuICAgIHB1YmxpYyB0ZXN0KGNvbXBvbmVudDogVEZpbGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIC9cXC4obWR8aHRtbCkkL2kudGVzdChjb21wb25lbnQubmFtZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVuZGVyKFxuICAgICAgICBjb21wb25lbnQ6IFRGaWxlLFxuICAgICAgICBjb250ZXh0OiBDb2RlYmxvY2tDb250ZXh0LFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgZGF0YTogdW5rbm93bixcbiAgICAgICAgbG9nOiBMb2dnZXIsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmVuZGVyaW5nIGZyb20gVGVtcGxhdGUnKVxuICAgICAgICAvLyBUT0RPOiBpbXBsZW1lbnQgY2FjaGluZ1xuXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgdGhpcy4jZ2V0VGVtcGxhdGUoY29tcG9uZW50LCBsb2cpXG4gICAgICAgIGNvbnN0IHJlcGxhY2VkID0gdGhpcy4jcmVwbGFjZVBsYWNlaG9sZGVycyh0ZW1wbGF0ZSwgZGF0YSwgbG9nKVxuXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZS5lbmRzV2l0aCgnbWQnKSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJNYXJrZG93bihlbGVtZW50LCByZXBsYWNlZCwgY29udGV4dC5ub3RlcGF0aCwgbG9nKVxuICAgICAgICB9IGVsc2UgdGhpcy5yZW5kZXJIVE1MKGVsZW1lbnQsIHJlcGxhY2VkLCBsb2cpXG4gICAgfVxuXG4gICAgI2dldFRlbXBsYXRlKGNvbXBvbmVudDogVEZpbGUsIGxvZzogTG9nZ2VyKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgbG9nLmRlYnVnKCdSZXRyaWV2aW5nIFRlbXBsYXRlJylcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLmFwcC52YXVsdC5yZWFkKGNvbXBvbmVudClcbiAgICB9XG5cbiAgICAjcmVwbGFjZVBsYWNlaG9sZGVycyhzb3VyY2U6IHN0cmluZywgZGF0YTogdW5rbm93biwgbG9nOiBMb2dnZXIpOiBzdHJpbmcge1xuICAgICAgICBsb2cuZGVidWcoJ1JlcGxhY2luZyBQbGFjZWhvbGRlcnMnKVxuICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBzb3VyY2VcblxuICAgICAgICBpZiAoIWlzUmVjb3JkKGRhdGEpICYmICFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWJhc2UtdG8tc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UoL1xce1xceyAqKFxcdyspICpcXH1cXH0vZ2ksIFN0cmluZyhkYXRhKSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2Ugb25seSB0cnVldGh5IHZhbHVlc1xuICAgICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UoL1xce1xceyAqKFxcdyspICpcXH1cXH0vZ2ksIChfLCBrZXkpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgcnVudGltZSBkeW5hbWljIHJlcGxhY2VtZW50XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldID8gU3RyaW5nKGRhdGFba2V5XSkgOiBge3sgJHtrZXl9IH19YFxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgTG9nZ2VyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHR5cGUgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IEZpbGVzeXN0ZW1BZGFwdGVyLCBpc1JlY29yZCB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IENvbXBvbmVudEVycm9yIH0gZnJvbSAnLi4vQ29tcG9uZW50RXJyb3InXG5pbXBvcnQgQmFzZVJlbmRlcmVyLCB7IENvZGVibG9ja0NvbnRleHQgfSBmcm9tICcuL0Jhc2VSZW5kZXJlcidcblxudHlwZSBUZW1wbGF0ZVJlbmRlcmVyID0gKFxuICAgIGRhdGE6IHVua25vd24sXG4gICAgY29udGV4dDogQ29kZWJsb2NrQ29udGV4dCxcbikgPT4gUHJvbWlzZTxzdHJpbmc+XG50eXBlIENvZGVSZW5kZXJlciA9IChcbiAgICByb290OiBIVE1MRWxlbWVudCxcbiAgICBkYXRhOiB1bmtub3duLFxuICAgIGNvbnRleHQ6IENvZGVibG9ja0NvbnRleHQsXG4pID0+IFByb21pc2U8dm9pZD5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSmF2YXNjcmlwdFJlbmRlcmVyIGV4dGVuZHMgQmFzZVJlbmRlcmVyIHtcbiAgICAjZnM6IEZpbGVzeXN0ZW1BZGFwdGVyXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4sIGZzOiBGaWxlc3lzdGVtQWRhcHRlcikge1xuICAgICAgICBzdXBlcihwbHVnaW4pXG4gICAgICAgIHRoaXMuI2ZzID0gZnNcbiAgICB9XG5cbiAgICBwdWJsaWMgdGVzdChjb21wb25lbnQ6IFRGaWxlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvXFwuW2NtXWpzJC8udGVzdChjb21wb25lbnQubmFtZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVuZGVyKFxuICAgICAgICBjb21wb25lbnQ6IFRGaWxlLFxuICAgICAgICBjb250ZXh0OiBDb2RlYmxvY2tDb250ZXh0LFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgZGF0YTogdW5rbm93bixcbiAgICAgICAgbG9nOiBMb2dnZXIsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmVuZGVyaW5nIGZyb20gSmF2YXNjcmlwdCcpXG4gICAgICAgIC8vIFRPRE86IGltcGxlbWVudCBjYWNoaW5nXG5cbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBhd2FpdCB0aGlzLiNnZXRSZW5kZXJlcihjb21wb25lbnQsIGxvZylcbiAgICAgICAgaWYgKC9cXC5tZFxcLltjbV1qcyQvaS50ZXN0KGNvbXBvbmVudC5uYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCAocmVuZGVyZXIgYXMgVGVtcGxhdGVSZW5kZXJlcikoZGF0YSwgY29udGV4dClcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWFya2Rvd24oZWxlbWVudCwgdGVtcGxhdGUsIGNvbnRleHQubm90ZXBhdGgsIGxvZylcbiAgICAgICAgfSAvL1xuICAgICAgICBlbHNlIGlmICgvXFwuaHRtbFxcLltjbV1qcyQvaS50ZXN0KGNvbXBvbmVudC5uYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCAocmVuZGVyZXIgYXMgVGVtcGxhdGVSZW5kZXJlcikoZGF0YSwgY29udGV4dClcbiAgICAgICAgICAgIHRoaXMucmVuZGVySFRNTChlbGVtZW50LCB0ZW1wbGF0ZSwgbG9nKVxuICAgICAgICB9IC8vXG4gICAgICAgIGVsc2UgYXdhaXQgKHJlbmRlcmVyIGFzIENvZGVSZW5kZXJlcikoZWxlbWVudCwgZGF0YSwgY29udGV4dClcbiAgICB9XG5cbiAgICBhc3luYyAjZ2V0UmVuZGVyZXI8VCBleHRlbmRzIFRlbXBsYXRlUmVuZGVyZXIgfCBDb2RlUmVuZGVyZXI+KFxuICAgICAgICBjb21wb25lbnQ6IFRGaWxlLFxuICAgICAgICBsb2c6IExvZ2dlcixcbiAgICApOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgbG9nLmRlYnVnKCdSZXRyaWV2aW5nIEphdmFzY3JpcHQgUmVuZGVyZXInKVxuICAgICAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCB0aGlzLiNzb3VyY2UoY29tcG9uZW50LCBsb2cpXG5cbiAgICAgICAgLy8gZGVmYXVsdCBleHBvcnQgb24gY2pzXG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbW9kdWxlIGFzIFRcbiAgICAgICAgaWYgKCFpc1JlY29yZChtb2R1bGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYGNvbXBvbmVudCgke2NvbXBvbmVudC5uYW1lfSkgc2hvdWxkIGV4cG9ydCBhIGZ1bmN0aW9uIG9yIGEgJ3JlbmRlcicgbWV0aG9kYCxcbiAgICAgICAgICAgICAgICB7IGNvZGU6ICdtaXNzaW5nLWNvbXBvbmVudC1yZW5kZXJlcicgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlZmF1bHQgZXhwb3J0IG9uIGVzbVxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZS5kZWZhdWx0ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbW9kdWxlLmRlZmF1bHQgYXMgVFxuICAgICAgICAvLyBuYW1lZCBleHBvcnQgb24gY2pzICYgZXNtXG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG1vZHVsZS5yZW5kZXIgYXMgVFxuXG4gICAgICAgIHRocm93IG5ldyBDb21wb25lbnRFcnJvcihcbiAgICAgICAgICAgIGBjb21wb25lbnQoJHtjb21wb25lbnQubmFtZX0pIHNob3VsZCBleHBvcnQgYSBmdW5jdGlvbiBvciBhICdyZW5kZXInIG1ldGhvZGAsXG4gICAgICAgICAgICB7IGNvZGU6ICdtaXNzaW5nLWNvbXBvbmVudC1yZW5kZXJlcicgfSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFzeW5jICNzb3VyY2UoZmlsZTogVEZpbGUsIGxvZzogTG9nZ2VyKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIGxvZy5kZWJ1ZygnU291cmNpbmcgUmVuZGVyZXInKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBFU01vZHVsZXNcbiAgICAgICAgICAgIGlmICgvXFwubWpzKFxcP3wkKS9naS50ZXN0KGZpbGUubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IHRoaXMuI2ZzLmdldFJlc291cmNlUGF0aChmaWxlKVxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhgaW1wb3J0KCcke3Jlc291cmNlfScpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgaW1wb3J0KHJlc291cmNlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb21tb25KU1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB0aGlzLiNmcy5nZXRSZWFsUGF0aChmaWxlLnBhdGgpXG4gICAgICAgICAgICBsb2cuZGVidWcoYHJlcXVpcmUoJyR7cmVzb2x2ZWR9JylgKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlKHJlc29sdmVkKVxuICAgICAgICB9IGNhdGNoIChjYXVzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbXBvbmVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBjb21wb25lbnQoJHtmaWxlLm5hbWV9KSBjb3VsZCBub3QgYmUgaW1wb3J0ZWQvcmVxdWlyZWRgLFxuICAgICAgICAgICAgICAgIHsgY2F1c2UsIGNvZGU6ICdpbnZhbGlkLWNvbXBvbmVudC1zeW50YXgnIH0sXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgdHlwZSB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBDb21wb25lbnRFcnJvciB9IGZyb20gJy4uL0NvbXBvbmVudEVycm9yJ1xuaW1wb3J0IEJhc2VSZW5kZXJlciwgeyBDb2RlYmxvY2tDb250ZXh0IH0gZnJvbSAnLi9CYXNlUmVuZGVyZXInXG5pbXBvcnQgVGVtcGxhdGVSZW5kZXJlciBmcm9tICcuL1RlbXBsYXRlUmVuZGVyZXInXG5pbXBvcnQgSmF2YXNjcmlwdFJlbmRlcmVyIGZyb20gJy4vSmF2YXNjcmlwdFJlbmRlcidcbmltcG9ydCB7IEZpbGVzeXN0ZW1BZGFwdGVyIH0gZnJvbSAnQC91dGlsaXR5J1xuXG5leHBvcnQgdHlwZSB7IENvZGVibG9ja0NvbnRleHQgfVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJNYW5hZ2VyIHtcbiAgICAjcmVuZGVyZXJzOiBCYXNlUmVuZGVyZXJbXVxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGZzID0gbmV3IEZpbGVzeXN0ZW1BZGFwdGVyKHBsdWdpbilcblxuICAgICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgcmVuZGVyZXJzIHdpdGhvdXQgdmlydHVhbCBET01cbiAgICAgICAgLy8gPyAtIFtWYXBvcl0oaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2NvcmUvdHJlZS92YXBvcilcbiAgICAgICAgLy8gPyAtIFtTb2xpZF0oaHR0cHM6Ly9naXRodWIuY29tL3NvbGlkanMvc29saWQpXG4gICAgICAgIC8vID8gLSBbU3ZlbHRlXShodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlKVxuICAgICAgICB0aGlzLiNyZW5kZXJlcnMgPSBbXG4gICAgICAgICAgICBuZXcgVGVtcGxhdGVSZW5kZXJlcihwbHVnaW4pLFxuICAgICAgICAgICAgbmV3IEphdmFzY3JpcHRSZW5kZXJlcihwbHVnaW4sIGZzKSxcbiAgICAgICAgXVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZW5kZXIoXG4gICAgICAgIGNvbXBvbmVudDogVEZpbGUsXG4gICAgICAgIGNvbnRleHQ6IENvZGVibG9ja0NvbnRleHQsXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBkYXRhOiB1bmtub3duLFxuICAgICAgICBsb2c6IExvZ2dlcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgZm9yIChjb25zdCByZW5kZXJlciBvZiB0aGlzLiNyZW5kZXJlcnMpIHtcbiAgICAgICAgICAgIGlmIChyZW5kZXJlci50ZXN0KGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZW1wdHkoKVxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJlci5yZW5kZXIoY29tcG9uZW50LCBjb250ZXh0LCBlbGVtZW50LCBkYXRhLCBsb2cpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICAgICBgY29tcG9uZW50KCR7Y29tcG9uZW50Lm5hbWV9KSBpcyBub3Qgc3VwcG9ydGVkYCxcbiAgICAgICAgICAgIHsgY29kZTogJ3Vuc3VwcG9ydGVkLWNvbXBvbmVudCcgfSxcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB7IEV2ZW50UmVmLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgRmlsZXN5c3RlbUFkYXB0ZXIsIE1hcFN0b3JlIH0gZnJvbSAnQC91dGlsaXR5J1xuXG50eXBlIFJlZnJlc2hlciA9IChjb21wb25lbnRQYXRoOiBzdHJpbmdbXSwgbG9nOiBMb2dnZXIpID0+IFByb21pc2U8dm9pZD5cblxuLyoqIFJlZ2V4IHVzZWQgdG8gbWF0Y2ggaW1wb3J0ZWQtZmlsZXMgUGF0aCAqL1xuY29uc3QgaW1wb3J0c1JlZ2V4ID0gKCkgPT4gLyg/PD1mcm9tICpbJ1wiYF18cmVxdWlyZSAqXFwoICpbJ1wiYF0pKC4rKSg/PVsnXCJgXSkvZ2lcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyc2lvbnNNYW5hZ2VyIHtcbiAgICAjbG9nOiBMb2dnZXJcbiAgICAjZnM6IEZpbGVzeXN0ZW1BZGFwdGVyXG4gICAgI3BsdWdpbjogQ29tcG9uZW50c1BsdWdpblxuICAgICNyZWZyZXNoZXI6IFJlZnJlc2hlclxuICAgICNoYW5kbGVyOiBFdmVudFJlZlxuXG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgbWFwIGluIHRoZSBmb3JtIGBbc291cmNlLWZpbGUsIFtmaWxlcy13ZXJlLWlzLWltcG9ydGVkXV1gXG4gICAgICogQGV4YW1wbGUgeyAnSHRtbFJlbmRlcmVyLmNqcyc6IFsnbXVzaWMuaHRtbC5janMnLCAnY29udGVudC5odG1sLmNqcyddIH1cbiAgICAgKi9cbiAgICAjdHJhY2tlZCA9IG5ldyBNYXBTdG9yZTxzdHJpbmc+KClcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSBtYXAgaW4gdGhlIGZvcm0gYFtzb3VyY2UtZmlsZSwgW2NhY2hlZC12ZXJzaW9uc11dYFxuICAgICAqIEBleGFtcGxlIHsgJ211c2ljLmh0bWwuY2pzJzogWydtdXNpYy5odG1sLjIzZjI5YS5janMnXSB9XG4gICAgICovXG4gICAgI3ZlcnNpb25zID0gbmV3IE1hcFN0b3JlPHN0cmluZz4oKVxuXG4gICAgLy8gcHVibGljIGR1bXAoKTogdm9pZCB7XG4gICAgLy8gICAgIHRoaXMuI2xvZy5kZWJ1Zyh7IHRyYWNrZWQ6IHRoaXMuI3RyYWNrZWQsIHZlcnNpb25zOiB0aGlzLiN2ZXJzaW9ucyB9KVxuICAgIC8vIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbiwgcmVmcmVzaGVyOiBSZWZyZXNoZXIpIHtcbiAgICAgICAgdGhpcy4jbG9nID0gcGx1Z2luLmxvZy5tYWtlKFZlcnNpb25zTWFuYWdlci5uYW1lKVxuICAgICAgICB0aGlzLiNmcyA9IG5ldyBGaWxlc3lzdGVtQWRhcHRlcihwbHVnaW4pXG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuICAgICAgICB0aGlzLiNyZWZyZXNoZXIgPSByZWZyZXNoZXJcbiAgICAgICAgdGhpcy4jaGFuZGxlciA9IHRoaXMuI3BsdWdpbi5hcHAudmF1bHQub24oXG4gICAgICAgICAgICAnbW9kaWZ5JyxcbiAgICAgICAgICAgIHRoaXMuI2hhbmRsZUZpbGVNb2RpZmljYXRpb24uYmluZCh0aGlzKSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBub3RlIFJ1biBvbmx5IHdoZW4gcGx1Z2luIGlzIHVubG9hZGVkXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0Lm9mZnJlZih0aGlzLiNoYW5kbGVyKVxuICAgICAgICB0aGlzLiN0cmFja2VkLmNsZWFyKClcbiAgICAgICAgdGhpcy4jdmVyc2lvbnMuY2xlYXIoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHZlcnNpb25zIGNhY2hlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZXNldENhY2hlKGxvZzogTG9nZ2VyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIHByZXZlbnQgY2xlYW5pbmcgb24gbm9uIGRlc2lnbk1vZGUgc3RhdGVcbiAgICAgICAgaWYgKCF0aGlzLiNwbHVnaW4uaXNEZXNpZ25Nb2RlRW5hYmxlZCkgcmV0dXJuXG4gICAgICAgIGF3YWl0IHRoaXMuI2ZzLnJlbmV3Rm9sZGVyKHRoaXMuI2ZzLmdldENhY2hlUGF0aCgpKVxuICAgICAgICBsb2cuaW5mbygnQ2xlYXJlZCBWZXJzaW9ucyBDYWNoZScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYSBmaWxlcGF0aCBpbnRvIGl0cyBsYXRlc3QgY2FjaGVkIHZlcnNpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlc29sdmVMYXRlc3QoZmlsZXBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy4jcGx1Z2luLmlzRGVzaWduTW9kZUVuYWJsZWQpIHJldHVybiBmaWxlcGF0aFxuICAgICAgICByZXR1cm4gdGhpcy4jdmVyc2lvbnMuZ2V0Rmlyc3QoZmlsZXBhdGgpID8/IGZpbGVwYXRoXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGNhY2hlIHJlZ2lzdHJ5IHdoZW4gYSBmaWxlIGlzIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIGFzeW5jICNoYW5kbGVGaWxlTW9kaWZpY2F0aW9uKGZpbGU6IFRBYnN0cmFjdEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLiNwbHVnaW4uaXNEZXNpZ25Nb2RlRW5hYmxlZCkgcmV0dXJuXG4gICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHJldHVyblxuICAgICAgICAvLyBpZ25vcmUgZmlsZXMgb3V0c2lkZSBvZiB0aGUgYGNvbXBvbmVudHNfZm9sZGVyYFxuICAgICAgICAvLyB0aGF0IGFyZSBub3QgYmVlbiB0cmFja2VkXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFmaWxlLnBhdGguc3RhcnRzV2l0aCh0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19mb2xkZXIpICYmXG4gICAgICAgICAgICAhdGhpcy4jdHJhY2tlZC5oYXMoZmlsZS5wYXRoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy9cbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLiNsb2cuZ3JvdXAoKVxuICAgICAgICBncm91cC5kZWJ1ZyhgTGlzdGVuaW5nIGNoYW5nZXMgb24gPCR7ZmlsZS5wYXRofT5gKVxuXG4gICAgICAgIGdyb3VwLmRlYnVnKCdMaXN0aW5nIGFmZmVjdGVkIGZpbGVzJylcbiAgICAgICAgY29uc3QgYWZmZWN0ZWQgPSB0aGlzLiNhZmZlY3RlZEZpbGVzKGZpbGUucGF0aClcbiAgICAgICAgZ3JvdXAudHJhY2UoJ0xpc3RlZCBhZmZlY3RlZCBmaWxlcycsIGFmZmVjdGVkKVxuXG4gICAgICAgIC8vIGNhY2hlIG5ldyB2ZXJzaW9uc1xuICAgICAgICBncm91cC5kZWJ1ZygnUHJlcGFyZSBhZmZlY3RlZCBmaWxlcycpXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhZmZlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuI2ZzLnJlc29sdmVGaWxlKGl0ZW0pXG4gICAgICAgICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgICAgICAgICBncm91cC5lcnJvcihgTm90IEZvdW5kIDwke2l0ZW19PmApXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVtb3ZpbmcgQ29tbW9uSlMgbW9kdWxlcyBmcm9tIGNhY2hlLCBjYXVzZXMgdGhhdFxuICAgICAgICAgICAgLy8gd2hlbiBpdCBpcyByZXF1ZXN0LCB0aGUgbmV3IG1vZHVsZSB3aWxsIGJlIHJlcXVlc3RlZFxuICAgICAgICAgICAgaWYgKGZpbGUuZXh0ZW5zaW9uID09PSAnY2pzJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cucmVxdWlyZS5yZXNvbHZlKHRoaXMuI2ZzLmdldFJlYWxQYXRoKGl0ZW0pKVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93LnJlcXVpcmUuY2FjaGVbcGF0aF1cbiAgICAgICAgICAgICAgICBncm91cC50cmFjZShgRGVsZXRlZCBjYWNoZSBvZiA8JHtwYXRofT5gKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlUGF0aCA9IGF3YWl0IHRoaXMuI2NhY2hlRmlsZShmaWxlLCBncm91cClcbiAgICAgICAgICAgIHRoaXMuI3ZlcnNpb25zLnByZXBlbmQoaXRlbSwgY2FjaGVQYXRoKVxuICAgICAgICB9XG5cbiAgICAgICAgZ3JvdXAudHJhY2UoJ0N1cnJlbnQgY2pzIGNhY2hlJywgeyAuLi53aW5kb3cucmVxdWlyZS5jYWNoZSB9KVxuICAgICAgICBncm91cC5kZWJ1ZygnUHJlcGFyZWQgYWZmZWN0ZWQgZmlsZXMnKVxuXG4gICAgICAgIGF3YWl0IHRoaXMuI3JlZnJlc2hlcihhZmZlY3RlZCwgZ3JvdXApXG4gICAgICAgIGdyb3VwLmZsdXNoKGBMaXN0ZW5lZCBjaGFuZ2VzIG9uIDwke2ZpbGUucGF0aH0+YClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgYWxsIHRoZSBmaWxlcyBhZmZlY3RlZCB3aGVuIGEgZmlsZSBjaGFuZ2VkLFxuICAgICAqIGFuZCBpdHMgY29ycmVjdCBvcmRlci5cbiAgICAgKi9cbiAgICAjYWZmZWN0ZWRGaWxlcyhmaWxlcGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBkaXJlY3REZXBlbmRlbnRzID0gdGhpcy4jdHJhY2tlZC5nZXQoZmlsZXBhdGgpXG4gICAgICAgIGNvbnN0IGRlcGVuZGVudHMgPSBbZmlsZXBhdGgsIC4uLmRpcmVjdERlcGVuZGVudHNdXG5cbiAgICAgICAgZm9yIChjb25zdCBkZXBlbmRlbnQgb2YgZGlyZWN0RGVwZW5kZW50cykge1xuICAgICAgICAgICAgZGVwZW5kZW50cy5wdXNoKC4uLnRoaXMuI2FmZmVjdGVkRmlsZXMoZGVwZW5kZW50KSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGtlZXAgb3JkZXIgb2YgYXBwZXJpZW5jZVxuICAgICAgICByZXR1cm4gZGVwZW5kZW50cy5yZXZlcnNlKCkudW5pcXVlKCkucmV2ZXJzZSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRlbXBvcmFsIGNvcHkgb2YgdGhlIGZpbGUgb24gdGhlIGNhY2hlIGZvbGRlci5cbiAgICAgKiBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cyBhIGNsb25lIGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgY2FjaGVkIGZpbGVwYXRoLlxuICAgICAqL1xuICAgIGFzeW5jICNjYWNoZUZpbGUoZmlsZTogVEZpbGUsIGxvZzogTG9nZ2VyKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgY2FjaGVIYXNoID0gYXdhaXQgdGhpcy4jZnMuZ2V0RmlsZUhhc2goZmlsZSlcbiAgICAgICAgY29uc3QgY2FjaGVOYW1lID0gYCR7Y2FjaGVIYXNofS4ke2ZpbGUuYmFzZW5hbWV9LiR7ZmlsZS5leHRlbnNpb259YFxuICAgICAgICBjb25zdCBjYWNoZVBhdGggPSB0aGlzLiNmcy5nZXRDYWNoZVBhdGgoY2FjaGVOYW1lKVxuXG4gICAgICAgIC8vIGZpcnN0IHRpbWUgY2FjaGVkXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLiNmcy5taXNzaW5nKGNhY2hlUGF0aCkpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgQ2FjaGluZyA8JHtmaWxlLm5hbWV9PiB0byA8JHtjYWNoZU5hbWV9PmApXG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNmcy5jb3B5KGZpbGUsIGNhY2hlUGF0aCwgKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcmVwbGFjZUltcG9ydHMoZmlsZSwgY29udGVudCwgbG9nKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZVBhdGhcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG4rMSB0aW1lIGNhY2hlZFxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpLnRvU3RyaW5nKClcbiAgICAgICAgY29uc3QgY2xvbmVOYW1lID0gYCR7Y2FjaGVIYXNofS0ke3RpbWVzdGFtcH0uJHtmaWxlLmJhc2VuYW1lfS4ke2ZpbGUuZXh0ZW5zaW9ufWBcbiAgICAgICAgY29uc3QgY2xvbmVQYXRoID0gdGhpcy4jZnMuZ2V0Q2FjaGVQYXRoKGNsb25lTmFtZSlcblxuICAgICAgICBsb2cuZGVidWcoYENsb25pbmcgPCR7Y2FjaGVOYW1lfT4gdG8gPCR7Y2xvbmVOYW1lfT5gKVxuICAgICAgICBhd2FpdCB0aGlzLiNmcy5jb3B5KGZpbGUsIGNsb25lUGF0aCwgKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNyZXBsYWNlSW1wb3J0cyhmaWxlLCBjb250ZW50LCBsb2cpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBjbG9uZVBhdGhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHRoZSBpbXBvcnRzL3JlcXVpcmUgc3RhdGVtZW50cyB0byBhbGxvdyBkeW5hbWljIHJlc29sdXRpb24uXG4gICAgICovXG4gICAgI3JlcGxhY2VJbXBvcnRzKGZpbGU6IFRGaWxlLCBjb250ZW50OiBzdHJpbmcsIGxvZzogTG9nZ2VyKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcGFyZW50UGF0aCA9IGZpbGUucGFyZW50Py5wYXRoID8/ICcnXG4gICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2VBbGwoaW1wb3J0c1JlZ2V4KCksICgkMCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy4jZnMuam9pbihwYXJlbnRQYXRoLCAkMClcbiAgICAgICAgICAgIGNvbnN0IGxhdGVzdCA9IHRoaXMucmVzb2x2ZUxhdGVzdChzb3VyY2UpXG5cbiAgICAgICAgICAgIC8vICEgdGhpcyBkb2VzbnQgd29yayBiZWNhdXNlLCBpIHN0aWxsIGhhdmUgdG8gY2xvbmUgZWFjaCBmaWxlXG4gICAgICAgICAgICAvLyAhIHNvIHRoZSBjbG9uZSBoYXMgZGUgYWZlY3RlZCBwYXRoIG90aGVyd2lzZSB3aWxsIGtlZXAgbG9hZGluZyB0aGVcbiAgICAgICAgICAgIC8vICEgdGhlIG9yaWdpbmFsIGZpbGVcbiAgICAgICAgICAgIC8vIHVzZSBwYXJhbSB0byBhdm9pZCBjYWNoaW5nIG9uIEVTTSwgZXg6IGAuL2ZpbGUubWpzPzEyMzM0NDVgXG4gICAgICAgICAgICAvLyBpZiAobGF0ZXN0LmVuZHNXaXRoKCcubWpzJykpIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zdCByZXNvdXJjZSA9IHRoaXMuI2ZzLmdldFJlc291cmNlUGF0aChsYXRlc3QpXG4gICAgICAgICAgICAvLyAgICAgaWYgKHJlc291cmNlKSBsYXRlc3QgPSByZXNvdXJjZVxuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBsb2cudHJhY2UoYFJlcGxhY2luZyBpbXBvcnQgcGF0aCA8JHtsYXRlc3R9PmApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jZnMuZ2V0UmVhbFBhdGgobGF0ZXN0KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluZGV4IHRoZSBjb250ZW50IG9mIHRoZSB1c2VyICoqQ29tcG9uZW50c0ZvbGRlcioqXG4gICAgICogYW5kIGFsbCB0aGUgaW1wb3J0ZWQvcmVxdWVzdGVkIGZpbGVzLlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBpbmRleENvbXBvbmVudHMobG9nOiBMb2dnZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLiNwbHVnaW4uaXNEZXNpZ25Nb2RlRW5hYmxlZCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50c1BhdGggPSB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19mb2xkZXJcbiAgICAgICAgY29uc3QgY29tcG9uZW50c0ZvbGRlciA9XG4gICAgICAgICAgICB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LmdldEZvbGRlckJ5UGF0aChjb21wb25lbnRzUGF0aClcbiAgICAgICAgaWYgKCFjb21wb25lbnRzRm9sZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhdGggPCR7Y29tcG9uZW50c1BhdGh9PiBpcyBub3QgYSBmb2xkZXJgKVxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLmluZm8oJ0luZGV4aW5nIENvbXBvbmVudHMnKVxuICAgICAgICBhd2FpdCB0aGlzLiNpbmRleEZvbGRlcihjb21wb25lbnRzRm9sZGVyLCBsb2cpXG4gICAgICAgIGxvZy5kZWJ1ZygnSW5kZXhlZCBDb21wb25lbnRzJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmRleCBhbGwgdGhlIGZpbGVzIGFuZCBzdWJmaWxlcyBpbiBhIGZvbGRlci5cbiAgICAgKi9cbiAgICBhc3luYyAjaW5kZXhGb2xkZXIoZm9sZGVyOiBURm9sZGVyLCBsb2c6IExvZ2dlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsb2cuZGVidWcoYEluZGV4aW5nIGZvbGRlciA8JHtmb2xkZXIucGF0aH0+YClcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmb2xkZXIuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRGb2xkZXIpIGF3YWl0IHRoaXMuI2luZGV4Rm9sZGVyKGNoaWxkLCBsb2cpXG4gICAgICAgICAgICBlbHNlIGF3YWl0IHRoaXMuI2luZGV4RmlsZShjaGlsZC5wYXRoLCBsb2cpXG4gICAgICAgIH1cbiAgICAgICAgbG9nLmRlYnVnKGBJbmRleGVkIGZvbGRlciA8JHtmb2xkZXIucGF0aH0+YClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmRleCBhbGwgdGhlIGltcG9ydGVkL3JlcXVlc3RlZCBmaWxlcyBpbiBhIGZpbGUuXG4gICAgICovXG4gICAgYXN5bmMgI2luZGV4RmlsZShmaWxlcGF0aDogc3RyaW5nLCBsb2c6IExvZ2dlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBvbmx5IGluZGV4IGZpbGUsIGlmIGl0IGhhcyBub3QgYmVlbiBpbmRleGVkXG4gICAgICAgIGlmICh0aGlzLiN0cmFja2VkLmhhc1ZhbHVlKGZpbGVwYXRoKSkgcmV0dXJuXG5cbiAgICAgICAgbG9nLmRlYnVnKGBJbmRleGluZyBpbXBvcnRzIG9uIDwke2ZpbGVwYXRofT5gKVxuICAgICAgICBjb25zdCBwYXJlbnRQYXRoID0gZmlsZXBhdGgucmVwbGFjZSgvW1xcXFwvXVteXFxcXC9dKiQvZ2ksICcnKVxuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy4jZnMucmVhZChmaWxlcGF0aClcbiAgICAgICAgY29uc3QgaW1wb3J0czogc3RyaW5nW10gPSBbXVxuXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgY29udGVudC5tYXRjaEFsbChpbXBvcnRzUmVnZXgoKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGltcG9ydGVkUGF0aCA9IHRoaXMuI2ZzLmpvaW4ocGFyZW50UGF0aCwgbWF0Y2hbMF0gfHwgJycpXG4gICAgICAgICAgICBsb2cudHJhY2UoYGZpbGUgPCR7ZmlsZXBhdGh9PiBpbXBvcnRzIDwke2ltcG9ydGVkUGF0aH0+YClcbiAgICAgICAgICAgIHRoaXMuI3RyYWNrZWQucHVzaChpbXBvcnRlZFBhdGgsIGZpbGVwYXRoKVxuICAgICAgICAgICAgaW1wb3J0cy5wdXNoKGltcG9ydGVkUGF0aClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluZGV4IGltcG9ydHMgb24gaW1wb3J0ZWQgZmlsZXNcbiAgICAgICAgZm9yIChjb25zdCBpbXBvcnRlZFBhdGggb2YgaW1wb3J0cykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jaW5kZXhGaWxlKGltcG9ydGVkUGF0aCwgbG9nKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0IH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50TWF0Y2hlciwgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBNYXBTdG9yZSwgZ2V0SGFzaCB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IENvbXBvbmVudEVycm9yLCBEaXNhYmxlZENvbXBvbmVudEVycm9yIH0gZnJvbSAnLi9Db21wb25lbnRFcnJvcidcbmltcG9ydCBQYXJzZXJNYW5hZ2VyIGZyb20gJy4vcGFyc2VycydcbmltcG9ydCBSZW5kZXJNYW5hZ2VyLCB7IENvZGVibG9ja0NvbnRleHQgfSBmcm9tICcuL3JlbmRlcmVycydcbmltcG9ydCBWZXJzaW9uc01hbmFnZXIgZnJvbSAnLi9WZXJzaW9uc01hbmFnZXInXG5cbmludGVyZmFjZSBSZW5kZXJQYXJhbXMge1xuICAgIC8qKiAqKkNvZGVibG9jayBDb250ZXh0Kiogc2hhcmVkIHRvIHRoZSAqKkNvbXBvbmVudCoqLiAqL1xuICAgIGNvbnRleHQ6IENvZGVibG9ja0NvbnRleHRcbiAgICAvKiogKipQYXJlbnRFbGVtZW50KiogdG8gcmVuZGVyIHRoZSAqKkNvbXBvbmVudCoqIGluLiAqL1xuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgLyoqICoqQ29kZWJsb2NrKiogY29udGVudCBwYXJzZWQuICovXG4gICAgZGF0YTogdW5rbm93blxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2RlYmxvY2tIYW5kbGVyIHtcbiAgICAjbG9nOiBMb2dnZXJcbiAgICAjcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luXG5cbiAgICAjcGFyc2VyOiBQYXJzZXJNYW5hZ2VyXG4gICAgI3JlbmRlcmVyOiBSZW5kZXJNYW5hZ2VyXG4gICAgI3ZlcnNpb25zOiBWZXJzaW9uc01hbmFnZXJcblxuICAgICNyZW5kZXJlZCA9IG5ldyBNYXBTdG9yZTxSZW5kZXJQYXJhbXM+KClcbiAgICAjcmVnaXN0ZXJlZDogc3RyaW5nW10gPSBbXVxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKSB7XG4gICAgICAgIHRoaXMuI2xvZyA9IHBsdWdpbi5sb2cubWFrZShDb2RlYmxvY2tIYW5kbGVyLm5hbWUpXG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuICAgICAgICB0aGlzLiNwYXJzZXIgPSBuZXcgUGFyc2VyTWFuYWdlcihwbHVnaW4pXG4gICAgICAgIHRoaXMuI3JlbmRlcmVyID0gbmV3IFJlbmRlck1hbmFnZXIocGx1Z2luKVxuICAgICAgICB0aGlzLiN2ZXJzaW9ucyA9IG5ldyBWZXJzaW9uc01hbmFnZXIocGx1Z2luLCB0aGlzLnJlZnJlc2guYmluZCh0aGlzKSlcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY2xlYXIobG9nOiBMb2dnZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgbG9nLmluZm8oJ0NsZWFyaW5nIGluLW1lbW9yeSBjYWNoZScpXG4gICAgICAgIHRoaXMuI3JlbmRlcmVkLmNsZWFyKClcbiAgICAgICAgdGhpcy4jdmVyc2lvbnMuY2xlYXIoKVxuXG4gICAgICAgIC8vIHJlbW92ZSBhbGwgdGVtcG9yYWwgZmlsZXNcbiAgICAgICAgYXdhaXQgdGhpcy4jdmVyc2lvbnMucmVzZXRDYWNoZShsb2cpXG4gICAgICAgIC8vIHRvZG8gY2hlY2sgYSB3YXkgdG8gdW4tcmVnaXN0ZXIgdGhlIHByb2Nlc3NvcnNcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcHJlcGFyZURlc2lnbk1vZGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy4jbG9nLmdyb3VwKCdQcmVwYXJpbmcgRGVzaWduTW9kZScpXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIGNsZWFyIHNvIHdoZW4gY29tcG9uZW50cyBhcmUgcmUtcmVuZGVyIHRoZXkgc3RhcnQgdHJhY2tpbmdcbiAgICAgICAgICAgIC8vIGFuZCB0aGUgSG90Q29tcG9uZW50UmVsb2FkIHdvcmtzIGNvcnJlY3RseVxuICAgICAgICAgICAgZ3JvdXAuaW5mbygnQ2xlYXJpbmcgY2FjaGUnKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy4jdmVyc2lvbnMucmVzZXRDYWNoZShncm91cClcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI3ZlcnNpb25zLmluZGV4Q29tcG9uZW50cyhncm91cClcblxuICAgICAgICAgICAgZ3JvdXAuaW5mbygnUmVmcmVzaGluZyBBbGwgQ29tcG9uZW50cycpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2goQXJyYXkuZnJvbSh0aGlzLiNyZW5kZXJlZC5rZXlzKCkpLCBncm91cClcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBncm91cC53YXJuKGVycilcbiAgICAgICAgfVxuICAgICAgICBncm91cC5mbHVzaCgnRGVzaWduTW9kZSBFbmFibGVkJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZSBhbGwgaW5zdGFuY2VzIG9mIHRoZSBsaXN0ZWQgY29tcG9uZW50cyB0byByZS1yZW5kZXIuXG4gICAgICogQG5vdGUgaWYgbm8gY29tcG9uZW50cyBpcyBwcm92aWRlZCwgYWxsIGNvbXBvbmVudHMgYXJlIHJlZnJlc2hlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVmcmVzaChwYXRoczogc3RyaW5nW10sIGxvZzogTG9nZ2VyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHNQYXRocyA9IHBhdGhzLmxlbmd0aCA/IHBhdGhzIDogdGhpcy4jcmVuZGVyZWQua2V5cygpXG5cbiAgICAgICAgbG9nLmRlYnVnKCdSZWZyZXNoaW5nIENvbXBvbmVudHMnLCBwYXRocylcbiAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnRQYXRoIG9mIGNvbXBvbmVudHNQYXRocykge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBSZWZyZXNoaW5nIENvbXBvbmVudHMoJHtjb21wb25lbnRQYXRofSlgKVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtcyBvZiB0aGlzLiNyZW5kZXJlZC5nZXQoY29tcG9uZW50UGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnRyYWNlKCdSZWZyZXNoaW5nIENvZGVibG9jaycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudFBhdGgsIHBhcmFtcywgbG9nKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKGVycilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2cuaW5mbygnUmVmcmVzaGVkIENvbXBvbmVudHMnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBoYW5kbGVyIGZvciBgdXNlYCBjb2RlYmxvY2tzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlckJhc2VDb2RlYmxvY2soKTogdm9pZCB7XG4gICAgICAgIC8vIGRlZmF1bHQgY29kZWJsb2Nrc1xuICAgICAgICB0aGlzLiNwbHVnaW4ucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcbiAgICAgICAgICAgICd1c2UnLFxuICAgICAgICAgICAgdGhpcy4jaGFuZGxlci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgLTEwMCxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBoYW5kbGVyIGZvciBjdXN0b20gY29kZWJsb2Nrcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJDdXN0b21Db2RlYmxvY2tzKCk6IHZvaWQge1xuICAgICAgICAvLyB1c2VyLWRlZmluZWQgY29kZWJsb2Nrc1xuICAgICAgICBmb3IgKGNvbnN0IFtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZXMsXG4gICAgICAgIF0gb2YgdGhpcy4jcGx1Z2luLnN0YXRlLmNvbXBvbmVudHNfZW5hYmxlZC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHJlLXJlZ2lzdGVyaW5nIGEgcHJvY2Vzc29yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI3JlZ2lzdGVyZWQuaW5jbHVkZXMobmFtZSkpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgICB0aGlzLiNyZWdpc3RlcmVkLnB1c2gobmFtZSlcbiAgICAgICAgICAgICAgICB0aGlzLiNwbHVnaW4ucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgKHNvdXJjZSwgZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLiNoYW5kbGVyKHNvdXJjZSwgZWxlbWVudCwgY29udGV4dCwgaWQsIG5hbWUpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC0xMDAsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgI2hhbmRsZXIoXG4gICAgICAgIHNvdXJjZTogc3RyaW5nLFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgZWxDb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuICAgICAgICBjb21wb25lbnRJZD86IHN0cmluZyxcbiAgICAgICAgbmFtZT86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLiNsb2cuZ3JvdXAoKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBncm91cC5kZWJ1ZyhgUGFyc2luZyBDb2RlYmxvY2sgTmFtZSAnJHtuYW1lID8/ICd1c2UnfSdgKVxuICAgICAgICAgICAgY29uc3Qgbm90ZXBhdGggPSBlbENvbnRleHQuc291cmNlUGF0aFxuICAgICAgICAgICAgY29uc3QgdXNlZF9uYW1lID0gbmFtZSA/PyB0aGlzLiNnZXRDb21wb25lbnROYW1lKGVsQ29udGV4dCwgZWxlbWVudClcblxuICAgICAgICAgICAgZ3JvdXAuZGVidWcoYFBhcnNpbmcgQ29kZWJsb2NrIENvbnRlbnQgJyR7dXNlZF9uYW1lfSdgKVxuICAgICAgICAgICAgY29uc3QgeyBzeW50YXgsIGRhdGEgfSA9IHRoaXMuI3BhcnNlci5wYXJzZShzb3VyY2UsIG5vdGVwYXRoLCBncm91cClcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSB0aGlzLiNnZXRDb21wb25lbnRNYXRjaGVyKGNvbXBvbmVudElkLCB1c2VkX25hbWUpXG4gICAgICAgICAgICBjb25zdCBoYXNoID0gZ2V0SGFzaChzb3VyY2UpXG5cbiAgICAgICAgICAgIGdyb3VwLmRlYnVnKGBTZXJpYWxpemluZyBDb2RlYmxvY2sgJyR7dXNlZF9uYW1lfSdgKVxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHsgbm90ZXBhdGgsIHVzZWRfbmFtZSwgc3ludGF4LCBoYXNoIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHsgY29udGV4dCwgZWxlbWVudCwgZGF0YSB9XG4gICAgICAgICAgICBncm91cC50cmFjZSgnU2VyaWFsaXplZCBDb2RlYmxvY2snLCBwYXJhbXMpXG5cbiAgICAgICAgICAgIGdyb3VwLmRlYnVnKGBSZW5kZXJpbmcgQ29kZWJsb2NrICcke3VzZWRfbmFtZX0nYClcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29tcG9uZW50JywgYCR7dXNlZF9uYW1lfS1jb21wb25lbnRgKVxuICAgICAgICAgICAgdGhpcy4jcmVuZGVyZWQucHVzaChtYXRjaGVyLnBhdGgsIHBhcmFtcylcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI3JlbmRlckNvbXBvbmVudChtYXRjaGVyLnBhdGgsIHBhcmFtcywgZ3JvdXApXG5cbiAgICAgICAgICAgIGdyb3VwLmZsdXNoKGBSZW5kZXJlZCBDb21wb25lbnQgJyR7dXNlZF9uYW1lfSdgKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGdyb3VwLmVycm9yKGVycilcbiAgICAgICAgICAgIGdyb3VwLmZsdXNoKGBGYWlsZWQgQ29tcG9uZW50IG9uICcke2VsQ29udGV4dC5zb3VyY2VQYXRofSdgKVxuXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBlbGVtZW50LmNyZWF0ZUVsKCdwcmUnKVxuICAgICAgICAgICAgcHJlLmNsYXNzTGlzdC5hZGQoJ2NvbXBvbmVudC1lcnJvcicpXG5cbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBEaXNhYmxlZENvbXBvbmVudEVycm9yKSBlcnIuY2F1c2UgPSBzb3VyY2VcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikgcHJlLmFwcGVuZChlcnIuc3RhY2sgPz8gZXJyLm1lc3NhZ2UpXG4gICAgICAgICAgICBlbHNlIHByZS5hcHBlbmQoSlNPTi5zdHJpbmdpZnkoZXJyKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgICNnZXRDb21wb25lbnROYW1lKFxuICAgICAgICBjb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICApOiBzdHJpbmcge1xuICAgICAgICAvLyB0cnkgdG8gaWRlbnRpZnkgdGhlIG5hbWUgZnJvbSBjb2RlYmxvY2sgaGVhZGVyXG4gICAgICAgIGNvbnN0IGluZm8gPSBjb250ZXh0LmdldFNlY3Rpb25JbmZvKGVsZW1lbnQpXG4gICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBpbmZvLnRleHQuc3BsaXQoJ1xcbicpLmF0KGluZm8ubGluZVN0YXJ0KSA/PyAnJ1xuICAgICAgICAgICAgY29uc3QgdXNlZF9uYW1lID0gaGVhZGVyLnJlcGxhY2UoJ2BgYHVzZScsICcnKS50cmltKClcbiAgICAgICAgICAgIGlmICh1c2VkX25hbWUpIHJldHVybiB1c2VkX25hbWVcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBDb21wb25lbnRFcnJvcihcbiAgICAgICAgICAgIGBjb21wb25lbnQgbmFtZSBjb3VsZCBub3QgYmUgZm91bmQgb24gJyR7Y29udGV4dC5zb3VyY2VQYXRofSdgLFxuICAgICAgICAgICAgeyBjYXVzZTogaW5mbywgY29kZTogJ21pc3NpbmctY29tcG9uZW50LW5hbWUnIH0sXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAjZ2V0Q29tcG9uZW50TWF0Y2hlcihcbiAgICAgICAgY29tcG9uZW50SWQ/OiBzdHJpbmcsXG4gICAgICAgIHVzZWRfbmFtZT86IHN0cmluZyxcbiAgICApOiBDb21wb25lbnRNYXRjaGVyIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudElkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1hdGNoZXIgb2YgdGhpcy4jcGx1Z2luLnN0YXRlLmNvbXBvbmVudHNfbWF0Y2hlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlci5pZCA9PT0gY29tcG9uZW50SWQpIHJldHVybiBtYXRjaGVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlZF9uYW1lKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1hdGNoZXIgb2YgdGhpcy4jcGx1Z2luLnN0YXRlLmNvbXBvbmVudHNfbWF0Y2hlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KHVzZWRfbmFtZSkpIHJldHVybiBtYXRjaGVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRGlzYWJsZWRDb21wb25lbnRFcnJvcihcbiAgICAgICAgICAgIGBjb21wb25lbnQoJHt1c2VkX25hbWV9KSB3YXMgZGlzYWJsZWQgcmVjZW50bHlgLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgYXN5bmMgI3JlbmRlckNvbXBvbmVudChcbiAgICAgICAgY29tcG9uZW50UGF0aDogc3RyaW5nLFxuICAgICAgICB7IGNvbnRleHQsIGVsZW1lbnQ6IGVsLCBkYXRhIH06IFJlbmRlclBhcmFtcyxcbiAgICAgICAgbG9nOiBMb2dnZXIsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGxhdGVzdFBhdGggPSB0aGlzLiN2ZXJzaW9ucy5yZXNvbHZlTGF0ZXN0KGNvbXBvbmVudFBhdGgpXG4gICAgICAgIGxvZy5kZWJ1ZyhgUmVuZGVyaW5nIHdpdGggTGF0ZXN0UGF0aCAnJHtsYXRlc3RQYXRofSdgKVxuXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LmdldEZpbGVCeVBhdGgobGF0ZXN0UGF0aClcbiAgICAgICAgaWYgKGZpbGUpIHJldHVybiB0aGlzLiNyZW5kZXJlci5yZW5kZXIoZmlsZSwgY29udGV4dCwgZWwsIGRhdGEsIGxvZylcblxuICAgICAgICB0aHJvdyBuZXcgQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICAgICBgY29tcG9uZW50KCR7bGF0ZXN0UGF0aH0pIGNvdWxkIG5vdCBiZSBsb2NhdGVkLCB0cnkgcmVsb2FkaW5nIE9ic2lkaWFuYCxcbiAgICAgICAgICAgIHsgY29kZTogJ21pc3NpbmctY29tcG9uZW50LWZpbGUnIH0sXG4gICAgICAgIClcbiAgICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtcHJpdmF0ZS1jbGFzcy1tZW1iZXJzICovXG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luQVBJIH0gZnJvbSAnQC9pbmRleCdcbmltcG9ydCB0eXBlIHsgTG9nZ2VyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRzQVBJIGltcGxlbWVudHMgQ29tcG9uZW50c1BsdWdpbkFQSSB7XG4gICAgI2xvZzogTG9nZ2VyXG4gICAgI3BsdWdpbjogQ29tcG9uZW50c1BsdWdpblxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKSB7XG4gICAgICAgIHRoaXMuI2xvZyA9IHBsdWdpbi5sb2cubWFrZShDb21wb25lbnRzQVBJLm5hbWUpXG4gICAgICAgIHRoaXMuI3BsdWdpbiA9IHBsdWdpblxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUGx1Z2luU2V0dGluZ3MsIFBsdWdpblN0YXRlIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IEFwcCwgUGx1Z2luLCBQbHVnaW5NYW5pZmVzdCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB7IHByZXBhcmVTdGF0ZSB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IFNldHRpbmdzVGFiIH0gZnJvbSAnLi9zZXR0aW5ncy9TZXR0aW5nc1RhYidcbmltcG9ydCBDb2RlYmxvY2tIYW5kbGVyIGZyb20gJy4vY29kZWJsb2NrcydcbmltcG9ydCBDb21wb25lbnRzQVBJIGZyb20gJy4vQ29tcG9uZW50c0FQSSdcblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgLy8gKiAnV0FSTicgbGV2ZWwgdG8gZm9yY2UgdGhlIHVzZXIgdG8gY2hvb3NlIGEgbG93ZXIgbGV2ZWwgd2hlbiBpcyByZXF1aXJlZFxuICAgIC8vICogdGhpcyBkZWNpdGlvbiwgcHJldmVudHMgdGhlIGNvbnNvbGUgZnJvbSBiZWVuIG92ZXJwb3B1bGF0ZWQgYnkgZGVmYXVsdFxuICAgIHBsdWdpbl9sZXZlbDogJ1dBUk4nLFxuICAgIC8vXG4gICAgZW5hYmxlX2NvZGVibG9ja3M6IGZhbHNlLFxuICAgIGVuYWJsZV9zZXBhcmF0b3JzOiBmYWxzZSxcbiAgICB1c2FnZV9zZXBhcmF0b3I6ICctLS0nLFxuXG4gICAgY2FjaGVfZm9sZGVyOiAnX190ZW1wLycsXG4gICAgY29tcG9uZW50c19mb2xkZXI6ICcnLFxuICAgIGNvbXBvbmVudHNfY29uZmlnOiBbXSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50c1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgcHVibGljIGxvZyA9IExvZ2dlci5jb25zb2xlTG9nZ2VyKENvbXBvbmVudHNQbHVnaW4ubmFtZSlcblxuICAgIHB1YmxpYyBzZXR0aW5ncyA9IHt9IGFzIFBsdWdpblNldHRpbmdzXG4gICAgcHVibGljIHN0YXRlID0ge30gYXMgUGx1Z2luU3RhdGVcblxuICAgIHB1YmxpYyBhcGk6IENvbXBvbmVudHNBUElcbiAgICAjaGFuZGxlcjogQ29kZWJsb2NrSGFuZGxlclxuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG1hbmlmZXN0OiBQbHVnaW5NYW5pZmVzdCkge1xuICAgICAgICBzdXBlcihhcHAsIG1hbmlmZXN0KVxuXG4gICAgICAgIC8vICogYWx3YXlzIHByaW50aW5nIHRoZSBmaXJzdCBsb2FkU2V0dGluZ3MoKVxuICAgICAgICAvLyAqIGFmdGVyIHRoYXQsIHRoZSB1c2VyLWRlZmluZWQgbGV2ZWwgaXMgdXNlZFxuICAgICAgICB0aGlzLmxvZy5zZXRMZXZlbChMb2dMZXZlbC5ERUJVRylcbiAgICAgICAgdGhpcy5sb2cuc2V0Rm9ybWF0KCdbaGg6bW06c3MubXNdIGxldmVsOicpXG5cbiAgICAgICAgdGhpcy5hcGkgPSBuZXcgQ29tcG9uZW50c0FQSSh0aGlzKVxuICAgICAgICB0aGlzLiNoYW5kbGVyID0gbmV3IENvZGVibG9ja0hhbmRsZXIodGhpcylcblxuICAgICAgICAvLyB0aHJpZC1wYXJ0eSBBUElcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBub24tc3RhbmRhcmQgQVBJXG4gICAgICAgIHdpbmRvdy5Db21wb25lbnRzID0gdGhpcy5hcGlcbiAgICB9XG5cbiAgICBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKClcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzKSlcbiAgICAgICAgdGhpcy4jaGFuZGxlci5yZWdpc3RlckJhc2VDb2RlYmxvY2soKVxuICAgIH1cblxuICAgIG9udW5sb2FkKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMubG9nLmdyb3VwKCdDbGVhcmluZyBTdGF0ZScpXG4gICAgICAgIHZvaWQgdGhpcy4jaGFuZGxlci5jbGVhcihncm91cClcbiAgICAgICAgZ3JvdXAuZmx1c2goJ0NsZWFyZWQgU3RhdGUnKVxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmxvZy5ncm91cCgnTG9hZGluZyBTZXR0aW5ncycpXG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZXMgPSAoKGF3YWl0IHRoaXMubG9hZERhdGEoKSkgfHxcbiAgICAgICAgICAgIHt9KSBhcyBQYXJ0aWFsPFBsdWdpblNldHRpbmdzPlxuXG4gICAgICAgIC8vIGVuc3VyZSBhIGZhbGxiYWNrIHZhbHVlIGlzIHByZXNlbnRcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIHByaW1pdGl2ZXMpXG5cbiAgICAgICAgZ3JvdXAuZGVidWcoJ0xvYWRlZDogJywgdGhpcy5zZXR0aW5ncylcblxuICAgICAgICB0aGlzLiNwcmVwYXJlU3RhdGUoZ3JvdXApXG4gICAgICAgIGdyb3VwLmZsdXNoKCdMb2FkZWQgU2V0dGluZ3MnKVxuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmxvZy5ncm91cCgnU2F2aW5nIFNldHRpbmdzJylcbiAgICAgICAgY29uc3QgcHJpbWl0aXZlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2V0dGluZ3MpXG4gICAgICAgIC8vIHNlcmlhbGl6ZSBzcGVjaWFsIGRhdGEgdHlwZXMgKE1hcCwgU2V0LCBldGMpXG5cbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YShwcmltaXRpdmVzKVxuICAgICAgICBncm91cC5kZWJ1ZygnU2F2ZWQ6ICcsIHByaW1pdGl2ZXMpXG5cbiAgICAgICAgdGhpcy4jcHJlcGFyZVN0YXRlKGdyb3VwKVxuICAgICAgICBncm91cC5mbHVzaCgnU2F2ZWQgU2V0dGluZ3MnKVxuICAgIH1cblxuICAgICNwcmVwYXJlU3RhdGUobG9nOiBMb2dnZXIpOiB2b2lkIHtcbiAgICAgICAgbG9nLmluZm8oJ1ByZXBhcmluZyBzdGF0ZScpXG5cbiAgICAgICAgdGhpcy5sb2cuc2V0TGV2ZWwoTG9nTGV2ZWxbdGhpcy5zZXR0aW5ncy5wbHVnaW5fbGV2ZWxdKVxuICAgICAgICB0aGlzLnN0YXRlID0gcHJlcGFyZVN0YXRlKHRoaXMpXG4gICAgICAgIHRoaXMuI2hhbmRsZXIucmVnaXN0ZXJDdXN0b21Db2RlYmxvY2tzKClcbiAgICB9XG5cbiAgICAvLyBEZXNpZ24gTW9kZVxuICAgICNkZXNpZ25Nb2RlID0gZmFsc2VcblxuICAgIGdldCBpc0Rlc2lnbk1vZGVFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGVzaWduTW9kZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHdoZW4gdG8gZW5hYmxlIHRoZSBibG9jayBmaWxlIHZlcnNpb25pbmcuXG4gICAgICogPiBgV2FybmluZzpgIFRoZSB2ZXJzaW9uaW5nIHN0b3JlcyBlYWNoIGVkaXRpb24gb2YgYSBmaWxlXG4gICAgICogPiB0byBwcm92aWRlIGEgd2F5IHRvIGxvYWQgdGhlIGZpbGUgY2hhbmdlcyBvbiBydW50aW1lXG4gICAgICogPiB0aGlzIGJlaGF2aW9yIHdpbGwgY2F1c2UgYW4gaW5jcmVhc2Ugb24gbWVtb3J5IHVzYWdlIGFuZFxuICAgICAqID4gc3RvcmFnZSB1c2FnZSwgc28gaXQgc2hvdWxkIGJlICoqZGlzYWJsZWQgYWx3YXlzKipcbiAgICAgKiA+IHVudGlsIHRoZSB1c2VyIGVuYWJsZXMgaXQgKiptYW51YWxseSoqXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZURlc2lnbk1vZGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLiNkZXNpZ25Nb2RlKSByZXR1cm5cbiAgICAgICAgdGhpcy4jZGVzaWduTW9kZSA9IHRydWVcbiAgICAgICAgdm9pZCB0aGlzLiNoYW5kbGVyLnByZXBhcmVEZXNpZ25Nb2RlKClcbiAgICB9XG59XG4iXSwibmFtZXMiOlsicHQiLCJ0IiwibiIsInd0IiwiViIsIiN0IiwiI3MiLCIjZSIsIm10IiwieXQiLCJkdCIsIlkiLCJBIiwiSCIsImUiLCJaIiwieHQiLCJFdCIsImJ0IiwidHQiLCJ2dCIsImV0IiwiWCIsImMiLCJhIiwidSIsImYiLCJkIiwiaCIsIlJ0IiwiTCIsInAiLCJiIiwiSSIsIk8iLCJXIiwiUCIsIkMiLCIkIiwiRCIsIm50IiwidiIsIm0iLCJxIiwiayIsInkiLCJMdCIsIk0iLCJHIiwiQ3QiLCJTIiwiXyIsInN0IiwiaXQiLCJqIiwicnQiLCJvdCIsIlQiLCJUdCIsImN0IiwiU3QiLCJsdCIsIkR0IiwiT3QiLCJBdCIsIkZ0IiwiTnQiLCJKIiwiYXQiLCJrdCIsIkl0IiwibyIsImwiLCJXdCIsIkJ0IiwiUSIsInV0IiwiVnQiLCJIdCIsIiR0IiwiTXQiLCJfdCIsIlB0IiwiVXQiLCJqdCIsInp0IiwiZnQiLCJzIiwiRiIsIll0IiwiaHQiLCJCIiwiZ3QiLCJxdCIsIkZpbGVzeXN0ZW1BZGFwdGVyIiwiI3BsdWdpbiIsIiN2YXVsdCIsInBsdWdpbiIsInBhdGhzIiwiUGF0aCIsIm5vcm1hbGl6ZVBhdGgiLCJmaWxlT3JQYXRoIiwiZmlsZSIsIlRGaWxlIiwiI2V4aXN0cyIsImZpbGVwYXRoIiwiI21pc3NpbmciLCJlZGl0b3IiLCJjb250ZW50IiwibmV3RmlsZVBhdGgiLCJmb2xkZXJPclBhdGgiLCJmb2xkZXJwYXRoIiwibGVuZ3RoIiwiaGFzaCIsImNyZWF0ZUhhc2giLCJNYXBTdG9yZSIsInZhbHVlT3JNYXRjaGVyIiwia2V5IiwidmFsdWVzIiwidmFsdWUiLCJyZXN1bHQiLCJpc1JlY29yZCIsInByZXBhcmVIYXNoIiwic291cmNlIiwiZ2V0SGFzaCIsImRhdGEiLCJwcmVwYXJlU3RhdGUiLCJuYW1lcyIsInByZXBhcmVDb21wb25lbnROYW1lcyIsInByZXBhcmVDb21wb25lbnRNYXRjaGVycyIsInBhcnNlU3RyaW5nTGlzdCIsImFyciIsInN0ciIsInNldHRpbmdzIiwiY29tcG9uZW50IiwibmFtZSIsImNvbXBvbmVudHNFbmFibGVkIiwibG9hZENvbXBvbmVudHNPblZhdWx0IiwidmF1bHQiLCJjb21wb25lbnRzRm9sZGVyIiwicHJldmlvdXNDb21wb25lbnRzIiwiZmlsZXMiLCJnZXRGaWxlc09uRm9sZGVyIiwicHJldiIsImVsIiwidGFnIiwiYXBwZW5kIiwicGFyZW50IiwiU2V0dGluZ3NUYWJDb21wb25lbnRzIiwiI2NvbXBvbmVudHNFbCIsIiNmaWx0ZXJlZCIsInBhcmVudEVsIiwiI2Rpc3BsYXlDb21wb25lbnRzSGVhZGVyIiwiI3NlYXJjaENvbXBvbmVudHNPblZhdWx0IiwiI3NhdmVDb21wb25lbnRzIiwiI2Rpc3BsYXlDb21wb25lbnRzTGlzdCIsIiN0b2dnbGVDb21wb25lbnRzIiwiaWRzIiwiZW5hYmxlZCIsImNvbXBvbmVudHMiLCJpdGVtIiwiI2NoYW5nZUNvbXBvbmVudCIsImlkIiwiVG9vbHMubG9hZENvbXBvbmVudHNPblZhdWx0IiwiY29tcG9uZW50c0ZpbHRlciIsIlNldHRpbmciLCJidXR0b24iLCJpbnB1dCIsImZpbHRlciIsImNoYW5nZWQiLCJmaWx0ZXJlZCIsImlzSW5jbHVkZWQiLCJ3YXNJbmNsdWRlZCIsIiNjb21wb25lbnROYW1lIiwiI2NvbXBvbmVudERlc2MiLCIjY29tcG9uZW50Rm9ybSIsInRvZ2dsZSIsInN0YXR1cyIsImRpdiIsIlRvb2xzLmVsIiwiZnJhZyIsIlRvb2xzLmFwcGVuZCIsImkiLCIjYWN0aXZlRm9ybSIsInNldHRpbmciLCJmb3JtSW5wdXQiLCJ0ZXh0YXJlYSIsIkxFVkVMX0xBQkVMUyIsImRvY3MiLCJkZXNjIiwiU2V0dGluZ3NUYWIiLCJQbHVnaW5TZXR0aW5nVGFiIiwiI2ZzIiwiI3VwZGF0ZSIsIiNkaXNwbGF5R2VuZXJhbFNldHRpbmdzIiwiI2Rpc3BsYXlDb2RlYmxvY2tzU2V0dGluZ3MiLCIjZGlzcGxheUNvbXBvbmVudHNTZXR0aW5ncyIsImxldmVsU2V0dGluZyIsImRyb3Bkb3duIiwibW9kZVNldHRpbmciLCJjb2RlYmxvY2tTZXR0aW5ncyIsInVzYWdlU2VwYXJhdG9ySW5wdXQiLCJlbmFibGVTZXBhcmF0b3JTZXR0aW5ncyIsInNlcGFyYXRvclNldHRpbmciLCJhdHRhY2hQYXRoSGFuZGxlciIsImxvZ3MiLCJwYXRoIiwic291cmNlRGVzYyIsInNvdXJjZUxvZyIsImNvbXBvbmVudHNmb2xkZXJTZXR0aW5nIiwiRm9sZGVyU3VnZ2VzdGVyIiwiY2FjaGVEZXNjIiwiY2FjaGVMb2ciLCJjYWNoZWZvbGRlclNldHRpbmciLCJDb21wb25lbnRFcnJvciIsIm1lc3NhZ2UiLCJvcHRpb25zIiwiYmFzZSIsIkRpc2FibGVkQ29tcG9uZW50RXJyb3IiLCJZYW1sUGFyc2VyIiwiX25vdGVwYXRoIiwicGFyc2VZYW1sIiwiSnNvblBhcnNlciIsIlBhcnNlck1hbmFnZXIiLCIjcGFyc2VycyIsIiNzZXBhcmF0b3IiLCJlc2NhcGVkIiwibm90ZXBhdGgiLCJsb2ciLCJzZXBhcmF0b3IiLCJwYXJzZXIiLCJlcnIiLCJCYXNlUmVuZGVyZXIiLCJlbGVtZW50IiwiTWFya2Rvd25SZW5kZXJlciIsIlRlbXBsYXRlUmVuZGVyZXIiLCJjb250ZXh0IiwidGVtcGxhdGUiLCIjZ2V0VGVtcGxhdGUiLCJyZXBsYWNlZCIsIiNyZXBsYWNlUGxhY2Vob2xkZXJzIiwiSmF2YXNjcmlwdFJlbmRlcmVyIiwiZnMiLCJyZW5kZXJlciIsIiNnZXRSZW5kZXJlciIsIm1vZHVsZSIsIiNzb3VyY2UiLCJyZXNvdXJjZSIsInJlc29sdmVkIiwiY2F1c2UiLCJSZW5kZXJNYW5hZ2VyIiwiI3JlbmRlcmVycyIsImltcG9ydHNSZWdleCIsIlZlcnNpb25zTWFuYWdlciIsIiNsb2ciLCIjcmVmcmVzaGVyIiwiI2hhbmRsZXIiLCIjdHJhY2tlZCIsIiN2ZXJzaW9ucyIsInJlZnJlc2hlciIsIiNoYW5kbGVGaWxlTW9kaWZpY2F0aW9uIiwiZ3JvdXAiLCJhZmZlY3RlZCIsIiNhZmZlY3RlZEZpbGVzIiwiY2FjaGVQYXRoIiwiI2NhY2hlRmlsZSIsImRpcmVjdERlcGVuZGVudHMiLCJkZXBlbmRlbnRzIiwiZGVwZW5kZW50IiwiY2FjaGVIYXNoIiwiY2FjaGVOYW1lIiwiI3JlcGxhY2VJbXBvcnRzIiwidGltZXN0YW1wIiwiY2xvbmVOYW1lIiwiY2xvbmVQYXRoIiwicGFyZW50UGF0aCIsIiQwIiwibGF0ZXN0IiwiY29tcG9uZW50c1BhdGgiLCIjaW5kZXhGb2xkZXIiLCJmb2xkZXIiLCJjaGlsZCIsIlRGb2xkZXIiLCIjaW5kZXhGaWxlIiwiaW1wb3J0cyIsIm1hdGNoIiwiaW1wb3J0ZWRQYXRoIiwiQ29kZWJsb2NrSGFuZGxlciIsIiNwYXJzZXIiLCIjcmVuZGVyZXIiLCIjcmVuZGVyZWQiLCIjcmVnaXN0ZXJlZCIsImNvbXBvbmVudHNQYXRocyIsImNvbXBvbmVudFBhdGgiLCJwYXJhbXMiLCIjcmVuZGVyQ29tcG9uZW50IiwiZWxDb250ZXh0IiwiY29tcG9uZW50SWQiLCJ1c2VkX25hbWUiLCIjZ2V0Q29tcG9uZW50TmFtZSIsInN5bnRheCIsIm1hdGNoZXIiLCIjZ2V0Q29tcG9uZW50TWF0Y2hlciIsInByZSIsImluZm8iLCJsYXRlc3RQYXRoIiwiQ29tcG9uZW50c0FQSSIsIkRFRkFVTFRfU0VUVElOR1MiLCJDb21wb25lbnRzUGx1Z2luIiwiUGx1Z2luIiwiTG9nZ2VyIiwiYXBwIiwibWFuaWZlc3QiLCJMb2dMZXZlbCIsInByaW1pdGl2ZXMiLCIjcHJlcGFyZVN0YXRlIiwiI2Rlc2lnbk1vZGUiXSwibWFwcGluZ3MiOiJpRkFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBTUEsTUFBTUEsRUFBRyxDQUNQLE1BQU1DLEVBQUdDLEVBQUcsQ0FDVixRQUFRLE1B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
