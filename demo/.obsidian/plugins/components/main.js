/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-components@0.5.0 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-components
 */
"use strict";const U=require("obsidian"),Hs=require("path"),ni=require("crypto");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class Ia{error(s,u){console.error(s,...u)}warn(s,u){console.warn(s,...u)}info(s,u){console.info(s,...u)}debug(s,u){console.debug(s,...u)}trace(s,u){console.trace(s,...u)}group(s,u){return console.groupCollapsed(s,...u),console.groupEnd}}const oe=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),La=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class jt{#e;#t;#n;#r=[];#s=[];get level(){return this.#t?this.#t:this.#e?.level??oe.WARN}get format(){return this.#n?this.#n:this.#e?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const s=[];for(let u=0;u<this.#s.length-1;u++)s.push(this.#s[u][0]);return s.push(this.#s.at(-1)??""),s.join(".")}get drivers(){return Object.freeze(this.#r)}setLevel(s){return this.#t=s,this}setFormat(s){return this.#n=s,this}addDrivers(...s){for(const u of s)Array.isArray(u)?this.#r.push(...u):u&&this.#r.push(u);return this}addNamespaces(...s){for(const u of s)Array.isArray(u)?this.#s.push(...u):u&&this.#s.push(u);return this}static consoleLogger(s){const u=new jt;return u.setLevel(oe.WARN),u.addDrivers(new Ia),u.addNamespaces(s),u}make(s){const u=new jt;return u.#e=this,u.addDrivers(this.#r),u.addNamespaces(this.#s,s),u}prefix(s,u){return this.format.replace("hh",String(s.getHours()).padStart(2,"0")).replace("mm",String(s.getMinutes()).padStart(2,"0")).replace("ss",String(s.getSeconds()).padStart(2,"0")).replace("ms",String(s.getMilliseconds()).padStart(3,"0")).replace("level",La[u]).replace("namespace",this.namespace)}log(s,u,l){if(this.level>u)return;const D=this.prefix(s,u);switch(this.level){case oe.ERROR:this.#r.forEach(p=>p.error(D,l));break;case oe.WARN:this.#r.forEach(p=>p.warn(D,l));break;case oe.INFO:this.#r.forEach(p=>p.info(D,l));break;case oe.DEBUG:this.#r.forEach(p=>p.debug(D,l));break;default:this.#r.forEach(p=>p.trace(D,l))}}error(...s){this.log(new Date,oe.ERROR,s)}warn(...s){this.log(new Date,oe.WARN,s)}info(...s){this.log(new Date,oe.INFO,s)}debug(...s){this.log(new Date,oe.DEBUG,s)}trace(...s){this.log(new Date,oe.TRACE,s)}group(...s){const u=new Ra;return u.#e=this,u.addDrivers(this.#r),u.addNamespaces(this.#s),s.length&&u.log(new Date,oe.INFO,s),u}}class Ra extends jt{#e=[];log(s,u,l){this.level>u||this.#e.push({timestamp:s,level:u,content:l})}flush(...s){if(this.#e.length===0){super.log(new Date,oe.INFO,s);return}const u=this.prefix(new Date,oe.INFO),l=this.drivers.map(D=>D.group(u,s));for(const{timestamp:D,level:p,content:y}of this.#e)super.log(D,p,y);l.forEach(D=>D()),this.#e=[]}}class _a{constructor(s,u){this.app=s,this.containerEl=u,this.scope=new U.Scope,this.wrapperEl=createDiv("suggestions-tooltip")}scope;wrapperEl;registerListeners(){this.scope.register([],"Escape",this.close.bind(this))}open(){this.app.keymap.pushScope(this.scope),this.containerEl.appendChild(this.wrapperEl)}close(){this.app.keymap.popScope(this.scope),this.wrapperEl.empty(),this.wrapperEl.detach()}}const Us=Math.min,Pt=Math.max,En=Math.round,Ie=f=>({x:f,y:f});function ri(f){return f.split("-")[0]}function $a(f){return f.split("-")[1]}function Va(f){return f==="x"?"y":"x"}function Pa(f){return f==="y"?"height":"width"}function si(f){return["top","bottom"].includes(ri(f))?"y":"x"}function ja(f){return Va(si(f))}function ii(f){const{x:s,y:u,width:l,height:D}=f;return{width:l,height:D,top:u,left:s,right:s+l,bottom:u+D,x:s,y:u}}function Zs(f,s,u){let{reference:l,floating:D}=f;const p=si(s),y=ja(s),b=Pa(y),g=ri(s),I=p==="y",R=l.x+l.width/2-D.width/2,H=l.y+l.height/2-D.height/2,K=l[b]/2-D[b]/2;let Y;switch(g){case"top":Y={x:R,y:l.y-D.height};break;case"bottom":Y={x:R,y:l.y+l.height};break;case"right":Y={x:l.x+l.width,y:H};break;case"left":Y={x:l.x-D.width,y:H};break;default:Y={x:l.x,y:l.y}}switch($a(s)){case"start":Y[y]-=K*(u&&I?-1:1);break;case"end":Y[y]+=K*(u&&I?-1:1);break}return Y}const Wa=async(f,s,u)=>{const{placement:l="bottom",strategy:D="absolute",middleware:p=[],platform:y}=u,b=p.filter(Boolean),g=await(y.isRTL==null?void 0:y.isRTL(s));let I=await y.getElementRects({reference:f,floating:s,strategy:D}),{x:R,y:H}=Zs(I,l,g),K=l,Y={},fe=0;for(let ie=0;ie<b.length;ie++){const{name:me,fn:Ge}=b[ie],{x:Je,y:ut,data:at,reset:ke}=await Ge({x:R,y:H,initialPlacement:l,placement:K,strategy:D,middlewareData:Y,rects:I,platform:y,elements:{reference:f,floating:s}});R=Je??R,H=ut??H,Y={...Y,[me]:{...Y[me],...at}},ke&&fe<=50&&(fe++,typeof ke=="object"&&(ke.placement&&(K=ke.placement),ke.rects&&(I=ke.rects===!0?await y.getElementRects({reference:f,floating:s,strategy:D}):ke.rects),{x:R,y:H}=Zs(I,K,g)),ie=-1)}return{x:R,y:H,placement:K,strategy:D,middlewareData:Y}};function wn(){return typeof window<"u"}function vt(f){return ui(f)?(f.nodeName||"").toLowerCase():"#document"}function he(f){var s;return(f==null||(s=f.ownerDocument)==null?void 0:s.defaultView)||window}function We(f){var s;return(s=(ui(f)?f.ownerDocument:f.document)||window.document)==null?void 0:s.documentElement}function ui(f){return wn()?f instanceof Node||f instanceof he(f).Node:!1}function xe(f){return wn()?f instanceof Element||f instanceof he(f).Element:!1}function Le(f){return wn()?f instanceof HTMLElement||f instanceof he(f).HTMLElement:!1}function qs(f){return!wn()||typeof ShadowRoot>"u"?!1:f instanceof ShadowRoot||f instanceof he(f).ShadowRoot}function Ht(f){const{overflow:s,overflowX:u,overflowY:l,display:D}=Oe(f);return/auto|scroll|overlay|hidden|clip/.test(s+l+u)&&!["inline","contents"].includes(D)}function Ha(f){return["table","td","th"].includes(vt(f))}function Cn(f){return[":popover-open",":modal"].some(s=>{try{return f.matches(s)}catch{return!1}})}function rr(f){const s=sr(),u=xe(f)?Oe(f):f;return["transform","translate","scale","rotate","perspective"].some(l=>u[l]?u[l]!=="none":!1)||(u.containerType?u.containerType!=="normal":!1)||!s&&(u.backdropFilter?u.backdropFilter!=="none":!1)||!s&&(u.filter?u.filter!=="none":!1)||["transform","translate","scale","rotate","perspective","filter"].some(l=>(u.willChange||"").includes(l))||["paint","layout","strict","content"].some(l=>(u.contain||"").includes(l))}function Ua(f){let s=Ye(f);for(;Le(s)&&!Ct(s);){if(rr(s))return s;if(Cn(s))return null;s=Ye(s)}return null}function sr(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function Ct(f){return["html","body","#document"].includes(vt(f))}function Oe(f){return he(f).getComputedStyle(f)}function bn(f){return xe(f)?{scrollLeft:f.scrollLeft,scrollTop:f.scrollTop}:{scrollLeft:f.scrollX,scrollTop:f.scrollY}}function Ye(f){if(vt(f)==="html")return f;const s=f.assignedSlot||f.parentNode||qs(f)&&f.host||We(f);return qs(s)?s.host:s}function ai(f){const s=Ye(f);return Ct(s)?f.ownerDocument?f.ownerDocument.body:f.body:Le(s)&&Ht(s)?s:ai(s)}function oi(f,s,u){var l;s===void 0&&(s=[]);const D=ai(f),p=D===((l=f.ownerDocument)==null?void 0:l.body),y=he(D);return p?(nr(y),s.concat(y,y.visualViewport||[],Ht(D)?D:[],[])):s.concat(D,oi(D,[]))}function nr(f){return f.parent&&Object.getPrototypeOf(f.parent)?f.frameElement:null}function li(f){const s=Oe(f);let u=parseFloat(s.width)||0,l=parseFloat(s.height)||0;const D=Le(f),p=D?f.offsetWidth:u,y=D?f.offsetHeight:l,b=En(u)!==p||En(l)!==y;return b&&(u=p,l=y),{width:u,height:l,$:b}}function ci(f){return xe(f)?f:f.contextElement}function wt(f){const s=ci(f);if(!Le(s))return Ie(1);const u=s.getBoundingClientRect(),{width:l,height:D,$:p}=li(s);let y=(p?En(u.width):u.width)/l,b=(p?En(u.height):u.height)/D;return(!y||!Number.isFinite(y))&&(y=1),(!b||!Number.isFinite(b))&&(b=1),{x:y,y:b}}const Za=Ie(0);function fi(f){const s=he(f);return!sr()||!s.visualViewport?Za:{x:s.visualViewport.offsetLeft,y:s.visualViewport.offsetTop}}function qa(f,s,u){return s===void 0&&(s=!1),!u||s&&u!==he(f)?!1:s}function Wt(f,s,u,l){s===void 0&&(s=!1),u===void 0&&(u=!1);const D=f.getBoundingClientRect(),p=ci(f);let y=Ie(1);s&&(l?xe(l)&&(y=wt(l)):y=wt(f));const b=qa(p,u,l)?fi(p):Ie(0);let g=(D.left+b.x)/y.x,I=(D.top+b.y)/y.y,R=D.width/y.x,H=D.height/y.y;if(p){const K=he(p),Y=l&&xe(l)?he(l):l;let fe=K,ie=nr(fe);for(;ie&&l&&Y!==fe;){const me=wt(ie),Ge=ie.getBoundingClientRect(),Je=Oe(ie),ut=Ge.left+(ie.clientLeft+parseFloat(Je.paddingLeft))*me.x,at=Ge.top+(ie.clientTop+parseFloat(Je.paddingTop))*me.y;g*=me.x,I*=me.y,R*=me.x,H*=me.y,g+=ut,I+=at,fe=he(ie),ie=nr(fe)}}return ii({width:R,height:H,x:g,y:I})}function ir(f,s){const u=bn(f).scrollLeft;return s?s.left+u:Wt(We(f)).left+u}function di(f,s,u){u===void 0&&(u=!1);const l=f.getBoundingClientRect(),D=l.left+s.scrollLeft-(u?0:ir(f,l)),p=l.top+s.scrollTop;return{x:D,y:p}}function za(f){let{elements:s,rect:u,offsetParent:l,strategy:D}=f;const p=D==="fixed",y=We(l),b=s?Cn(s.floating):!1;if(l===y||b&&p)return u;let g={scrollLeft:0,scrollTop:0},I=Ie(1);const R=Ie(0),H=Le(l);if((H||!H&&!p)&&((vt(l)!=="body"||Ht(y))&&(g=bn(l)),Le(l))){const Y=Wt(l);I=wt(l),R.x=Y.x+l.clientLeft,R.y=Y.y+l.clientTop}const K=y&&!H&&!p?di(y,g,!0):Ie(0);return{width:u.width*I.x,height:u.height*I.y,x:u.x*I.x-g.scrollLeft*I.x+R.x+K.x,y:u.y*I.y-g.scrollTop*I.y+R.y+K.y}}function Ya(f){return Array.from(f.getClientRects())}function Ga(f){const s=We(f),u=bn(f),l=f.ownerDocument.body,D=Pt(s.scrollWidth,s.clientWidth,l.scrollWidth,l.clientWidth),p=Pt(s.scrollHeight,s.clientHeight,l.scrollHeight,l.clientHeight);let y=-u.scrollLeft+ir(f);const b=-u.scrollTop;return Oe(l).direction==="rtl"&&(y+=Pt(s.clientWidth,l.clientWidth)-D),{width:D,height:p,x:y,y:b}}function Ja(f,s){const u=he(f),l=We(f),D=u.visualViewport;let p=l.clientWidth,y=l.clientHeight,b=0,g=0;if(D){p=D.width,y=D.height;const I=sr();(!I||I&&s==="fixed")&&(b=D.offsetLeft,g=D.offsetTop)}return{width:p,height:y,x:b,y:g}}function Ka(f,s){const u=Wt(f,!0,s==="fixed"),l=u.top+f.clientTop,D=u.left+f.clientLeft,p=Le(f)?wt(f):Ie(1),y=f.clientWidth*p.x,b=f.clientHeight*p.y,g=D*p.x,I=l*p.y;return{width:y,height:b,x:g,y:I}}function zs(f,s,u){let l;if(s==="viewport")l=Ja(f,u);else if(s==="document")l=Ga(We(f));else if(xe(s))l=Ka(s,u);else{const D=fi(f);l={x:s.x-D.x,y:s.y-D.y,width:s.width,height:s.height}}return ii(l)}function Di(f,s){const u=Ye(f);return u===s||!xe(u)||Ct(u)?!1:Oe(u).position==="fixed"||Di(u,s)}function Qa(f,s){const u=s.get(f);if(u)return u;let l=oi(f,[]).filter(b=>xe(b)&&vt(b)!=="body"),D=null;const p=Oe(f).position==="fixed";let y=p?Ye(f):f;for(;xe(y)&&!Ct(y);){const b=Oe(y),g=rr(y);!g&&b.position==="fixed"&&(D=null),(p?!g&&!D:!g&&b.position==="static"&&D&&["absolute","fixed"].includes(D.position)||Ht(y)&&!g&&Di(f,y))?l=l.filter(I=>I!==y):D=b,y=Ye(y)}return s.set(f,l),l}function Xa(f){let{element:s,boundary:u,rootBoundary:l,strategy:D}=f;const p=[...u==="clippingAncestors"?Cn(s)?[]:Qa(s,this._c):[].concat(u),l],y=p[0],b=p.reduce((g,I)=>{const R=zs(s,I,D);return g.top=Pt(R.top,g.top),g.right=Us(R.right,g.right),g.bottom=Us(R.bottom,g.bottom),g.left=Pt(R.left,g.left),g},zs(s,y,D));return{width:b.right-b.left,height:b.bottom-b.top,x:b.left,y:b.top}}function eo(f){const{width:s,height:u}=li(f);return{width:s,height:u}}function to(f,s,u){const l=Le(s),D=We(s),p=u==="fixed",y=Wt(f,!0,p,s);let b={scrollLeft:0,scrollTop:0};const g=Ie(0);if(l||!l&&!p)if((vt(s)!=="body"||Ht(D))&&(b=bn(s)),l){const K=Wt(s,!0,p,s);g.x=K.x+s.clientLeft,g.y=K.y+s.clientTop}else D&&(g.x=ir(D));const I=D&&!l&&!p?di(D,b):Ie(0),R=y.left+b.scrollLeft-g.x-I.x,H=y.top+b.scrollTop-g.y-I.y;return{x:R,y:H,width:y.width,height:y.height}}function tr(f){return Oe(f).position==="static"}function Ys(f,s){if(!Le(f)||Oe(f).position==="fixed")return null;if(s)return s(f);let u=f.offsetParent;return We(f)===u&&(u=u.ownerDocument.body),u}function hi(f,s){const u=he(f);if(Cn(f))return u;if(!Le(f)){let D=Ye(f);for(;D&&!Ct(D);){if(xe(D)&&!tr(D))return D;D=Ye(D)}return u}let l=Ys(f,s);for(;l&&Ha(l)&&tr(l);)l=Ys(l,s);return l&&Ct(l)&&tr(l)&&!rr(l)?u:l||Ua(f)||u}const no=async function(f){const s=this.getOffsetParent||hi,u=this.getDimensions,l=await u(f.floating);return{reference:to(f.reference,await s(f.floating),f.strategy),floating:{x:0,y:0,width:l.width,height:l.height}}};function ro(f){return Oe(f).direction==="rtl"}const so={convertOffsetParentRelativeRectToViewportRelativeRect:za,getDocumentElement:We,getClippingRect:Xa,getOffsetParent:hi,getElementRects:no,getClientRects:Ya,getDimensions:eo,getScale:wt,isElement:xe,isRTL:ro},io=(f,s,u)=>{const l=new Map,D={platform:so,...u},p={...D.platform,_c:l};return Wa(f,s,{...D,platform:p})};function uo(){return{name:"matchWidth",fn({elements:f,rects:s}){return f.floating.style.width=`${s.reference.width}px`,{reset:{rects:!0}}}}}function ao(){return{name:"makeItFloat",fn({elements:f,x:s,y:u}){return f.floating.style.top=`${u}px`,f.floating.style.left=`${s}px`,{}}}}function oo(f,s){return(f%s+s)%s}class lo extends _a{constructor(s,u,l){super(s,l??u.parentElement??document.body),this.inputEl=u,this.registerListeners()}#e=[];#t=[];#n=-1;open(){super.open(),io(this.inputEl,this.wrapperEl,{placement:"bottom-start",middleware:[uo(),ao()]})}close(){super.close(),this.#n=-1,this.#e=[],this.#t=[]}registerListeners(){super.registerListeners(),this.scope.register([],"Enter",s=>this.onKeypress(s,"enter")),this.scope.register([],"ArrowUp",s=>this.onKeypress(s,"up")),this.scope.register([],"ArrowDown",s=>this.onKeypress(s,"down")),this.wrapperEl.addEventListener("mousedown",()=>!1),this.wrapperEl.on("click",".suggestion-item",this.onClick.bind(this)),this.inputEl.addEventListener("blur",this.onBlur.bind(this)),this.inputEl.addEventListener("focus",this.onInputChange.bind(this)),this.inputEl.addEventListener("input",this.onInputChange.bind(this))}onBlur(){setTimeout(()=>this.close(),100)}onInputChange(s){if(!(s.currentTarget instanceof HTMLInputElement)&&!(s.currentTarget instanceof HTMLTextAreaElement))return;const u=this.getSuggestions(s.currentTarget.value);if(u.length>0){this.wrapperEl.empty(),this.#e=u,this.#t=u.map(l=>{const D=this.wrapperEl.createDiv("suggestion-item");return this.renderSuggestion(l,D),D}),this.open();return}this.close()}onKeypress(s,u){if(!s.isComposing)switch(s.preventDefault(),u){case"enter":this.selectSuggestion(this.#e[this.#n]);break;case"up":this.focusSuggestion(this.#n-1,!0);break;case"down":this.focusSuggestion(this.#n+1,!0);break}}onClick(s,u){s.preventDefault(),this.focusSuggestion(this.#t.indexOf(u),!1),this.selectSuggestion(this.#e[this.#n])}focusSuggestion(s,u){const l=oo(s,this.#e.length),D=this.#t[this.#n],p=this.#t[l];D.removeClass("is-selected"),p.addClass("is-selected"),this.#n=l,u&&p.scrollIntoView(!1)}}function co(f,s){return fo(f,s?u=>u instanceof U.TFolder&&s(u):u=>u instanceof U.TFolder)}function fo(f,s){let u=f.getAllLoadedFiles();return s&&(u=u.filter(s)),u.sort((l,D)=>l.path.localeCompare(D.path))}function Do(f,s,u){const l=ho(f,s),D=p=>p instanceof U.TFile;return l.children.filter(D)}function ho(f,s){const u=f.getAbstractFileByPath(U.normalizePath(s));if(!u)throw new Error(`Folder "${s}" doesn't exist.`);if(!(u instanceof U.TFolder))throw new Error(`${s} is a file, not a folder.`);return u}class Gs extends lo{getSuggestions(s){const u=s.trim().toLowerCase();return co(this.app.vault,l=>l.path.toLowerCase().contains(u))}renderSuggestion(s,u){u.setText(s.path)}selectSuggestion(s){this.inputEl.value=s.path,this.inputEl.trigger("input"),this.close()}}class ur{#e;#t;constructor(s){this.#t=s.app.vault,this.#e=s}getResourcePath(s){return this.#e.app.vault.getResourcePath(s)}getAbsolutePath(s){return Hs.resolve(this.#t.adapter.basePath,s)}getCachePath(...s){return this.join(this.#e.settings.cache_folder,"__components__",...s)}join(...s){return U.normalizePath(Hs.join(...s))}resolvePath(s){return String.isString(s)?s:s.path}resolveFile(s){return s instanceof U.TFile?s:this.#t.getFileByPath(s)}async#n(s){return await this.#t.adapter.exists(s)}async#r(s){return!await this.#t.adapter.exists(s)}async exists(s){return this.#n(s)}async missing(s){return this.#r(s)}async remove(s){await this.#t.adapter.remove(s)}async read(s){return await this.#t.adapter.read(s)}async edit(s,u){const l=this.resolvePath(s),D=await this.#t.adapter.read(l);await this.#t.adapter.write(l,u(D))}async copy(s,u,l){const D=this.resolvePath(s);if(!l)return this.#t.adapter.copy(D,u);const p=await this.#t.adapter.read(D);await this.#t.adapter.write(u,l(p))}async renewFolder(s){const u=this.resolvePath(s);await this.#n(u)&&await this.#t.adapter.rmdir(u,!0),await this.#r(u)&&await this.#t.adapter.mkdir(u)}async getFileHash(s,u=6){const l=this.resolvePath(s),D=await this.#t.adapter.read(l),p=ni.createHash("sha256").update(D).digest("hex");return u<1?p:p.substring(0,u)}}class bt{_values=new Map;clear(){this._values=new Map}keys(){return this._values.keys()}*keysWithValue(s){if(typeof s!="function"){for(const[u,l]of this._values.entries())l.includes(s)&&(yield u);return}for(const[u,l]of this._values.entries())l.some(s)&&(yield u)}values(){return this._values.values()}entries(){return this._values.entries()}has(s){return this._values.has(s)}hasValue(s){for(const u of this._values.values())if(u.includes(s))return!0;return!1}hasKeyValue(s,u){return this.get(s).includes(u)}get(s){return this._values.get(s)??[]}getFirst(s){return this.get(s).first()}store(s){this.has(s)||this._values.set(s,[])}prepend(s,u){const l=this.get(s);l.unshift(u),this._values.set(s,l.unique())}push(s,u){const l=this.get(s).reverse();l.unshift(u),this._values.set(s,l.unique().reverse())}static fromReversedObject(s){const u=new bt;for(const[l,D]of Object.entries(s))u.push(D,l);return u}}function mi(f){return typeof f=="object"&&f!==null}function mo(f){return f.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}function po(f){return ni.createHash("sha256").update(f).digest("hex").substring(0,64)}function go(f){const s=yo(f.settings);return{components_enabled:s,components_matchers:Eo(f.settings,s)}}function Fo(f){return f.split(/[|;,\s]+/gi).reduce((s,u)=>(u=u.replace(/\W*/gi,""),u.length>0&&!s.includes(u)&&s.push(u),s),[])}function yo(f){const s=new bt;for(const u of f.components_config)if(u.enabled)for(const l of Fo(u.names))s.hasValue(l)||s.push(u.id,l);return s}function Eo(f,s){const u=[];for(const l of f.components_config)l.enabled&&u.push({id:l.id,path:l.path,test:[].contains.bind(s.get(l.id))});return u}function wo(f,s,u){const l=Do(f,s);return l.sort((D,p)=>D.path.localeCompare(p.path,"en")),l.map(D=>{const p=u.find(y=>y.id===D.name);return{id:D.name,path:D.path,names:p?.names??D.basename.replaceAll(".","_"),enabled:p?.enabled??!1}})}function Co(f,s){return createEl(f,void 0,u=>u.append(s))}function Js(f,s,u){return f.createEl(s,void 0,l=>l.append(u))}class bo{#e;#t;#n=[];constructor(s,u){this.#e=s,this.#l(u),this.#t=u.createDiv("components-list"),this.#u()}async#r(s){this.#e.settings.components_config=s,await this.#e.saveSettings(),this.#c()}#s(s,u){const l=this.#e.settings.components_config.map(D=>s.includes(D.id)?{...D,enabled:u}:D);this.#r(l)}#i(s,u,l){const D=this.#e.settings.components_config.map(p=>p.id===s?{...p,[u]:l}:p);this.#r(D)}#u(){const s=wo(this.#e.app.vault,this.#e.settings.components_folder,this.#e.settings.components_config);this.#n=s.map(u=>u.id),this.#r(s)}#l(s){let u=null;const l=new U.Setting(s);l.setName("Vault Components"),l.setDesc("The entries are components found on the vault."),l.addExtraButton(D=>{D.setIcon("reset").setTooltip("Refresh"),D.onClick(()=>{this.#u(),u?.setValue("")})}),l.addSearch(D=>{u=D,D.onChange(p=>{let y=!1;const b=[];for(const g of this.#e.settings.components_config){const I=p?g.path.contains(p):!0,R=this.#n.includes(g.id);I?(b.push(g.id),R||(y=!0)):R&&(y=!0)}y&&(this.#n=b,this.#c())})}),l.addExtraButton(D=>{D.setIcon("badge-check").setTooltip("Enable Listed Components"),D.onClick(()=>this.#s(this.#n,!0))}),l.addExtraButton(D=>{D.setIcon("badge-x").setTooltip("Disable Listed Components"),D.onClick(()=>this.#s(this.#n,!1))})}#c(){this.#t.empty();for(const s of this.#e.settings.components_config){if(!this.#n.includes(s.id))continue;const u=new U.Setting(this.#t);u.setName(this.#f(s.id,s.enabled)),u.setDesc(this.#a(s.id)),u.addExtraButton(l=>{l.setTooltip("Edit names"),l.setIcon("pencil"),l.onClick(()=>this.#d(u,s))}),u.addToggle(l=>{l.setTooltip("Is enabled?"),l.setValue(s.enabled),l.onChange(this.#s.bind(this,[s.id]))})}}#f(s,u){const l=createFragment();return l.append(`${u?"Enabled":"Disabled"} component: `,Co("code",s)),l}#a(s){const u=createFragment(),l=u.createDiv("components-names");l.append("Usage: ");const D=this.#e.state.components_enabled.get(s);if(D.length===0)return Js(l,"b","Not available"),u;for(let p=0;p<D.length;p++)p>0&&l.appendText(" | "),Js(l,"code",D[p]);return u}#o=null;#d(s,u){this.#o?.remove(),this.#o=s.settingEl.createDiv("component-form");let l=null;const D=new U.Setting(this.#o);D.addTextArea(p=>{l=p,p.setValue(u.names)}),D.addButton(p=>{p.setButtonText("Cancel"),p.onClick(()=>this.#o?.remove())}),D.addButton(p=>{p.setButtonText("Save"),p.onClick(()=>{this.#i(u.id,"names",l?.getValue()??"")})})}}const vo={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"};function yn(f,s){return createFragment(u=>{u.appendText(s+". Check the "),u.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-components/blob/main/docs/settings.md#${mo(f)}`}),u.appendText(".")})}class So extends U.PluginSettingTab{#e;#t;constructor(s){super(s.app,s),this.#e=s,this.#t=new ur(s)}async#n(s,u){this.#e.settings[s]=u,await this.#e.saveSettings()}display(){this.containerEl.empty(),this.containerEl.addClass("components-settings"),new U.Setting(this.containerEl).setName("Plugin Settings").setHeading(),this.#r(),new U.Setting(this.containerEl).setName("Codeblock Settings").setHeading(),this.#s(),new U.Setting(this.containerEl).setName("Component Settings").setHeading(),this.#i(),new bo(this.#e,this.containerEl)}#r(){const s=new U.Setting(this.containerEl);s.setName("Plugging LogLevel"),s.setDesc(yn("Plugging LogLevel","To check the plugin logs")),s.addDropdown(l=>{l.addOptions(vo),l.setValue(this.#e.settings.plugin_level),l.onChange(this.#n.bind(this,"plugin_level"))});const u=new U.Setting(this.containerEl);u.setName("Design mode"),u.setDesc(yn("Design mode","Enable design mode only if you're editing your components code. It will not disabled until you close the app")),u.addToggle(l=>{const D=this.#e.isDesignModeEnabled;l.setDisabled(D),l.setValue(D),l.onChange(()=>{D||(l.setDisabled(!0),this.#e.enableDesignMode())})})}#s(){const s=new U.Setting(this.containerEl);s.setName("Custom Codeblocks"),s.setDesc(yn("Custom Codeblocks","Allows the usage of the components custom names as codeblocks identifiers")),s.addToggle(p=>{p.setValue(this.#e.settings.enable_codeblocks),p.onChange(this.#n.bind(this,"enable_codeblocks"))});let u=null;const l=new U.Setting(this.containerEl);l.setName("Enable Codeblocks Separators"),l.setDesc(yn("Enable Codeblocks Separators","Allows the usage of separators inside codeblocks")),l.addToggle(p=>{p.setValue(this.#e.settings.enable_separators),p.onChange(y=>{this.#n("enable_separators",y),u?.setDisabled(!y)})});const D=new U.Setting(this.containerEl);D.setName("Codeblocks Separator"),D.setDesc("Separator to use inside codeblocks."),D.addText(p=>{u=p,p.setDisabled(!this.#e.settings.enable_separators),p.setValue(this.#e.settings.usage_separator),p.onChange(this.#n.bind(this,"usage_separator"))})}#i(){const s=(g,I,R)=>{I.onChange(async H=>{if(R.empty(),!H||H==="/"||await this.#t.missing(H)){I.inputEl.classList.add("invalid-value"),R.appendText("Invalid path.");return}I.inputEl.classList.remove("invalid-value"),this.#n(g,H)})},u=createFragment();u.append("Files in this directory will be taken as components.");const l=u.createEl("p","invalid-value"),D=new U.Setting(this.containerEl);D.setName("Components templates folder"),D.setDesc(u),D.addText(g=>{new Gs(this.app,g.inputEl,this.containerEl),g.setPlaceholder("Example: folder1/folder2"),g.setValue(this.#e.settings.components_folder),s("components_folder",g,l)});const p=createFragment();p.append("Folder used to cache pre-processed components.");const y=p.createEl("p","invalid-value"),b=new U.Setting(this.containerEl);b.setName("Components cache folder"),b.setDesc(p),b.addText(g=>{new Gs(this.app,g.inputEl,this.containerEl),g.setPlaceholder("Example: folder1/folder2"),g.setValue(this.#e.settings.cache_folder),s("cache_folder",g,y)})}}class it extends Error{name="ComponentError";code;constructor(s,u){super(s),this.code=u.code,this.cause=u.cause}toString(){if(!this.cause)return`${this.name}: ${this.message}`;const s=`${this.name}: ${this.message}, cause:

`;return this.cause instanceof Error?`${s}${this.cause}`:`${s}${JSON.stringify(this.cause)}`}}class Ks extends it{constructor(s){super(s,{code:"disabled-component"})}}class To{id="yaml";test(s){return s.startsWith("-")?!0:/^\w+:/.test(s)}parse(s,u){return U.parseYaml(s)}}class xo{id="json";test(s){return/^\s*[[{]/gi.test(s)}parse(s,u){return JSON.parse(s)}}var Qs=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},Te={},Xs;function Oo(){if(Xs)return Te;Xs=1,Object.defineProperty(Te,"__esModule",{value:!0});class f extends Error{}class s extends f{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class u extends f{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class l extends f{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class D extends f{}class p extends f{constructor(e){super(`Invalid unit ${e}`)}}class y extends f{}class b extends f{constructor(){super("Zone is an abstract class")}}const g="numeric",I="short",R="long",H={year:g,month:g,day:g},K={year:g,month:I,day:g},Y={year:g,month:I,day:g,weekday:I},fe={year:g,month:R,day:g},ie={year:g,month:R,day:g,weekday:R},me={hour:g,minute:g},Ge={hour:g,minute:g,second:g},Je={hour:g,minute:g,second:g,timeZoneName:I},ut={hour:g,minute:g,second:g,timeZoneName:R},at={hour:g,minute:g,hourCycle:"h23"},ke={hour:g,minute:g,second:g,hourCycle:"h23"},fr={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:I},dr={hour:g,minute:g,second:g,hourCycle:"h23",timeZoneName:R},Dr={year:g,month:g,day:g,hour:g,minute:g},hr={year:g,month:g,day:g,hour:g,minute:g,second:g},mr={year:g,month:I,day:g,hour:g,minute:g},pr={year:g,month:I,day:g,hour:g,minute:g,second:g},gi={year:g,month:I,day:g,weekday:I,hour:g,minute:g},gr={year:g,month:R,day:g,hour:g,minute:g,timeZoneName:I},Fr={year:g,month:R,day:g,hour:g,minute:g,second:g,timeZoneName:I},yr={year:g,month:R,day:g,weekday:R,hour:g,minute:g,timeZoneName:R},Er={year:g,month:R,day:g,weekday:R,hour:g,minute:g,second:g,timeZoneName:R};class St{get type(){throw new b}get name(){throw new b}get ianaName(){return this.name}get isUniversal(){throw new b}offsetName(e,n){throw new b}formatOffset(e,n){throw new b}offset(e){throw new b}equals(e){throw new b}get isValid(){throw new b}}let vn=null;class Ut extends St{static get instance(){return vn===null&&(vn=new Ut),vn}get type(){return"system"}get name(){return new Intl.DateTimeFormat().resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:n,locale:r}){return Mr(e,n,r)}formatOffset(e,n){return kt(this.offset(e),n)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return e.type==="system"}get isValid(){return!0}}let Zt={};function Fi(t){return Zt[t]||(Zt[t]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),Zt[t]}const yi={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};function Ei(t,e){const n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,i,a,o,m,E,C,O]=r;return[o,i,a,m,E,C,O]}function wi(t,e){const n=t.formatToParts(e),r=[];for(let i=0;i<n.length;i++){const{type:a,value:o}=n[i],m=yi[a];a==="era"?r[m]=o:j(m)||(r[m]=parseInt(o,10))}return r}let qt={};class Re extends St{static create(e){return qt[e]||(qt[e]=new Re(e)),qt[e]}static resetCache(){qt={},Zt={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch{return!1}}constructor(e){super(),this.zoneName=e,this.valid=Re.isValidZone(e)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:n,locale:r}){return Mr(e,n,r,this.name)}formatOffset(e,n){return kt(this.offset(e),n)}offset(e){const n=new Date(e);if(isNaN(n))return NaN;const r=Fi(this.name);let[i,a,o,m,E,C,O]=r.formatToParts?wi(r,n):Ei(r,n);m==="BC"&&(i=-Math.abs(i)+1);const N=Jt({year:i,month:a,day:o,hour:E===24?0:E,minute:C,second:O,millisecond:0});let M=+n;const P=M%1e3;return M-=P>=0?P:1e3+P,(N-M)/(60*1e3)}equals(e){return e.type==="iana"&&e.name===this.name}get isValid(){return this.valid}}let wr={};function Ci(t,e={}){const n=JSON.stringify([t,e]);let r=wr[n];return r||(r=new Intl.ListFormat(t,e),wr[n]=r),r}let Sn={};function Tn(t,e={}){const n=JSON.stringify([t,e]);let r=Sn[n];return r||(r=new Intl.DateTimeFormat(t,e),Sn[n]=r),r}let xn={};function bi(t,e={}){const n=JSON.stringify([t,e]);let r=xn[n];return r||(r=new Intl.NumberFormat(t,e),xn[n]=r),r}let On={};function vi(t,e={}){const{base:n,...r}=e,i=JSON.stringify([t,r]);let a=On[i];return a||(a=new Intl.RelativeTimeFormat(t,e),On[i]=a),a}let Tt=null;function Si(){return Tt||(Tt=new Intl.DateTimeFormat().resolvedOptions().locale,Tt)}function Ti(t){const e=t.indexOf("-x-");e!==-1&&(t=t.substring(0,e));const n=t.indexOf("-u-");if(n===-1)return[t];{let r,i;try{r=Tn(t).resolvedOptions(),i=t}catch{const E=t.substring(0,n);r=Tn(E).resolvedOptions(),i=E}const{numberingSystem:a,calendar:o}=r;return[i,a,o]}}function xi(t,e,n){return(n||e)&&(t.includes("-u-")||(t+="-u"),n&&(t+=`-ca-${n}`),e&&(t+=`-nu-${e}`)),t}function Oi(t){const e=[];for(let n=1;n<=12;n++){const r=A.utc(2009,n,1);e.push(t(r))}return e}function ki(t){const e=[];for(let n=1;n<=7;n++){const r=A.utc(2016,11,13+n);e.push(t(r))}return e}function zt(t,e,n,r){const i=t.listingMode();return i==="error"?null:i==="en"?n(e):r(e)}function Bi(t){return t.numberingSystem&&t.numberingSystem!=="latn"?!1:t.numberingSystem==="latn"||!t.locale||t.locale.startsWith("en")||new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem==="latn"}class Mi{constructor(e,n,r){this.padTo=r.padTo||0,this.floor=r.floor||!1;const{padTo:i,floor:a,...o}=r;if(!n||Object.keys(o).length>0){const m={useGrouping:!1,...r};r.padTo>0&&(m.minimumIntegerDigits=r.padTo),this.inf=bi(e,m)}}format(e){if(this.inf){const n=this.floor?Math.floor(e):e;return this.inf.format(n)}else{const n=this.floor?Math.floor(e):Mn(e,3);return X(n,this.padTo)}}}class Ai{constructor(e,n,r){this.opts=r,this.originalZone=void 0;let i;if(this.opts.timeZone)this.dt=e;else if(e.zone.type==="fixed"){const o=-1*(e.offset/60),m=o>=0?`Etc/GMT+${o}`:`Etc/GMT${o}`;e.offset!==0&&Re.create(m).valid?(i=m,this.dt=e):(i="UTC",this.dt=e.offset===0?e:e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone)}else e.zone.type==="system"?this.dt=e:e.zone.type==="iana"?(this.dt=e,i=e.zone.name):(i="UTC",this.dt=e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone);const a={...this.opts};a.timeZone=a.timeZone||i,this.dtf=Tn(n,a)}format(){return this.originalZone?this.formatToParts().map(({value:e})=>e).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const e=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?e.map(n=>{if(n.type==="timeZoneName"){const r=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...n,value:r}}else return n}):e}resolvedOptions(){return this.dtf.resolvedOptions()}}class Ni{constructor(e,n,r){this.opts={style:"long",...r},!n&&kr()&&(this.rtf=vi(e,r))}format(e,n){return this.rtf?this.rtf.format(e,n):Ji(n,e,this.opts.numeric,this.opts.style!=="long")}formatToParts(e,n){return this.rtf?this.rtf.formatToParts(e,n):[]}}class z{static fromOpts(e){return z.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)}static create(e,n,r,i=!1){const a=e||Q.defaultLocale,o=a||(i?"en-US":Si()),m=n||Q.defaultNumberingSystem,E=r||Q.defaultOutputCalendar;return new z(o,m,E,a)}static resetCache(){Tt=null,Sn={},xn={},On={}}static fromObject({locale:e,numberingSystem:n,outputCalendar:r}={}){return z.create(e,n,r)}constructor(e,n,r,i){const[a,o,m]=Ti(e);this.locale=a,this.numberingSystem=n||o||null,this.outputCalendar=r||m||null,this.intl=xi(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=i,this.fastNumbersCached=null}get fastNumbers(){return this.fastNumbersCached==null&&(this.fastNumbersCached=Bi(this)),this.fastNumbersCached}listingMode(){const e=this.isEnglish(),n=(this.numberingSystem===null||this.numberingSystem==="latn")&&(this.outputCalendar===null||this.outputCalendar==="gregory");return e&&n?"en":"intl"}clone(e){return!e||Object.getOwnPropertyNames(e).length===0?this:z.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1)}redefaultToEN(e={}){return this.clone({...e,defaultToEN:!0})}redefaultToSystem(e={}){return this.clone({...e,defaultToEN:!1})}months(e,n=!1){return zt(this,e,Ir,()=>{const r=n?{month:e,day:"numeric"}:{month:e},i=n?"format":"standalone";return this.monthsCache[i][e]||(this.monthsCache[i][e]=Oi(a=>this.extract(a,r,"month"))),this.monthsCache[i][e]})}weekdays(e,n=!1){return zt(this,e,_r,()=>{const r=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},i=n?"format":"standalone";return this.weekdaysCache[i][e]||(this.weekdaysCache[i][e]=ki(a=>this.extract(a,r,"weekday"))),this.weekdaysCache[i][e]})}meridiems(){return zt(this,void 0,()=>$r,()=>{if(!this.meridiemCache){const e={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[A.utc(2016,11,13,9),A.utc(2016,11,13,19)].map(n=>this.extract(n,e,"dayperiod"))}return this.meridiemCache})}eras(e){return zt(this,e,Vr,()=>{const n={era:e};return this.eraCache[e]||(this.eraCache[e]=[A.utc(-40,1,1),A.utc(2017,1,1)].map(r=>this.extract(r,n,"era"))),this.eraCache[e]})}extract(e,n,r){const i=this.dtFormatter(e,n),a=i.formatToParts(),o=a.find(m=>m.type.toLowerCase()===r);return o?o.value:null}numberFormatter(e={}){return new Mi(this.intl,e.forceSimple||this.fastNumbers,e)}dtFormatter(e,n={}){return new Ai(e,this.intl,n)}relFormatter(e={}){return new Ni(this.intl,this.isEnglish(),e)}listFormatter(e={}){return Ci(this.intl,e)}isEnglish(){return this.locale==="en"||this.locale.toLowerCase()==="en-us"||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}}let kn=null;class le extends St{static get utcInstance(){return kn===null&&(kn=new le(0)),kn}static instance(e){return e===0?le.utcInstance:new le(e)}static parseSpecifier(e){if(e){const n=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(n)return new le(Qt(n[1],n[2]))}return null}constructor(e){super(),this.fixed=e}get type(){return"fixed"}get name(){return this.fixed===0?"UTC":`UTC${kt(this.fixed,"narrow")}`}get ianaName(){return this.fixed===0?"Etc/UTC":`Etc/GMT${kt(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(e,n){return kt(this.fixed,n)}get isUniversal(){return!0}offset(){return this.fixed}equals(e){return e.type==="fixed"&&e.fixed===this.fixed}get isValid(){return!0}}class Ii extends St{constructor(e){super(),this.zoneName=e}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function He(t,e){if(j(t)||t===null)return e;if(t instanceof St)return t;if(Li(t)){const n=t.toLowerCase();return n==="default"?e:n==="local"||n==="system"?Ut.instance:n==="utc"||n==="gmt"?le.utcInstance:le.parseSpecifier(n)||Re.create(t)}else return Ke(t)?le.instance(t):typeof t=="object"&&"offset"in t&&typeof t.offset=="function"?t:new Ii(t)}let Cr=()=>Date.now(),br="system",vr=null,Sr=null,Tr=null,xr=60,Or;class Q{static get now(){return Cr}static set now(e){Cr=e}static set defaultZone(e){br=e}static get defaultZone(){return He(br,Ut.instance)}static get defaultLocale(){return vr}static set defaultLocale(e){vr=e}static get defaultNumberingSystem(){return Sr}static set defaultNumberingSystem(e){Sr=e}static get defaultOutputCalendar(){return Tr}static set defaultOutputCalendar(e){Tr=e}static get twoDigitCutoffYear(){return xr}static set twoDigitCutoffYear(e){xr=e%100}static get throwOnInvalid(){return Or}static set throwOnInvalid(e){Or=e}static resetCaches(){z.resetCache(),Re.resetCache()}}function j(t){return typeof t>"u"}function Ke(t){return typeof t=="number"}function Yt(t){return typeof t=="number"&&t%1===0}function Li(t){return typeof t=="string"}function Ri(t){return Object.prototype.toString.call(t)==="[object Date]"}function kr(){try{return typeof Intl<"u"&&!!Intl.RelativeTimeFormat}catch{return!1}}function _i(t){return Array.isArray(t)?t:[t]}function Br(t,e,n){if(t.length!==0)return t.reduce((r,i)=>{const a=[e(i),i];return r&&n(r[0],a[0])===r[0]?r:a},null)[1]}function $i(t,e){return e.reduce((n,r)=>(n[r]=t[r],n),{})}function ot(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function _e(t,e,n){return Yt(t)&&t>=e&&t<=n}function Vi(t,e){return t-e*Math.floor(t/e)}function X(t,e=2){const n=t<0;let r;return n?r="-"+(""+-t).padStart(e,"0"):r=(""+t).padStart(e,"0"),r}function Ue(t){if(!(j(t)||t===null||t===""))return parseInt(t,10)}function Qe(t){if(!(j(t)||t===null||t===""))return parseFloat(t)}function Bn(t){if(!(j(t)||t===null||t==="")){const e=parseFloat("0."+t)*1e3;return Math.floor(e)}}function Mn(t,e,n=!1){const r=10**e;return(n?Math.trunc:Math.round)(t*r)/r}function xt(t){return t%4===0&&(t%100!==0||t%400===0)}function Ot(t){return xt(t)?366:365}function Gt(t,e){const n=Vi(e-1,12)+1,r=t+(e-n)/12;return n===2?xt(r)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function Jt(t){let e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e),e.setUTCFullYear(t.year,t.month-1,t.day)),+e}function Kt(t){const e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,r=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return e===4||r===3?53:52}function An(t){return t>99?t:t>Q.twoDigitCutoffYear?1900+t:2e3+t}function Mr(t,e,n,r=null){const i=new Date(t),a={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(a.timeZone=r);const o={timeZoneName:e,...a},m=new Intl.DateTimeFormat(n,o).formatToParts(i).find(E=>E.type.toLowerCase()==="timezonename");return m?m.value:null}function Qt(t,e){let n=parseInt(t,10);Number.isNaN(n)&&(n=0);const r=parseInt(e,10)||0,i=n<0||Object.is(n,-0)?-r:r;return n*60+i}function Ar(t){const e=Number(t);if(typeof t=="boolean"||t===""||Number.isNaN(e))throw new y(`Invalid unit value ${t}`);return e}function Xt(t,e){const n={};for(const r in t)if(ot(t,r)){const i=t[r];if(i==null)continue;n[e(r)]=Ar(i)}return n}function kt(t,e){const n=Math.trunc(Math.abs(t/60)),r=Math.trunc(Math.abs(t%60)),i=t>=0?"+":"-";switch(e){case"short":return`${i}${X(n,2)}:${X(r,2)}`;case"narrow":return`${i}${n}${r>0?`:${r}`:""}`;case"techie":return`${i}${X(n,2)}${X(r,2)}`;default:throw new RangeError(`Value format ${e} is out of range for property format`)}}function en(t){return $i(t,["hour","minute","second","millisecond"])}const Pi=["January","February","March","April","May","June","July","August","September","October","November","December"],Nr=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ji=["J","F","M","A","M","J","J","A","S","O","N","D"];function Ir(t){switch(t){case"narrow":return[...ji];case"short":return[...Nr];case"long":return[...Pi];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const Lr=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Rr=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Wi=["M","T","W","T","F","S","S"];function _r(t){switch(t){case"narrow":return[...Wi];case"short":return[...Rr];case"long":return[...Lr];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const $r=["AM","PM"],Hi=["Before Christ","Anno Domini"],Ui=["BC","AD"],Zi=["B","A"];function Vr(t){switch(t){case"narrow":return[...Zi];case"short":return[...Ui];case"long":return[...Hi];default:return null}}function qi(t){return $r[t.hour<12?0:1]}function zi(t,e){return _r(e)[t.weekday-1]}function Yi(t,e){return Ir(e)[t.month-1]}function Gi(t,e){return Vr(e)[t.year<0?0:1]}function Ji(t,e,n="always",r=!1){const i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},a=["hours","minutes","seconds"].indexOf(t)===-1;if(n==="auto"&&a){const L=t==="days";switch(e){case 1:return L?"tomorrow":`next ${i[t][0]}`;case-1:return L?"yesterday":`last ${i[t][0]}`;case 0:return L?"today":`this ${i[t][0]}`}}const o=Object.is(e,-0)||e<0,m=Math.abs(e),E=m===1,C=i[t],O=r?E?C[1]:C[2]||C[1]:E?i[t][0]:t;return o?`${m} ${O} ago`:`in ${m} ${O}`}function Pr(t,e){let n="";for(const r of t)r.literal?n+=r.val:n+=e(r.val);return n}const Ki={D:H,DD:K,DDD:fe,DDDD:ie,t:me,tt:Ge,ttt:Je,tttt:ut,T:at,TT:ke,TTT:fr,TTTT:dr,f:Dr,ff:mr,fff:gr,ffff:yr,F:hr,FF:pr,FFF:Fr,FFFF:Er};class ue{static create(e,n={}){return new ue(e,n)}static parseFormat(e){let n=null,r="",i=!1;const a=[];for(let o=0;o<e.length;o++){const m=e.charAt(o);m==="'"?(r.length>0&&a.push({literal:i||/^\s+$/.test(r),val:r}),n=null,r="",i=!i):i||m===n?r+=m:(r.length>0&&a.push({literal:/^\s+$/.test(r),val:r}),r=m,n=m)}return r.length>0&&a.push({literal:i||/^\s+$/.test(r),val:r}),a}static macroTokenToFormatOpts(e){return Ki[e]}constructor(e,n){this.opts=n,this.loc=e,this.systemLoc=null}formatWithSystemDefault(e,n){return this.systemLoc===null&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,{...this.opts,...n}).format()}dtFormatter(e,n={}){return this.loc.dtFormatter(e,{...this.opts,...n})}formatDateTime(e,n){return this.dtFormatter(e,n).format()}formatDateTimeParts(e,n){return this.dtFormatter(e,n).formatToParts()}formatInterval(e,n){return this.dtFormatter(e.start,n).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate())}resolvedOptions(e,n){return this.dtFormatter(e,n).resolvedOptions()}num(e,n=0){if(this.opts.forceSimple)return X(e,n);const r={...this.opts};return n>0&&(r.padTo=n),this.loc.numberFormatter(r).format(e)}formatDateTimeFromString(e,n){const r=this.loc.listingMode()==="en",i=this.loc.outputCalendar&&this.loc.outputCalendar!=="gregory",a=(M,P)=>this.loc.extract(e,M,P),o=M=>e.isOffsetFixed&&e.offset===0&&M.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,M.format):"",m=()=>r?qi(e):a({hour:"numeric",hourCycle:"h12"},"dayperiod"),E=(M,P)=>r?Yi(e,M):a(P?{month:M}:{month:M,day:"numeric"},"month"),C=(M,P)=>r?zi(e,M):a(P?{weekday:M}:{weekday:M,month:"long",day:"numeric"},"weekday"),O=M=>{const P=ue.macroTokenToFormatOpts(M);return P?this.formatWithSystemDefault(e,P):M},L=M=>r?Gi(e,M):a({era:M},"era"),N=M=>{switch(M){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12===0?12:e.hour%12);case"hh":return this.num(e.hour%12===0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return o({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return o({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return o({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this.loc.locale});case"z":return e.zoneName;case"a":return m();case"d":return i?a({day:"numeric"},"day"):this.num(e.day);case"dd":return i?a({day:"2-digit"},"day"):this.num(e.day,2);case"c":return this.num(e.weekday);case"ccc":return C("short",!0);case"cccc":return C("long",!0);case"ccccc":return C("narrow",!0);case"E":return this.num(e.weekday);case"EEE":return C("short",!1);case"EEEE":return C("long",!1);case"EEEEE":return C("narrow",!1);case"L":return i?a({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return i?a({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return E("short",!0);case"LLLL":return E("long",!0);case"LLLLL":return E("narrow",!0);case"M":return i?a({month:"numeric"},"month"):this.num(e.month);case"MM":return i?a({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return E("short",!1);case"MMMM":return E("long",!1);case"MMMMM":return E("narrow",!1);case"y":return i?a({year:"numeric"},"year"):this.num(e.year);case"yy":return i?a({year:"2-digit"},"year"):this.num(e.year.toString().slice(-2),2);case"yyyy":return i?a({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return i?a({year:"numeric"},"year"):this.num(e.year,6);case"G":return L("short");case"GG":return L("long");case"GGGGG":return L("narrow");case"kk":return this.num(e.weekYear.toString().slice(-2),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return O(M)}};return Pr(ue.parseFormat(n),N)}formatDurationFromString(e,n){const r=E=>{switch(E[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},i=E=>C=>{const O=r(C);return O?this.num(E.get(O),C.length):C},a=ue.parseFormat(n),o=a.reduce((E,{literal:C,val:O})=>C?E:E.concat(O),[]),m=e.shiftTo(...o.map(r).filter(E=>E));return Pr(a,i(m))}}class Fe{constructor(e,n){this.reason=e,this.explanation=n}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const jr=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function lt(...t){const e=t.reduce((n,r)=>n+r.source,"");return RegExp(`^${e}$`)}function ct(...t){return e=>t.reduce(([n,r,i],a)=>{const[o,m,E]=a(e,i);return[{...n,...o},m||r,E]},[{},null,1]).slice(0,2)}function ft(t,...e){if(t==null)return[null,null];for(const[n,r]of e){const i=n.exec(t);if(i)return r(i)}return[null,null]}function Wr(...t){return(e,n)=>{const r={};let i;for(i=0;i<t.length;i++)r[t[i]]=Ue(e[n+i]);return[r,null,n+i]}}const Hr=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,Qi=`(?:${Hr.source}?(?:\\[(${jr.source})\\])?)?`,Nn=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,Ur=RegExp(`${Nn.source}${Qi}`),In=RegExp(`(?:T${Ur.source})?`),Xi=/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,eu=/(\d{4})-?W(\d\d)(?:-?(\d))?/,tu=/(\d{4})-?(\d{3})/,nu=Wr("weekYear","weekNumber","weekDay"),ru=Wr("year","ordinal"),su=/(\d{4})-(\d\d)-(\d\d)/,Zr=RegExp(`${Nn.source} ?(?:${Hr.source}|(${jr.source}))?`),iu=RegExp(`(?: ${Zr.source})?`);function dt(t,e,n){const r=t[e];return j(r)?n:Ue(r)}function uu(t,e){return[{year:dt(t,e),month:dt(t,e+1,1),day:dt(t,e+2,1)},null,e+3]}function Dt(t,e){return[{hours:dt(t,e,0),minutes:dt(t,e+1,0),seconds:dt(t,e+2,0),milliseconds:Bn(t[e+3])},null,e+4]}function Bt(t,e){const n=!t[e]&&!t[e+1],r=Qt(t[e+1],t[e+2]),i=n?null:le.instance(r);return[{},i,e+3]}function Mt(t,e){const n=t[e]?Re.create(t[e]):null;return[{},n,e+1]}const au=RegExp(`^T?${Nn.source}$`),ou=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function lu(t){const[e,n,r,i,a,o,m,E,C]=t,O=e[0]==="-",L=E&&E[0]==="-",N=(M,P=!1)=>M!==void 0&&(P||M&&O)?-M:M;return[{years:N(Qe(n)),months:N(Qe(r)),weeks:N(Qe(i)),days:N(Qe(a)),hours:N(Qe(o)),minutes:N(Qe(m)),seconds:N(Qe(E),E==="-0"),milliseconds:N(Bn(C),L)}]}const cu={GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Ln(t,e,n,r,i,a,o){const m={year:e.length===2?An(Ue(e)):Ue(e),month:Nr.indexOf(n)+1,day:Ue(r),hour:Ue(i),minute:Ue(a)};return o&&(m.second=Ue(o)),t&&(m.weekday=t.length>3?Lr.indexOf(t)+1:Rr.indexOf(t)+1),m}const fu=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function du(t){const[,e,n,r,i,a,o,m,E,C,O,L]=t,N=Ln(e,i,r,n,a,o,m);let M;return E?M=cu[E]:C?M=0:M=Qt(O,L),[N,new le(M)]}function Du(t){return t.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}const hu=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,mu=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,pu=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function qr(t){const[,e,n,r,i,a,o,m]=t;return[Ln(e,i,r,n,a,o,m),le.utcInstance]}function gu(t){const[,e,n,r,i,a,o,m]=t;return[Ln(e,m,n,r,i,a,o),le.utcInstance]}const Fu=lt(Xi,In),yu=lt(eu,In),Eu=lt(tu,In),wu=lt(Ur),zr=ct(uu,Dt,Bt,Mt),Cu=ct(nu,Dt,Bt,Mt),bu=ct(ru,Dt,Bt,Mt),vu=ct(Dt,Bt,Mt);function Su(t){return ft(t,[Fu,zr],[yu,Cu],[Eu,bu],[wu,vu])}function Tu(t){return ft(Du(t),[fu,du])}function xu(t){return ft(t,[hu,qr],[mu,qr],[pu,gu])}function Ou(t){return ft(t,[ou,lu])}const ku=ct(Dt);function Bu(t){return ft(t,[au,ku])}const Mu=lt(su,iu),Au=lt(Zr),Nu=ct(Dt,Bt,Mt);function Iu(t){return ft(t,[Mu,zr],[Au,Nu])}const Yr="Invalid Duration",Gr={weeks:{days:7,hours:7*24,minutes:7*24*60,seconds:7*24*60*60,milliseconds:7*24*60*60*1e3},days:{hours:24,minutes:24*60,seconds:24*60*60,milliseconds:24*60*60*1e3},hours:{minutes:60,seconds:60*60,milliseconds:60*60*1e3},minutes:{seconds:60,milliseconds:60*1e3},seconds:{milliseconds:1e3}},Lu={years:{quarters:4,months:12,weeks:52,days:365,hours:365*24,minutes:365*24*60,seconds:365*24*60*60,milliseconds:365*24*60*60*1e3},quarters:{months:3,weeks:13,days:91,hours:91*24,minutes:91*24*60,seconds:91*24*60*60,milliseconds:91*24*60*60*1e3},months:{weeks:4,days:30,hours:30*24,minutes:30*24*60,seconds:30*24*60*60,milliseconds:30*24*60*60*1e3},...Gr},pe=146097/400,ht=146097/4800,Ru={years:{quarters:4,months:12,weeks:pe/7,days:pe,hours:pe*24,minutes:pe*24*60,seconds:pe*24*60*60,milliseconds:pe*24*60*60*1e3},quarters:{months:3,weeks:pe/28,days:pe/4,hours:pe*24/4,minutes:pe*24*60/4,seconds:pe*24*60*60/4,milliseconds:pe*24*60*60*1e3/4},months:{weeks:ht/7,days:ht,hours:ht*24,minutes:ht*24*60,seconds:ht*24*60*60,milliseconds:ht*24*60*60*1e3},...Gr},Xe=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],_u=Xe.slice(0).reverse();function Ze(t,e,n=!1){const r={values:n?e.values:{...t.values,...e.values||{}},loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy,matrix:e.matrix||t.matrix};return new k(r)}function Jr(t,e){let n=e.milliseconds??0;for(const r of _u.slice(1))e[r]&&(n+=e[r]*t[r].milliseconds);return n}function Kr(t,e){const n=Jr(t,e)<0?-1:1;Xe.reduceRight((r,i)=>{if(j(e[i]))return r;if(r){const a=e[r]*n,o=t[i][r],m=Math.floor(a/o);e[i]+=m*n,e[r]-=m*o*n}return i},null),Xe.reduce((r,i)=>{if(j(e[i]))return r;if(r){const a=e[r]%1;e[r]-=a,e[i]+=a*t[r][i]}return i},null)}function $u(t){const e={};for(const[n,r]of Object.entries(t))r!==0&&(e[n]=r);return e}class k{constructor(e){const n=e.conversionAccuracy==="longterm"||!1;let r=n?Ru:Lu;e.matrix&&(r=e.matrix),this.values=e.values,this.loc=e.loc||z.create(),this.conversionAccuracy=n?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=r,this.isLuxonDuration=!0}static fromMillis(e,n){return k.fromObject({milliseconds:e},n)}static fromObject(e,n={}){if(e==null||typeof e!="object")throw new y(`Duration.fromObject: argument expected to be an object, got ${e===null?"null":typeof e}`);return new k({values:Xt(e,k.normalizeUnit),loc:z.fromObject(n),conversionAccuracy:n.conversionAccuracy,matrix:n.matrix})}static fromDurationLike(e){if(Ke(e))return k.fromMillis(e);if(k.isDuration(e))return e;if(typeof e=="object")return k.fromObject(e);throw new y(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,n){const[r]=Ou(e);return r?k.fromObject(r,n):k.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,n){const[r]=Bu(e);return r?k.fromObject(r,n):k.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,n=null){if(!e)throw new y("need to specify a reason the Duration is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(Q.throwOnInvalid)throw new l(r);return new k({invalid:r})}static normalizeUnit(e){const n={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e&&e.toLowerCase()];if(!n)throw new p(e);return n}static isDuration(e){return e&&e.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(e,n={}){const r={...n,floor:n.round!==!1&&n.floor!==!1};return this.isValid?ue.create(this.loc,r).formatDurationFromString(this,e):Yr}toHuman(e={}){if(!this.isValid)return Yr;const n=Xe.map(r=>{const i=this.values[r];return j(i)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...e,unit:r.slice(0,-1)}).format(i)}).filter(r=>r);return this.loc.listFormatter({type:"conjunction",style:e.listStyle||"narrow",...e}).format(n)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let e="P";return this.years!==0&&(e+=this.years+"Y"),(this.months!==0||this.quarters!==0)&&(e+=this.months+this.quarters*3+"M"),this.weeks!==0&&(e+=this.weeks+"W"),this.days!==0&&(e+=this.days+"D"),(this.hours!==0||this.minutes!==0||this.seconds!==0||this.milliseconds!==0)&&(e+="T"),this.hours!==0&&(e+=this.hours+"H"),this.minutes!==0&&(e+=this.minutes+"M"),(this.seconds!==0||this.milliseconds!==0)&&(e+=Mn(this.seconds+this.milliseconds/1e3,3)+"S"),e==="P"&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;const n=this.toMillis();return n<0||n>=864e5?null:(e={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...e,includeOffset:!1},A.fromMillis(n,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toString(){return this.toISO()}toMillis(){return this.isValid?Jr(this.matrix,this.values):NaN}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e),r={};for(const i of Xe)(ot(n.values,i)||ot(this.values,i))&&(r[i]=n.get(i)+this.get(i));return Ze(this,{values:r},!0)}minus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e);return this.plus(n.negate())}mapUnits(e){if(!this.isValid)return this;const n={};for(const r of Object.keys(this.values))n[r]=Ar(e(this.values[r],r));return Ze(this,{values:n},!0)}get(e){return this[k.normalizeUnit(e)]}set(e){if(!this.isValid)return this;const n={...this.values,...Xt(e,k.normalizeUnit)};return Ze(this,{values:n})}reconfigure({locale:e,numberingSystem:n,conversionAccuracy:r,matrix:i}={}){const o={loc:this.loc.clone({locale:e,numberingSystem:n}),matrix:i,conversionAccuracy:r};return Ze(this,o)}as(e){return this.isValid?this.shiftTo(e).get(e):NaN}normalize(){if(!this.isValid)return this;const e=this.toObject();return Kr(this.matrix,e),Ze(this,{values:e},!0)}rescale(){if(!this.isValid)return this;const e=$u(this.normalize().shiftToAll().toObject());return Ze(this,{values:e},!0)}shiftTo(...e){if(!this.isValid)return this;if(e.length===0)return this;e=e.map(o=>k.normalizeUnit(o));const n={},r={},i=this.toObject();let a;for(const o of Xe)if(e.indexOf(o)>=0){a=o;let m=0;for(const C in r)m+=this.matrix[C][o]*r[C],r[C]=0;Ke(i[o])&&(m+=i[o]);const E=Math.trunc(m);n[o]=E,r[o]=(m*1e3-E*1e3)/1e3}else Ke(i[o])&&(r[o]=i[o]);for(const o in r)r[o]!==0&&(n[a]+=o===a?r[o]:r[o]/this.matrix[a][o]);return Kr(this.matrix,n),Ze(this,{values:n},!0)}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const e={};for(const n of Object.keys(this.values))e[n]=this.values[n]===0?0:-this.values[n];return Ze(this,{values:e},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(e){if(!this.isValid||!e.isValid||!this.loc.equals(e.loc))return!1;function n(r,i){return r===void 0||r===0?i===void 0||i===0:r===i}for(const r of Xe)if(!n(this.values[r],e.values[r]))return!1;return!0}}const mt="Invalid Interval";function Vu(t,e){return!t||!t.isValid?G.invalid("missing or invalid start"):!e||!e.isValid?G.invalid("missing or invalid end"):e<t?G.invalid("end before start",`The end of an interval must be after its start, but you had start=${t.toISO()} and end=${e.toISO()}`):null}class G{constructor(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}static invalid(e,n=null){if(!e)throw new y("need to specify a reason the Interval is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(Q.throwOnInvalid)throw new u(r);return new G({invalid:r})}static fromDateTimes(e,n){const r=Nt(e),i=Nt(n),a=Vu(r,i);return a??new G({start:r,end:i})}static after(e,n){const r=k.fromDurationLike(n),i=Nt(e);return G.fromDateTimes(i,i.plus(r))}static before(e,n){const r=k.fromDurationLike(n),i=Nt(e);return G.fromDateTimes(i.minus(r),i)}static fromISO(e,n){const[r,i]=(e||"").split("/",2);if(r&&i){let a,o;try{a=A.fromISO(r,n),o=a.isValid}catch{o=!1}let m,E;try{m=A.fromISO(i,n),E=m.isValid}catch{E=!1}if(o&&E)return G.fromDateTimes(a,m);if(o){const C=k.fromISO(i,n);if(C.isValid)return G.after(a,C)}else if(E){const C=k.fromISO(r,n);if(C.isValid)return G.before(m,C)}}return G.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isInterval(e){return e&&e.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return this.invalidReason===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(e="milliseconds"){return this.isValid?this.toDuration(e).get(e):NaN}count(e="milliseconds"){if(!this.isValid)return NaN;const n=this.start.startOf(e),r=this.end.startOf(e);return Math.floor(r.diff(n,e).get(e))+(r.valueOf()!==this.end.valueOf())}hasSame(e){return this.isValid?this.isEmpty()||this.e.minus(1).hasSame(this.s,e):!1}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(e){return this.isValid?this.s>e:!1}isBefore(e){return this.isValid?this.e<=e:!1}contains(e){return this.isValid?this.s<=e&&this.e>e:!1}set({start:e,end:n}={}){return this.isValid?G.fromDateTimes(e||this.s,n||this.e):this}splitAt(...e){if(!this.isValid)return[];const n=e.map(Nt).filter(o=>this.contains(o)).sort(),r=[];let{s:i}=this,a=0;for(;i<this.e;){const o=n[a]||this.e,m=+o>+this.e?this.e:o;r.push(G.fromDateTimes(i,m)),i=m,a+=1}return r}splitBy(e){const n=k.fromDurationLike(e);if(!this.isValid||!n.isValid||n.as("milliseconds")===0)return[];let{s:r}=this,i=1,a;const o=[];for(;r<this.e;){const m=this.start.plus(n.mapUnits(E=>E*i));a=+m>+this.e?this.e:m,o.push(G.fromDateTimes(r,a)),r=a,i+=1}return o}divideEqually(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]}overlaps(e){return this.e>e.s&&this.s<e.e}abutsStart(e){return this.isValid?+this.e==+e.s:!1}abutsEnd(e){return this.isValid?+e.e==+this.s:!1}engulfs(e){return this.isValid?this.s<=e.s&&this.e>=e.e:!1}equals(e){return!this.isValid||!e.isValid?!1:this.s.equals(e.s)&&this.e.equals(e.e)}intersection(e){if(!this.isValid)return this;const n=this.s>e.s?this.s:e.s,r=this.e<e.e?this.e:e.e;return n>=r?null:G.fromDateTimes(n,r)}union(e){if(!this.isValid)return this;const n=this.s<e.s?this.s:e.s,r=this.e>e.e?this.e:e.e;return G.fromDateTimes(n,r)}static merge(e){const[n,r]=e.sort((i,a)=>i.s-a.s).reduce(([i,a],o)=>a?a.overlaps(o)||a.abutsStart(o)?[i,a.union(o)]:[i.concat([a]),o]:[i,o],[[],null]);return r&&n.push(r),n}static xor(e){let n=null,r=0;const i=[],a=e.map(E=>[{time:E.s,type:"s"},{time:E.e,type:"e"}]),o=Array.prototype.concat(...a),m=o.sort((E,C)=>E.time-C.time);for(const E of m)r+=E.type==="s"?1:-1,r===1?n=E.time:(n&&+n!=+E.time&&i.push(G.fromDateTimes(n,E.time)),n=null);return G.merge(i)}difference(...e){return G.xor([this].concat(e)).map(n=>this.intersection(n)).filter(n=>n&&!n.isEmpty())}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:mt}toLocaleString(e=H,n={}){return this.isValid?ue.create(this.s.loc.clone(n),e).formatInterval(this):mt}toISO(e){return this.isValid?`${this.s.toISO(e)}/${this.e.toISO(e)}`:mt}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:mt}toISOTime(e){return this.isValid?`${this.s.toISOTime(e)}/${this.e.toISOTime(e)}`:mt}toFormat(e,{separator:n=" – "}={}){return this.isValid?`${this.s.toFormat(e)}${n}${this.e.toFormat(e)}`:mt}toDuration(e,n){return this.isValid?this.e.diff(this.s,e,n):k.invalid(this.invalidReason)}mapEndpoints(e){return G.fromDateTimes(e(this.s),e(this.e))}}class tn{static hasDST(e=Q.defaultZone){const n=A.now().setZone(e).set({month:12});return!e.isUniversal&&n.offset!==n.set({month:6}).offset}static isValidIANAZone(e){return Re.isValidZone(e)}static normalizeZone(e){return He(e,Q.defaultZone)}static months(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null,outputCalendar:a="gregory"}={}){return(i||z.create(n,r,a)).months(e)}static monthsFormat(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null,outputCalendar:a="gregory"}={}){return(i||z.create(n,r,a)).months(e,!0)}static weekdays(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null}={}){return(i||z.create(n,r,null)).weekdays(e)}static weekdaysFormat(e="long",{locale:n=null,numberingSystem:r=null,locObj:i=null}={}){return(i||z.create(n,r,null)).weekdays(e,!0)}static meridiems({locale:e=null}={}){return z.create(e).meridiems()}static eras(e="short",{locale:n=null}={}){return z.create(n,null,"gregory").eras(e)}static features(){return{relative:kr()}}}function Qr(t,e){const n=i=>i.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),r=n(e)-n(t);return Math.floor(k.fromMillis(r).as("days"))}function Pu(t,e,n){const r=[["years",(E,C)=>C.year-E.year],["quarters",(E,C)=>C.quarter-E.quarter+(C.year-E.year)*4],["months",(E,C)=>C.month-E.month+(C.year-E.year)*12],["weeks",(E,C)=>{const O=Qr(E,C);return(O-O%7)/7}],["days",Qr]],i={},a=t;let o,m;for(const[E,C]of r)n.indexOf(E)>=0&&(o=E,i[E]=C(t,e),m=a.plus(i),m>e?(i[E]--,t=a.plus(i),t>e&&(m=t,i[E]--,t=a.plus(i))):t=m);return[t,i,m,o]}function ju(t,e,n,r){let[i,a,o,m]=Pu(t,e,n);const E=e-i,C=n.filter(L=>["hours","minutes","seconds","milliseconds"].indexOf(L)>=0);C.length===0&&(o<e&&(o=i.plus({[m]:1})),o!==i&&(a[m]=(a[m]||0)+E/(o-i)));const O=k.fromObject(a,r);return C.length>0?k.fromMillis(E,r).shiftTo(...C).plus(O):O}const Rn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Xr={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Wu=Rn.hanidec.replace(/[\[|\]]/g,"").split("");function Hu(t){let e=parseInt(t,10);if(isNaN(e)){e="";for(let n=0;n<t.length;n++){const r=t.charCodeAt(n);if(t[n].search(Rn.hanidec)!==-1)e+=Wu.indexOf(t[n]);else for(const i in Xr){const[a,o]=Xr[i];r>=a&&r<=o&&(e+=r-a)}}return parseInt(e,10)}else return e}function ye({numberingSystem:t},e=""){return new RegExp(`${Rn[t||"latn"]}${e}`)}const Uu="missing Intl.DateTimeFormat.formatToParts support";function W(t,e=n=>n){return{regex:t,deser:([n])=>e(Hu(n))}}const es="[  ]",ts=new RegExp(es,"g");function Zu(t){return t.replace(/\./g,"\\.?").replace(ts,es)}function ns(t){return t.replace(/\./g,"").replace(ts," ").toLowerCase()}function Ee(t,e){return t===null?null:{regex:RegExp(t.map(Zu).join("|")),deser:([n])=>t.findIndex(r=>ns(n)===ns(r))+e}}function rs(t,e){return{regex:t,deser:([,n,r])=>Qt(n,r),groups:e}}function nn(t){return{regex:t,deser:([e])=>e}}function qu(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function zu(t,e){const n=ye(e),r=ye(e,"{2}"),i=ye(e,"{3}"),a=ye(e,"{4}"),o=ye(e,"{6}"),m=ye(e,"{1,2}"),E=ye(e,"{1,3}"),C=ye(e,"{1,6}"),O=ye(e,"{1,9}"),L=ye(e,"{2,4}"),N=ye(e,"{4,6}"),M=te=>({regex:RegExp(qu(te.val)),deser:([de])=>de,literal:!0}),ee=(te=>{if(t.literal)return M(te);switch(te.val){case"G":return Ee(e.eras("short"),0);case"GG":return Ee(e.eras("long"),0);case"y":return W(C);case"yy":return W(L,An);case"yyyy":return W(a);case"yyyyy":return W(N);case"yyyyyy":return W(o);case"M":return W(m);case"MM":return W(r);case"MMM":return Ee(e.months("short",!0),1);case"MMMM":return Ee(e.months("long",!0),1);case"L":return W(m);case"LL":return W(r);case"LLL":return Ee(e.months("short",!1),1);case"LLLL":return Ee(e.months("long",!1),1);case"d":return W(m);case"dd":return W(r);case"o":return W(E);case"ooo":return W(i);case"HH":return W(r);case"H":return W(m);case"hh":return W(r);case"h":return W(m);case"mm":return W(r);case"m":return W(m);case"q":return W(m);case"qq":return W(r);case"s":return W(m);case"ss":return W(r);case"S":return W(E);case"SSS":return W(i);case"u":return nn(O);case"uu":return nn(m);case"uuu":return W(n);case"a":return Ee(e.meridiems(),0);case"kkkk":return W(a);case"kk":return W(L,An);case"W":return W(m);case"WW":return W(r);case"E":case"c":return W(n);case"EEE":return Ee(e.weekdays("short",!1),1);case"EEEE":return Ee(e.weekdays("long",!1),1);case"ccc":return Ee(e.weekdays("short",!0),1);case"cccc":return Ee(e.weekdays("long",!0),1);case"Z":case"ZZ":return rs(new RegExp(`([+-]${m.source})(?::(${r.source}))?`),2);case"ZZZ":return rs(new RegExp(`([+-]${m.source})(${r.source})?`),2);case"z":return nn(/[a-z_+-/]{1,256}?/i);case" ":return nn(/[^\S\n\r]/);default:return M(te)}})(t)||{invalidReason:Uu};return ee.token=t,ee}const Yu={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};function Gu(t,e,n){const{type:r,value:i}=t;if(r==="literal"){const E=/^\s+$/.test(i);return{literal:!E,val:E?" ":i}}const a=e[r];let o=r;r==="hour"&&(e.hour12!=null?o=e.hour12?"hour12":"hour24":e.hourCycle!=null?e.hourCycle==="h11"||e.hourCycle==="h12"?o="hour12":o="hour24":o=n.hour12?"hour12":"hour24");let m=Yu[o];if(typeof m=="object"&&(m=m[a]),m)return{literal:!1,val:m}}function Ju(t){return[`^${t.map(n=>n.regex).reduce((n,r)=>`${n}(${r.source})`,"")}$`,t]}function Ku(t,e,n){const r=t.match(e);if(r){const i={};let a=1;for(const o in n)if(ot(n,o)){const m=n[o],E=m.groups?m.groups+1:1;!m.literal&&m.token&&(i[m.token.val[0]]=m.deser(r.slice(a,a+E))),a+=E}return[r,i]}else return[r,{}]}function Qu(t){const e=a=>{switch(a){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}};let n=null,r;return j(t.z)||(n=Re.create(t.z)),j(t.Z)||(n||(n=new le(t.Z)),r=t.Z),j(t.q)||(t.M=(t.q-1)*3+1),j(t.h)||(t.h<12&&t.a===1?t.h+=12:t.h===12&&t.a===0&&(t.h=0)),t.G===0&&t.y&&(t.y=-t.y),j(t.u)||(t.S=Bn(t.u)),[Object.keys(t).reduce((a,o)=>{const m=e(o);return m&&(a[m]=t[o]),a},{}),n,r]}let _n=null;function Xu(){return _n||(_n=A.fromMillis(1555555555555)),_n}function ea(t,e){if(t.literal)return t;const n=ue.macroTokenToFormatOpts(t.val),r=us(n,e);return r==null||r.includes(void 0)?t:r}function ss(t,e){return Array.prototype.concat(...t.map(n=>ea(n,e)))}function is(t,e,n){const r=ss(ue.parseFormat(n),t),i=r.map(o=>zu(o,t)),a=i.find(o=>o.invalidReason);if(a)return{input:e,tokens:r,invalidReason:a.invalidReason};{const[o,m]=Ju(i),E=RegExp(o,"i"),[C,O]=Ku(e,E,m),[L,N,M]=O?Qu(O):[null,null,void 0];if(ot(O,"a")&&ot(O,"H"))throw new D("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:r,regex:E,rawMatches:C,matches:O,result:L,zone:N,specificOffset:M}}}function ta(t,e,n){const{result:r,zone:i,specificOffset:a,invalidReason:o}=is(t,e,n);return[r,i,a,o]}function us(t,e){if(!t)return null;const r=ue.create(e,t).dtFormatter(Xu()),i=r.formatToParts(),a=r.resolvedOptions();return i.map(o=>Gu(o,t,a))}const as=[0,31,59,90,120,151,181,212,243,273,304,334],os=[0,31,60,91,121,152,182,213,244,274,305,335];function ge(t,e){return new Fe("unit out of range",`you specified ${e} (of type ${typeof e}) as a ${t}, which is invalid`)}function ls(t,e,n){const r=new Date(Date.UTC(t,e-1,n));t<100&&t>=0&&r.setUTCFullYear(r.getUTCFullYear()-1900);const i=r.getUTCDay();return i===0?7:i}function cs(t,e,n){return n+(xt(t)?os:as)[e-1]}function fs(t,e){const n=xt(t)?os:as,r=n.findIndex(a=>a<e),i=e-n[r];return{month:r+1,day:i}}function $n(t){const{year:e,month:n,day:r}=t,i=cs(e,n,r),a=ls(e,n,r);let o=Math.floor((i-a+10)/7),m;return o<1?(m=e-1,o=Kt(m)):o>Kt(e)?(m=e+1,o=1):m=e,{weekYear:m,weekNumber:o,weekday:a,...en(t)}}function ds(t){const{weekYear:e,weekNumber:n,weekday:r}=t,i=ls(e,1,4),a=Ot(e);let o=n*7+r-i-3,m;o<1?(m=e-1,o+=Ot(m)):o>a?(m=e+1,o-=Ot(e)):m=e;const{month:E,day:C}=fs(m,o);return{year:m,month:E,day:C,...en(t)}}function Vn(t){const{year:e,month:n,day:r}=t,i=cs(e,n,r);return{year:e,ordinal:i,...en(t)}}function Ds(t){const{year:e,ordinal:n}=t,{month:r,day:i}=fs(e,n);return{year:e,month:r,day:i,...en(t)}}function na(t){const e=Yt(t.weekYear),n=_e(t.weekNumber,1,Kt(t.weekYear)),r=_e(t.weekday,1,7);return e?n?r?!1:ge("weekday",t.weekday):ge("week",t.week):ge("weekYear",t.weekYear)}function ra(t){const e=Yt(t.year),n=_e(t.ordinal,1,Ot(t.year));return e?n?!1:ge("ordinal",t.ordinal):ge("year",t.year)}function hs(t){const e=Yt(t.year),n=_e(t.month,1,12),r=_e(t.day,1,Gt(t.year,t.month));return e?n?r?!1:ge("day",t.day):ge("month",t.month):ge("year",t.year)}function ms(t){const{hour:e,minute:n,second:r,millisecond:i}=t,a=_e(e,0,23)||e===24&&n===0&&r===0&&i===0,o=_e(n,0,59),m=_e(r,0,59),E=_e(i,0,999);return a?o?m?E?!1:ge("millisecond",i):ge("second",r):ge("minute",n):ge("hour",e)}const Pn="Invalid DateTime",sa=864e13;function rn(t){return new Fe("unsupported zone",`the zone "${t.name}" is not supported`)}function jn(t){return t.weekData===null&&(t.weekData=$n(t.c)),t.weekData}function et(t,e){const n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new A({...n,...e,old:n})}function ps(t,e,n){let r=t-e*60*1e3;const i=n.offset(r);if(e===i)return[r,e];r-=(i-e)*60*1e3;const a=n.offset(r);return i===a?[r,i]:[t-Math.min(i,a)*60*1e3,Math.max(i,a)]}function sn(t,e){t+=e*60*1e3;const n=new Date(t);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function un(t,e,n){return ps(Jt(t),e,n)}function gs(t,e){const n=t.o,r=t.c.year+Math.trunc(e.years),i=t.c.month+Math.trunc(e.months)+Math.trunc(e.quarters)*3,a={...t.c,year:r,month:i,day:Math.min(t.c.day,Gt(r,i))+Math.trunc(e.days)+Math.trunc(e.weeks)*7},o=k.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),m=Jt(a);let[E,C]=ps(m,n,t.zone);return o!==0&&(E+=o,C=t.zone.offset(E)),{ts:E,o:C}}function At(t,e,n,r,i,a){const{setZone:o,zone:m}=n;if(t&&Object.keys(t).length!==0||e){const E=e||m,C=A.fromObject(t,{...n,zone:E,specificOffset:a});return o?C:C.setZone(m)}else return A.invalid(new Fe("unparsable",`the input "${i}" can't be parsed as ${r}`))}function an(t,e,n=!0){return t.isValid?ue.create(z.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function Wn(t,e){const n=t.c.year>9999||t.c.year<0;let r="";return n&&t.c.year>=0&&(r+="+"),r+=X(t.c.year,n?6:4),e?(r+="-",r+=X(t.c.month),r+="-",r+=X(t.c.day)):(r+=X(t.c.month),r+=X(t.c.day)),r}function Fs(t,e,n,r,i,a){let o=X(t.c.hour);return e?(o+=":",o+=X(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(o+=":")):o+=X(t.c.minute),(t.c.millisecond!==0||t.c.second!==0||!n)&&(o+=X(t.c.second),(t.c.millisecond!==0||!r)&&(o+=".",o+=X(t.c.millisecond,3))),i&&(t.isOffsetFixed&&t.offset===0&&!a?o+="Z":t.o<0?(o+="-",o+=X(Math.trunc(-t.o/60)),o+=":",o+=X(Math.trunc(-t.o%60))):(o+="+",o+=X(Math.trunc(t.o/60)),o+=":",o+=X(Math.trunc(t.o%60)))),a&&(o+="["+t.zone.ianaName+"]"),o}const ys={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},ia={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},ua={ordinal:1,hour:0,minute:0,second:0,millisecond:0},Es=["year","month","day","hour","minute","second","millisecond"],aa=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],oa=["year","ordinal","hour","minute","second","millisecond"];function ws(t){const e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new p(t);return e}function Cs(t,e){const n=He(e.zone,Q.defaultZone),r=z.fromObject(e),i=Q.now();let a,o;if(j(t.year))a=i;else{for(const C of Es)j(t[C])&&(t[C]=ys[C]);const m=hs(t)||ms(t);if(m)return A.invalid(m);const E=n.offset(i);[a,o]=un(t,E,n)}return new A({ts:a,zone:n,loc:r,o})}function bs(t,e,n){const r=j(n.round)?!0:n.round,i=(o,m)=>(o=Mn(o,r||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(o,m)),a=o=>n.calendary?e.hasSame(t,o)?0:e.startOf(o).diff(t.startOf(o),o).get(o):e.diff(t,o).get(o);if(n.unit)return i(a(n.unit),n.unit);for(const o of n.units){const m=a(o);if(Math.abs(m)>=1)return i(m,o)}return i(t>e?-0:0,n.units[n.units.length-1])}function vs(t){let e={},n;return t.length>0&&typeof t[t.length-1]=="object"?(e=t[t.length-1],n=Array.from(t).slice(0,t.length-1)):n=Array.from(t),[e,n]}class A{constructor(e){const n=e.zone||Q.defaultZone;let r=e.invalid||(Number.isNaN(e.ts)?new Fe("invalid input"):null)||(n.isValid?null:rn(n));this.ts=j(e.ts)?Q.now():e.ts;let i=null,a=null;if(!r)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(n))[i,a]=[e.old.c,e.old.o];else{const m=n.offset(this.ts);i=sn(this.ts,m),r=Number.isNaN(i.year)?new Fe("invalid input"):null,i=r?null:i,a=r?null:m}this._zone=n,this.loc=e.loc||z.create(),this.invalid=r,this.weekData=null,this.c=i,this.o=a,this.isLuxonDateTime=!0}static now(){return new A({})}static local(){const[e,n]=vs(arguments),[r,i,a,o,m,E,C]=n;return Cs({year:r,month:i,day:a,hour:o,minute:m,second:E,millisecond:C},e)}static utc(){const[e,n]=vs(arguments),[r,i,a,o,m,E,C]=n;return e.zone=le.utcInstance,Cs({year:r,month:i,day:a,hour:o,minute:m,second:E,millisecond:C},e)}static fromJSDate(e,n={}){const r=Ri(e)?e.valueOf():NaN;if(Number.isNaN(r))return A.invalid("invalid input");const i=He(n.zone,Q.defaultZone);return i.isValid?new A({ts:r,zone:i,loc:z.fromObject(n)}):A.invalid(rn(i))}static fromMillis(e,n={}){if(Ke(e))return e<-864e13||e>sa?A.invalid("Timestamp out of range"):new A({ts:e,zone:He(n.zone,Q.defaultZone),loc:z.fromObject(n)});throw new y(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,n={}){if(Ke(e))return new A({ts:e*1e3,zone:He(n.zone,Q.defaultZone),loc:z.fromObject(n)});throw new y("fromSeconds requires a numerical input")}static fromObject(e,n={}){e=e||{};const r=He(n.zone,Q.defaultZone);if(!r.isValid)return A.invalid(rn(r));const i=Q.now(),a=j(n.specificOffset)?r.offset(i):n.specificOffset,o=Xt(e,ws),m=!j(o.ordinal),E=!j(o.year),C=!j(o.month)||!j(o.day),O=E||C,L=o.weekYear||o.weekNumber,N=z.fromObject(n);if((O||m)&&L)throw new D("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(C&&m)throw new D("Can't mix ordinal dates with month/day");const M=L||o.weekday&&!O;let P,ee,te=sn(i,a);M?(P=aa,ee=ia,te=$n(te)):m?(P=oa,ee=ua,te=Vn(te)):(P=Es,ee=ys);let de=!1;for(const $ of P){const Z=o[$];j(Z)?de?o[$]=ee[$]:o[$]=te[$]:de=!0}const Me=M?na(o):m?ra(o):hs(o),Ae=Me||ms(o);if(Ae)return A.invalid(Ae);const v=M?ds(o):m?Ds(o):o,[V,ne]=un(v,a,r),B=new A({ts:V,zone:r,o:ne,loc:N});return o.weekday&&O&&e.weekday!==B.weekday?A.invalid("mismatched weekday",`you can't specify both a weekday of ${o.weekday} and a date of ${B.toISO()}`):B}static fromISO(e,n={}){const[r,i]=Su(e);return At(r,i,n,"ISO 8601",e)}static fromRFC2822(e,n={}){const[r,i]=Tu(e);return At(r,i,n,"RFC 2822",e)}static fromHTTP(e,n={}){const[r,i]=xu(e);return At(r,i,n,"HTTP",n)}static fromFormat(e,n,r={}){if(j(e)||j(n))throw new y("fromFormat requires an input string and a format");const{locale:i=null,numberingSystem:a=null}=r,o=z.fromOpts({locale:i,numberingSystem:a,defaultToEN:!0}),[m,E,C,O]=ta(o,e,n);return O?A.invalid(O):At(m,E,r,`format ${n}`,e,C)}static fromString(e,n,r={}){return A.fromFormat(e,n,r)}static fromSQL(e,n={}){const[r,i]=Iu(e);return At(r,i,n,"SQL",e)}static invalid(e,n=null){if(!e)throw new y("need to specify a reason the DateTime is invalid");const r=e instanceof Fe?e:new Fe(e,n);if(Q.throwOnInvalid)throw new s(r);return new A({invalid:r})}static isDateTime(e){return e&&e.isLuxonDateTime||!1}static parseFormatForOpts(e,n={}){const r=us(e,z.fromObject(n));return r?r.map(i=>i?i.val:null).join(""):null}static expandFormat(e,n={}){return ss(ue.parseFormat(e),z.fromObject(n)).map(i=>i.val).join("")}get(e){return this[e]}get isValid(){return this.invalid===null}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?jn(this).weekYear:NaN}get weekNumber(){return this.isValid?jn(this).weekNumber:NaN}get weekday(){return this.isValid?jn(this).weekday:NaN}get ordinal(){return this.isValid?Vn(this.c).ordinal:NaN}get monthShort(){return this.isValid?tn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?tn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?tn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?tn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return this.isOffsetFixed?!1:this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset}getPossibleOffsets(){if(!this.isValid||this.isOffsetFixed)return[this];const e=864e5,n=6e4,r=Jt(this.c),i=this.zone.offset(r-e),a=this.zone.offset(r+e),o=this.zone.offset(r-i*n),m=this.zone.offset(r-a*n);if(o===m)return[this];const E=r-o*n,C=r-m*n,O=sn(E,o),L=sn(C,m);return O.hour===L.hour&&O.minute===L.minute&&O.second===L.second&&O.millisecond===L.millisecond?[et(this,{ts:E}),et(this,{ts:C})]:[this]}get isInLeapYear(){return xt(this.year)}get daysInMonth(){return Gt(this.year,this.month)}get daysInYear(){return this.isValid?Ot(this.year):NaN}get weeksInWeekYear(){return this.isValid?Kt(this.weekYear):NaN}resolvedLocaleOptions(e={}){const{locale:n,numberingSystem:r,calendar:i}=ue.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:n,numberingSystem:r,outputCalendar:i}}toUTC(e=0,n={}){return this.setZone(le.instance(e),n)}toLocal(){return this.setZone(Q.defaultZone)}setZone(e,{keepLocalTime:n=!1,keepCalendarTime:r=!1}={}){if(e=He(e,Q.defaultZone),e.equals(this.zone))return this;if(e.isValid){let i=this.ts;if(n||r){const a=e.offset(this.ts),o=this.toObject();[i]=un(o,a,e)}return et(this,{ts:i,zone:e})}else return A.invalid(rn(e))}reconfigure({locale:e,numberingSystem:n,outputCalendar:r}={}){const i=this.loc.clone({locale:e,numberingSystem:n,outputCalendar:r});return et(this,{loc:i})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;const n=Xt(e,ws),r=!j(n.weekYear)||!j(n.weekNumber)||!j(n.weekday),i=!j(n.ordinal),a=!j(n.year),o=!j(n.month)||!j(n.day),m=a||o,E=n.weekYear||n.weekNumber;if((m||i)&&E)throw new D("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(o&&i)throw new D("Can't mix ordinal dates with month/day");let C;r?C=ds({...$n(this.c),...n}):j(n.ordinal)?(C={...this.toObject(),...n},j(n.day)&&(C.day=Math.min(Gt(C.year,C.month),C.day))):C=Ds({...Vn(this.c),...n});const[O,L]=un(C,this.o,this.zone);return et(this,{ts:O,o:L})}plus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e);return et(this,gs(this,n))}minus(e){if(!this.isValid)return this;const n=k.fromDurationLike(e).negate();return et(this,gs(this,n))}startOf(e){if(!this.isValid)return this;const n={},r=k.normalizeUnit(e);switch(r){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0;break}if(r==="weeks"&&(n.weekday=1),r==="quarters"){const i=Math.ceil(this.month/3);n.month=(i-1)*3+1}return this.set(n)}endOf(e){return this.isValid?this.plus({[e]:1}).startOf(e).minus(1):this}toFormat(e,n={}){return this.isValid?ue.create(this.loc.redefaultToEN(n)).formatDateTimeFromString(this,e):Pn}toLocaleString(e=H,n={}){return this.isValid?ue.create(this.loc.clone(n),e).formatDateTime(this):Pn}toLocaleParts(e={}){return this.isValid?ue.create(this.loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:n=!1,suppressMilliseconds:r=!1,includeOffset:i=!0,extendedZone:a=!1}={}){if(!this.isValid)return null;const o=e==="extended";let m=Wn(this,o);return m+="T",m+=Fs(this,o,n,r,i,a),m}toISODate({format:e="extended"}={}){return this.isValid?Wn(this,e==="extended"):null}toISOWeekDate(){return an(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:n=!1,includeOffset:r=!0,includePrefix:i=!1,extendedZone:a=!1,format:o="extended"}={}){return this.isValid?(i?"T":"")+Fs(this,o==="extended",n,e,r,a):null}toRFC2822(){return an(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return an(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?Wn(this,!0):null}toSQLTime({includeOffset:e=!0,includeZone:n=!1,includeOffsetSpace:r=!0}={}){let i="HH:mm:ss.SSS";return(n||e)&&(r&&(i+=" "),n?i+="z":e&&(i+="ZZ")),an(this,i,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():Pn}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={}){if(!this.isValid)return{};const n={...this.c};return e.includeConfig&&(n.outputCalendar=this.outputCalendar,n.numberingSystem=this.loc.numberingSystem,n.locale=this.loc.locale),n}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(e,n="milliseconds",r={}){if(!this.isValid||!e.isValid)return k.invalid("created by diffing an invalid DateTime");const i={locale:this.locale,numberingSystem:this.numberingSystem,...r},a=_i(n).map(k.normalizeUnit),o=e.valueOf()>this.valueOf(),m=o?this:e,E=o?e:this,C=ju(m,E,a,i);return o?C.negate():C}diffNow(e="milliseconds",n={}){return this.diff(A.now(),e,n)}until(e){return this.isValid?G.fromDateTimes(this,e):this}hasSame(e,n){if(!this.isValid)return!1;const r=e.valueOf(),i=this.setZone(e.zone,{keepLocalTime:!0});return i.startOf(n)<=r&&r<=i.endOf(n)}equals(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)}toRelative(e={}){if(!this.isValid)return null;const n=e.base||A.fromObject({},{zone:this.zone}),r=e.padding?this<n?-e.padding:e.padding:0;let i=["years","months","days","hours","minutes","seconds"],a=e.unit;return Array.isArray(e.unit)&&(i=e.unit,a=void 0),bs(n,this.plus(r),{...e,numeric:"always",units:i,unit:a})}toRelativeCalendar(e={}){return this.isValid?bs(e.base||A.fromObject({},{zone:this.zone}),this,{...e,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...e){if(!e.every(A.isDateTime))throw new y("min requires all arguments be DateTimes");return Br(e,n=>n.valueOf(),Math.min)}static max(...e){if(!e.every(A.isDateTime))throw new y("max requires all arguments be DateTimes");return Br(e,n=>n.valueOf(),Math.max)}static fromFormatExplain(e,n,r={}){const{locale:i=null,numberingSystem:a=null}=r,o=z.fromOpts({locale:i,numberingSystem:a,defaultToEN:!0});return is(o,e,n)}static fromStringExplain(e,n,r={}){return A.fromFormatExplain(e,n,r)}static get DATE_SHORT(){return H}static get DATE_MED(){return K}static get DATE_MED_WITH_WEEKDAY(){return Y}static get DATE_FULL(){return fe}static get DATE_HUGE(){return ie}static get TIME_SIMPLE(){return me}static get TIME_WITH_SECONDS(){return Ge}static get TIME_WITH_SHORT_OFFSET(){return Je}static get TIME_WITH_LONG_OFFSET(){return ut}static get TIME_24_SIMPLE(){return at}static get TIME_24_WITH_SECONDS(){return ke}static get TIME_24_WITH_SHORT_OFFSET(){return fr}static get TIME_24_WITH_LONG_OFFSET(){return dr}static get DATETIME_SHORT(){return Dr}static get DATETIME_SHORT_WITH_SECONDS(){return hr}static get DATETIME_MED(){return mr}static get DATETIME_MED_WITH_SECONDS(){return pr}static get DATETIME_MED_WITH_WEEKDAY(){return gi}static get DATETIME_FULL(){return gr}static get DATETIME_FULL_WITH_SECONDS(){return Fr}static get DATETIME_HUGE(){return yr}static get DATETIME_HUGE_WITH_SECONDS(){return Er}}function Nt(t){if(A.isDateTime(t))return t;if(t&&t.valueOf&&Ke(t.valueOf()))return A.fromJSDate(t);if(t&&typeof t=="object")return A.fromObject(t);throw new y(`Unknown datetime argument: ${t}, of type ${typeof t}`)}const Hn={renderNullAs:"\\-",taskCompletionTracking:!1,taskCompletionUseEmojiShorthand:!1,taskCompletionText:"completion",taskCompletionDateFormat:"yyyy-MM-dd",recursiveSubTaskCompletion:!1,warnOnEmptyResult:!0,refreshEnabled:!0,refreshInterval:2500,defaultDateFormat:"MMMM dd, yyyy",defaultDateTimeFormat:"h:mm a - MMMM dd, yyyy",maxRecursiveRenderDepth:4,tableIdColumnName:"File",tableGroupColumnName:"Group",showResultCount:!0};({...Hn});class Un{value;successful;constructor(e){this.value=e,this.successful=!0}map(e){return new Un(e(this.value))}flatMap(e){return e(this.value)}mapErr(e){return this}bimap(e,n){return this.map(e)}orElse(e){return this.value}cast(){return this}orElseThrow(e){return this.value}}class Zn{error;successful;constructor(e){this.error=e,this.successful=!1}map(e){return this}flatMap(e){return this}mapErr(e){return new Zn(e(this.error))}bimap(e,n){return this.mapErr(n)}orElse(e){return e}cast(){return this}orElseThrow(e){throw e?new Error(e(this.error)):new Error(""+this.error)}}var on;(function(t){function e(a){return new Un(a)}t.success=e;function n(a){return new Zn(a)}t.failure=n;function r(a,o,m){return a.successful?o.successful?m(a.value,o.value):n(o.error):n(a.error)}t.flatMap2=r;function i(a,o,m){return r(a,o,(E,C)=>e(m(E,C)))}t.map2=i})(on||(on={}));var la=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Qs<"u"?Qs:typeof self<"u"?self:{},Ss={exports:{}};(function(t,e){(function(n,r){t.exports=r()})(typeof self<"u"?self:la,function(){return function(n){var r={};function i(a){if(r[a])return r[a].exports;var o=r[a]={i:a,l:!1,exports:{}};return n[a].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=n,i.c=r,i.d=function(a,o,m){i.o(a,o)||Object.defineProperty(a,o,{configurable:!1,enumerable:!0,get:m})},i.r=function(a){Object.defineProperty(a,"__esModule",{value:!0})},i.n=function(a){var o=a&&a.__esModule?function(){return a.default}:function(){return a};return i.d(o,"a",o),o},i.o=function(a,o){return Object.prototype.hasOwnProperty.call(a,o)},i.p="",i(i.s=0)}([function(n,r,i){function a(c){if(!(this instanceof a))return new a(c);this._=c}var o=a.prototype;function m(c,h){for(var F=0;F<c;F++)h(F)}function E(c,h,F){return function(w,S){m(S.length,function(T){w(S[T],T,S)})}(function(w,S,T){h=c(h,w,S,T)},F),h}function C(c,h){return E(function(F,w,S,T){return F.concat([c(w,S,T)])},[],h)}function O(c,h){var F={v:0,buf:h};return m(c,function(){var w;F={v:F.v<<1|(w=F.buf,w[0]>>7),buf:function(S){var T=E(function(x,_,q,ce){return x.concat(q===ce.length-1?Buffer.from([_,0]).readUInt16BE(0):ce.readUInt16BE(q))},[],S);return Buffer.from(C(function(x){return(x<<1&65535)>>8},T))}(F.buf)}}),F}function L(){return typeof Buffer<"u"}function N(){if(!L())throw new Error("Buffer global does not exist; please use webpack if you need to parse Buffers in the browser.")}function M(c){N();var h=E(function(T,x){return T+x},0,c);if(h%8!=0)throw new Error("The bits ["+c.join(", ")+"] add up to "+h+" which is not an even number of bytes; the total should be divisible by 8");var F,w=h/8,S=(F=function(T){return T>48},E(function(T,x){return T||(F(x)?x:T)},null,c));if(S)throw new Error(S+" bit range requested exceeds 48 bit (6 byte) Number max.");return new a(function(T,x){var _=w+x;return _>T.length?$(x,w.toString()+" bytes"):B(_,E(function(q,ce){var se=O(ce,q.buf);return{coll:q.coll.concat(se.v),buf:se.buf}},{coll:[],buf:T.slice(x,_)},c).coll)})}function P(c,h){return new a(function(F,w){return N(),w+h>F.length?$(w,h+" bytes for "+c):B(w+h,F.slice(w,w+h))})}function ee(c,h){if(typeof(F=h)!="number"||Math.floor(F)!==F||h<0||h>6)throw new Error(c+" requires integer length in range [0, 6].");var F}function te(c){return ee("uintBE",c),P("uintBE("+c+")",c).map(function(h){return h.readUIntBE(0,c)})}function de(c){return ee("uintLE",c),P("uintLE("+c+")",c).map(function(h){return h.readUIntLE(0,c)})}function Me(c){return ee("intBE",c),P("intBE("+c+")",c).map(function(h){return h.readIntBE(0,c)})}function Ae(c){return ee("intLE",c),P("intLE("+c+")",c).map(function(h){return h.readIntLE(0,c)})}function v(c){return c instanceof a}function V(c){return{}.toString.call(c)==="[object Array]"}function ne(c){return L()&&Buffer.isBuffer(c)}function B(c,h){return{status:!0,index:c,value:h,furthest:-1,expected:[]}}function $(c,h){return V(h)||(h=[h]),{status:!1,index:-1,value:null,furthest:c,expected:h}}function Z(c,h){if(!h||c.furthest>h.furthest)return c;var F=c.furthest===h.furthest?function(w,S){if(function(){if(a._supportsSet!==void 0)return a._supportsSet;var je=typeof Set<"u";return a._supportsSet=je,je}()&&Array.from){for(var T=new Set(w),x=0;x<S.length;x++)T.add(S[x]);var _=Array.from(T);return _.sort(),_}for(var q={},ce=0;ce<w.length;ce++)q[w[ce]]=!0;for(var se=0;se<S.length;se++)q[S[se]]=!0;var Pe=[];for(var De in q)({}).hasOwnProperty.call(q,De)&&Pe.push(De);return Pe.sort(),Pe}(c.expected,h.expected):h.expected;return{status:c.status,index:c.index,value:c.value,furthest:h.furthest,expected:F}}var Ce={};function Rt(c,h){if(ne(c))return{offset:h,line:-1,column:-1};c in Ce||(Ce[c]={});for(var F=Ce[c],w=0,S=0,T=0,x=h;x>=0;){if(x in F){w=F[x].line,T===0&&(T=F[x].lineStart);break}(c.charAt(x)===`
`||c.charAt(x)==="\r"&&c.charAt(x+1)!==`
`)&&(S++,T===0&&(T=x+1)),x--}var _=w+S,q=h-T;return F[h]={line:_,lineStart:T},{offset:h,line:_+1,column:q+1}}function $e(c){if(!v(c))throw new Error("not a parser: "+c)}function tt(c,h){return typeof c=="string"?c.charAt(h):c[h]}function Ne(c){if(typeof c!="number")throw new Error("not a number: "+c)}function be(c){if(typeof c!="function")throw new Error("not a function: "+c)}function qe(c){if(typeof c!="string")throw new Error("not a string: "+c)}var cn=2,_t=3,ve=8,fn=5*ve,Se=4*ve,ze="  ";function dn(c,h){return new Array(h+1).join(c)}function Dn(c,h,F){var w=h-c.length;return w<=0?c:dn(F,w)+c}function Ns(c,h,F,w){return{from:c-h>0?c-h:0,to:c+F>w?w:c+F}}function ba(c,h){var F,w,S,T,x,_=h.index,q=_.offset,ce=1;if(q===c.length)return"Got the end of the input";if(ne(c)){var se=q-q%ve,Pe=q-se,De=Ns(se,fn,Se+ve,c.length),je=C(function(re){return C(function(gt){return Dn(gt.toString(16),2,"0")},re)},function(re,gt){var Ft=re.length,st=[],yt=0;if(Ft<=gt)return[re.slice()];for(var Et=0;Et<Ft;Et++)st[yt]||st.push([]),st[yt].push(re[Et]),(Et+1)%gt==0&&yt++;return st}(c.slice(De.from,De.to).toJSON().data,ve));T=function(re){return re.from===0&&re.to===1?{from:re.from,to:re.to}:{from:re.from/ve,to:Math.floor(re.to/ve)}}(De),w=se/ve,F=3*Pe,Pe>=4&&(F+=1),ce=2,S=C(function(re){return re.length<=4?re.join(" "):re.slice(0,4).join(" ")+"  "+re.slice(4).join(" ")},je),(x=(8*(T.to>0?T.to-1:T.to)).toString(16).length)<2&&(x=2)}else{var pt=c.split(/\r\n|[\n\r\u2028\u2029]/);F=_.column-1,w=_.line-1,T=Ns(w,cn,_t,pt.length),S=pt.slice(T.from,T.to),x=T.to.toString().length}var Na=w-T.from;return ne(c)&&(x=(8*(T.to>0?T.to-1:T.to)).toString(16).length)<2&&(x=2),E(function(re,gt,Ft){var st,yt=Ft===Na,Et=yt?"> ":ze;return st=ne(c)?Dn((8*(T.from+Ft)).toString(16),x,"0"):Dn((T.from+Ft+1).toString(),x," "),[].concat(re,[Et+st+" | "+gt],yt?[ze+dn(" ",x)+" | "+Dn("",F," ")+dn("^",ce)]:[])},[],S).join(`
`)}function Is(c,h){return[`
`,"-- PARSING FAILED "+dn("-",50),`

`,ba(c,h),`

`,(F=h.expected,F.length===1?`Expected:

`+F[0]:`Expected one of the following: 

`+F.join(", ")),`
`].join("");var F}function Ls(c){return c.flags!==void 0?c.flags:[c.global?"g":"",c.ignoreCase?"i":"",c.multiline?"m":"",c.unicode?"u":"",c.sticky?"y":""].join("")}function hn(){for(var c=[].slice.call(arguments),h=c.length,F=0;F<h;F+=1)$e(c[F]);return a(function(w,S){for(var T,x=new Array(h),_=0;_<h;_+=1){if(!(T=Z(c[_]._(w,S),T)).status)return T;x[_]=T.value,S=T.index}return Z(B(S,x),T)})}function nt(){var c=[].slice.call(arguments);if(c.length===0)throw new Error("seqMap needs at least one argument");var h=c.pop();return be(h),hn.apply(null,c).map(function(F){return h.apply(null,F)})}function mn(){var c=[].slice.call(arguments),h=c.length;if(h===0)return pn("zero alternates");for(var F=0;F<h;F+=1)$e(c[F]);return a(function(w,S){for(var T,x=0;x<c.length;x+=1)if((T=Z(c[x]._(w,S),T)).status)return T;return T})}function Rs(c,h){return Qn(c,h).or(rt([]))}function Qn(c,h){return $e(c),$e(h),nt(c,h.then(c).many(),function(F,w){return[F].concat(w)})}function $t(c){qe(c);var h="'"+c+"'";return a(function(F,w){var S=w+c.length,T=F.slice(w,S);return T===c?B(S,T):$(w,h)})}function Ve(c,h){(function(S){if(!(S instanceof RegExp))throw new Error("not a regexp: "+S);for(var T=Ls(S),x=0;x<T.length;x++){var _=T.charAt(x);if(_!=="i"&&_!=="m"&&_!=="u"&&_!=="s")throw new Error('unsupported regexp flag "'+_+'": '+S)}})(c),arguments.length>=2?Ne(h):h=0;var F=function(S){return RegExp("^(?:"+S.source+")",Ls(S))}(c),w=""+c;return a(function(S,T){var x=F.exec(S.slice(T));if(x){if(0<=h&&h<=x.length){var _=x[0],q=x[h];return B(T+_.length,q)}return $(T,"valid match group (0 to "+x.length+") in "+w)}return $(T,w)})}function rt(c){return a(function(h,F){return B(F,c)})}function pn(c){return a(function(h,F){return $(F,c)})}function gn(c){if(v(c))return a(function(h,F){var w=c._(h,F);return w.index=F,w.value="",w});if(typeof c=="string")return gn($t(c));if(c instanceof RegExp)return gn(Ve(c));throw new Error("not a string, regexp, or parser: "+c)}function _s(c){return $e(c),a(function(h,F){var w=c._(h,F),S=h.slice(F,w.index);return w.status?$(F,'not "'+S+'"'):B(F,null)})}function Fn(c){return be(c),a(function(h,F){var w=tt(h,F);return F<h.length&&c(w)?B(F+1,w):$(F,"a character/byte matching "+c)})}function $s(c,h){arguments.length<2&&(h=c,c=void 0);var F=a(function(w,S){return F._=h()._,F._(w,S)});return c?F.desc(c):F}function Xn(){return pn("fantasy-land/empty")}o.parse=function(c){if(typeof c!="string"&&!ne(c))throw new Error(".parse must be called with a string or Buffer as its argument");var h,F=this.skip(er)._(c,0);return h=F.status?{status:!0,value:F.value}:{status:!1,index:Rt(c,F.furthest),expected:F.expected},delete Ce[c],h},o.tryParse=function(c){var h=this.parse(c);if(h.status)return h.value;var F=Is(c,h),w=new Error(F);throw w.type="ParsimmonError",w.result=h,w},o.assert=function(c,h){return this.chain(function(F){return c(F)?rt(F):pn(h)})},o.or=function(c){return mn(this,c)},o.trim=function(c){return this.wrap(c,c)},o.wrap=function(c,h){return nt(c,this,h,function(F,w){return w})},o.thru=function(c){return c(this)},o.then=function(c){return $e(c),hn(this,c).map(function(h){return h[1]})},o.many=function(){var c=this;return a(function(h,F){for(var w=[],S=void 0;;){if(!(S=Z(c._(h,F),S)).status)return Z(B(F,w),S);if(F===S.index)throw new Error("infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause");F=S.index,w.push(S.value)}})},o.tieWith=function(c){return qe(c),this.map(function(h){if(function(S){if(!V(S))throw new Error("not an array: "+S)}(h),h.length){qe(h[0]);for(var F=h[0],w=1;w<h.length;w++)qe(h[w]),F+=c+h[w];return F}return""})},o.tie=function(){return this.tieWith("")},o.times=function(c,h){var F=this;return arguments.length<2&&(h=c),Ne(c),Ne(h),a(function(w,S){for(var T=[],x=void 0,_=void 0,q=0;q<c;q+=1){if(_=Z(x=F._(w,S),_),!x.status)return _;S=x.index,T.push(x.value)}for(;q<h&&(_=Z(x=F._(w,S),_),x.status);q+=1)S=x.index,T.push(x.value);return Z(B(S,T),_)})},o.result=function(c){return this.map(function(){return c})},o.atMost=function(c){return this.times(0,c)},o.atLeast=function(c){return nt(this.times(c),this.many(),function(h,F){return h.concat(F)})},o.map=function(c){be(c);var h=this;return a(function(F,w){var S=h._(F,w);return S.status?Z(B(S.index,c(S.value)),S):S})},o.contramap=function(c){be(c);var h=this;return a(function(F,w){var S=h.parse(c(F.slice(w)));return S.status?B(w+F.length,S.value):S})},o.promap=function(c,h){return be(c),be(h),this.contramap(c).map(h)},o.skip=function(c){return hn(this,c).map(function(h){return h[0]})},o.mark=function(){return nt(Vt,this,Vt,function(c,h,F){return{start:c,value:h,end:F}})},o.node=function(c){return nt(Vt,this,Vt,function(h,F,w){return{name:c,value:F,start:h,end:w}})},o.sepBy=function(c){return Rs(this,c)},o.sepBy1=function(c){return Qn(this,c)},o.lookahead=function(c){return this.skip(gn(c))},o.notFollowedBy=function(c){return this.skip(_s(c))},o.desc=function(c){V(c)||(c=[c]);var h=this;return a(function(F,w){var S=h._(F,w);return S.status||(S.expected=c),S})},o.fallback=function(c){return this.or(rt(c))},o.ap=function(c){return nt(c,this,function(h,F){return h(F)})},o.chain=function(c){var h=this;return a(function(F,w){var S=h._(F,w);return S.status?Z(c(S.value)._(F,S.index),S):S})},o.concat=o.or,o.empty=Xn,o.of=rt,o["fantasy-land/ap"]=o.ap,o["fantasy-land/chain"]=o.chain,o["fantasy-land/concat"]=o.concat,o["fantasy-land/empty"]=o.empty,o["fantasy-land/of"]=o.of,o["fantasy-land/map"]=o.map;var Vt=a(function(c,h){return B(h,Rt(c,h))}),va=a(function(c,h){return h>=c.length?$(h,"any character/byte"):B(h+1,tt(c,h))}),Sa=a(function(c,h){return B(c.length,c.slice(h))}),er=a(function(c,h){return h<c.length?$(h,"EOF"):B(h,null)}),Ta=Ve(/[0-9]/).desc("a digit"),xa=Ve(/[0-9]*/).desc("optional digits"),Oa=Ve(/[a-z]/i).desc("a letter"),ka=Ve(/[a-z]*/i).desc("optional letters"),Ba=Ve(/\s*/).desc("optional whitespace"),Ma=Ve(/\s+/).desc("whitespace"),Vs=$t("\r"),Ps=$t(`
`),js=$t(`\r
`),Ws=mn(js,Ps,Vs).desc("newline"),Aa=mn(Ws,er);a.all=Sa,a.alt=mn,a.any=va,a.cr=Vs,a.createLanguage=function(c){var h={};for(var F in c)({}).hasOwnProperty.call(c,F)&&function(w){h[w]=$s(function(){return c[w](h)})}(F);return h},a.crlf=js,a.custom=function(c){return a(c(B,$))},a.digit=Ta,a.digits=xa,a.empty=Xn,a.end=Aa,a.eof=er,a.fail=pn,a.formatError=Is,a.index=Vt,a.isParser=v,a.lazy=$s,a.letter=Oa,a.letters=ka,a.lf=Ps,a.lookahead=gn,a.makeFailure=$,a.makeSuccess=B,a.newline=Ws,a.noneOf=function(c){return Fn(function(h){return c.indexOf(h)<0}).desc("none of '"+c+"'")},a.notFollowedBy=_s,a.of=rt,a.oneOf=function(c){for(var h=c.split(""),F=0;F<h.length;F++)h[F]="'"+h[F]+"'";return Fn(function(w){return c.indexOf(w)>=0}).desc(h)},a.optWhitespace=Ba,a.Parser=a,a.range=function(c,h){return Fn(function(F){return c<=F&&F<=h}).desc(c+"-"+h)},a.regex=Ve,a.regexp=Ve,a.sepBy=Rs,a.sepBy1=Qn,a.seq=hn,a.seqMap=nt,a.seqObj=function(){for(var c,h={},F=0,w=(c=arguments,Array.prototype.slice.call(c)),S=w.length,T=0;T<S;T+=1){var x=w[T];if(!v(x)){if(V(x)&&x.length===2&&typeof x[0]=="string"&&v(x[1])){var _=x[0];if(Object.prototype.hasOwnProperty.call(h,_))throw new Error("seqObj: duplicate key "+_);h[_]=!0,F++;continue}throw new Error("seqObj arguments must be parsers or [string, parser] array pairs.")}}if(F===0)throw new Error("seqObj expects at least one named parser, found zero");return a(function(q,ce){for(var se,Pe={},De=0;De<S;De+=1){var je,pt;if(V(w[De])?(je=w[De][0],pt=w[De][1]):(je=null,pt=w[De]),!(se=Z(pt._(q,ce),se)).status)return se;je&&(Pe[je]=se.value),ce=se.index}return Z(B(ce,Pe),se)})},a.string=$t,a.succeed=rt,a.takeWhile=function(c){return be(c),a(function(h,F){for(var w=F;w<h.length&&c(tt(h,w));)w++;return B(w,h.slice(F,w))})},a.test=Fn,a.whitespace=Ma,a["fantasy-land/empty"]=Xn,a["fantasy-land/of"]=rt,a.Binary={bitSeq:M,bitSeqObj:function(c){N();var h={},F=0,w=C(function(T){if(V(T)){var x=T;if(x.length!==2)throw new Error("["+x.join(", ")+"] should be length 2, got length "+x.length);if(qe(x[0]),Ne(x[1]),Object.prototype.hasOwnProperty.call(h,x[0]))throw new Error("duplicate key in bitSeqObj: "+x[0]);return h[x[0]]=!0,F++,x}return Ne(T),[null,T]},c);if(F<1)throw new Error("bitSeqObj expects at least one named pair, got ["+c.join(", ")+"]");var S=C(function(T){return T[0]},w);return M(C(function(T){return T[1]},w)).map(function(T){return E(function(x,_){return _[0]!==null&&(x[_[0]]=_[1]),x},{},C(function(x,_){return[x,T[_]]},S))})},byte:function(c){if(N(),Ne(c),c>255)throw new Error("Value specified to byte constructor ("+c+"=0x"+c.toString(16)+") is larger in value than a single byte.");var h=(c>15?"0x":"0x0")+c.toString(16);return a(function(F,w){var S=tt(F,w);return S===c?B(w+1,S):$(w,h)})},buffer:function(c){return P("buffer",c).map(function(h){return Buffer.from(h)})},encodedString:function(c,h){return P("string",h).map(function(F){return F.toString(c)})},uintBE:te,uint8BE:te(1),uint16BE:te(2),uint32BE:te(4),uintLE:de,uint8LE:de(1),uint16LE:de(2),uint32LE:de(4),intBE:Me,int8BE:Me(1),int16BE:Me(2),int32BE:Me(4),intLE:Ae,int8LE:Ae(1),int16LE:Ae(2),int32LE:Ae(4),floatBE:P("floatBE",4).map(function(c){return c.readFloatBE(0)}),floatLE:P("floatLE",4).map(function(c){return c.readFloatLE(0)}),doubleBE:P("doubleBE",8).map(function(c){return c.readDoubleBE(0)}),doubleLE:P("doubleLE",8).map(function(c){return c.readDoubleLE(0)})},n.exports=a}])})})(Ss);var d=Ss.exports,qn=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC08\uDC26](?:\u200D\u2B1B)?|[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;function Ts(t){return t==null?t:t.shiftToAll().normalize()}function xs(t){return t.includes("/")&&(t=t.substring(t.lastIndexOf("/")+1)),t.endsWith(".md")&&(t=t.substring(0,t.length-3)),t}d.alt(d.regex(new RegExp(qn(),"")),d.regex(/[0-9\p{Letter}_-]+/u).map(t=>t.toLocaleLowerCase()),d.whitespace.map(t=>"-"),d.any.map(t=>"")).many().map(t=>t.join(""));const ca=d.alt(d.regex(new RegExp(qn(),"")),d.regex(/[0-9\p{Letter}_-]+/u),d.whitespace.map(t=>" "),d.any.map(t=>" ")).many().map(t=>t.join("").split(/\s+/).join(" ").trim());function fa(t){return ca.tryParse(t)}function da(t){return t=Ts(t),t=k.fromObject(Object.fromEntries(Object.entries(t.toObject()).filter(([,e])=>e!=0))),t.toHuman()}var It;(function(t){function e(v,V=Hn,ne=!1){let B=n(v);if(!B)return V.renderNullAs;switch(B.type){case"null":return V.renderNullAs;case"string":return B.value;case"number":case"boolean":return""+B.value;case"html":return B.value.outerHTML;case"widget":return B.value.markdown();case"link":return B.value.markdown();case"function":return"<function>";case"array":let $="";return ne&&($+="["),$+=B.value.map(Z=>e(Z,V,!0)).join(", "),ne&&($+="]"),$;case"object":return"{ "+Object.entries(B.value).map(Z=>Z[0]+": "+e(Z[1],V,!0)).join(", ")+" }";case"date":return B.value.second==0&&B.value.hour==0&&B.value.minute==0?B.value.toFormat(V.defaultDateFormat):B.value.toFormat(V.defaultDateTimeFormat);case"duration":return da(B.value)}}t.toString=e;function n(v){return N(v)?{type:"null",value:v}:C(v)?{type:"number",value:v}:E(v)?{type:"string",value:v}:P(v)?{type:"boolean",value:v}:L(v)?{type:"duration",value:v}:O(v)?{type:"date",value:v}:te(v)?{type:"widget",value:v}:M(v)?{type:"array",value:v}:ee(v)?{type:"link",value:v}:Ae(v)?{type:"function",value:v}:de(v)?{type:"html",value:v}:Me(v)?{type:"object",value:v}:void 0}t.wrapValue=n;function r(v,V){if(Me(v)){let ne={};for(let[B,$]of Object.entries(v))ne[B]=r($,V);return ne}else if(M(v)){let ne=[];for(let B of v)ne.push(r(B,V));return ne}else return V(v)}t.mapLeaves=r;function i(v,V,ne){if(v===void 0&&(v=null),V===void 0&&(V=null),v===null&&V===null)return 0;if(v===null)return-1;if(V===null)return 1;let B=n(v),$=n(V);if(B===void 0&&$===void 0)return 0;if(B===void 0)return-1;if($===void 0)return 1;if(B.type!=$.type)return B.type.localeCompare($.type);if(B.value===$.value)return 0;switch(B.type){case"string":return B.value.localeCompare($.value);case"number":return B.value<$.value?-1:B.value==$.value?0:1;case"null":return 0;case"boolean":return B.value==$.value?0:B.value?1:-1;case"link":let Z=B.value,Ce=$.value,Rt=ne??(Se=>Se),$e=Rt(Z.path).localeCompare(Rt(Ce.path));if($e!=0)return $e;let tt=Z.type.localeCompare(Ce.type);return tt!=0?tt:Z.subpath&&!Ce.subpath?1:!Z.subpath&&Ce.subpath?-1:!Z.subpath&&!Ce.subpath?0:(Z.subpath??"").localeCompare(Ce.subpath??"");case"date":return B.value<$.value?-1:B.value.equals($.value)?0:1;case"duration":return B.value<$.value?-1:B.value.equals($.value)?0:1;case"array":let Ne=B.value,be=$.value;for(let Se=0;Se<Math.min(Ne.length,be.length);Se++){let ze=i(Ne[Se],be[Se]);if(ze!=0)return ze}return Ne.length-be.length;case"object":let qe=B.value,cn=$.value,_t=Array.from(Object.keys(qe)),ve=Array.from(Object.keys(cn));_t.sort(),ve.sort();let fn=i(_t,ve);if(fn!=0)return fn;for(let Se of _t){let ze=i(qe[Se],cn[Se]);if(ze!=0)return ze}return 0;case"widget":case"html":case"function":return 0}}t.compareValue=i;function a(v){return n(v)?.type}t.typeOf=a;function o(v){let V=n(v);if(!V)return!1;switch(V.type){case"number":return V.value!=0;case"string":return V.value.length>0;case"boolean":return V.value;case"link":return!!V.value.path;case"date":return V.value.toMillis()!=0;case"duration":return V.value.as("seconds")!=0;case"object":return Object.keys(V.value).length>0;case"array":return V.value.length>0;case"null":return!1;case"html":case"widget":case"function":return!0}}t.isTruthy=o;function m(v){if(v==null)return v;if(t.isArray(v))return[].concat(v.map(V=>m(V)));if(t.isObject(v)){let V={};for(let[ne,B]of Object.entries(v))V[ne]=m(B);return V}else return v}t.deepCopy=m;function E(v){return typeof v=="string"}t.isString=E;function C(v){return typeof v=="number"}t.isNumber=C;function O(v){return v instanceof A}t.isDate=O;function L(v){return v instanceof k}t.isDuration=L;function N(v){return v==null}t.isNull=N;function M(v){return Array.isArray(v)}t.isArray=M;function P(v){return typeof v=="boolean"}t.isBoolean=P;function ee(v){return v instanceof ae}t.isLink=ee;function te(v){return v instanceof zn}t.isWidget=te;function de(v){return typeof HTMLElement<"u"?v instanceof HTMLElement:!1}t.isHtml=de;function Me(v){return typeof v=="object"&&!de(v)&&!te(v)&&!M(v)&&!L(v)&&!O(v)&&!ee(v)&&v!==void 0&&!N(v)}t.isObject=Me;function Ae(v){return typeof v=="function"}t.isFunction=Ae})(It||(It={}));var Os;(function(t){function e(i){return It.isObject(i)&&Object.keys(i).length==2&&"key"in i&&"rows"in i}t.isElementGroup=e;function n(i){for(let a of i)if(!e(a))return!1;return!0}t.isGrouping=n;function r(i){if(n(i)){let a=0;for(let o of i)a+=r(o.rows);return a}else return i.length}t.count=r})(Os||(Os={}));class ae{path;display;subpath;embed;type;static file(e,n=!1,r){return new ae({path:e,embed:n,display:r,subpath:void 0,type:"file"})}static infer(e,n=!1,r){if(e.includes("#^")){let i=e.split("#^");return ae.block(i[0],i[1],n,r)}else if(e.includes("#")){let i=e.split("#");return ae.header(i[0],i[1],n,r)}else return ae.file(e,n,r)}static header(e,n,r,i){return new ae({path:e,embed:r,display:i,subpath:fa(n),type:"header"})}static block(e,n,r,i){return new ae({path:e,embed:r,display:i,subpath:n,type:"block"})}static fromObject(e){return new ae(e)}constructor(e){Object.assign(this,e)}equals(e){return e==null||e==null?!1:this.path==e.path&&this.type==e.type&&this.subpath==e.subpath}toString(){return this.markdown()}toObject(){return{path:this.path,type:this.type,subpath:this.subpath,display:this.display,embed:this.embed}}withPath(e){return new ae(Object.assign({},this,{path:e}))}withDisplay(e){return new ae(Object.assign({},this,{display:e}))}withHeader(e){return ae.header(this.path,e,this.embed,this.display)}toFile(){return ae.file(this.path,this.embed,this.display)}toEmbed(){if(this.embed)return this;{let e=new ae(this);return e.embed=!0,e}}fromEmbed(){if(this.embed){let e=new ae(this);return e.embed=!1,e}else return this}markdown(){let e=(this.embed?"!":"")+"[["+this.obsidianLink();return this.display?e+="|"+this.display:(e+="|"+xs(this.path),(this.type=="header"||this.type=="block")&&(e+=" > "+this.subpath)),e+="]]",e}obsidianLink(){const e=this.path.replaceAll("|","\\|");return this.type=="header"?e+"#"+this.subpath?.replaceAll("|","\\|"):this.type=="block"?e+"#^"+this.subpath?.replaceAll("|","\\|"):e}fileName(){return xs(this.path).replace(".md","")}}class zn{$widget;constructor(e){this.$widget=e}}class Da extends zn{key;value;constructor(e,n){super("dataview:list-pair"),this.key=e,this.value=n}markdown(){return`${It.toString(this.key)}: ${It.toString(this.value)}`}}class ha extends zn{url;display;constructor(e,n){super("dataview:external-link"),this.url=e,this.display=n}markdown(){return`[${this.display??this.url}](${this.url})`}}var ks;(function(t){function e(o,m){return new Da(o,m)}t.listPair=e;function n(o,m){return new ha(o,m)}t.externalLink=n;function r(o){return o.$widget==="dataview:list-pair"}t.isListPair=r;function i(o){return o.$widget==="dataview:external-link"}t.isExternalLink=i;function a(o){return r(o)||i(o)}t.isBuiltin=a})(ks||(ks={}));var J;(function(t){function e(N){return{type:"variable",name:N}}t.variable=e;function n(N){return{type:"literal",value:N}}t.literal=n;function r(N,M,P){return{type:"binaryop",left:N,op:M,right:P}}t.binaryOp=r;function i(N,M){return{type:"index",object:N,index:M}}t.index=i;function a(N){let M=N.split("."),P=t.variable(M[0]);for(let ee=1;ee<M.length;ee++)P=t.index(P,t.literal(M[ee]));return P}t.indexVariable=a;function o(N,M){return{type:"lambda",arguments:N,value:M}}t.lambda=o;function m(N,M){return{type:"function",func:N,arguments:M}}t.func=m;function E(N){return{type:"list",values:N}}t.list=E;function C(N){return{type:"object",values:N}}t.object=C;function O(N){return{type:"negated",child:N}}t.negate=O;function L(N){return N=="<="||N=="<"||N==">"||N==">="||N=="!="||N=="="}t.isCompareOp=L,t.NULL=t.literal(null)})(J||(J={}));var Be;(function(t){function e(O){return{type:"tag",tag:O}}t.tag=e;function n(O){return{type:"csv",path:O}}t.csv=n;function r(O){return{type:"folder",folder:O}}t.folder=r;function i(O,L){return{type:"link",file:O,direction:L?"incoming":"outgoing"}}t.link=i;function a(O,L,N){return{type:"binaryop",left:O,op:L,right:N}}t.binaryOp=a;function o(O,L){return{type:"binaryop",left:O,op:"&",right:L}}t.and=o;function m(O,L){return{type:"binaryop",left:O,op:"|",right:L}}t.or=m;function E(O){return{type:"negate",child:O}}t.negate=E;function C(){return{type:"empty"}}t.empty=C})(Be||(Be={}));const Bs=new RegExp(qn(),""),Yn={year:k.fromObject({years:1}),years:k.fromObject({years:1}),yr:k.fromObject({years:1}),yrs:k.fromObject({years:1}),month:k.fromObject({months:1}),months:k.fromObject({months:1}),mo:k.fromObject({months:1}),mos:k.fromObject({months:1}),week:k.fromObject({weeks:1}),weeks:k.fromObject({weeks:1}),wk:k.fromObject({weeks:1}),wks:k.fromObject({weeks:1}),w:k.fromObject({weeks:1}),day:k.fromObject({days:1}),days:k.fromObject({days:1}),d:k.fromObject({days:1}),hour:k.fromObject({hours:1}),hours:k.fromObject({hours:1}),hr:k.fromObject({hours:1}),hrs:k.fromObject({hours:1}),h:k.fromObject({hours:1}),minute:k.fromObject({minutes:1}),minutes:k.fromObject({minutes:1}),min:k.fromObject({minutes:1}),mins:k.fromObject({minutes:1}),m:k.fromObject({minutes:1}),second:k.fromObject({seconds:1}),seconds:k.fromObject({seconds:1}),sec:k.fromObject({seconds:1}),secs:k.fromObject({seconds:1}),s:k.fromObject({seconds:1})},Gn={now:()=>A.local(),today:()=>A.local().startOf("day"),yesterday:()=>A.local().startOf("day").minus(k.fromObject({days:1})),tomorrow:()=>A.local().startOf("day").plus(k.fromObject({days:1})),sow:()=>A.local().startOf("week"),"start-of-week":()=>A.local().startOf("week"),eow:()=>A.local().endOf("week"),"end-of-week":()=>A.local().endOf("week"),soy:()=>A.local().startOf("year"),"start-of-year":()=>A.local().startOf("year"),eoy:()=>A.local().endOf("year"),"end-of-year":()=>A.local().endOf("year"),som:()=>A.local().startOf("month"),"start-of-month":()=>A.local().startOf("month"),eom:()=>A.local().endOf("month"),"end-of-month":()=>A.local().endOf("month")},Jn=["FROM","WHERE","LIMIT","GROUP","FLATTEN"];function ma(t){let e=-1;for(;(e=t.indexOf("|",e+1))>=0;)if(!(e>0&&t[e-1]=="\\"))return[t.substring(0,e).replace(/\\\|/g,"|"),t.substring(e+1)];return[t.replace(/\\\|/g,"|"),void 0]}function pa(t){let[e,n]=ma(t);return ae.infer(e,!1,n)}function Lt(t,e,n){return d.seqMap(t,d.seq(d.optWhitespace,e,d.optWhitespace,t).many(),(r,i)=>{if(i.length==0)return r;let a=n(r,i[0][1],i[0][3]);for(let o=1;o<i.length;o++)a=n(a,i[o][1],i[o][3]);return a})}function ga(t,...e){return d.custom((n,r)=>(i,a)=>{let o=t._(i,a);if(!o.status)return o;for(let m of e){let E=m(o.value)._(i,o.index);if(!E.status)return o;o=E}return o})}const we=d.createLanguage({number:t=>d.regexp(/-?[0-9]+(\.[0-9]+)?/).map(e=>Number.parseFloat(e)).desc("number"),string:t=>d.string('"').then(d.alt(t.escapeCharacter,d.noneOf('"\\')).atLeast(0).map(e=>e.join(""))).skip(d.string('"')).desc("string"),escapeCharacter:t=>d.string("\\").then(d.any).map(e=>e==='"'?'"':e==="\\"?"\\":"\\"+e),bool:t=>d.regexp(/true|false|True|False/).map(e=>e.toLowerCase()=="true").desc("boolean ('true' or 'false')"),tag:t=>d.seqMap(d.string("#"),d.alt(d.regexp(/[^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\\s]/).desc("text")).many(),(e,n)=>e+n.join("")).desc("tag ('#hello/stuff')"),identifier:t=>d.seqMap(d.alt(d.regexp(/\p{Letter}/u),d.regexp(Bs).desc("text")),d.alt(d.regexp(/[0-9\p{Letter}_-]/u),d.regexp(Bs).desc("text")).many(),(e,n)=>e+n.join("")).desc("variable identifier"),link:t=>d.regexp(/\[\[([^\[\]]*?)\]\]/u,1).map(e=>pa(e)).desc("file link"),embedLink:t=>d.seqMap(d.string("!").atMost(1),t.link,(e,n)=>(e.length>0&&(n.embed=!0),n)).desc("file link"),binaryPlusMinus:t=>d.regexp(/\+|-/).map(e=>e).desc("'+' or '-'"),binaryMulDiv:t=>d.regexp(/\*|\/|%/).map(e=>e).desc("'*' or '/' or '%'"),binaryCompareOp:t=>d.regexp(/>=|<=|!=|>|<|=/).map(e=>e).desc("'>=' or '<=' or '!=' or '=' or '>' or '<'"),binaryBooleanOp:t=>d.regexp(/and|or|&|\|/i).map(e=>e.toLowerCase()=="and"?"&":e.toLowerCase()=="or"?"|":e).desc("'and' or 'or'"),rootDate:t=>d.seqMap(d.regexp(/\d{4}/),d.string("-"),d.regexp(/\d{2}/),(e,n,r)=>A.fromObject({year:Number.parseInt(e),month:Number.parseInt(r)})).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),dateShorthand:t=>d.alt(...Object.keys(Gn).sort((e,n)=>n.length-e.length).map(d.string)),date:t=>ga(t.rootDate,e=>d.seqMap(d.string("-"),d.regexp(/\d{2}/),(n,r)=>e.set({day:Number.parseInt(r)})),e=>d.seqMap(d.string("T"),d.regexp(/\d{2}/),(n,r)=>e.set({hour:Number.parseInt(r)})),e=>d.seqMap(d.string(":"),d.regexp(/\d{2}/),(n,r)=>e.set({minute:Number.parseInt(r)})),e=>d.seqMap(d.string(":"),d.regexp(/\d{2}/),(n,r)=>e.set({second:Number.parseInt(r)})),e=>d.alt(d.seqMap(d.string("."),d.regexp(/\d{3}/),(n,r)=>e.set({millisecond:Number.parseInt(r)})),d.succeed(e)),e=>d.alt(d.seqMap(d.string("+").or(d.string("-")),d.regexp(/\d{1,2}(:\d{2})?/),(n,r)=>e.setZone("UTC"+n+r,{keepLocalTime:!0})),d.seqMap(d.string("Z"),()=>e.setZone("utc",{keepLocalTime:!0})),d.seqMap(d.string("["),d.regexp(/[0-9A-Za-z+-\/]+/u),d.string("]"),(n,r,i)=>e.setZone(r,{keepLocalTime:!0})))).assert(e=>e.isValid,"valid date").desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),datePlus:t=>d.alt(t.dateShorthand.map(e=>Gn[e]()),t.date).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand"),durationType:t=>d.alt(...Object.keys(Yn).sort((e,n)=>n.length-e.length).map(d.string)),duration:t=>d.seqMap(t.number,d.optWhitespace,t.durationType,(e,n,r)=>Yn[r].mapUnits(i=>i*e)).sepBy1(d.string(",").trim(d.optWhitespace).or(d.optWhitespace)).map(e=>e.reduce((n,r)=>n.plus(r))).desc("duration like 4hr2min"),rawNull:t=>d.string("null"),tagSource:t=>t.tag.map(e=>Be.tag(e)),csvSource:t=>d.seqMap(d.string("csv(").skip(d.optWhitespace),t.string,d.string(")"),(e,n,r)=>Be.csv(n)),linkIncomingSource:t=>t.link.map(e=>Be.link(e.path,!0)),linkOutgoingSource:t=>d.seqMap(d.string("outgoing(").skip(d.optWhitespace),t.link,d.string(")"),(e,n,r)=>Be.link(n.path,!1)),folderSource:t=>t.string.map(e=>Be.folder(e)),parensSource:t=>d.seqMap(d.string("("),d.optWhitespace,t.source,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>r),negateSource:t=>d.seqMap(d.alt(d.string("-"),d.string("!")),t.atomSource,(e,n)=>Be.negate(n)),atomSource:t=>d.alt(t.parensSource,t.negateSource,t.linkOutgoingSource,t.linkIncomingSource,t.folderSource,t.tagSource,t.csvSource),binaryOpSource:t=>Lt(t.atomSource,t.binaryBooleanOp.map(e=>e),Be.binaryOp),source:t=>t.binaryOpSource,variableField:t=>t.identifier.chain(e=>Jn.includes(e.toUpperCase())?d.fail("Variable fields cannot be a keyword ("+Jn.join(" or ")+")"):d.succeed(J.variable(e))).desc("variable"),numberField:t=>t.number.map(e=>J.literal(e)).desc("number"),stringField:t=>t.string.map(e=>J.literal(e)).desc("string"),boolField:t=>t.bool.map(e=>J.literal(e)).desc("boolean"),dateField:t=>d.seqMap(d.string("date("),d.optWhitespace,t.datePlus,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>J.literal(r)).desc("date"),durationField:t=>d.seqMap(d.string("dur("),d.optWhitespace,t.duration,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>J.literal(r)).desc("duration"),nullField:t=>t.rawNull.map(e=>J.NULL),linkField:t=>t.link.map(e=>J.literal(e)),listField:t=>t.field.sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("[").skip(d.optWhitespace),d.optWhitespace.then(d.string("]"))).map(e=>J.list(e)).desc("list ('[1, 2, 3]')"),objectField:t=>d.seqMap(t.identifier.or(t.string),d.string(":").trim(d.optWhitespace),t.field,(e,n,r)=>({name:e,value:r})).sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("{").skip(d.optWhitespace),d.optWhitespace.then(d.string("}"))).map(e=>{let n={};for(let r of e)n[r.name]=r.value;return J.object(n)}).desc("object ('{ a: 1, b: 2 }')"),atomInlineField:t=>d.alt(t.date,t.duration.map(e=>Ts(e)),t.string,t.tag,t.embedLink,t.bool,t.number,t.rawNull),inlineFieldList:t=>t.atomInlineField.sepBy(d.string(",").trim(d.optWhitespace).lookahead(t.atomInlineField)),inlineField:t=>d.alt(d.seqMap(t.atomInlineField,d.string(",").trim(d.optWhitespace),t.inlineFieldList,(e,n,r)=>[e].concat(r)),t.atomInlineField),atomField:t=>d.alt(t.embedLink.map(e=>J.literal(e)),t.negatedField,t.linkField,t.listField,t.objectField,t.lambdaField,t.parensField,t.boolField,t.numberField,t.stringField,t.dateField,t.durationField,t.nullField,t.variableField),indexField:t=>d.seqMap(t.atomField,d.alt(t.dotPostfix,t.indexPostfix,t.functionPostfix).many(),(e,n)=>{let r=e;for(let i of n)switch(i.type){case"dot":r=J.index(r,J.literal(i.field));break;case"index":r=J.index(r,i.field);break;case"function":r=J.func(r,i.fields);break}return r}),negatedField:t=>d.seqMap(d.string("!"),t.indexField,(e,n)=>J.negate(n)).desc("negated field"),parensField:t=>d.seqMap(d.string("("),d.optWhitespace,t.field,d.optWhitespace,d.string(")"),(e,n,r,i,a)=>r),lambdaField:t=>d.seqMap(t.identifier.sepBy(d.string(",").trim(d.optWhitespace)).wrap(d.string("(").trim(d.optWhitespace),d.string(")").trim(d.optWhitespace)),d.string("=>").trim(d.optWhitespace),t.field,(e,n,r)=>({type:"lambda",arguments:e,value:r})),dotPostfix:t=>d.seqMap(d.string("."),t.identifier,(e,n)=>({type:"dot",field:n})),indexPostfix:t=>d.seqMap(d.string("["),d.optWhitespace,t.field,d.optWhitespace,d.string("]"),(e,n,r,i,a)=>({type:"index",field:r})),functionPostfix:t=>d.seqMap(d.string("("),d.optWhitespace,t.field.sepBy(d.string(",").trim(d.optWhitespace)),d.optWhitespace,d.string(")"),(e,n,r,i,a)=>({type:"function",fields:r})),binaryMulDivField:t=>Lt(t.indexField,t.binaryMulDiv,J.binaryOp),binaryPlusMinusField:t=>Lt(t.binaryMulDivField,t.binaryPlusMinus,J.binaryOp),binaryCompareField:t=>Lt(t.binaryPlusMinusField,t.binaryCompareOp,J.binaryOp),binaryBooleanField:t=>Lt(t.binaryCompareField,t.binaryBooleanOp,J.binaryOp),binaryOpField:t=>t.binaryBooleanField,field:t=>t.binaryOpField});function Fa(t){try{return on.success(we.field.tryParse(t))}catch(e){return on.failure(""+e)}}var ln;(function(t){function e(r,i){return{name:r,field:i}}t.named=e;function n(r,i){return{field:r,direction:i}}t.sortBy=n})(ln||(ln={}));function ya(t){return d.custom((e,n)=>(r,i)=>{let a=t._(r,i);return a.status?Object.assign({},a,{value:[a.value,r.substring(i,a.index)]}):a})}function Ea(t){return t.split(/[\r\n]+/).map(e=>e.trim()).join("")}function Ms(t,e){return d.eof.map(t).or(d.whitespace.then(e))}const As=d.createLanguage({queryType:t=>d.alt(d.regexp(/TABLE|LIST|TASK|CALENDAR/i)).map(e=>e.toLowerCase()).desc("query type ('TABLE', 'LIST', 'TASK', or 'CALENDAR')"),explicitNamedField:t=>d.seqMap(we.field.skip(d.whitespace),d.regexp(/AS/i).skip(d.whitespace),we.identifier.or(we.string),(e,n,r)=>ln.named(r,e)),comment:()=>d.Parser((t,e)=>{let n=t.substring(e);if(!n.startsWith("//"))return d.makeFailure(e,"Not a comment");n=n.split(`
`)[0];let r=n.substring(2).trim();return d.makeSuccess(e+n.length,r)}),namedField:t=>d.alt(t.explicitNamedField,ya(we.field).map(([e,n])=>ln.named(Ea(n),e))),sortField:t=>d.seqMap(we.field.skip(d.optWhitespace),d.regexp(/ASCENDING|DESCENDING|ASC|DESC/i).atMost(1),(e,n)=>{let r=n.length==0?"ascending":n[0].toLowerCase();return r=="desc"&&(r="descending"),r=="asc"&&(r="ascending"),{field:e,direction:r}}),headerClause:t=>t.queryType.chain(e=>{switch(e){case"table":return Ms(()=>({type:e,fields:[],showId:!0}),d.seqMap(d.regexp(/WITHOUT\s+ID/i).skip(d.optWhitespace).atMost(1),d.sepBy(t.namedField,d.string(",").trim(d.optWhitespace)),(n,r)=>({type:e,fields:r,showId:n.length==0})));case"list":return Ms(()=>({type:e,format:void 0,showId:!0}),d.seqMap(d.regexp(/WITHOUT\s+ID/i).skip(d.optWhitespace).atMost(1),we.field.atMost(1),(n,r)=>({type:e,format:r.length==1?r[0]:void 0,showId:n.length==0})));case"task":return d.succeed({type:e});case"calendar":return d.whitespace.then(d.seqMap(t.namedField,n=>({type:e,showId:!0,field:n})));default:return d.fail(`Unrecognized query type '${e}'`)}}).desc("TABLE or LIST or TASK or CALENDAR"),fromClause:t=>d.seqMap(d.regexp(/FROM/i),d.whitespace,we.source,(e,n,r)=>r),whereClause:t=>d.seqMap(d.regexp(/WHERE/i),d.whitespace,we.field,(e,n,r)=>({type:"where",clause:r})).desc("WHERE <expression>"),sortByClause:t=>d.seqMap(d.regexp(/SORT/i),d.whitespace,t.sortField.sepBy1(d.string(",").trim(d.optWhitespace)),(e,n,r)=>({type:"sort",fields:r})).desc("SORT field [ASC/DESC]"),limitClause:t=>d.seqMap(d.regexp(/LIMIT/i),d.whitespace,we.field,(e,n,r)=>({type:"limit",amount:r})).desc("LIMIT <value>"),flattenClause:t=>d.seqMap(d.regexp(/FLATTEN/i).skip(d.whitespace),t.namedField,(e,n)=>({type:"flatten",field:n})).desc("FLATTEN <value> [AS <name>]"),groupByClause:t=>d.seqMap(d.regexp(/GROUP BY/i).skip(d.whitespace),t.namedField,(e,n)=>({type:"group",field:n})).desc("GROUP BY <value> [AS <name>]"),clause:t=>d.alt(t.fromClause,t.whereClause,t.sortByClause,t.limitClause,t.groupByClause,t.flattenClause),query:t=>d.seqMap(t.headerClause.trim(Kn),t.fromClause.trim(Kn).atMost(1),t.clause.trim(Kn).many(),(e,n,r)=>({header:e,source:n.length==0?Be.folder(""):n[0],operations:r,settings:Hn}))}),Kn=d.alt(d.whitespace,As.comment).many().map(t=>t.join("")),wa=t=>t?t.plugins.plugins.dataview?.api:window.DataviewAPI,Ca=t=>t.plugins.enabledPlugins.has("dataview");return Te.DATE_SHORTHANDS=Gn,Te.DURATION_TYPES=Yn,Te.EXPRESSION=we,Te.KEYWORDS=Jn,Te.QUERY_LANGUAGE=As,Te.getAPI=wa,Te.isPluginEnabled=Ca,Te.parseField=Fa,Te}var ei=Oo();class ko{constructor(s){this.plugin=s}id="dataview";test(s){return/^(TABLE|LIST|TASK|CALENDAR)/.test(s)}async parse(s,u){if(!ei.isPluginEnabled(this.plugin.app))return await ei.getAPI(this.plugin.app).query(s,u)}}class Bo{constructor(s){this.plugin=s,this.#e=[new ko(s),new xo,new To]}#e;#t(){if(!this.plugin.settings.enable_separators)return;const s=this.plugin.settings.usage_separator.replace(/[.+*?^${}()|[\]\\]/gi,"\\$&");return new RegExp(s,"gi")}parse(s,u,l){l.trace(`Parsing from '${u}' <${s}>`);const D=this.#t();try{if(D?.test(s)){for(const p of this.#e)if(p.test(s))return l.debug(`Parsing as ${p.id}`),{syntax:p.id,data:s.split(D).map(y=>p.parse(y,u))}}for(const p of this.#e)if(p.test(s))return l.debug(`Parsing as ${p.id}`),{syntax:p.id,data:p.parse(s,u)}}catch(p){l.debug(p)}return l.debug("Failed parsing",s),{syntax:"unknown",data:s}}}class pi{constructor(s){this.plugin=s}renderHTML(s,u,l){l.debug("Rendering as HTML"),s.innerHTML=u}renderMarkdown(s,u,l,D){D.debug("Rendering as Markdown"),U.MarkdownRenderer.render(this.plugin.app,u,s,l,this.plugin)}}class Mo extends pi{test(s){return/\.(md|html)$/i.test(s.name)}async render(s,u,l,D,p){p.debug("Rendering from Template");const y=await this.#e(s,p),b=this.#t(y,D,p);s.name.endsWith("md")?this.renderMarkdown(l,b,u.notepath,p):this.renderHTML(l,b,p)}#e(s,u){return u.debug("Retrieving Template"),this.plugin.app.vault.read(s)}#t(s,u,l){return l.debug("Replacing Placeholders"),u?!mi(u)&&!Array.isArray(u)?s.replace(/\{\{ *(\w+) *\}\}/gi,String(u)):s.replace(/\{\{ *(\w+) *\}\}/gi,(D,p)=>u[p]?String(u[p]):`{{ ${p} }}`):s}}class Ao extends pi{#e;constructor(s,u){super(s),this.#e=u}test(s){return/\.[cm]js$/.test(s.name)}async render(s,u,l,D,p){p.debug("Rendering from Javascript");const y=await this.#t(s,p);if(/\.md\.[cm]js$/i.test(s.name)){const b=await y(D,u);this.renderMarkdown(l,b,u.notepath,p)}else if(/\.html\.[cm]js$/i.test(s.name)){const b=await y(D,u);this.renderHTML(l,b,p)}else await y(l,D,u)}async#t(s,u){u.debug("Retrieving Javascript Renderer");const l=await this.#n(s,u);if(typeof l=="function")return l;if(!mi(l))throw new it(`component(${s.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"});if(typeof l.default=="function")return l.default;if(typeof l.render=="function")return l.render;throw new it(`component(${s.name}) should export a function or a 'render' method`,{code:"missing-component-renderer"})}async#n(s,u){u.debug("Sourcing Renderer");try{if(s.extension==="mjs"){const D=this.#e.getResourcePath(s);return u.debug(`import('${D}')`),await import(D)}const l=this.#e.getAbsolutePath(s.path);return u.debug(`require('${l}')`),require(l)}catch(l){throw new it(`component(${s.name}) could not be imported/required`,{cause:l,code:"invalid-component-syntax"})}}}class No{#e;constructor(s){const u=new ur(s);this.#e=[new Mo(s),new Ao(s,u)]}async render(s,u,l,D,p){for(const y of this.#e)if(y.test(s))return l.empty(),y.render(s,u,l,D,p);throw new it(`component(${s.name}) is not supported`,{code:"unsupported-component"})}}const ti=()=>/(?<=from *['"`]|require *\( *['"`])(.+)(?=['"`])/gi;class ar{#e;#t;#n;#r;#s;#i=new bt;#u=new bt;constructor(s,u){this.#e=s.log.make(ar.name),this.#t=new ur(s),this.#n=s,this.#r=u,this.#s=this.#n.app.vault.on("modify",this.#l.bind(this))}clear(){this.#n.app.vault.offref(this.#s),this.#i.clear(),this.#u.clear()}async resetCache(s){this.#n.isDesignModeEnabled&&(await this.#t.renewFolder(this.#t.getCachePath()),s.info("Cleared Versions Cache"))}resolveLatest(s){return this.#n.isDesignModeEnabled?this.#u.getFirst(s)??s:s}async#l(s){if(!(s instanceof U.TFile))return;const u=this.#e.group();u.debug(`Listening changes on <${s.name}>`),u.debug("Listing affected files");const l=await this.#c(s,u);u.debug("Prepared affected files"),await this.#r(l,u),u.flush(`Listened changes on <${s.name}>`)}async#c(s,u){const l=[],D=[s],p=async y=>{u.debug(`Refreshing dependencies <${y.name}>`),await this.#o(y,u),u.debug(`Checking dependents <${y.name}>`);for(const b of this.#i.get(y.path)){const g=this.#t.resolveFile(b);g?D.push(g):u.warn("Not found",b)}};for(;D.length;){const y=D.shift();if(!y||l.includes(y.path))continue;if(["html","md"].includes(y.extension)){u.debug(`Affected Template <${y.name}>`),l.push(y.path);continue}if(y.extension==="cjs"){u.debug(`Affected CommonJS <${y.name}>`),l.push(y.path),u.debug(`Deleting cache <${y.name}>`);const g=this.#t.getAbsolutePath(y.path);delete window.require.cache[window.require.resolve(g)],await p(y);continue}if(!this.#n.isDesignModeEnabled||!this.#i.has(y.path)&&!y.path.startsWith(this.#n.settings.components_folder))continue;u.debug(`Affected ESModule <${y.name}>`),l.push(y.path),u.debug(`Caching clone <${y.name}>`);const b=await this.#f(y,u);this.#u.prepend(y.path,b),await p(y)}return u.trace("Current cjs cache",{...window.require.cache}),l.unique()}async#f(s,u){const l=await this.#t.getFileHash(s),D=`${l}.${s.basename}.${s.extension}`,p=this.#t.getCachePath(D);if(await this.#t.missing(p))return u.debug(`Caching <${s.name}> to <${D}>`),await this.#t.copy(s,p,I=>this.#a(s,I,u)),p;const y=Date.now().toString(),b=`${l}-${y}.${s.basename}.${s.extension}`,g=this.#t.getCachePath(b);return u.debug(`Cloning <${D}> to <${b}>`),await this.#t.copy(s,g,I=>this.#a(s,I,u)),g}#a(s,u,l){const D=s.parent?.path??"";return u.replaceAll(ti(),p=>{const y=this.#t.join(D,p),b=this.resolveLatest(y);return l.trace(`Replacing import path <${b}>`),this.#t.getAbsolutePath(b)})}async indexComponents(s){if(!this.#n.isDesignModeEnabled)return;const u=this.#n.settings.components_folder,l=this.#n.app.vault.getFolderByPath(u);if(!l)throw new Error(`path <${u}> is not a folder`);s.info("Indexing files");const D=[l];for(;D.length;){const p=D.shift();if(p instanceof U.TFolder){s.debug(`Indexing folder <${p.name}>`),D.push(...p.children);continue}if(p instanceof U.TFile){s.debug(`Indexing file <${p.name}>`);for(const y of await this.#o(p,s)){const b=this.#t.resolveFile(y);b?D.push(b):s.warn("Not found",y)}}}s.trace("Indexed files",{tracked:this.#i,versions:this.#u})}async#o(s,u){u.debug(`Indexing dependencies <${s.name}>`);const l=s.parent?.path??"",D=await this.#t.read(s.path),p=[];for(const y of D.matchAll(ti())){const b=this.#t.join(l,y[0]||"");u.trace(`file <${s.name}> imports <${b}>`),this.#i.push(b,s.path),p.push(b)}return p}}class or{#e;#t;#n;#r;#s;#i=new bt;#u=[];constructor(s){this.#e=s.log.make(or.name),this.#t=s,this.#n=new Bo(s),this.#r=new No(s),this.#s=new ar(s,this.refresh.bind(this))}async clear(s){s.info("Clearing in-memory cache"),this.#i.clear(),this.#s.clear(),await this.#s.resetCache(s)}async prepareDesignMode(){const s=this.#e.group("Preparing DesignMode");try{s.info("Clearing cache"),await this.#s.resetCache(s),await this.#s.indexComponents(s),s.info("Refreshing All Components"),await this.refresh(Array.from(this.#i.keys()),s)}catch(u){s.warn(u)}s.flush("DesignMode Enabled")}async refresh(s,u){const l=s.length?s:this.#i.keys();u.debug("Refreshing Components",s);for(const D of l){u.debug(`Refreshing Components(${D})`);try{for(const p of this.#i.get(D))u.trace("Refreshing Codeblock",p),await this.#a(D,p,u)}catch(p){u.warn(p)}}u.debug("Refreshed Components")}registerBaseCodeblock(){this.#t.registerMarkdownCodeBlockProcessor("use",this.#l.bind(this),-100)}registerCustomCodeblocks(){for(const[s,u]of this.#t.state.components_enabled.entries())for(const l of u)this.#u.includes(l)||(this.#u.push(l),this.#t.registerMarkdownCodeBlockProcessor(l,(D,p,y)=>{this.#l(D,p,y,s,l)},-100))}async#l(s,u,l,D,p){const y=this.#e.group();try{y.debug(`Parsing Codeblock Name '${p??"use"}'`);const b=l.sourcePath,g=p??this.#c(l,u);y.debug(`Parsing Codeblock Content '${g}'`);const{syntax:I,data:R}=this.#n.parse(s,b,y),H=this.#f(D,g),K=po(s);y.debug(`Serializing Codeblock '${g}'`);const fe={context:{notepath:b,used_name:g,syntax:I,hash:K},element:u,data:R};y.trace("Serialized Codeblock",fe),y.debug(`Rendering Codeblock '${g}'`),u.classList.add("component",`${g}-component`),this.#i.push(H.path,fe),await this.#a(H.path,fe,y),y.flush(`Rendered Component '${g}'`)}catch(b){y.error(b),y.flush(`Failed Component on '${l.sourcePath}'`);const g=u.createEl("pre");g.classList.add("component-error"),b instanceof Ks&&(b.cause=s),b instanceof Error?g.append(b.stack??b.message):g.append(JSON.stringify(b))}}#c(s,u){const l=s.getSectionInfo(u);if(l){const p=(l.text.split(`
`).at(l.lineStart)??"").replace("```use","").trim();if(p)return p}throw new it(`component name could not be found on '${s.sourcePath}'`,{cause:l,code:"missing-component-name"})}#f(s,u){if(s){for(const l of this.#t.state.components_matchers)if(l.id===s)return l}if(u){for(const l of this.#t.state.components_matchers)if(l.test(u))return l}throw new Ks(`component(${u}) was disabled recently`)}async#a(s,{context:u,element:l,data:D},p){const y=this.#s.resolveLatest(s);p.debug(`Rendering with LatestPath '${y}'`);const b=this.#t.app.vault.getFileByPath(y);if(b)return this.#r.render(b,u,l,D,p);throw new it(`component(${y}) could not be located, try reloading Obsidian`,{code:"missing-component-file"})}}class lr{#e;#t;constructor(s){this.#e=s.log.make(lr.name),this.#t=s}}const Io={plugin_level:"WARN",enable_codeblocks:!1,enable_separators:!1,usage_separator:"---",cache_folder:"__temp/",components_folder:"",components_config:[]};class cr extends U.Plugin{log=jt.consoleLogger(cr.name);settings={};state={};api;#e;constructor(s,u){super(s,u),this.log.setLevel(oe.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new lr(this),this.#e=new or(this),window.Components=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new So(this)),this.#e.registerBaseCodeblock()}onunload(){const s=this.log.group("Clearing State");this.#e.clear(s),s.flush("Cleared State")}async loadSettings(){const s=this.log.group("Loading Settings"),u=await this.loadData()||{};this.settings=Object.assign({},Io,u),s.debug("Loaded: ",this.settings),this.#t(s),s.flush("Loaded Settings")}async saveSettings(){const s=this.log.group("Saving Settings"),u=Object.assign({},this.settings);await this.saveData(u),s.debug("Saved: ",u),this.#t(s),s.flush("Saved Settings")}#t(s){s.info("Preparing state"),this.log.setLevel(oe[this.settings.plugin_level]),this.state=go(this),this.#e.registerCustomCodeblocks()}#n=!1;get isDesignModeEnabled(){return this.#n}enableDesignMode(){this.#n||(this.#n=!0,this.#e.prepareDesignMode())}}module.exports=cr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsdWlzLmJzK29ic2lkaWFuLWZuY0AxLjQuMi9ub2RlX21vZHVsZXMvQGx1aXMuYnMvb2JzaWRpYW4tZm5jL2xpYi9vYnNpZGlhbi1mbmMuZXNtLmpzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxpdHkvRmlsZXN5c3RlbUFkYXB0ZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbGl0eS9NYXBTdG9yZS50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L2NvbW1vbi50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L3N0YXRlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL1NldHRpbmdzVGFiVG9vbHMudHMiLCIuLi8uLi8uLi8uLi9zcmMvc2V0dGluZ3MvU2V0dGluZ3NUYWJDb21wb25lbnRzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL3ZhbHVlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zZXR0aW5ncy9TZXR0aW5nc1RhYi50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL0NvbXBvbmVudEVycm9yLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9ZYW1sUGFyc2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9Kc29uUGFyc2VyLnRzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL29ic2lkaWFuLWRhdGF2aWV3QDAuNS42Ny9ub2RlX21vZHVsZXMvb2JzaWRpYW4tZGF0YXZpZXcvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcGFyc2Vycy9EYXRhdmlld1BhcnNlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL3BhcnNlcnMvaW5kZXgudHMiLCIuLi8uLi8uLi8uLi9zcmMvY29kZWJsb2Nrcy9yZW5kZXJlcnMvQmFzZVJlbmRlcmVyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2NvZGVibG9ja3MvcmVuZGVyZXJzL1RlbXBsYXRlUmVuZGVyZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvY29kZWJsb2Nrcy9yZW5kZXJlcnMvSmF2YXNjcmlwdFJlbmRlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL3JlbmRlcmVycy9pbmRleC50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL1ZlcnNpb25zTWFuYWdlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb2RlYmxvY2tzL0NvZGVibG9ja0hhbmRsZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvQ29tcG9uZW50c0FQSS50cyIsIi4uLy4uLy4uLy4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIyLXByZXNlbnQgTHVpcyBCcmF5YW5cbiAqIEBsdWlzLmJzL29ic2lkaWFuLWZuY0AxLjQuMiBpcyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIEBzb3VyY2UgaHR0cHM6Ly9naXRodWIuY29tL2x1aXNicy9vYnNpZGlhbi1mbmNcbiAqL1xuaW1wb3J0IHsgU2NvcGUgYXMgZHQsIG5vcm1hbGl6ZVBhdGggYXMgZ3QsIFRGb2xkZXIgYXMgRiwgVEZpbGUgYXMgQiB9IGZyb20gXCJvYnNpZGlhblwiO1xuY2xhc3MgcHQge1xuICBlcnJvcih0LCBuKSB7XG4gICAgY29uc29sZS5lcnJvcih0LCAuLi5uKTtcbiAgfVxuICB3YXJuKHQsIG4pIHtcbiAgICBjb25zb2xlLndhcm4odCwgLi4ubik7XG4gIH1cbiAgaW5mbyh0LCBuKSB7XG4gICAgY29uc29sZS5pbmZvKHQsIC4uLm4pO1xuICB9XG4gIGRlYnVnKHQsIG4pIHtcbiAgICBjb25zb2xlLmRlYnVnKHQsIC4uLm4pO1xuICB9XG4gIHRyYWNlKHQsIG4pIHtcbiAgICBjb25zb2xlLnRyYWNlKHQsIC4uLm4pO1xuICB9XG4gIGdyb3VwKHQsIG4pIHtcbiAgICByZXR1cm4gY29uc29sZS5ncm91cENvbGxhcHNlZCh0LCAuLi5uKSwgY29uc29sZS5ncm91cEVuZDtcbiAgfVxufVxuY29uc3QgZyA9IE9iamVjdC5mcmVlemUoe1xuICBUUkFDRTogMSxcbiAgREVCVUc6IDIsXG4gIElORk86IDMsXG4gIFdBUk46IDQsXG4gIEVSUk9SOiA1XG59KSwgd3QgPSBPYmplY3QuZnJlZXplKHtcbiAgMTogXCJUUkFDRVwiLFxuICAyOiBcIkRFQlVHXCIsXG4gIDM6IFwiIElORk9cIixcbiAgNDogXCIgV0FSTlwiLFxuICA1OiBcIkVSUk9SXCJcbn0pO1xuY2xhc3MgViB7XG4gICN0O1xuICAjcztcbiAgI2U7XG4gICNuID0gW107XG4gICNpID0gW107XG4gIC8qKiBPdmVycmlkZXMgY2hhaW4gaW5oZXJpdGVkIHZhbHVlLiAqL1xuICBnZXQgbGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3MgPyB0aGlzLiNzIDogdGhpcy4jdD8ubGV2ZWwgPz8gZy5XQVJOO1xuICB9XG4gIGdldCBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2UgPyB0aGlzLiNlIDogdGhpcy4jdD8uZm9ybWF0ID8/IFwiW2hoOm1tOnNzLm1zXSBsZXZlbCAobmFtZXNwYWNlKTpcIjtcbiAgfVxuICBnZXQgbmFtZXNwYWNlKCkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRoaXMuI2kubGVuZ3RoIC0gMTsgbisrKVxuICAgICAgdC5wdXNoKHRoaXMuI2lbbl1bMF0pO1xuICAgIHJldHVybiB0LnB1c2godGhpcy4jaS5hdCgtMSkgPz8gXCJcIiksIHQuam9pbihcIi5cIik7XG4gIH1cbiAgZ2V0IGRyaXZlcnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUodGhpcy4jbik7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBsZXZlbCBpcyBwcm9wYWdhdGVkLiAqL1xuICBzZXRMZXZlbCh0KSB7XG4gICAgcmV0dXJuIHRoaXMuI3MgPSB0LCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2Ugb24gZm9ybWF0IGlzIHByb3BhZ2V0ZWQuXG4gICAqIFRoZSB2YWxpZCBwbGFjZWhvbGRlcnMgYXJlOlxuICAgKiAtIGBoaGAgKGhvdXIpXG4gICAqIC0gYG1tYCAobWludXRlKVxuICAgKiAtIGBzc2AgKHNlY29uZClcbiAgICogLSBgbXNgIChtaWxsaXNlY29uZClcbiAgICogLSBgbGV2ZWxgXG4gICAqIC0gYG5hbWVzcGFjZWBcbiAgICogQGV4YW1wbGUgJ1toaDptbTpzcy5tc10gbGV2ZWwgKG5hbWVzcGFjZSk6J1xuICAgKi9cbiAgc2V0Rm9ybWF0KHQpIHtcbiAgICByZXR1cm4gdGhpcy4jZSA9IHQsIHRoaXM7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBkcml2ZXJzIGlzIG5vdCBwcm9wYWdhdGVkIGFmdGVyIGNvbnN0cnVjdGlvbi4gKi9cbiAgYWRkRHJpdmVycyguLi50KSB7XG4gICAgZm9yIChjb25zdCBuIG9mIHQpXG4gICAgICBBcnJheS5pc0FycmF5KG4pID8gdGhpcy4jbi5wdXNoKC4uLm4pIDogbiAmJiB0aGlzLiNuLnB1c2gobik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBuYW1lc3BhY2VzIGlzIG5vdCBwcm9wYWdhdGVkIGFmdGVyIGNvbnN0cnVjdGlvbi4gKi9cbiAgYWRkTmFtZXNwYWNlcyguLi50KSB7XG4gICAgZm9yIChjb25zdCBuIG9mIHQpXG4gICAgICBBcnJheS5pc0FycmF5KG4pID8gdGhpcy4jaS5wdXNoKC4uLm4pIDogbiAmJiB0aGlzLiNpLnB1c2gobik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIFN0YXJ0cyBhIExvZ2dlcnMgY2hhaW4uICovXG4gIHN0YXRpYyBjb25zb2xlTG9nZ2VyKHQpIHtcbiAgICBjb25zdCBuID0gbmV3IFYoKTtcbiAgICByZXR1cm4gbi5zZXRMZXZlbChnLldBUk4pLCBuLmFkZERyaXZlcnMobmV3IHB0KCkpLCBuLmFkZE5hbWVzcGFjZXModCksIG47XG4gIH1cbiAgLyoqIFNwYXducyBhIFN1Yi1Mb2dnZXIuICovXG4gIG1ha2UodCkge1xuICAgIGNvbnN0IG4gPSBuZXcgVigpO1xuICAgIHJldHVybiBuLiN0ID0gdGhpcywgbi5hZGREcml2ZXJzKHRoaXMuI24pLCBuLmFkZE5hbWVzcGFjZXModGhpcy4jaSwgdCksIG47XG4gIH1cbiAgLyoqIFByZXBhcmUgdGhlIGxvZyBwcmVmaXggYmFzZWQgb24gYHRoaXMuZm9ybWF0YCAqL1xuICBwcmVmaXgodCwgbikge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdC5yZXBsYWNlKFwiaGhcIiwgU3RyaW5nKHQuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgXCIwXCIpKS5yZXBsYWNlKFwibW1cIiwgU3RyaW5nKHQuZ2V0TWludXRlcygpKS5wYWRTdGFydCgyLCBcIjBcIikpLnJlcGxhY2UoXCJzc1wiLCBTdHJpbmcodC5nZXRTZWNvbmRzKCkpLnBhZFN0YXJ0KDIsIFwiMFwiKSkucmVwbGFjZShcIm1zXCIsIFN0cmluZyh0LmdldE1pbGxpc2Vjb25kcygpKS5wYWRTdGFydCgzLCBcIjBcIikpLnJlcGxhY2UoXCJsZXZlbFwiLCB3dFtuXSkucmVwbGFjZShcIm5hbWVzcGFjZVwiLCB0aGlzLm5hbWVzcGFjZSk7XG4gIH1cbiAgbG9nKHQsIG4sIHMpIHtcbiAgICBpZiAodGhpcy5sZXZlbCA+IG4pIHJldHVybjtcbiAgICBjb25zdCBpID0gdGhpcy5wcmVmaXgodCwgbik7XG4gICAgc3dpdGNoICh0aGlzLmxldmVsKSB7XG4gICAgICBjYXNlIGcuRVJST1I6XG4gICAgICAgIHRoaXMuI24uZm9yRWFjaCgocikgPT4gci5lcnJvcihpLCBzKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnLldBUk46XG4gICAgICAgIHRoaXMuI24uZm9yRWFjaCgocikgPT4gci53YXJuKGksIHMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGcuSU5GTzpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLmluZm8oaSwgcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZy5ERUJVRzpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLmRlYnVnKGksIHMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLiNuLmZvckVhY2goKHIpID0+IHIudHJhY2UoaSwgcykpO1xuICAgIH1cbiAgfVxuICBlcnJvciguLi50KSB7XG4gICAgdGhpcy5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuRVJST1IsIHQpO1xuICB9XG4gIHdhcm4oLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLldBUk4sIHQpO1xuICB9XG4gIGluZm8oLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpO1xuICB9XG4gIGRlYnVnKC4uLnQpIHtcbiAgICB0aGlzLmxvZygvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgZy5ERUJVRywgdCk7XG4gIH1cbiAgdHJhY2UoLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLlRSQUNFLCB0KTtcbiAgfVxuICAvLyBvbihsb2dnZXI6IHVua25vd24pOiBMb2dnZXIge1xuICAvLyAgIHJldHVybiBsb2dnZXIgJiYgbG9nZ2VyIGluc3RhbmNlb2YgTG9nZ2VyID8gbmV3IExvZ2dlcldyYXBwZXIodGhpcy5uYW1lc3BhY2UsIGxvZ2dlcikgOiB0aGlzXG4gIC8vIH1cbiAgLy8gLyoqIFNwYXducyBhIFN1Yi1Mb2dnZXIsIHRoYXQgZ3JvdXBzIHRoZSBsb2dzLiAqL1xuICBncm91cCguLi50KSB7XG4gICAgY29uc3QgbiA9IG5ldyBtdCgpO1xuICAgIHJldHVybiBuLiN0ID0gdGhpcywgbi5hZGREcml2ZXJzKHRoaXMuI24pLCBuLmFkZE5hbWVzcGFjZXModGhpcy4jaSksIHQubGVuZ3RoICYmIG4ubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpLCBuO1xuICB9XG59XG5jbGFzcyBtdCBleHRlbmRzIFYge1xuICAjdCA9IFtdO1xuICBsb2codCwgbiwgcykge1xuICAgIHRoaXMubGV2ZWwgPiBuIHx8IHRoaXMuI3QucHVzaCh7IHRpbWVzdGFtcDogdCwgbGV2ZWw6IG4sIGNvbnRlbnQ6IHMgfSk7XG4gIH1cbiAgZmx1c2goLi4udCkge1xuICAgIGlmICh0aGlzLiN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgc3VwZXIubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuID0gdGhpcy5wcmVmaXgoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuSU5GTyksIHMgPSB0aGlzLmRyaXZlcnMubWFwKFxuICAgICAgKGkpID0+IGkuZ3JvdXAobiwgdClcbiAgICApO1xuICAgIGZvciAoY29uc3QgeyB0aW1lc3RhbXA6IGksIGxldmVsOiByLCBjb250ZW50OiBvIH0gb2YgdGhpcy4jdClcbiAgICAgIHN1cGVyLmxvZyhpLCByLCBvKTtcbiAgICBzLmZvckVhY2goKGkpID0+IGkoKSksIHRoaXMuI3QgPSBbXTtcbiAgfVxufVxuY2xhc3MgeXQge1xuICBjb25zdHJ1Y3Rvcih0LCBuKSB7XG4gICAgdGhpcy5hcHAgPSB0LCB0aGlzLmNvbnRhaW5lckVsID0gbiwgdGhpcy5zY29wZSA9IG5ldyBkdCgpLCB0aGlzLndyYXBwZXJFbCA9IGNyZWF0ZURpdihcInN1Z2dlc3Rpb25zLXRvb2x0aXBcIik7XG4gIH1cbiAgc2NvcGU7XG4gIHdyYXBwZXJFbDtcbiAgcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJFc2NhcGVcIiwgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIHRoaXMuYXBwLmtleW1hcC5wdXNoU2NvcGUodGhpcy5zY29wZSksIHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy53cmFwcGVyRWwpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuYXBwLmtleW1hcC5wb3BTY29wZSh0aGlzLnNjb3BlKSwgdGhpcy53cmFwcGVyRWwuZW1wdHkoKSwgdGhpcy53cmFwcGVyRWwuZGV0YWNoKCk7XG4gIH1cbn1cbmNvbnN0IFkgPSBNYXRoLm1pbiwgQSA9IE1hdGgubWF4LCBIID0gTWF0aC5yb3VuZCwgeCA9IChlKSA9PiAoe1xuICB4OiBlLFxuICB5OiBlXG59KTtcbmZ1bmN0aW9uIFooZSkge1xuICByZXR1cm4gZS5zcGxpdChcIi1cIilbMF07XG59XG5mdW5jdGlvbiB4dChlKSB7XG4gIHJldHVybiBlLnNwbGl0KFwiLVwiKVsxXTtcbn1cbmZ1bmN0aW9uIEV0KGUpIHtcbiAgcmV0dXJuIGUgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIjtcbn1cbmZ1bmN0aW9uIGJ0KGUpIHtcbiAgcmV0dXJuIGUgPT09IFwieVwiID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcbn1cbmZ1bmN0aW9uIHR0KGUpIHtcbiAgcmV0dXJuIFtcInRvcFwiLCBcImJvdHRvbVwiXS5pbmNsdWRlcyhaKGUpKSA/IFwieVwiIDogXCJ4XCI7XG59XG5mdW5jdGlvbiB2dChlKSB7XG4gIHJldHVybiBFdCh0dChlKSk7XG59XG5mdW5jdGlvbiBldChlKSB7XG4gIGNvbnN0IHtcbiAgICB4OiB0LFxuICAgIHk6IG4sXG4gICAgd2lkdGg6IHMsXG4gICAgaGVpZ2h0OiBpXG4gIH0gPSBlO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBzLFxuICAgIGhlaWdodDogaSxcbiAgICB0b3A6IG4sXG4gICAgbGVmdDogdCxcbiAgICByaWdodDogdCArIHMsXG4gICAgYm90dG9tOiBuICsgaSxcbiAgICB4OiB0LFxuICAgIHk6IG5cbiAgfTtcbn1cbmZ1bmN0aW9uIFgoZSwgdCwgbikge1xuICBsZXQge1xuICAgIHJlZmVyZW5jZTogcyxcbiAgICBmbG9hdGluZzogaVxuICB9ID0gZTtcbiAgY29uc3QgciA9IHR0KHQpLCBvID0gdnQodCksIGMgPSBidChvKSwgYSA9IFoodCksIGwgPSByID09PSBcInlcIiwgdSA9IHMueCArIHMud2lkdGggLyAyIC0gaS53aWR0aCAvIDIsIGYgPSBzLnkgKyBzLmhlaWdodCAvIDIgLSBpLmhlaWdodCAvIDIsIGQgPSBzW2NdIC8gMiAtIGlbY10gLyAyO1xuICBsZXQgaDtcbiAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSBcInRvcFwiOlxuICAgICAgaCA9IHtcbiAgICAgICAgeDogdSxcbiAgICAgICAgeTogcy55IC0gaS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiB1LFxuICAgICAgICB5OiBzLnkgKyBzLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgaCA9IHtcbiAgICAgICAgeDogcy54ICsgcy53aWR0aCxcbiAgICAgICAgeTogZlxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiBzLnggLSBpLndpZHRoLFxuICAgICAgICB5OiBmXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGggPSB7XG4gICAgICAgIHg6IHMueCxcbiAgICAgICAgeTogcy55XG4gICAgICB9O1xuICB9XG4gIHN3aXRjaCAoeHQodCkpIHtcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIGhbb10gLT0gZCAqIChuICYmIGwgPyAtMSA6IDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVuZFwiOlxuICAgICAgaFtvXSArPSBkICogKG4gJiYgbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gaDtcbn1cbmNvbnN0IFJ0ID0gYXN5bmMgKGUsIHQsIG4pID0+IHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudDogcyA9IFwiYm90dG9tXCIsXG4gICAgc3RyYXRlZ3k6IGkgPSBcImFic29sdXRlXCIsXG4gICAgbWlkZGxld2FyZTogciA9IFtdLFxuICAgIHBsYXRmb3JtOiBvXG4gIH0gPSBuLCBjID0gci5maWx0ZXIoQm9vbGVhbiksIGEgPSBhd2FpdCAoby5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogby5pc1JUTCh0KSk7XG4gIGxldCBsID0gYXdhaXQgby5nZXRFbGVtZW50UmVjdHMoe1xuICAgIHJlZmVyZW5jZTogZSxcbiAgICBmbG9hdGluZzogdCxcbiAgICBzdHJhdGVneTogaVxuICB9KSwge1xuICAgIHg6IHUsXG4gICAgeTogZlxuICB9ID0gWChsLCBzLCBhKSwgZCA9IHMsIGggPSB7fSwgTCA9IDA7XG4gIGZvciAobGV0IHAgPSAwOyBwIDwgYy5sZW5ndGg7IHArKykge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWU6IGIsXG4gICAgICBmbjogSVxuICAgIH0gPSBjW3BdLCB7XG4gICAgICB4OiBPLFxuICAgICAgeTogVyxcbiAgICAgIGRhdGE6IFAsXG4gICAgICByZXNldDogQ1xuICAgIH0gPSBhd2FpdCBJKHtcbiAgICAgIHg6IHUsXG4gICAgICB5OiBmLFxuICAgICAgaW5pdGlhbFBsYWNlbWVudDogcyxcbiAgICAgIHBsYWNlbWVudDogZCxcbiAgICAgIHN0cmF0ZWd5OiBpLFxuICAgICAgbWlkZGxld2FyZURhdGE6IGgsXG4gICAgICByZWN0czogbCxcbiAgICAgIHBsYXRmb3JtOiBvLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiBlLFxuICAgICAgICBmbG9hdGluZzogdFxuICAgICAgfVxuICAgIH0pO1xuICAgIHUgPSBPID8/IHUsIGYgPSBXID8/IGYsIGggPSB7XG4gICAgICAuLi5oLFxuICAgICAgW2JdOiB7XG4gICAgICAgIC4uLmhbYl0sXG4gICAgICAgIC4uLlBcbiAgICAgIH1cbiAgICB9LCBDICYmIEwgPD0gNTAgJiYgKEwrKywgdHlwZW9mIEMgPT0gXCJvYmplY3RcIiAmJiAoQy5wbGFjZW1lbnQgJiYgKGQgPSBDLnBsYWNlbWVudCksIEMucmVjdHMgJiYgKGwgPSBDLnJlY3RzID09PSAhMCA/IGF3YWl0IG8uZ2V0RWxlbWVudFJlY3RzKHtcbiAgICAgIHJlZmVyZW5jZTogZSxcbiAgICAgIGZsb2F0aW5nOiB0LFxuICAgICAgc3RyYXRlZ3k6IGlcbiAgICB9KSA6IEMucmVjdHMpLCB7XG4gICAgICB4OiB1LFxuICAgICAgeTogZlxuICAgIH0gPSBYKGwsIGQsIGEpKSwgcCA9IC0xKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHUsXG4gICAgeTogZixcbiAgICBwbGFjZW1lbnQ6IGQsXG4gICAgc3RyYXRlZ3k6IGksXG4gICAgbWlkZGxld2FyZURhdGE6IGhcbiAgfTtcbn07XG5mdW5jdGlvbiAkKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyA8IFwidVwiO1xufVxuZnVuY3Rpb24gRChlKSB7XG4gIHJldHVybiBudChlKSA/IChlLm5vZGVOYW1lIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkgOiBcIiNkb2N1bWVudFwiO1xufVxuZnVuY3Rpb24gdyhlKSB7XG4gIHZhciB0O1xuICByZXR1cm4gKGUgPT0gbnVsbCB8fCAodCA9IGUub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IHQuZGVmYXVsdFZpZXcpIHx8IHdpbmRvdztcbn1cbmZ1bmN0aW9uIHYoZSkge1xuICB2YXIgdDtcbiAgcmV0dXJuICh0ID0gKG50KGUpID8gZS5vd25lckRvY3VtZW50IDogZS5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogdC5kb2N1bWVudEVsZW1lbnQ7XG59XG5mdW5jdGlvbiBudChlKSB7XG4gIHJldHVybiAkKCkgPyBlIGluc3RhbmNlb2YgTm9kZSB8fCBlIGluc3RhbmNlb2YgdyhlKS5Ob2RlIDogITE7XG59XG5mdW5jdGlvbiBtKGUpIHtcbiAgcmV0dXJuICQoKSA/IGUgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGUgaW5zdGFuY2VvZiB3KGUpLkVsZW1lbnQgOiAhMTtcbn1cbmZ1bmN0aW9uIEUoZSkge1xuICByZXR1cm4gJCgpID8gZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGUgaW5zdGFuY2VvZiB3KGUpLkhUTUxFbGVtZW50IDogITE7XG59XG5mdW5jdGlvbiBxKGUpIHtcbiAgcmV0dXJuICEkKCkgfHwgdHlwZW9mIFNoYWRvd1Jvb3QgPiBcInVcIiA/ICExIDogZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgfHwgZSBpbnN0YW5jZW9mIHcoZSkuU2hhZG93Um9vdDtcbn1cbmZ1bmN0aW9uIGsoZSkge1xuICBjb25zdCB7XG4gICAgb3ZlcmZsb3c6IHQsXG4gICAgb3ZlcmZsb3dYOiBuLFxuICAgIG92ZXJmbG93WTogcyxcbiAgICBkaXNwbGF5OiBpXG4gIH0gPSB5KGUpO1xuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVufGNsaXAvLnRlc3QodCArIHMgKyBuKSAmJiAhW1wiaW5saW5lXCIsIFwiY29udGVudHNcIl0uaW5jbHVkZXMoaSk7XG59XG5mdW5jdGlvbiBMdChlKSB7XG4gIHJldHVybiBbXCJ0YWJsZVwiLCBcInRkXCIsIFwidGhcIl0uaW5jbHVkZXMoRChlKSk7XG59XG5mdW5jdGlvbiBNKGUpIHtcbiAgcmV0dXJuIFtcIjpwb3BvdmVyLW9wZW5cIiwgXCI6bW9kYWxcIl0uc29tZSgodCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZS5tYXRjaGVzKHQpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiB6KGUpIHtcbiAgY29uc3QgdCA9IEcoKSwgbiA9IG0oZSkgPyB5KGUpIDogZTtcbiAgcmV0dXJuIFtcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVwiLCBcInNjYWxlXCIsIFwicm90YXRlXCIsIFwicGVyc3BlY3RpdmVcIl0uc29tZSgocykgPT4gbltzXSA/IG5bc10gIT09IFwibm9uZVwiIDogITEpIHx8IChuLmNvbnRhaW5lclR5cGUgPyBuLmNvbnRhaW5lclR5cGUgIT09IFwibm9ybWFsXCIgOiAhMSkgfHwgIXQgJiYgKG4uYmFja2Ryb3BGaWx0ZXIgPyBuLmJhY2tkcm9wRmlsdGVyICE9PSBcIm5vbmVcIiA6ICExKSB8fCAhdCAmJiAobi5maWx0ZXIgPyBuLmZpbHRlciAhPT0gXCJub25lXCIgOiAhMSkgfHwgW1widHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlXCIsIFwic2NhbGVcIiwgXCJyb3RhdGVcIiwgXCJwZXJzcGVjdGl2ZVwiLCBcImZpbHRlclwiXS5zb21lKChzKSA9PiAobi53aWxsQ2hhbmdlIHx8IFwiXCIpLmluY2x1ZGVzKHMpKSB8fCBbXCJwYWludFwiLCBcImxheW91dFwiLCBcInN0cmljdFwiLCBcImNvbnRlbnRcIl0uc29tZSgocykgPT4gKG4uY29udGFpbiB8fCBcIlwiKS5pbmNsdWRlcyhzKSk7XG59XG5mdW5jdGlvbiBDdChlKSB7XG4gIGxldCB0ID0gUihlKTtcbiAgZm9yICg7IEUodCkgJiYgIVModCk7ICkge1xuICAgIGlmICh6KHQpKVxuICAgICAgcmV0dXJuIHQ7XG4gICAgaWYgKE0odCkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB0ID0gUih0KTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIEcoKSB7XG4gIHJldHVybiB0eXBlb2YgQ1NTID4gXCJ1XCIgfHwgIUNTUy5zdXBwb3J0cyA/ICExIDogQ1NTLnN1cHBvcnRzKFwiLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXJcIiwgXCJub25lXCIpO1xufVxuZnVuY3Rpb24gUyhlKSB7XG4gIHJldHVybiBbXCJodG1sXCIsIFwiYm9keVwiLCBcIiNkb2N1bWVudFwiXS5pbmNsdWRlcyhEKGUpKTtcbn1cbmZ1bmN0aW9uIHkoZSkge1xuICByZXR1cm4gdyhlKS5nZXRDb21wdXRlZFN0eWxlKGUpO1xufVxuZnVuY3Rpb24gXyhlKSB7XG4gIHJldHVybiBtKGUpID8ge1xuICAgIHNjcm9sbExlZnQ6IGUuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGUuc2Nyb2xsVG9wXG4gIH0gOiB7XG4gICAgc2Nyb2xsTGVmdDogZS5zY3JvbGxYLFxuICAgIHNjcm9sbFRvcDogZS5zY3JvbGxZXG4gIH07XG59XG5mdW5jdGlvbiBSKGUpIHtcbiAgaWYgKEQoZSkgPT09IFwiaHRtbFwiKVxuICAgIHJldHVybiBlO1xuICBjb25zdCB0ID0gKFxuICAgIC8vIFN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlLlxuICAgIGUuYXNzaWduZWRTbG90IHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkLlxuICAgIGUucGFyZW50Tm9kZSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkLlxuICAgIHEoZSkgJiYgZS5ob3N0IHx8IC8vIEZhbGxiYWNrLlxuICAgIHYoZSlcbiAgKTtcbiAgcmV0dXJuIHEodCkgPyB0Lmhvc3QgOiB0O1xufVxuZnVuY3Rpb24gc3QoZSkge1xuICBjb25zdCB0ID0gUihlKTtcbiAgcmV0dXJuIFModCkgPyBlLm93bmVyRG9jdW1lbnQgPyBlLm93bmVyRG9jdW1lbnQuYm9keSA6IGUuYm9keSA6IEUodCkgJiYgayh0KSA/IHQgOiBzdCh0KTtcbn1cbmZ1bmN0aW9uIGl0KGUsIHQsIG4pIHtcbiAgdmFyIHM7XG4gIHQgPT09IHZvaWQgMCAmJiAodCA9IFtdKTtcbiAgY29uc3QgaSA9IHN0KGUpLCByID0gaSA9PT0gKChzID0gZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogcy5ib2R5KSwgbyA9IHcoaSk7XG4gIHJldHVybiByID8gKGoobyksIHQuY29uY2F0KG8sIG8udmlzdWFsVmlld3BvcnQgfHwgW10sIGsoaSkgPyBpIDogW10sIFtdKSkgOiB0LmNvbmNhdChpLCBpdChpLCBbXSkpO1xufVxuZnVuY3Rpb24gaihlKSB7XG4gIHJldHVybiBlLnBhcmVudCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wYXJlbnQpID8gZS5mcmFtZUVsZW1lbnQgOiBudWxsO1xufVxuZnVuY3Rpb24gcnQoZSkge1xuICBjb25zdCB0ID0geShlKTtcbiAgbGV0IG4gPSBwYXJzZUZsb2F0KHQud2lkdGgpIHx8IDAsIHMgPSBwYXJzZUZsb2F0KHQuaGVpZ2h0KSB8fCAwO1xuICBjb25zdCBpID0gRShlKSwgciA9IGkgPyBlLm9mZnNldFdpZHRoIDogbiwgbyA9IGkgPyBlLm9mZnNldEhlaWdodCA6IHMsIGMgPSBIKG4pICE9PSByIHx8IEgocykgIT09IG87XG4gIHJldHVybiBjICYmIChuID0gciwgcyA9IG8pLCB7XG4gICAgd2lkdGg6IG4sXG4gICAgaGVpZ2h0OiBzLFxuICAgICQ6IGNcbiAgfTtcbn1cbmZ1bmN0aW9uIG90KGUpIHtcbiAgcmV0dXJuIG0oZSkgPyBlIDogZS5jb250ZXh0RWxlbWVudDtcbn1cbmZ1bmN0aW9uIFQoZSkge1xuICBjb25zdCB0ID0gb3QoZSk7XG4gIGlmICghRSh0KSlcbiAgICByZXR1cm4geCgxKTtcbiAgY29uc3QgbiA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHtcbiAgICB3aWR0aDogcyxcbiAgICBoZWlnaHQ6IGksXG4gICAgJDogclxuICB9ID0gcnQodCk7XG4gIGxldCBvID0gKHIgPyBIKG4ud2lkdGgpIDogbi53aWR0aCkgLyBzLCBjID0gKHIgPyBIKG4uaGVpZ2h0KSA6IG4uaGVpZ2h0KSAvIGk7XG4gIHJldHVybiAoIW8gfHwgIU51bWJlci5pc0Zpbml0ZShvKSkgJiYgKG8gPSAxKSwgKCFjIHx8ICFOdW1iZXIuaXNGaW5pdGUoYykpICYmIChjID0gMSksIHtcbiAgICB4OiBvLFxuICAgIHk6IGNcbiAgfTtcbn1cbmNvbnN0IFR0ID0gLyogQF9fUFVSRV9fICovIHgoMCk7XG5mdW5jdGlvbiBjdChlKSB7XG4gIGNvbnN0IHQgPSB3KGUpO1xuICByZXR1cm4gIUcoKSB8fCAhdC52aXN1YWxWaWV3cG9ydCA/IFR0IDoge1xuICAgIHg6IHQudmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCxcbiAgICB5OiB0LnZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcFxuICB9O1xufVxuZnVuY3Rpb24gU3QoZSwgdCwgbikge1xuICByZXR1cm4gdCA9PT0gdm9pZCAwICYmICh0ID0gITEpLCAhbiB8fCB0ICYmIG4gIT09IHcoZSkgPyAhMSA6IHQ7XG59XG5mdW5jdGlvbiBOKGUsIHQsIG4sIHMpIHtcbiAgdCA9PT0gdm9pZCAwICYmICh0ID0gITEpLCBuID09PSB2b2lkIDAgJiYgKG4gPSAhMSk7XG4gIGNvbnN0IGkgPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCByID0gb3QoZSk7XG4gIGxldCBvID0geCgxKTtcbiAgdCAmJiAocyA/IG0ocykgJiYgKG8gPSBUKHMpKSA6IG8gPSBUKGUpKTtcbiAgY29uc3QgYyA9IFN0KHIsIG4sIHMpID8gY3QocikgOiB4KDApO1xuICBsZXQgYSA9IChpLmxlZnQgKyBjLngpIC8gby54LCBsID0gKGkudG9wICsgYy55KSAvIG8ueSwgdSA9IGkud2lkdGggLyBvLngsIGYgPSBpLmhlaWdodCAvIG8ueTtcbiAgaWYgKHIpIHtcbiAgICBjb25zdCBkID0gdyhyKSwgaCA9IHMgJiYgbShzKSA/IHcocykgOiBzO1xuICAgIGxldCBMID0gZCwgcCA9IGooTCk7XG4gICAgZm9yICg7IHAgJiYgcyAmJiBoICE9PSBMOyApIHtcbiAgICAgIGNvbnN0IGIgPSBUKHApLCBJID0gcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgTyA9IHkocCksIFcgPSBJLmxlZnQgKyAocC5jbGllbnRMZWZ0ICsgcGFyc2VGbG9hdChPLnBhZGRpbmdMZWZ0KSkgKiBiLngsIFAgPSBJLnRvcCArIChwLmNsaWVudFRvcCArIHBhcnNlRmxvYXQoTy5wYWRkaW5nVG9wKSkgKiBiLnk7XG4gICAgICBhICo9IGIueCwgbCAqPSBiLnksIHUgKj0gYi54LCBmICo9IGIueSwgYSArPSBXLCBsICs9IFAsIEwgPSB3KHApLCBwID0gaihMKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV0KHtcbiAgICB3aWR0aDogdSxcbiAgICBoZWlnaHQ6IGYsXG4gICAgeDogYSxcbiAgICB5OiBsXG4gIH0pO1xufVxuZnVuY3Rpb24gSyhlLCB0KSB7XG4gIGNvbnN0IG4gPSBfKGUpLnNjcm9sbExlZnQ7XG4gIHJldHVybiB0ID8gdC5sZWZ0ICsgbiA6IE4odihlKSkubGVmdCArIG47XG59XG5mdW5jdGlvbiBsdChlLCB0LCBuKSB7XG4gIG4gPT09IHZvaWQgMCAmJiAobiA9ICExKTtcbiAgY29uc3QgcyA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGkgPSBzLmxlZnQgKyB0LnNjcm9sbExlZnQgLSAobiA/IDAgOiAoXG4gICAgLy8gUlRMIDxib2R5PiBzY3JvbGxiYXIuXG4gICAgSyhlLCBzKVxuICApKSwgciA9IHMudG9wICsgdC5zY3JvbGxUb3A7XG4gIHJldHVybiB7XG4gICAgeDogaSxcbiAgICB5OiByXG4gIH07XG59XG5mdW5jdGlvbiBEdChlKSB7XG4gIGxldCB7XG4gICAgZWxlbWVudHM6IHQsXG4gICAgcmVjdDogbixcbiAgICBvZmZzZXRQYXJlbnQ6IHMsXG4gICAgc3RyYXRlZ3k6IGlcbiAgfSA9IGU7XG4gIGNvbnN0IHIgPSBpID09PSBcImZpeGVkXCIsIG8gPSB2KHMpLCBjID0gdCA/IE0odC5mbG9hdGluZykgOiAhMTtcbiAgaWYgKHMgPT09IG8gfHwgYyAmJiByKVxuICAgIHJldHVybiBuO1xuICBsZXQgYSA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9LCBsID0geCgxKTtcbiAgY29uc3QgdSA9IHgoMCksIGYgPSBFKHMpO1xuICBpZiAoKGYgfHwgIWYgJiYgIXIpICYmICgoRChzKSAhPT0gXCJib2R5XCIgfHwgayhvKSkgJiYgKGEgPSBfKHMpKSwgRShzKSkpIHtcbiAgICBjb25zdCBoID0gTihzKTtcbiAgICBsID0gVChzKSwgdS54ID0gaC54ICsgcy5jbGllbnRMZWZ0LCB1LnkgPSBoLnkgKyBzLmNsaWVudFRvcDtcbiAgfVxuICBjb25zdCBkID0gbyAmJiAhZiAmJiAhciA/IGx0KG8sIGEsICEwKSA6IHgoMCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IG4ud2lkdGggKiBsLngsXG4gICAgaGVpZ2h0OiBuLmhlaWdodCAqIGwueSxcbiAgICB4OiBuLnggKiBsLnggLSBhLnNjcm9sbExlZnQgKiBsLnggKyB1LnggKyBkLngsXG4gICAgeTogbi55ICogbC55IC0gYS5zY3JvbGxUb3AgKiBsLnkgKyB1LnkgKyBkLnlcbiAgfTtcbn1cbmZ1bmN0aW9uIE90KGUpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZS5nZXRDbGllbnRSZWN0cygpKTtcbn1cbmZ1bmN0aW9uIEF0KGUpIHtcbiAgY29uc3QgdCA9IHYoZSksIG4gPSBfKGUpLCBzID0gZS5vd25lckRvY3VtZW50LmJvZHksIGkgPSBBKHQuc2Nyb2xsV2lkdGgsIHQuY2xpZW50V2lkdGgsIHMuc2Nyb2xsV2lkdGgsIHMuY2xpZW50V2lkdGgpLCByID0gQSh0LnNjcm9sbEhlaWdodCwgdC5jbGllbnRIZWlnaHQsIHMuc2Nyb2xsSGVpZ2h0LCBzLmNsaWVudEhlaWdodCk7XG4gIGxldCBvID0gLW4uc2Nyb2xsTGVmdCArIEsoZSk7XG4gIGNvbnN0IGMgPSAtbi5zY3JvbGxUb3A7XG4gIHJldHVybiB5KHMpLmRpcmVjdGlvbiA9PT0gXCJydGxcIiAmJiAobyArPSBBKHQuY2xpZW50V2lkdGgsIHMuY2xpZW50V2lkdGgpIC0gaSksIHtcbiAgICB3aWR0aDogaSxcbiAgICBoZWlnaHQ6IHIsXG4gICAgeDogbyxcbiAgICB5OiBjXG4gIH07XG59XG5mdW5jdGlvbiBGdChlLCB0KSB7XG4gIGNvbnN0IG4gPSB3KGUpLCBzID0gdihlKSwgaSA9IG4udmlzdWFsVmlld3BvcnQ7XG4gIGxldCByID0gcy5jbGllbnRXaWR0aCwgbyA9IHMuY2xpZW50SGVpZ2h0LCBjID0gMCwgYSA9IDA7XG4gIGlmIChpKSB7XG4gICAgciA9IGkud2lkdGgsIG8gPSBpLmhlaWdodDtcbiAgICBjb25zdCBsID0gRygpO1xuICAgICghbCB8fCBsICYmIHQgPT09IFwiZml4ZWRcIikgJiYgKGMgPSBpLm9mZnNldExlZnQsIGEgPSBpLm9mZnNldFRvcCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcixcbiAgICBoZWlnaHQ6IG8sXG4gICAgeDogYyxcbiAgICB5OiBhXG4gIH07XG59XG5mdW5jdGlvbiBOdChlLCB0KSB7XG4gIGNvbnN0IG4gPSBOKGUsICEwLCB0ID09PSBcImZpeGVkXCIpLCBzID0gbi50b3AgKyBlLmNsaWVudFRvcCwgaSA9IG4ubGVmdCArIGUuY2xpZW50TGVmdCwgciA9IEUoZSkgPyBUKGUpIDogeCgxKSwgbyA9IGUuY2xpZW50V2lkdGggKiByLngsIGMgPSBlLmNsaWVudEhlaWdodCAqIHIueSwgYSA9IGkgKiByLngsIGwgPSBzICogci55O1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBvLFxuICAgIGhlaWdodDogYyxcbiAgICB4OiBhLFxuICAgIHk6IGxcbiAgfTtcbn1cbmZ1bmN0aW9uIEooZSwgdCwgbikge1xuICBsZXQgcztcbiAgaWYgKHQgPT09IFwidmlld3BvcnRcIilcbiAgICBzID0gRnQoZSwgbik7XG4gIGVsc2UgaWYgKHQgPT09IFwiZG9jdW1lbnRcIilcbiAgICBzID0gQXQodihlKSk7XG4gIGVsc2UgaWYgKG0odCkpXG4gICAgcyA9IE50KHQsIG4pO1xuICBlbHNlIHtcbiAgICBjb25zdCBpID0gY3QoZSk7XG4gICAgcyA9IHtcbiAgICAgIHg6IHQueCAtIGkueCxcbiAgICAgIHk6IHQueSAtIGkueSxcbiAgICAgIHdpZHRoOiB0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0LmhlaWdodFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGV0KHMpO1xufVxuZnVuY3Rpb24gYXQoZSwgdCkge1xuICBjb25zdCBuID0gUihlKTtcbiAgcmV0dXJuIG4gPT09IHQgfHwgIW0obikgfHwgUyhuKSA/ICExIDogeShuKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiIHx8IGF0KG4sIHQpO1xufVxuZnVuY3Rpb24ga3QoZSwgdCkge1xuICBjb25zdCBuID0gdC5nZXQoZSk7XG4gIGlmIChuKVxuICAgIHJldHVybiBuO1xuICBsZXQgcyA9IGl0KGUsIFtdKS5maWx0ZXIoKGMpID0+IG0oYykgJiYgRChjKSAhPT0gXCJib2R5XCIpLCBpID0gbnVsbDtcbiAgY29uc3QgciA9IHkoZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIjtcbiAgbGV0IG8gPSByID8gUihlKSA6IGU7XG4gIGZvciAoOyBtKG8pICYmICFTKG8pOyApIHtcbiAgICBjb25zdCBjID0geShvKSwgYSA9IHoobyk7XG4gICAgIWEgJiYgYy5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiICYmIChpID0gbnVsbCksIChyID8gIWEgJiYgIWkgOiAhYSAmJiBjLnBvc2l0aW9uID09PSBcInN0YXRpY1wiICYmICEhaSAmJiBbXCJhYnNvbHV0ZVwiLCBcImZpeGVkXCJdLmluY2x1ZGVzKGkucG9zaXRpb24pIHx8IGsobykgJiYgIWEgJiYgYXQoZSwgbykpID8gcyA9IHMuZmlsdGVyKCh1KSA9PiB1ICE9PSBvKSA6IGkgPSBjLCBvID0gUihvKTtcbiAgfVxuICByZXR1cm4gdC5zZXQoZSwgcyksIHM7XG59XG5mdW5jdGlvbiBJdChlKSB7XG4gIGxldCB7XG4gICAgZWxlbWVudDogdCxcbiAgICBib3VuZGFyeTogbixcbiAgICByb290Qm91bmRhcnk6IHMsXG4gICAgc3RyYXRlZ3k6IGlcbiAgfSA9IGU7XG4gIGNvbnN0IG8gPSBbLi4ubiA9PT0gXCJjbGlwcGluZ0FuY2VzdG9yc1wiID8gTSh0KSA/IFtdIDoga3QodCwgdGhpcy5fYykgOiBbXS5jb25jYXQobiksIHNdLCBjID0gb1swXSwgYSA9IG8ucmVkdWNlKChsLCB1KSA9PiB7XG4gICAgY29uc3QgZiA9IEoodCwgdSwgaSk7XG4gICAgcmV0dXJuIGwudG9wID0gQShmLnRvcCwgbC50b3ApLCBsLnJpZ2h0ID0gWShmLnJpZ2h0LCBsLnJpZ2h0KSwgbC5ib3R0b20gPSBZKGYuYm90dG9tLCBsLmJvdHRvbSksIGwubGVmdCA9IEEoZi5sZWZ0LCBsLmxlZnQpLCBsO1xuICB9LCBKKHQsIGMsIGkpKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogYS5yaWdodCAtIGEubGVmdCxcbiAgICBoZWlnaHQ6IGEuYm90dG9tIC0gYS50b3AsXG4gICAgeDogYS5sZWZ0LFxuICAgIHk6IGEudG9wXG4gIH07XG59XG5mdW5jdGlvbiBXdChlKSB7XG4gIGNvbnN0IHtcbiAgICB3aWR0aDogdCxcbiAgICBoZWlnaHQ6IG5cbiAgfSA9IHJ0KGUpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB0LFxuICAgIGhlaWdodDogblxuICB9O1xufVxuZnVuY3Rpb24gQnQoZSwgdCwgbikge1xuICBjb25zdCBzID0gRSh0KSwgaSA9IHYodCksIHIgPSBuID09PSBcImZpeGVkXCIsIG8gPSBOKGUsICEwLCByLCB0KTtcbiAgbGV0IGMgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgY29uc3QgYSA9IHgoMCk7XG4gIGlmIChzIHx8ICFzICYmICFyKVxuICAgIGlmICgoRCh0KSAhPT0gXCJib2R5XCIgfHwgayhpKSkgJiYgKGMgPSBfKHQpKSwgcykge1xuICAgICAgY29uc3QgZCA9IE4odCwgITAsIHIsIHQpO1xuICAgICAgYS54ID0gZC54ICsgdC5jbGllbnRMZWZ0LCBhLnkgPSBkLnkgKyB0LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaSAmJiAoYS54ID0gSyhpKSk7XG4gIGNvbnN0IGwgPSBpICYmICFzICYmICFyID8gbHQoaSwgYykgOiB4KDApLCB1ID0gby5sZWZ0ICsgYy5zY3JvbGxMZWZ0IC0gYS54IC0gbC54LCBmID0gby50b3AgKyBjLnNjcm9sbFRvcCAtIGEueSAtIGwueTtcbiAgcmV0dXJuIHtcbiAgICB4OiB1LFxuICAgIHk6IGYsXG4gICAgd2lkdGg6IG8ud2lkdGgsXG4gICAgaGVpZ2h0OiBvLmhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gVShlKSB7XG4gIHJldHVybiB5KGUpLnBvc2l0aW9uID09PSBcInN0YXRpY1wiO1xufVxuZnVuY3Rpb24gUShlLCB0KSB7XG4gIGlmICghRShlKSB8fCB5KGUpLnBvc2l0aW9uID09PSBcImZpeGVkXCIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0KVxuICAgIHJldHVybiB0KGUpO1xuICBsZXQgbiA9IGUub2Zmc2V0UGFyZW50O1xuICByZXR1cm4gdihlKSA9PT0gbiAmJiAobiA9IG4ub3duZXJEb2N1bWVudC5ib2R5KSwgbjtcbn1cbmZ1bmN0aW9uIHV0KGUsIHQpIHtcbiAgY29uc3QgbiA9IHcoZSk7XG4gIGlmIChNKGUpKVxuICAgIHJldHVybiBuO1xuICBpZiAoIUUoZSkpIHtcbiAgICBsZXQgaSA9IFIoZSk7XG4gICAgZm9yICg7IGkgJiYgIVMoaSk7ICkge1xuICAgICAgaWYgKG0oaSkgJiYgIVUoaSkpXG4gICAgICAgIHJldHVybiBpO1xuICAgICAgaSA9IFIoaSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9XG4gIGxldCBzID0gUShlLCB0KTtcbiAgZm9yICg7IHMgJiYgTHQocykgJiYgVShzKTsgKVxuICAgIHMgPSBRKHMsIHQpO1xuICByZXR1cm4gcyAmJiBTKHMpICYmIFUocykgJiYgIXoocykgPyBuIDogcyB8fCBDdChlKSB8fCBuO1xufVxuY29uc3QgVnQgPSBhc3luYyBmdW5jdGlvbihlKSB7XG4gIGNvbnN0IHQgPSB0aGlzLmdldE9mZnNldFBhcmVudCB8fCB1dCwgbiA9IHRoaXMuZ2V0RGltZW5zaW9ucywgcyA9IGF3YWl0IG4oZS5mbG9hdGluZyk7XG4gIHJldHVybiB7XG4gICAgcmVmZXJlbmNlOiBCdChlLnJlZmVyZW5jZSwgYXdhaXQgdChlLmZsb2F0aW5nKSwgZS5zdHJhdGVneSksXG4gICAgZmxvYXRpbmc6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgd2lkdGg6IHMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHMuaGVpZ2h0XG4gICAgfVxuICB9O1xufTtcbmZ1bmN0aW9uIEh0KGUpIHtcbiAgcmV0dXJuIHkoZSkuZGlyZWN0aW9uID09PSBcInJ0bFwiO1xufVxuY29uc3QgJHQgPSB7XG4gIGNvbnZlcnRPZmZzZXRQYXJlbnRSZWxhdGl2ZVJlY3RUb1ZpZXdwb3J0UmVsYXRpdmVSZWN0OiBEdCxcbiAgZ2V0RG9jdW1lbnRFbGVtZW50OiB2LFxuICBnZXRDbGlwcGluZ1JlY3Q6IEl0LFxuICBnZXRPZmZzZXRQYXJlbnQ6IHV0LFxuICBnZXRFbGVtZW50UmVjdHM6IFZ0LFxuICBnZXRDbGllbnRSZWN0czogT3QsXG4gIGdldERpbWVuc2lvbnM6IFd0LFxuICBnZXRTY2FsZTogVCxcbiAgaXNFbGVtZW50OiBtLFxuICBpc1JUTDogSHRcbn0sIE10ID0gKGUsIHQsIG4pID0+IHtcbiAgY29uc3QgcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIGkgPSB7XG4gICAgcGxhdGZvcm06ICR0LFxuICAgIC4uLm5cbiAgfSwgciA9IHtcbiAgICAuLi5pLnBsYXRmb3JtLFxuICAgIF9jOiBzXG4gIH07XG4gIHJldHVybiBSdChlLCB0LCB7XG4gICAgLi4uaSxcbiAgICBwbGF0Zm9ybTogclxuICB9KTtcbn07XG5mdW5jdGlvbiBfdCgpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIm1hdGNoV2lkdGhcIixcbiAgICBmbih7IGVsZW1lbnRzOiBlLCByZWN0czogdCB9KSB7XG4gICAgICByZXR1cm4gZS5mbG9hdGluZy5zdHlsZS53aWR0aCA9IGAke3QucmVmZXJlbmNlLndpZHRofXB4YCwgeyByZXNldDogeyByZWN0czogITAgfSB9O1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIFB0KCkge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwibWFrZUl0RmxvYXRcIixcbiAgICBmbih7IGVsZW1lbnRzOiBlLCB4OiB0LCB5OiBuIH0pIHtcbiAgICAgIHJldHVybiBlLmZsb2F0aW5nLnN0eWxlLnRvcCA9IGAke259cHhgLCBlLmZsb2F0aW5nLnN0eWxlLmxlZnQgPSBgJHt0fXB4YCwge307XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gVXQoZSwgdCkge1xuICByZXR1cm4gKGUgJSB0ICsgdCkgJSB0O1xufVxuY2xhc3MganQgZXh0ZW5kcyB5dCB7XG4gIGNvbnN0cnVjdG9yKHQsIG4sIHMpIHtcbiAgICBzdXBlcih0LCBzID8/IG4ucGFyZW50RWxlbWVudCA/PyBkb2N1bWVudC5ib2R5KSwgdGhpcy5pbnB1dEVsID0gbiwgdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICB9XG4gICN0ID0gW107XG4gICNzID0gW107XG4gICNlID0gLTE7XG4gIG9wZW4oKSB7XG4gICAgc3VwZXIub3BlbigpLCBNdCh0aGlzLmlucHV0RWwsIHRoaXMud3JhcHBlckVsLCB7XG4gICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgICBtaWRkbGV3YXJlOiBbX3QoKSwgUHQoKV1cbiAgICB9KTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpLCB0aGlzLiNlID0gLTEsIHRoaXMuI3QgPSBbXSwgdGhpcy4jcyA9IFtdO1xuICB9XG4gIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnJlZ2lzdGVyTGlzdGVuZXJzKCksIHRoaXMuc2NvcGUucmVnaXN0ZXIoW10sIFwiRW50ZXJcIiwgKHQpID0+IHRoaXMub25LZXlwcmVzcyh0LCBcImVudGVyXCIpKSwgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJBcnJvd1VwXCIsICh0KSA9PiB0aGlzLm9uS2V5cHJlc3ModCwgXCJ1cFwiKSksIHRoaXMuc2NvcGUucmVnaXN0ZXIoXG4gICAgICBbXSxcbiAgICAgIFwiQXJyb3dEb3duXCIsXG4gICAgICAodCkgPT4gdGhpcy5vbktleXByZXNzKHQsIFwiZG93blwiKVxuICAgICksIHRoaXMud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKCkgPT4gITEpLCB0aGlzLndyYXBwZXJFbC5vbihcImNsaWNrXCIsIFwiLnN1Z2dlc3Rpb24taXRlbVwiLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSksIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpKSwgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImZvY3VzXCIsXG4gICAgICB0aGlzLm9uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKVxuICAgICksIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJpbnB1dFwiLFxuICAgICAgdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQodGhpcylcbiAgICApO1xuICB9XG4gIG9uQmx1cigpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xvc2UoKSwgMTAwKTtcbiAgfVxuICBvbklucHV0Q2hhbmdlKHQpIHtcbiAgICBpZiAoISh0LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSAmJiAhKHQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG4gPSB0aGlzLmdldFN1Z2dlc3Rpb25zKHQuY3VycmVudFRhcmdldC52YWx1ZSk7XG4gICAgaWYgKG4ubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy53cmFwcGVyRWwuZW1wdHkoKSwgdGhpcy4jdCA9IG4sIHRoaXMuI3MgPSBuLm1hcCgocykgPT4ge1xuICAgICAgICBjb25zdCBpID0gdGhpcy53cmFwcGVyRWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJTdWdnZXN0aW9uKHMsIGkpLCBpO1xuICAgICAgfSksIHRoaXMub3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cbiAgb25LZXlwcmVzcyh0LCBuKSB7XG4gICAgaWYgKCF0LmlzQ29tcG9zaW5nKVxuICAgICAgc3dpdGNoICh0LnByZXZlbnREZWZhdWx0KCksIG4pIHtcbiAgICAgICAgY2FzZSBcImVudGVyXCI6XG4gICAgICAgICAgdGhpcy5zZWxlY3RTdWdnZXN0aW9uKHRoaXMuI3RbdGhpcy4jZV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgICB0aGlzLmZvY3VzU3VnZ2VzdGlvbih0aGlzLiNlIC0gMSwgITApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICAgIHRoaXMuZm9jdXNTdWdnZXN0aW9uKHRoaXMuI2UgKyAxLCAhMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbiAgb25DbGljayh0LCBuKSB7XG4gICAgdC5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmZvY3VzU3VnZ2VzdGlvbih0aGlzLiNzLmluZGV4T2YobiksICExKSwgdGhpcy5zZWxlY3RTdWdnZXN0aW9uKHRoaXMuI3RbdGhpcy4jZV0pO1xuICB9XG4gIGZvY3VzU3VnZ2VzdGlvbih0LCBuKSB7XG4gICAgY29uc3QgcyA9IFV0KHQsIHRoaXMuI3QubGVuZ3RoKSwgaSA9IHRoaXMuI3NbdGhpcy4jZV0sIHIgPSB0aGlzLiNzW3NdO1xuICAgIGkucmVtb3ZlQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKSwgci5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpLCB0aGlzLiNlID0gcywgbiAmJiByLnNjcm9sbEludG9WaWV3KCExKTtcbiAgfVxufVxuZnVuY3Rpb24gS3QoZSwgdCkge1xuICByZXR1cm4gZnQoZSwgdCA/IChzKSA9PiBzIGluc3RhbmNlb2YgQiAmJiB0KHMpIDogKHMpID0+IHMgaW5zdGFuY2VvZiBCKTtcbn1cbmZ1bmN0aW9uIHp0KGUsIHQpIHtcbiAgcmV0dXJuIGZ0KGUsIHQgPyAocykgPT4gcyBpbnN0YW5jZW9mIEYgJiYgdChzKSA6IChzKSA9PiBzIGluc3RhbmNlb2YgRik7XG59XG5mdW5jdGlvbiBmdChlLCB0KSB7XG4gIGxldCBuID0gZS5nZXRBbGxMb2FkZWRGaWxlcygpO1xuICByZXR1cm4gdCAmJiAobiA9IG4uZmlsdGVyKHQpKSwgbi5zb3J0KChzLCBpKSA9PiBzLnBhdGgubG9jYWxlQ29tcGFyZShpLnBhdGgpKTtcbn1cbmZ1bmN0aW9uIFl0KGUsIHQsIG4pIHtcbiAgY29uc3QgcyA9IGh0KGUsIHQpLCBpID0gbiA/IChyKSA9PiByIGluc3RhbmNlb2YgQiAmJiBuKHIpIDogKHIpID0+IHIgaW5zdGFuY2VvZiBCO1xuICByZXR1cm4gcy5jaGlsZHJlbi5maWx0ZXIoaSk7XG59XG5mdW5jdGlvbiBYdChlLCB0LCBuKSB7XG4gIGNvbnN0IHMgPSBodChlLCB0KSwgaSA9IG4gPyAocikgPT4gciBpbnN0YW5jZW9mIEYgJiYgbihyKSA6IChyKSA9PiByIGluc3RhbmNlb2YgRjtcbiAgcmV0dXJuIHMuY2hpbGRyZW4uZmlsdGVyKGkpO1xufVxuZnVuY3Rpb24gaHQoZSwgdCkge1xuICBjb25zdCBuID0gZS5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZ3QodCkpO1xuICBpZiAoIW4pXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGb2xkZXIgXCIke3R9XCIgZG9lc24ndCBleGlzdC5gKTtcbiAgaWYgKCEobiBpbnN0YW5jZW9mIEYpKVxuICAgIHRocm93IG5ldyBFcnJvcihgJHt0fSBpcyBhIGZpbGUsIG5vdCBhIGZvbGRlci5gKTtcbiAgcmV0dXJuIG47XG59XG5jbGFzcyBxdCBleHRlbmRzIGp0IHtcbiAgZ2V0U3VnZ2VzdGlvbnModCkge1xuICAgIGNvbnN0IG4gPSB0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB6dChcbiAgICAgIHRoaXMuYXBwLnZhdWx0LFxuICAgICAgLy9cbiAgICAgIChzKSA9PiBzLnBhdGgudG9Mb3dlckNhc2UoKS5jb250YWlucyhuKVxuICAgICk7XG4gIH1cbiAgcmVuZGVyU3VnZ2VzdGlvbih0LCBuKSB7XG4gICAgbi5zZXRUZXh0KHQucGF0aCk7XG4gIH1cbiAgc2VsZWN0U3VnZ2VzdGlvbih0KSB7XG4gICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gdC5wYXRoLCB0aGlzLmlucHV0RWwudHJpZ2dlcihcImlucHV0XCIpLCB0aGlzLmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEp0IHtcbiAgc3RhdGljIGpvaW4oLi4udCkge1xuICAgIHJldHVybiB0LnJlZHVjZSgobiwgcykgPT4gcyA/IG4gPyBuLnJlcGxhY2UoL1tcXFxcL10rJC9naSwgXCJcIikgKyAvL1xuICAgIFwiL1wiICsgcy5yZXBsYWNlKC9eW1xcXFwvXSsvZ2ksIFwiXCIpIDogcyA6IG4sIFwiXCIpO1xuICB9XG4gIHN0YXRpYyBub3JtYWxpemUodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2VBbGwoL1teXFx3LVxcXFwvIz8mPSc6LC4gXSsvZ2ksIFwiX1wiKTtcbiAgfVxuICBzdGF0aWMgZ2V0TmFtZSh0KSB7XG4gICAgcmV0dXJuIHQubWF0Y2goL1teXFxcXC9dKyQvZ2kpPy5hdCgwKTtcbiAgfVxuICBzdGF0aWMgZ2V0QmFzZW5hbWUodCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmdldE5hbWUodCk7XG4gICAgcmV0dXJuIG4gPyB0aGlzLnJlbW92ZUV4dChuKSA6IHZvaWQgMDtcbiAgfVxuICBzdGF0aWMgZ2V0UGFyZW50KHQpIHtcbiAgICByZXR1cm4gdC5yZXBsYWNlKC9bXFxcXC9dW15cXFxcL10qJC9naSwgXCJcIik7XG4gIH1cbiAgc3RhdGljIGhhc0V4dCh0KSB7XG4gICAgcmV0dXJuIC9cXC5bXlxcXFwvXSokL2dpLnRlc3QodCk7XG4gIH1cbiAgLyoqIFNob3VsZCB1c2UgYGhhc0V4dCgpYCBiZWZvcmUgKi9cbiAgc3RhdGljIGdldEV4dCh0KSB7XG4gICAgcmV0dXJuIC8oPzw9XFwuKShbXlxcXFwvIz9dKikoWyM/XS4qKT8kL2dpLmV4ZWModCk/LmF0KDEpO1xuICB9XG4gIHN0YXRpYyByZW1vdmVFeHQodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2UoLyhcXC5bXlxcXFwvXSopPyhbIz9dLiopPyQvZ2ksIFwiXCIpO1xuICB9XG59XG5jbGFzcyBRdCB7XG4gIHN0YXRpYyBpc1VybCh0KSB7XG4gICAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcLy9naS50ZXN0KHQpO1xuICB9XG4gIC8qKiBTaG91bGQgdXNlIGBpc1VybCgpYCBiZWZvcmUgKi9cbiAgc3RhdGljIGdldE9yaWdpbih0KSB7XG4gICAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcL1teXFxcXC9dKy9naS5leGVjKHQpPy5hdCgwKTtcbiAgfVxuICAvKiogU2hvdWxkIHVzZSBgaXNVcmwoKWAgYmVmb3JlICovXG4gIHN0YXRpYyBnZXRCYXNldXJsKHQpIHtcbiAgICByZXR1cm4gL15odHRwcz86XFwvXFwvW14jP10qL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG4gIHN0YXRpYyBnZXRIYXNoKHQpIHtcbiAgICByZXR1cm4gLyg/PD0jKVteP10qL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG4gIHN0YXRpYyBnZXRwYXJhbXModCkge1xuICAgIHJldHVybiAvKD88PVxcPykuKi9naS5leGVjKHQpPy5hdCgwKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgcXQgYXMgRm9sZGVyU3VnZ2VzdGVyLFxuICBqdCBhcyBJbnB1dFN1Z2dlc3RlcixcbiAgZyBhcyBMb2dMZXZlbCxcbiAgd3QgYXMgTG9nTGV2ZWxSZXZlcnNlLFxuICBWIGFzIExvZ2dlcixcbiAgbXQgYXMgTG9nZ2luZ0dyb3VwLFxuICB5dCBhcyBTdWdnZXN0ZXIsXG4gIEp0IGFzIFVSSSxcbiAgUXQgYXMgVVJMLFxuICBmdCBhcyBnZXRBbGxBYnN0cmFjdEZpbGVzSW5WYXVsdCxcbiAgS3QgYXMgZ2V0QWxsRmlsZXNJblZhdWx0LFxuICB6dCBhcyBnZXRBbGxGb2xkZXJzSW5WYXVsdCxcbiAgWXQgYXMgZ2V0RmlsZXNPbkZvbGRlcixcbiAgaHQgYXMgZ2V0Rm9sZGVySW5WYXVsdCxcbiAgWHQgYXMgZ2V0Rm9sZGVyc09uRm9sZGVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzaWRpYW4tZm5jLmVzbS5qcy5tYXBcbiIsImltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0bydcbmltcG9ydCB7IFRBYnN0cmFjdEZpbGUsIFRGaWxlLCBURm9sZGVyLCBWYXVsdCwgbm9ybWFsaXplUGF0aCB9IGZyb20gJ29ic2lkaWFuJ1xuXG50eXBlIENvbnRlbnRFZGl0b3IgPSAoY29udGVudDogc3RyaW5nKSA9PiBzdHJpbmdcblxuZXhwb3J0IGNsYXNzIEZpbGVzeXN0ZW1BZGFwdGVyIHtcbiAgICAjcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luXG4gICAgI3ZhdWx0OiBWYXVsdFxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKSB7XG4gICAgICAgIHRoaXMuI3ZhdWx0ID0gcGx1Z2luLmFwcC52YXVsdFxuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIFVSSSBmb3IgdGhlIGJyb3dzZXIgZW5naW5lIHRvIHVzZSwgZm9yIGV4YW1wbGUgdG8gZW1iZWQgYW4gaW1hZ2UuXG4gICAgICovXG4gICAgcHVibGljIGdldFJlc291cmNlUGF0aChmaWxlOiBURmlsZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFic29sdXRlIHBhdGggb2YgdGhlIGZpbGUgb24gdGhlIHVzZXIgc3lzdGVtLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBYnNvbHV0ZVBhdGgocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8/IG1heSBjaGFuZ2UgaW50ZXJuYWxseSBzaW5jZSBgYmFzZVBhdGhgIGlzIG5vdCBwdWJsaWMvZG9jdW1lbnRhdGVkXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90LXB1YmxpYy1hcGktdXNhZ2VcbiAgICAgICAgcmV0dXJuIFBhdGgucmVzb2x2ZSh0aGlzLiN2YXVsdC5hZGFwdGVyLmJhc2VQYXRoIGFzIHN0cmluZywgcGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB2YXVsdC1wYXRoIHRvIHRoZSBmaWxlLFxuICAgICAqIEBub3RlIGlmIG5vIHBhcmFtcyBhcmUgcGFzc2VkIHRoZSByb3V0ZSBvZiB0aGUgY2FjaGUgZm9sZGVyIGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDYWNoZVBhdGgoLi4ucGF0aHM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuam9pbihcbiAgICAgICAgICAgIHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jYWNoZV9mb2xkZXIsXG4gICAgICAgICAgICAnX19jb21wb25lbnRzX18nLFxuICAgICAgICAgICAgLi4ucGF0aHMsXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgYWZ0ZXIgam9pbmluZyB0aGUgcGF0aC5cbiAgICAgKi9cbiAgICBwdWJsaWMgam9pbiguLi5wYXRoczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplUGF0aChQYXRoLmpvaW4oLi4ucGF0aHMpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgYW4gKipmaWxlT3JQYXRoKiogdG8gYSAqKnN0cmluZyoqLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXNvbHZlUGF0aChmaWxlT3JQYXRoOiBUQWJzdHJhY3RGaWxlIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5pc1N0cmluZyhmaWxlT3JQYXRoKSA/IGZpbGVPclBhdGggOiBmaWxlT3JQYXRoLnBhdGhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGFuICoqZmlsZU9yUGF0aCoqIHRvIGEgKipURmlsZSoqIG9ubHkgaWYgcG9zc2libGUuXG4gICAgICogQG5vdGUgdGhpcyBtZXRob2QgY2FuIG5vdCBiZSB1c2VkIHdpdGggZmlsZXMgaW5zaWRlIGhpZGRlbiBmb2xkZXJzIGxpa2UgYC5vYnNpZGlhbmBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb2x2ZUZpbGUoZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcpOiBURmlsZSB8IG51bGwge1xuICAgICAgICBpZiAoZmlsZU9yUGF0aCBpbnN0YW5jZW9mIFRGaWxlKSByZXR1cm4gZmlsZU9yUGF0aFxuICAgICAgICByZXR1cm4gdGhpcy4jdmF1bHQuZ2V0RmlsZUJ5UGF0aChmaWxlT3JQYXRoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHV0aWxpdHkgbWV0aG9kLlxuICAgICAqL1xuICAgIGFzeW5jICNleGlzdHMoZmlsZXBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5leGlzdHMoZmlsZXBhdGgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgdXRpbGl0eSBtZXRob2QuXG4gICAgICovXG4gICAgYXN5bmMgI21pc3NpbmcoZmlsZXBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gIShhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLmV4aXN0cyhmaWxlcGF0aCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgZmlsZSBleGlzdHMuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGV4aXN0cyhmaWxlcGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNleGlzdHMoZmlsZXBhdGgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgZmlsZSBleGlzdHMuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIG1pc3NpbmcoZmlsZXBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy4jbWlzc2luZyhmaWxlcGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgZmlsZSBmcm9tIHRoZSBmaWxlc3lzdGVtLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZW1vdmUoZmlsZXBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlbW92ZShmaWxlcGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGNvbnRlbnQgb2YgYSBmaWxlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZWFkKGZpbGVwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5yZWFkKGZpbGVwYXRoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVkaXRzIGEgZmlsZSBjb250ZW50IHVzaW5nIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIGVkaXRvciBjYWxsYmFjayB1c2VkIHRvIHBlcmZvcm0gdGhlIGVkaXRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZWRpdChcbiAgICAgICAgZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcsXG4gICAgICAgIGVkaXRvcjogQ29udGVudEVkaXRvcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLnJlc29sdmVQYXRoKGZpbGVPclBhdGgpXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlYWQoZmlsZXBhdGgpXG4gICAgICAgIGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIud3JpdGUoZmlsZXBhdGgsIGVkaXRvcihjb250ZW50KSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGNvbnRlbnQgb2YgYSBmaWxlIGludG8gYW5vdGhlci5cbiAgICAgKiBAcGFyYW0gZWRpdG9yIGNhbGxiYWNrIHVzZWQgdG8gcGVyZm9ybSBhbiBlZGl0aW9uIGJlZm9yZSBzYXZpbmdcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgY29weShcbiAgICAgICAgZmlsZU9yUGF0aDogVEZpbGUgfCBzdHJpbmcsXG4gICAgICAgIG5ld0ZpbGVQYXRoOiBzdHJpbmcsXG4gICAgICAgIGVkaXRvcj86IENvbnRlbnRFZGl0b3IsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdGhpcy5yZXNvbHZlUGF0aChmaWxlT3JQYXRoKVxuXG4gICAgICAgIC8vIHNpbXBsaWVyIGNvcHlcbiAgICAgICAgaWYgKCFlZGl0b3IpIHJldHVybiB0aGlzLiN2YXVsdC5hZGFwdGVyLmNvcHkoZmlsZXBhdGgsIG5ld0ZpbGVQYXRoKVxuXG4gICAgICAgIC8vIGNvcHkgd2l0aCBlZGl0XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLnJlYWQoZmlsZXBhdGgpXG4gICAgICAgIGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIud3JpdGUobmV3RmlsZVBhdGgsIGVkaXRvcihjb250ZW50KSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGV2ZXJ5dGhpbmcgZnJvbSBhIGZvbGRlclxuICAgICAqIGFuZCBjcmVhdGVzIGEgbmV3IGVtcHR5IGZvbGRlciB3aXRoIHRoZSBzYW1lIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHJlbmV3Rm9sZGVyKGZvbGRlck9yUGF0aDogVEZvbGRlciB8IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmb2xkZXJwYXRoID0gdGhpcy5yZXNvbHZlUGF0aChmb2xkZXJPclBhdGgpXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLiNleGlzdHMoZm9sZGVycGF0aCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIucm1kaXIoZm9sZGVycGF0aCwgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXdhaXQgdGhpcy4jbWlzc2luZyhmb2xkZXJwYXRoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5ta2Rpcihmb2xkZXJwYXRoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgaGFzaCBvZiBjZXJ0YWluIGxlbmd0aCBiYXNlZCBvbiB0aGUgY29udGVudCBvZiBhIGZpbGUuXG4gICAgICogQHBhcmFtIGxlbmd0aCBwcmVmZXJyZWQgb2YgdGhlIGhhc2gsIGlmIGlzIHBhc3NlZCBhIG51bWJlciBsb3dlciB0byBgMWAgdGhlIGNvbXBsZXRlIGhhc2ggaXMgcmV0dXJuZWRcbiAgICAgKiBAbm90ZSBieSBkZWZhdWx0IG9ubHkgdGhlIGZpcnN0IDYgY2hhcmFjdGVycyBhcmUgcmV0dXJuZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0RmlsZUhhc2goXG4gICAgICAgIGZpbGVPclBhdGg6IFRGaWxlIHwgc3RyaW5nLFxuICAgICAgICBsZW5ndGggPSA2LFxuICAgICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdGhpcy5yZXNvbHZlUGF0aChmaWxlT3JQYXRoKVxuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy4jdmF1bHQuYWRhcHRlci5yZWFkKGZpbGVwYXRoKVxuICAgICAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdCgnaGV4JylcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA8IDEgPyBoYXNoIDogaGFzaC5zdWJzdHJpbmcoMCwgbGVuZ3RoKVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBNYXBTdG9yZTxUPiB7XG4gICAgcHJvdGVjdGVkIF92YWx1ZXMgPSBuZXcgTWFwPHN0cmluZywgVFtdPigpXG5cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IG5ldyBNYXAoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2Yga2V5cyBpbiB0aGUgTWFwU3RvcmUuXG4gICAgICovXG4gICAgcHVibGljIGtleXMoKTogSXRlcmFibGVJdGVyYXRvcjxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5rZXlzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIG9mIGtleXMgaW4gdGhlIE1hcFN0b3JlIHRoYXQgaXMgcmVsYXRlZCB0byBhIHZhbHVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBrZXlzV2l0aFZhbHVlKHZhbHVlOiBUKTogSXRlcmFibGU8c3RyaW5nPlxuICAgIHB1YmxpYyBrZXlzV2l0aFZhbHVlKG1hdGNoZXI6ICh2YWx1ZTogVCkgPT4gYm9vbGVhbik6IEl0ZXJhYmxlPHN0cmluZz5cbiAgICBwdWJsaWMgKmtleXNXaXRoVmFsdWUoXG4gICAgICAgIHZhbHVlT3JNYXRjaGVyOiBUIHwgKCh2YWx1ZTogVCkgPT4gYm9vbGVhbiksXG4gICAgKTogSXRlcmFibGU8c3RyaW5nPiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWVPck1hdGNoZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiB0aGlzLl92YWx1ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5pbmNsdWRlcyh2YWx1ZU9yTWF0Y2hlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQga2V5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgdGhpcy5fdmFsdWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5zb21lKHZhbHVlT3JNYXRjaGVyIGFzICh2YWx1ZTogVCkgPT4gYm9vbGVhbikpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBrZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2YgdmFsdWVzIGluIHRoZSBNYXBTdG9yZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMudmFsdWVzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIG9mIGtleSwgdmFsdWUgcGFpcnMgZm9yIGV2ZXJ5IGVudHJ5IGluIHRoZSBNYXBTdG9yZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZW50cmllcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFtzdHJpbmcsIFRbXV0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5lbnRyaWVzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIGtleSBpcyBzdG9yZWQuXG4gICAgICovXG4gICAgcHVibGljIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmhhcyhrZXkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBzdG9yZWQgaW4gcmVsYXRpb24gdG8gYSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGhhc1ZhbHVlKHZhbHVlOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWVzIG9mIHRoaXMuX3ZhbHVlcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBzdG9yZWQgaW4gcmVsYXRpb24gdG8gYSBrZXkuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzS2V5VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpLmluY2x1ZGVzKHZhbHVlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RvcmVkIHZhbHVlcyByZWxhdGVkIHRvIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IFRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXMuZ2V0KGtleSkgPz8gW11cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpcnN0IHN0b3JlZCB2YWx1ZSByZWxhdGVkIHRvIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldEZpcnN0KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpLmZpcnN0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgYSBrZXkgaXMgYmVlbiBzdG9yZWQuXG4gICAgICovXG4gICAgcHVibGljIHN0b3JlKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSByZXR1cm5cbiAgICAgICAgdGhpcy5fdmFsdWVzLnNldChrZXksIFtdKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3JlIGEgdmFsdWUgYXMgdGhlIGZpcnN0IHZhbHVlIHJlbGF0ZWQgdG8gYSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIHByZXBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuZ2V0KGtleSlcbiAgICAgICAgdmFsdWVzLnVuc2hpZnQodmFsdWUpXG4gICAgICAgIHRoaXMuX3ZhbHVlcy5zZXQoa2V5LCB2YWx1ZXMudW5pcXVlKCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcmUgYSB2YWx1ZSBhcyB0aGUgbGFzdCB2YWx1ZSByZWxhdGVkIHRvIGEga2V5LlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXNoKGtleTogc3RyaW5nLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgICAvLyByZXZlcnNlIHRoZSBsaXN0IHNvIHRoZSBuZXdseSBpbnNlcnRlZCB2YWx1ZSBpcyBrZXB0IHdoZW4gdW5pcXVlIHNpIGFwcGxpZWRcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5nZXQoa2V5KS5yZXZlcnNlKClcbiAgICAgICAgdmFsdWVzLnVuc2hpZnQodmFsdWUpXG4gICAgICAgIHRoaXMuX3ZhbHVlcy5zZXQoa2V5LCB2YWx1ZXMudW5pcXVlKCkucmV2ZXJzZSgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBNYXBTdG9yZSBmcm9tIGFuIG9iamVjdFxuICAgICAqIHVzZXMgdGhlIHNvdXJjZSB2YWx1ZXMgYXMgcmVzdWx0IGtleXMsXG4gICAgICogYW5kIHRoZSBzb3VyY2Uga2V5cyBhcyByZXN1bHQgdmFsdWVzLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tUmV2ZXJzZWRPYmplY3QoXG4gICAgICAgIHZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcbiAgICApOiBNYXBTdG9yZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcFN0b3JlPHN0cmluZz4oKVxuXG4gICAgICAgIGZvciAoY29uc3QgW3ZhbHVlLCBrZXldIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlcykpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSwgdmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0bydcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVjb3JkKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlSGFzaChzb3VyY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHNvdXJjZVxuICAgICAgICAucmVwbGFjZUFsbCgnICcsICctJylcbiAgICAgICAgLnJlcGxhY2VBbGwoL1teXFx3LV0vZ2ksICcnKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIE9idGFpbnMgYSBwb3J0aW9uIG9mIGEgYFNIQS0yNTZgIGhhc2ggZnJvbSB0aGUgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhhc2goZGF0YTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGRhdGEpLmRpZ2VzdCgnaGV4Jykuc3Vic3RyaW5nKDAsIDY0KVxuICAgIC8vIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuICAgIC8vIGNvbnN0IGVuY29kZWREYXRhID0gZW5jb2Rlci5lbmNvZGUoZGF0YSlcbiAgICAvLyBjb25zdCBoYXNoQnl0ZXMgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTEnLCBlbmNvZGVkRGF0YSlcbiAgICAvLyBjb25zdCBoYXNoQXJyYXkgPSBuZXcgVWludDhBcnJheShoYXNoQnl0ZXMpXG4gICAgLy8gY29uc3QgaGFzaFN0cmluZyA9IEFycmF5LmZyb20oaGFzaEFycmF5KVxuICAgIC8vICAgICAubWFwKChieXRlKSA9PiBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKSAvLyBoZXhcbiAgICAvLyAgICAgLmpvaW4oJycpXG4gICAgLy8gcmV0dXJuIGhhc2hTdHJpbmdcbn1cbiIsImltcG9ydCB0eXBlIHtcbiAgICBDb21wb25lbnRNYXRjaGVyLFxuICAgIENvbXBvbmVudHNQbHVnaW4sXG4gICAgUGx1Z2luU2V0dGluZ3MsXG4gICAgUGx1Z2luU3RhdGUsXG59IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBNYXBTdG9yZSB9IGZyb20gJy4vTWFwU3RvcmUnXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlU3RhdGUocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luKTogUGx1Z2luU3RhdGUge1xuICAgIGNvbnN0IG5hbWVzID0gcHJlcGFyZUNvbXBvbmVudE5hbWVzKHBsdWdpbi5zZXR0aW5ncylcbiAgICByZXR1cm4ge1xuICAgICAgICBjb21wb25lbnRzX2VuYWJsZWQ6IG5hbWVzLFxuICAgICAgICBjb21wb25lbnRzX21hdGNoZXJzOiBwcmVwYXJlQ29tcG9uZW50TWF0Y2hlcnMocGx1Z2luLnNldHRpbmdzLCBuYW1lcyksXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHJpbmdMaXN0KHNvdXJjZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBzb3VyY2Uuc3BsaXQoL1t8OyxcXHNdKy9naSkucmVkdWNlPHN0cmluZ1tdPigoYXJyLCBzdHIpID0+IHtcbiAgICAgICAgLy8ga2VlcCBvbmx5IGJhc2ljIHZhbHVlcyBbQS1aYS16MC05X11cbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcVyovZ2ksICcnKVxuICAgICAgICAvLyBhZGQgdmFsdWVzIG9ubHkgb25jZXNcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPiAwICYmICFhcnIuaW5jbHVkZXMoc3RyKSkgYXJyLnB1c2goc3RyKVxuICAgICAgICByZXR1cm4gYXJyXG4gICAgfSwgW10pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQ29tcG9uZW50TmFtZXMoXG4gICAgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzLFxuKTogTWFwU3RvcmU8c3RyaW5nPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcFN0b3JlPHN0cmluZz4oKVxuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2Ygc2V0dGluZ3MuY29tcG9uZW50c19jb25maWcpIHtcbiAgICAgICAgaWYgKCFjb21wb25lbnQuZW5hYmxlZCkgY29udGludWVcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHBhcnNlU3RyaW5nTGlzdChjb21wb25lbnQubmFtZXMpKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHVzZXMgZnJlZS1uYW1lc1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNWYWx1ZShuYW1lKSkgY29udGludWVcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbXBvbmVudC5pZCwgbmFtZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVDb21wb25lbnRNYXRjaGVycyhcbiAgICBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MsXG4gICAgY29tcG9uZW50c0VuYWJsZWQ6IE1hcFN0b3JlPHN0cmluZz4sXG4pOiBDb21wb25lbnRNYXRjaGVyW10ge1xuICAgIGNvbnN0IHJlc3VsdDogQ29tcG9uZW50TWF0Y2hlcltdID0gW11cbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBzZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZykge1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5lbmFibGVkKSBjb250aW51ZVxuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBpZDogY29tcG9uZW50LmlkLFxuICAgICAgICAgICAgcGF0aDogY29tcG9uZW50LnBhdGgsXG4gICAgICAgICAgICB0ZXN0OiBbXS5jb250YWlucy5iaW5kKGNvbXBvbmVudHNFbmFibGVkLmdldChjb21wb25lbnQuaWQpKSxcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRDb25maWcgfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBWYXVsdCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgZ2V0RmlsZXNPbkZvbGRlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb21wb25lbnRzT25WYXVsdChcbiAgICB2YXVsdDogVmF1bHQsXG4gICAgY29tcG9uZW50c0ZvbGRlcjogc3RyaW5nLFxuICAgIHByZXZpb3VzQ29tcG9uZW50czogQ29tcG9uZW50Q29uZmlnW10sXG4pOiBDb21wb25lbnRDb25maWdbXSB7XG4gICAgY29uc3QgZmlsZXMgPSBnZXRGaWxlc09uRm9sZGVyKHZhdWx0LCBjb21wb25lbnRzRm9sZGVyKVxuICAgIGZpbGVzLnNvcnQoKGEsIGIpID0+IGEucGF0aC5sb2NhbGVDb21wYXJlKGIucGF0aCwgJ2VuJykpXG5cbiAgICAvLyBrZWVwIHByZXZpb3VzIGNvbmZpZ3VyYXRpb25cbiAgICByZXR1cm4gZmlsZXMubWFwKChmaWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBwcmV2aW91c0NvbXBvbmVudHMuZmluZCgoYykgPT4gYy5pZCA9PT0gZmlsZS5uYW1lKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIHBhdGg6IGZpbGUucGF0aCxcbiAgICAgICAgICAgIG5hbWVzOiBwcmV2Py5uYW1lcyA/PyBmaWxlLmJhc2VuYW1lLnJlcGxhY2VBbGwoJy4nLCAnXycpLFxuICAgICAgICAgICAgZW5hYmxlZDogcHJldj8uZW5hYmxlZCA/PyBmYWxzZSxcbiAgICAgICAgfSBhcyBDb21wb25lbnRDb25maWdcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pbihuYW1lczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIHJldHVybiBuYW1lcy5tYXAoKHYpID0+IGAnJHt2fSdgKS5qb2luKCcsICcpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihcbiAgICB0YWc6IEssXG4gICAgY29udGVudDogc3RyaW5nLFxuKTogSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIHtcbiAgICByZXR1cm4gY3JlYXRlRWwodGFnLCB1bmRlZmluZWQsIChlbCkgPT4gZWwuYXBwZW5kKGNvbnRlbnQpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kPEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+KFxuICAgIHBhcmVudDogSFRNTEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50LFxuICAgIHRhZzogSyxcbiAgICBjb250ZW50OiBzdHJpbmcsXG4pOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10ge1xuICAgIHJldHVybiBwYXJlbnQuY3JlYXRlRWwodGFnLCB1bmRlZmluZWQsIChlbCkgPT4gZWwuYXBwZW5kKGNvbnRlbnQpKVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRDb25maWcsIENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHsgU2VhcmNoQ29tcG9uZW50LCBTZXR0aW5nLCBUZXh0QXJlYUNvbXBvbmVudCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0ICogYXMgVG9vbHMgZnJvbSAnLi9TZXR0aW5nc1RhYlRvb2xzJ1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NUYWJDb21wb25lbnRzIHtcbiAgICAjcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luXG4gICAgI2NvbXBvbmVudHNFbDogSFRNTERpdkVsZW1lbnRcblxuICAgIC8qIElkJ3Mgb2YgY3VycmVudGx5IHNob3duIGNvbXBvbmVudHMuICovXG4gICAgI2ZpbHRlcmVkOiBzdHJpbmdbXSA9IFtdXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4sIHBhcmVudEVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cblxuICAgICAgICB0aGlzLiNkaXNwbGF5Q29tcG9uZW50c0hlYWRlcihwYXJlbnRFbClcbiAgICAgICAgdGhpcy4jY29tcG9uZW50c0VsID0gcGFyZW50RWwuY3JlYXRlRGl2KCdjb21wb25lbnRzLWxpc3QnKVxuXG4gICAgICAgIC8vIHJlZnJlc2ggY29tcG9uZW50cyBsaXN0XG4gICAgICAgIHRoaXMuI3NlYXJjaENvbXBvbmVudHNPblZhdWx0KClcbiAgICAgICAgLy8gdGhpcy4jZGlzcGxheUNvbXBvbmVudHNMaXN0KCkgLy8gY2FsbGVkIGFmdGVyIGNvbXBvbmVudHMgc2VhcmNoXG4gICAgfVxuXG4gICAgYXN5bmMgI3NhdmVDb21wb25lbnRzKHZhbHVlOiBDb21wb25lbnRDb25maWdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19jb25maWcgPSB2YWx1ZVxuICAgICAgICBhd2FpdCB0aGlzLiNwbHVnaW4uc2F2ZVNldHRpbmdzKClcblxuICAgICAgICAvLyByZS1yZW5kZXJcbiAgICAgICAgdGhpcy4jZGlzcGxheUNvbXBvbmVudHNMaXN0KClcbiAgICB9XG5cbiAgICAjdG9nZ2xlQ29tcG9uZW50cyhpZHM6IHN0cmluZ1tdLCBlbmFibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19jb25maWcgLy9cbiAgICAgICAgICAgIC5tYXAoKGl0ZW0pID0+XG4gICAgICAgICAgICAgICAgaWRzLmluY2x1ZGVzKGl0ZW0uaWQpID8geyAuLi5pdGVtLCBlbmFibGVkIH0gOiBpdGVtLFxuICAgICAgICAgICAgKVxuICAgICAgICB2b2lkIHRoaXMuI3NhdmVDb21wb25lbnRzKGNvbXBvbmVudHMpXG4gICAgfVxuXG4gICAgI2NoYW5nZUNvbXBvbmVudChpZDogc3RyaW5nLCBrOiBrZXlvZiBDb21wb25lbnRDb25maWcsIHY6IHVua25vd24pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZyAvL1xuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gKGl0ZW0uaWQgPT09IGlkID8geyAuLi5pdGVtLCBba106IHYgfSA6IGl0ZW0pKVxuICAgICAgICB2b2lkIHRoaXMuI3NhdmVDb21wb25lbnRzKGNvbXBvbmVudHMpXG4gICAgfVxuXG4gICAgI3NlYXJjaENvbXBvbmVudHNPblZhdWx0KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gVG9vbHMubG9hZENvbXBvbmVudHNPblZhdWx0KFxuICAgICAgICAgICAgdGhpcy4jcGx1Z2luLmFwcC52YXVsdCxcbiAgICAgICAgICAgIHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2ZvbGRlcixcbiAgICAgICAgICAgIHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5jb21wb25lbnRzX2NvbmZpZyxcbiAgICAgICAgKVxuXG4gICAgICAgIC8vIGNsZWFyIHNldHRpbmdzIHN0YXRlICYgcmUtcmVuZGVycyBjb21wb25lbnRzIGxpc3RcbiAgICAgICAgdGhpcy4jZmlsdGVyZWQgPSBjb21wb25lbnRzLm1hcCgoY29tcG9uZW50KSA9PiBjb21wb25lbnQuaWQpXG4gICAgICAgIHZvaWQgdGhpcy4jc2F2ZUNvbXBvbmVudHMoY29tcG9uZW50cylcbiAgICB9XG5cbiAgICAjZGlzcGxheUNvbXBvbmVudHNIZWFkZXIocGFyZW50RWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGxldCBjb21wb25lbnRzRmlsdGVyOiBTZWFyY2hDb21wb25lbnQgfCBudWxsID0gbnVsbFxuXG4gICAgICAgIGNvbnN0IGVsID0gbmV3IFNldHRpbmcocGFyZW50RWwpXG4gICAgICAgIGVsLnNldE5hbWUoJ1ZhdWx0IENvbXBvbmVudHMnKVxuICAgICAgICBlbC5zZXREZXNjKCdUaGUgZW50cmllcyBhcmUgY29tcG9uZW50cyBmb3VuZCBvbiB0aGUgdmF1bHQuJylcbiAgICAgICAgZWwuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLnNldEljb24oJ3Jlc2V0Jykuc2V0VG9vbHRpcCgnUmVmcmVzaCcpXG4gICAgICAgICAgICBidXR0b24ub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jc2VhcmNoQ29tcG9uZW50c09uVmF1bHQoKVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHNGaWx0ZXI/LnNldFZhbHVlKCcnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBmaWx0ZXIgY29tcG9uZW50c1xuICAgICAgICBlbC5hZGRTZWFyY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRzRmlsdGVyID0gaW5wdXRcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQ6IHN0cmluZ1tdID0gW11cblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuI3BsdWdpbi5zZXR0aW5nc1xuICAgICAgICAgICAgICAgICAgICAuY29tcG9uZW50c19jb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNJbmNsdWRlZCA9IGZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjb21wb25lbnQucGF0aC5jb250YWlucyhmaWx0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FzSW5jbHVkZWQgPSB0aGlzLiNmaWx0ZXJlZC5pbmNsdWRlcyhjb21wb25lbnQuaWQpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5jbHVkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goY29tcG9uZW50LmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXNJbmNsdWRlZCkgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXNJbmNsdWRlZCkgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZWQpIHJldHVyblxuICAgICAgICAgICAgICAgIHRoaXMuI2ZpbHRlcmVkID0gZmlsdGVyZWRcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlclxuICAgICAgICAgICAgICAgIHRoaXMuI2Rpc3BsYXlDb21wb25lbnRzTGlzdCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGVuYWJsZSBmaWx0ZXJlZCBjb21wb25lbnRzXG4gICAgICAgIGVsLmFkZEV4dHJhQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCdiYWRnZS1jaGVjaycpLnNldFRvb2x0aXAoJ0VuYWJsZSBMaXN0ZWQgQ29tcG9uZW50cycpXG4gICAgICAgICAgICBidXR0b24ub25DbGljaygoKSA9PiB0aGlzLiN0b2dnbGVDb21wb25lbnRzKHRoaXMuI2ZpbHRlcmVkLCB0cnVlKSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBkaXNhYmxlIGZpbHRlcmVkIGNvbXBvbmVudHNcbiAgICAgICAgZWwuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLnNldEljb24oJ2JhZGdlLXgnKS5zZXRUb29sdGlwKCdEaXNhYmxlIExpc3RlZCBDb21wb25lbnRzJylcbiAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMuI3RvZ2dsZUNvbXBvbmVudHModGhpcy4jZmlsdGVyZWQsIGZhbHNlKSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAjZGlzcGxheUNvbXBvbmVudHNMaXN0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLiNjb21wb25lbnRzRWwuZW1wdHkoKVxuXG4gICAgICAgIGZvciAoY29uc3QgYyBvZiB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19jb25maWcpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy4jZmlsdGVyZWQuaW5jbHVkZXMoYy5pZCkpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIGNvbnN0IGVsID0gbmV3IFNldHRpbmcodGhpcy4jY29tcG9uZW50c0VsKVxuICAgICAgICAgICAgZWwuc2V0TmFtZSh0aGlzLiNjb21wb25lbnROYW1lKGMuaWQsIGMuZW5hYmxlZCkpXG4gICAgICAgICAgICBlbC5zZXREZXNjKHRoaXMuI2NvbXBvbmVudERlc2MoYy5pZCkpXG4gICAgICAgICAgICBlbC5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldFRvb2x0aXAoJ0VkaXQgbmFtZXMnKVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCdwZW5jaWwnKVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMuI2NvbXBvbmVudEZvcm0oZWwsIGMpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGVsLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFRvb2x0aXAoJ0lzIGVuYWJsZWQ/JylcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUoYy5lbmFibGVkKVxuICAgICAgICAgICAgICAgIHRvZ2dsZS5vbkNoYW5nZSh0aGlzLiN0b2dnbGVDb21wb25lbnRzLmJpbmQodGhpcywgW2MuaWRdKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAjY29tcG9uZW50TmFtZShpZDogc3RyaW5nLCBzdGF0dXM6IGJvb2xlYW4pOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICAgICAgY29uc3QgZGl2ID0gY3JlYXRlRnJhZ21lbnQoKVxuICAgICAgICBkaXYuYXBwZW5kKFxuICAgICAgICAgICAgYCR7c3RhdHVzID8gJ0VuYWJsZWQnIDogJ0Rpc2FibGVkJ30gY29tcG9uZW50OiBgLFxuICAgICAgICAgICAgVG9vbHMuZWwoJ2NvZGUnLCBpZCksXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGRpdlxuICAgIH1cblxuICAgICNjb21wb25lbnREZXNjKGlkOiBzdHJpbmcpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICAgICAgY29uc3QgZnJhZyA9IGNyZWF0ZUZyYWdtZW50KClcbiAgICAgICAgY29uc3QgZGl2ID0gZnJhZy5jcmVhdGVEaXYoJ2NvbXBvbmVudHMtbmFtZXMnKVxuICAgICAgICBkaXYuYXBwZW5kKCdVc2FnZTogJylcblxuICAgICAgICBjb25zdCBuYW1lcyA9IHRoaXMuI3BsdWdpbi5zdGF0ZS5jb21wb25lbnRzX2VuYWJsZWQuZ2V0KGlkKVxuICAgICAgICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBUb29scy5hcHBlbmQoZGl2LCAnYicsICdOb3QgYXZhaWxhYmxlJylcbiAgICAgICAgICAgIHJldHVybiBmcmFnXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA+IDApIGRpdi5hcHBlbmRUZXh0KCcgfCAnKVxuICAgICAgICAgICAgVG9vbHMuYXBwZW5kKGRpdiwgJ2NvZGUnLCBuYW1lc1tpXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhZ1xuICAgIH1cblxuICAgICNhY3RpdmVGb3JtOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsXG4gICAgI2NvbXBvbmVudEZvcm0oc2V0dGluZzogU2V0dGluZywgYzogQ29tcG9uZW50Q29uZmlnKTogdm9pZCB7XG4gICAgICAgIHRoaXMuI2FjdGl2ZUZvcm0/LnJlbW92ZSgpXG4gICAgICAgIHRoaXMuI2FjdGl2ZUZvcm0gPSBzZXR0aW5nLnNldHRpbmdFbC5jcmVhdGVEaXYoJ2NvbXBvbmVudC1mb3JtJylcblxuICAgICAgICBsZXQgZm9ybUlucHV0OiBUZXh0QXJlYUNvbXBvbmVudCB8IG51bGwgPSBudWxsXG4gICAgICAgIGNvbnN0IGVsID0gbmV3IFNldHRpbmcodGhpcy4jYWN0aXZlRm9ybSlcbiAgICAgICAgZWwuYWRkVGV4dEFyZWEoKHRleHRhcmVhKSA9PiB7XG4gICAgICAgICAgICBmb3JtSW5wdXQgPSB0ZXh0YXJlYVxuICAgICAgICAgICAgdGV4dGFyZWEuc2V0VmFsdWUoYy5uYW1lcylcbiAgICAgICAgfSlcbiAgICAgICAgZWwuYWRkQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdDYW5jZWwnKVxuICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy4jYWN0aXZlRm9ybT8ucmVtb3ZlKCkpXG4gICAgICAgIH0pXG4gICAgICAgIGVsLmFkZEJ1dHRvbigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dCgnU2F2ZScpXG4gICAgICAgICAgICBidXR0b24ub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jY2hhbmdlQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICBjLmlkLFxuICAgICAgICAgICAgICAgICAgICAnbmFtZXMnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtSW5wdXQ/LmdldFZhbHVlKCkgPz8gJycsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IExvZ0xldmVsIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuXG4vLyNyZWdpb24gTG9nTGV2ZWxcbmV4cG9ydCB0eXBlIFBsdWdpbkxldmVsID0ga2V5b2YgdHlwZW9mIExvZ0xldmVsXG5leHBvcnQgY29uc3QgTEVWRUxfTEFCRUxTOiBSZWNvcmQ8UGx1Z2luTGV2ZWwsIHN0cmluZz4gPSB7XG4gICAgRVJST1I6ICdFUlJPUicsXG4gICAgV0FSTjogJyBXQVJOJyxcbiAgICBJTkZPOiAnIElORk8nLFxuICAgIERFQlVHOiAnREVCVUcnLFxuICAgIFRSQUNFOiAnVFJBQ0UnLFxufVxuLy8jZW5kcmVnaW9uIExvZ0xldmVsXG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW4sIFBsdWdpblNldHRpbmdzIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRleHRDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IEZvbGRlclN1Z2dlc3RlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB7IEZpbGVzeXN0ZW1BZGFwdGVyLCBwcmVwYXJlSGFzaCB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IFNldHRpbmdzVGFiQ29tcG9uZW50cyB9IGZyb20gJy4vU2V0dGluZ3NUYWJDb21wb25lbnRzJ1xuaW1wb3J0IHsgTEVWRUxfTEFCRUxTIH0gZnJvbSAnLi92YWx1ZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBkb2NzKG5hbWU6IHN0cmluZywgZGVzYzogc3RyaW5nKTogRG9jdW1lbnRGcmFnbWVudCB7XG4gICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50KChkaXYpID0+IHtcbiAgICAgICAgZGl2LmFwcGVuZFRleHQoZGVzYyArICcuIENoZWNrIHRoZSAnKVxuICAgICAgICBkaXYuY3JlYXRlRWwoJ2EnLCB7XG4gICAgICAgICAgICB0ZXh0OiAnRG9jcycsXG4gICAgICAgICAgICBocmVmOiBgaHR0cHM6Ly9naXRodWIuY29tL2x1aXNicy9vYnNpZGlhbi1jb21wb25lbnRzL2Jsb2IvbWFpbi9kb2NzL3NldHRpbmdzLm1kIyR7cHJlcGFyZUhhc2gobmFtZSl9YCxcbiAgICAgICAgfSlcbiAgICAgICAgZGl2LmFwcGVuZFRleHQoJy4nKVxuICAgIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgICNwbHVnaW46IENvbXBvbmVudHNQbHVnaW5cbiAgICAjZnM6IEZpbGVzeXN0ZW1BZGFwdGVyXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgcGx1Z2luKVxuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgdGhpcy4jZnMgPSBuZXcgRmlsZXN5c3RlbUFkYXB0ZXIocGx1Z2luKVxuICAgIH1cblxuICAgIGFzeW5jICN1cGRhdGUoa2V5OiBrZXlvZiBQbHVnaW5TZXR0aW5ncywgdmFsdWU6IHVua25vd24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBkeW5hbWljIGFzc2lnbmF0aW9uXG4gICAgICAgIHRoaXMuI3BsdWdpbi5zZXR0aW5nc1trZXldID0gdmFsdWVcbiAgICAgICAgYXdhaXQgdGhpcy4jcGx1Z2luLnNhdmVTZXR0aW5ncygpXG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoJ2NvbXBvbmVudHMtc2V0dGluZ3MnKVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpLnNldE5hbWUoJ1BsdWdpbiBTZXR0aW5ncycpLnNldEhlYWRpbmcoKVxuICAgICAgICB0aGlzLiNkaXNwbGF5R2VuZXJhbFNldHRpbmdzKClcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKS5zZXROYW1lKCdDb2RlYmxvY2sgU2V0dGluZ3MnKS5zZXRIZWFkaW5nKClcbiAgICAgICAgdGhpcy4jZGlzcGxheUNvZGVibG9ja3NTZXR0aW5ncygpXG5cbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbCkuc2V0TmFtZSgnQ29tcG9uZW50IFNldHRpbmdzJykuc2V0SGVhZGluZygpXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlDb21wb25lbnRzU2V0dGluZ3MoKVxuXG4gICAgICAgIG5ldyBTZXR0aW5nc1RhYkNvbXBvbmVudHModGhpcy4jcGx1Z2luLCB0aGlzLmNvbnRhaW5lckVsKVxuICAgIH1cblxuICAgICNkaXNwbGF5R2VuZXJhbFNldHRpbmdzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBsZXZlbFNldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBsZXZlbFNldHRpbmcuc2V0TmFtZSgnUGx1Z2dpbmcgTG9nTGV2ZWwnKVxuICAgICAgICBsZXZlbFNldHRpbmcuc2V0RGVzYyhcbiAgICAgICAgICAgIGRvY3MoJ1BsdWdnaW5nIExvZ0xldmVsJywgJ1RvIGNoZWNrIHRoZSBwbHVnaW4gbG9ncycpLFxuICAgICAgICApXG4gICAgICAgIGxldmVsU2V0dGluZy5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcbiAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbnMoTEVWRUxfTEFCRUxTKVxuICAgICAgICAgICAgZHJvcGRvd24uc2V0VmFsdWUodGhpcy4jcGx1Z2luLnNldHRpbmdzLnBsdWdpbl9sZXZlbClcbiAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKHRoaXMuI3VwZGF0ZS5iaW5kKHRoaXMsICdwbHVnaW5fbGV2ZWwnKSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBtb2RlU2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIG1vZGVTZXR0aW5nLnNldE5hbWUoJ0Rlc2lnbiBtb2RlJylcbiAgICAgICAgbW9kZVNldHRpbmcuc2V0RGVzYyhcbiAgICAgICAgICAgIGRvY3MoXG4gICAgICAgICAgICAgICAgJ0Rlc2lnbiBtb2RlJyxcbiAgICAgICAgICAgICAgICBcIkVuYWJsZSBkZXNpZ24gbW9kZSBvbmx5IGlmIHlvdSdyZSBlZGl0aW5nIHlvdXIgY29tcG9uZW50cyBjb2RlLiBJdCB3aWxsIG5vdCBkaXNhYmxlZCB1bnRpbCB5b3UgY2xvc2UgdGhlIGFwcFwiLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICBtb2RlU2V0dGluZy5hZGRUb2dnbGUoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmFibGVkID0gdGhpcy4jcGx1Z2luLmlzRGVzaWduTW9kZUVuYWJsZWRcbiAgICAgICAgICAgIGlucHV0LnNldERpc2FibGVkKGVuYWJsZWQpXG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZShlbmFibGVkKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGFsbG93cyBvbmx5IGVuYWJsZVxuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSByZXR1cm5cbiAgICAgICAgICAgICAgICBpbnB1dC5zZXREaXNhYmxlZCh0cnVlKVxuICAgICAgICAgICAgICAgIHRoaXMuI3BsdWdpbi5lbmFibGVEZXNpZ25Nb2RlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgI2Rpc3BsYXlDb2RlYmxvY2tzU2V0dGluZ3MoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvZGVibG9ja1NldHRpbmdzID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgY29kZWJsb2NrU2V0dGluZ3Muc2V0TmFtZSgnQ3VzdG9tIENvZGVibG9ja3MnKVxuICAgICAgICBjb2RlYmxvY2tTZXR0aW5ncy5zZXREZXNjKFxuICAgICAgICAgICAgZG9jcyhcbiAgICAgICAgICAgICAgICAnQ3VzdG9tIENvZGVibG9ja3MnLFxuICAgICAgICAgICAgICAgICdBbGxvd3MgdGhlIHVzYWdlIG9mIHRoZSBjb21wb25lbnRzIGN1c3RvbSBuYW1lcyBhcyBjb2RlYmxvY2tzIGlkZW50aWZpZXJzJyxcbiAgICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgY29kZWJsb2NrU2V0dGluZ3MuYWRkVG9nZ2xlKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodGhpcy4jcGx1Z2luLnNldHRpbmdzLmVuYWJsZV9jb2RlYmxvY2tzKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UodGhpcy4jdXBkYXRlLmJpbmQodGhpcywgJ2VuYWJsZV9jb2RlYmxvY2tzJykpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy9cbiAgICAgICAgbGV0IHVzYWdlU2VwYXJhdG9ySW5wdXQ6IFRleHRDb21wb25lbnQgfCBudWxsID0gbnVsbFxuICAgICAgICBjb25zdCBlbmFibGVTZXBhcmF0b3JTZXR0aW5ncyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIGVuYWJsZVNlcGFyYXRvclNldHRpbmdzLnNldE5hbWUoJ0VuYWJsZSBDb2RlYmxvY2tzIFNlcGFyYXRvcnMnKVxuICAgICAgICBlbmFibGVTZXBhcmF0b3JTZXR0aW5ncy5zZXREZXNjKFxuICAgICAgICAgICAgZG9jcyhcbiAgICAgICAgICAgICAgICAnRW5hYmxlIENvZGVibG9ja3MgU2VwYXJhdG9ycycsXG4gICAgICAgICAgICAgICAgJ0FsbG93cyB0aGUgdXNhZ2Ugb2Ygc2VwYXJhdG9ycyBpbnNpZGUgY29kZWJsb2NrcycsXG4gICAgICAgICAgICApLFxuICAgICAgICApXG4gICAgICAgIGVuYWJsZVNlcGFyYXRvclNldHRpbmdzLmFkZFRvZ2dsZSgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlucHV0LnNldFZhbHVlKHRoaXMuI3BsdWdpbi5zZXR0aW5ncy5lbmFibGVfc2VwYXJhdG9ycylcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZvaWQgdGhpcy4jdXBkYXRlKCdlbmFibGVfc2VwYXJhdG9ycycsIHZhbHVlKVxuICAgICAgICAgICAgICAgIHVzYWdlU2VwYXJhdG9ySW5wdXQ/LnNldERpc2FibGVkKCF2YWx1ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yU2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIHNlcGFyYXRvclNldHRpbmcuc2V0TmFtZSgnQ29kZWJsb2NrcyBTZXBhcmF0b3InKVxuICAgICAgICBzZXBhcmF0b3JTZXR0aW5nLnNldERlc2MoJ1NlcGFyYXRvciB0byB1c2UgaW5zaWRlIGNvZGVibG9ja3MuJylcbiAgICAgICAgc2VwYXJhdG9yU2V0dGluZy5hZGRUZXh0KChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgdXNhZ2VTZXBhcmF0b3JJbnB1dCA9IGlucHV0XG4gICAgICAgICAgICBpbnB1dC5zZXREaXNhYmxlZCghdGhpcy4jcGx1Z2luLnNldHRpbmdzLmVuYWJsZV9zZXBhcmF0b3JzKVxuICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodGhpcy4jcGx1Z2luLnNldHRpbmdzLnVzYWdlX3NlcGFyYXRvcilcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKHRoaXMuI3VwZGF0ZS5iaW5kKHRoaXMsICd1c2FnZV9zZXBhcmF0b3InKSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAjZGlzcGxheUNvbXBvbmVudHNTZXR0aW5ncygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYXR0YWNoUGF0aEhhbmRsZXIgPSAoXG4gICAgICAgICAgICBrZXk6IGtleW9mIFBsdWdpblNldHRpbmdzLFxuICAgICAgICAgICAgaW5wdXQ6IFRleHRDb21wb25lbnQsXG4gICAgICAgICAgICBsb2dzOiBIVE1MRWxlbWVudCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpbnB1dC5vbkNoYW5nZShhc3luYyAocGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9ncy5lbXB0eSgpXG5cbiAgICAgICAgICAgICAgICBpZiAoIXBhdGggfHwgcGF0aCA9PT0gJy8nIHx8IChhd2FpdCB0aGlzLiNmcy5taXNzaW5nKHBhdGgpKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dEVsLmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQtdmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICBsb2dzLmFwcGVuZFRleHQoJ0ludmFsaWQgcGF0aC4nKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmFsaWQtdmFsdWUnKVxuICAgICAgICAgICAgICAgIHZvaWQgdGhpcy4jdXBkYXRlKGtleSwgcGF0aClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvL1xuICAgICAgICAvLyBDb21wb25lbnRzIGZvbGRlciBzZXR0aW5nXG4gICAgICAgIGNvbnN0IHNvdXJjZURlc2MgPSBjcmVhdGVGcmFnbWVudCgpXG4gICAgICAgIHNvdXJjZURlc2MuYXBwZW5kKFxuICAgICAgICAgICAgJ0ZpbGVzIGluIHRoaXMgZGlyZWN0b3J5IHdpbGwgYmUgdGFrZW4gYXMgY29tcG9uZW50cy4nLFxuICAgICAgICApXG4gICAgICAgIGNvbnN0IHNvdXJjZUxvZyA9IHNvdXJjZURlc2MuY3JlYXRlRWwoJ3AnLCAnaW52YWxpZC12YWx1ZScpXG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50c2ZvbGRlclNldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBjb21wb25lbnRzZm9sZGVyU2V0dGluZy5zZXROYW1lKCdDb21wb25lbnRzIHRlbXBsYXRlcyBmb2xkZXInKVxuICAgICAgICBjb21wb25lbnRzZm9sZGVyU2V0dGluZy5zZXREZXNjKHNvdXJjZURlc2MpXG4gICAgICAgIGNvbXBvbmVudHNmb2xkZXJTZXR0aW5nLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBuZXcgRm9sZGVyU3VnZ2VzdGVyKHRoaXMuYXBwLCBpbnB1dC5pbnB1dEVsLCB0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICAgICAgaW5wdXQuc2V0UGxhY2Vob2xkZXIoJ0V4YW1wbGU6IGZvbGRlcjEvZm9sZGVyMicpXG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19mb2xkZXIpXG4gICAgICAgICAgICBhdHRhY2hQYXRoSGFuZGxlcignY29tcG9uZW50c19mb2xkZXInLCBpbnB1dCwgc291cmNlTG9nKVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIENhY2hlIGZvbGRlciBzZXR0aW5nXG4gICAgICAgIGNvbnN0IGNhY2hlRGVzYyA9IGNyZWF0ZUZyYWdtZW50KClcbiAgICAgICAgY2FjaGVEZXNjLmFwcGVuZCgnRm9sZGVyIHVzZWQgdG8gY2FjaGUgcHJlLXByb2Nlc3NlZCBjb21wb25lbnRzLicpXG4gICAgICAgIGNvbnN0IGNhY2hlTG9nID0gY2FjaGVEZXNjLmNyZWF0ZUVsKCdwJywgJ2ludmFsaWQtdmFsdWUnKVxuXG4gICAgICAgIGNvbnN0IGNhY2hlZm9sZGVyU2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXG4gICAgICAgIGNhY2hlZm9sZGVyU2V0dGluZy5zZXROYW1lKCdDb21wb25lbnRzIGNhY2hlIGZvbGRlcicpXG4gICAgICAgIGNhY2hlZm9sZGVyU2V0dGluZy5zZXREZXNjKGNhY2hlRGVzYylcbiAgICAgICAgY2FjaGVmb2xkZXJTZXR0aW5nLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBuZXcgRm9sZGVyU3VnZ2VzdGVyKHRoaXMuYXBwLCBpbnB1dC5pbnB1dEVsLCB0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICAgICAgaW5wdXQuc2V0UGxhY2Vob2xkZXIoJ0V4YW1wbGU6IGZvbGRlcjEvZm9sZGVyMicpXG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY2FjaGVfZm9sZGVyKVxuICAgICAgICAgICAgYXR0YWNoUGF0aEhhbmRsZXIoJ2NhY2hlX2ZvbGRlcicsIGlucHV0LCBjYWNoZUxvZylcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ29tcG9uZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgcHVibGljIG5hbWUgPSAnQ29tcG9uZW50RXJyb3InXG4gICAgcHVibGljIGNvZGU6IHN0cmluZ1xuXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBvcHRpb25zOiB7IGNvZGU6IHN0cmluZzsgY2F1c2U/OiB1bmtub3duIH0pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSlcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0aW9ucy5jb2RlXG4gICAgICAgIHRoaXMuY2F1c2UgPSBvcHRpb25zLmNhdXNlXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhdXNlKSByZXR1cm4gYCR7dGhpcy5uYW1lfTogJHt0aGlzLm1lc3NhZ2V9YFxuXG4gICAgICAgIGNvbnN0IGJhc2UgPSBgJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX0sIGNhdXNlOlxcblxcbmBcbiAgICAgICAgaWYgKHRoaXMuY2F1c2UgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGAke2Jhc2V9JHt0aGlzLmNhdXNlfWBcbiAgICAgICAgcmV0dXJuIGAke2Jhc2V9JHtKU09OLnN0cmluZ2lmeSh0aGlzLmNhdXNlKX1gXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGlzYWJsZWRDb21wb25lbnRFcnJvciBleHRlbmRzIENvbXBvbmVudEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBjb2RlOiAnZGlzYWJsZWQtY29tcG9uZW50JyB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQ29kZWJsb2NrUGFyc2VyLCBDb2RlYmxvY2tTeW50YXggfSBmcm9tICcuL0Jhc2VQYXJzZXInXG5pbXBvcnQgeyBwYXJzZVlhbWwgfSBmcm9tICdvYnNpZGlhbidcblxuZXhwb3J0IGNsYXNzIFlhbWxQYXJzZXIgaW1wbGVtZW50cyBDb2RlYmxvY2tQYXJzZXIge1xuICAgIGlkOiBDb2RlYmxvY2tTeW50YXggPSAneWFtbCdcblxuICAgIHRlc3Qoc291cmNlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgLy8gQXJyYXlzLCBleDogYC0gdmFsdWVgXG4gICAgICAgIGlmIChzb3VyY2Uuc3RhcnRzV2l0aCgnLScpKSByZXR1cm4gdHJ1ZVxuICAgICAgICAvLyBPYmplY3RzOiBleDogYHBhcmFtOiB2YWx1ZWBcbiAgICAgICAgcmV0dXJuIC9eXFx3KzovLnRlc3Qoc291cmNlKVxuICAgIH1cblxuICAgIHBhcnNlKHNvdXJjZTogc3RyaW5nLCBfbm90ZXBhdGg6IHN0cmluZyk6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICAgICAgcmV0dXJuIHBhcnNlWWFtbChzb3VyY2UpXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb2RlYmxvY2tQYXJzZXIsIENvZGVibG9ja1N5bnRheCB9IGZyb20gJy4vQmFzZVBhcnNlcidcblxuZXhwb3J0IGNsYXNzIEpzb25QYXJzZXIgaW1wbGVtZW50cyBDb2RlYmxvY2tQYXJzZXIge1xuICAgIGlkOiBDb2RlYmxvY2tTeW50YXggPSAnanNvbidcblxuICAgIHRlc3Qoc291cmNlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIC9eXFxzKltbe10vZ2kudGVzdChzb3VyY2UpXG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlOiBzdHJpbmcsIF9ub3RlcGF0aDogc3RyaW5nKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzb3VyY2UpXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5yZXF1aXJlKCdvYnNpZGlhbicpO1xuXG4vLyB0aGVzZSBhcmVuJ3QgcmVhbGx5IHByaXZhdGUsIGJ1dCBub3IgYXJlIHRoZXkgcmVhbGx5IHVzZWZ1bCB0byBkb2N1bWVudFxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEx1eG9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIERhdGVUaW1lOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEludmFsaWRJbnRlcnZhbEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIEludGVydmFsOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEludmFsaWREdXJhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIER1cmF0aW9uOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEludmFsaWRVbml0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IodW5pdCkge1xuICAgIHN1cGVyKGBJbnZhbGlkIHVuaXQgJHt1bml0fWApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHt9XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgWm9uZUlzQWJzdHJhY3RFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlpvbmUgaXMgYW4gYWJzdHJhY3QgY2xhc3NcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG4gPSBcIm51bWVyaWNcIixcbiAgcyA9IFwic2hvcnRcIixcbiAgbCA9IFwibG9uZ1wiO1xuXG5jb25zdCBEQVRFX1NIT1JUID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbixcbiAgZGF5OiBuLFxufTtcblxuY29uc3QgREFURV9NRUQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG59O1xuXG5jb25zdCBEQVRFX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHMsXG59O1xuXG5jb25zdCBEQVRFX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG59O1xuXG5jb25zdCBEQVRFX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGwsXG59O1xuXG5jb25zdCBUSU1FX1NJTVBMRSA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuY29uc3QgVElNRV9XSVRIX1NFQ09ORFMgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxufTtcblxuY29uc3QgVElNRV9XSVRIX1NIT1JUX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmNvbnN0IFRJTUVfV0lUSF9MT05HX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogbCxcbn07XG5cbmNvbnN0IFRJTUVfMjRfU0lNUExFID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIGhvdXJDeWNsZTogXCJoMjNcIixcbn07XG5cbmNvbnN0IFRJTUVfMjRfV0lUSF9TRUNPTkRTID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxufTtcblxuY29uc3QgVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIGhvdXJDeWNsZTogXCJoMjNcIixcbiAgdGltZVpvbmVOYW1lOiBzLFxufTtcblxuY29uc3QgVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICB0aW1lWm9uZU5hbWU6IGwsXG59O1xuXG5jb25zdCBEQVRFVElNRV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuY29uc3QgREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbixcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbn07XG5cbmNvbnN0IERBVEVUSU1FX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuY29uc3QgREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG59O1xuXG5jb25zdCBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBzLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG59O1xuXG5jb25zdCBEQVRFVElNRV9GVUxMID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmNvbnN0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzLFxufTtcblxuY29uc3QgREFURVRJTUVfSFVHRSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbCxcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICB0aW1lWm9uZU5hbWU6IGwsXG59O1xuXG5jb25zdCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbCxcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogbCxcbn07XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5jbGFzcyBab25lIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdHlwZSgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgZ2V0IGlhbmFOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBvZmZzZXQgaXMga25vd24gdG8gYmUgZml4ZWQgZm9yIHRoZSB3aG9sZSB5ZWFyLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyBjb21tb24gbmFtZSAoc3VjaCBhcyBFU1QpIGF0IHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIE9wdGlvbnMgdG8gYWZmZWN0IHRoZSBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLiBBY2NlcHRzICdsb25nJyBvciAnc2hvcnQnLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5sb2NhbGUgLSBXaGF0IGxvY2FsZSB0byByZXR1cm4gdGhlIG9mZnNldCBuYW1lIGluLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBvZmZzZXROYW1lKHRzLCBvcHRzKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyB2YWx1ZSBhcyBhIHN0cmluZ1xuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG9mZnNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXB0cyAnbmFycm93JywgJ3Nob3J0Jywgb3IgJ3RlY2hpZScuIFJldHVybmluZyAnKzYnLCAnKzA2OjAwJywgb3IgJyswNjAwJyByZXNwZWN0aXZlbHlcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgZm9yIHRoaXMgem9uZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcC5cbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gY29tcHV0ZSB0aGUgb2Zmc2V0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIGVxdWFsIHRvIGFub3RoZXIgem9uZVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtab25lfSBvdGhlclpvbmUgLSB0aGUgem9uZSB0byBjb21wYXJlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgdmFsaWQuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbn1cblxubGV0IHNpbmdsZXRvbiQxID0gbnVsbDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsb2NhbCB6b25lIGZvciB0aGlzIEphdmFTY3JpcHQgZW52aXJvbm1lbnQuXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuY2xhc3MgU3lzdGVtWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBsb2NhbCB6b25lXG4gICAqIEByZXR1cm4ge1N5c3RlbVpvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmIChzaW5nbGV0b24kMSA9PT0gbnVsbCkge1xuICAgICAgc2luZ2xldG9uJDEgPSBuZXcgU3lzdGVtWm9uZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uJDE7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldE5hbWUodHMsIHsgZm9ybWF0LCBsb2NhbGUgfSkge1xuICAgIHJldHVybiBwYXJzZVpvbmVJbmZvKHRzLCBmb3JtYXQsIGxvY2FsZSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0KHRzKSB7XG4gICAgcmV0dXJuIC1uZXcgRGF0ZSh0cykuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwic3lzdGVtXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5sZXQgZHRmQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIG1ha2VEVEYoem9uZSkge1xuICBpZiAoIWR0ZkNhY2hlW3pvbmVdKSB7XG4gICAgZHRmQ2FjaGVbem9uZV0gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIsIHtcbiAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB0aW1lWm9uZTogem9uZSxcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICAgIHNlY29uZDogXCIyLWRpZ2l0XCIsXG4gICAgICBlcmE6IFwic2hvcnRcIixcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZHRmQ2FjaGVbem9uZV07XG59XG5cbmNvbnN0IHR5cGVUb1BvcyA9IHtcbiAgeWVhcjogMCxcbiAgbW9udGg6IDEsXG4gIGRheTogMixcbiAgZXJhOiAzLFxuICBob3VyOiA0LFxuICBtaW51dGU6IDUsXG4gIHNlY29uZDogNixcbn07XG5cbmZ1bmN0aW9uIGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICBjb25zdCBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0KGRhdGUpLnJlcGxhY2UoL1xcdTIwMEUvZywgXCJcIiksXG4gICAgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSAoQUR8QkMpLD8gKFxcZCspOihcXGQrKTooXFxkKykvLmV4ZWMoZm9ybWF0dGVkKSxcbiAgICBbLCBmTW9udGgsIGZEYXksIGZZZWFyLCBmYWRPckJjLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSBwYXJzZWQ7XG4gIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZmFkT3JCYywgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdO1xufVxuXG5mdW5jdGlvbiBwYXJ0c09mZnNldChkdGYsIGRhdGUpIHtcbiAgY29uc3QgZm9ybWF0dGVkID0gZHRmLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG4gIGNvbnN0IGZpbGxlZCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1hdHRlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHsgdHlwZSwgdmFsdWUgfSA9IGZvcm1hdHRlZFtpXTtcbiAgICBjb25zdCBwb3MgPSB0eXBlVG9Qb3NbdHlwZV07XG5cbiAgICBpZiAodHlwZSA9PT0gXCJlcmFcIikge1xuICAgICAgZmlsbGVkW3Bvc10gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCFpc1VuZGVmaW5lZChwb3MpKSB7XG4gICAgICBmaWxsZWRbcG9zXSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaWxsZWQ7XG59XG5cbmxldCBpYW5hWm9uZUNhY2hlID0ge307XG4vKipcbiAqIEEgem9uZSBpZGVudGlmaWVkIGJ5IGFuIElBTkEgaWRlbnRpZmllciwgbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuY2xhc3MgSUFOQVpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gWm9uZSBuYW1lXG4gICAqIEByZXR1cm4ge0lBTkFab25lfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShuYW1lKSB7XG4gICAgaWYgKCFpYW5hWm9uZUNhY2hlW25hbWVdKSB7XG4gICAgICBpYW5hWm9uZUNhY2hlW25hbWVdID0gbmV3IElBTkFab25lKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gaWFuYVpvbmVDYWNoZVtuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBsb2NhbCBjYWNoZXMuIFNob3VsZCBvbmx5IGJlIG5lY2Vzc2FyeSBpbiB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIGlhbmFab25lQ2FjaGUgPSB7fTtcbiAgICBkdGZDYWNoZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgc3RyaW5nIGlzIGEgdmFsaWQgc3BlY2lmaWVyLiBUaGlzIG9ubHkgY2hlY2tzIHRoZSBzdHJpbmcncyBmb3JtYXQsIG5vdCB0aGF0IHRoZSBzcGVjaWZpZXIgaWRlbnRpZmllcyBhIGtub3duIHpvbmU7IHNlZSBpc1ZhbGlkWm9uZSBmb3IgdGhhdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHMgLSBUaGUgc3RyaW5nIHRvIGNoZWNrIHZhbGlkaXR5IG9uXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoXCJBbWVyaWNhL05ld19Zb3JrXCIpIC8vPT4gdHJ1ZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKFwiU3BvcnR+fmJsb3JwXCIpIC8vPT4gZmFsc2VcbiAgICogQGRlcHJlY2F0ZWQgVGhpcyBtZXRob2QgcmV0dXJucyBmYWxzZSBmb3Igc29tZSB2YWxpZCBJQU5BIG5hbWVzLiBVc2UgaXNWYWxpZFpvbmUgaW5zdGVhZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkU3BlY2lmaWVyKHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkWm9uZShzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpZGVudGlmaWVzIGEgcmVhbCB6b25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gVGhlIHN0cmluZyB0byBjaGVja1xuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiRmFudGFzaWEvQ2FzdGxlXCIpIC8vPT4gZmFsc2VcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRab25lKHpvbmUpIHtcbiAgICBpZiAoIXpvbmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwgeyB0aW1lWm9uZTogem9uZSB9KS5mb3JtYXQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKiogQHByaXZhdGUgKiovXG4gICAgdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuICAgIHRoaXMudmFsaWQgPSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShuYW1lKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImlhbmFcIjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldE5hbWUodHMsIHsgZm9ybWF0LCBsb2NhbGUgfSkge1xuICAgIHJldHVybiBwYXJzZVpvbmVJbmZvKHRzLCBmb3JtYXQsIGxvY2FsZSwgdGhpcy5uYW1lKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLm9mZnNldCh0cyksIGZvcm1hdCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXQodHMpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpO1xuXG4gICAgaWYgKGlzTmFOKGRhdGUpKSByZXR1cm4gTmFOO1xuXG4gICAgY29uc3QgZHRmID0gbWFrZURURih0aGlzLm5hbWUpO1xuICAgIGxldCBbeWVhciwgbW9udGgsIGRheSwgYWRPckJjLCBob3VyLCBtaW51dGUsIHNlY29uZF0gPSBkdGYuZm9ybWF0VG9QYXJ0c1xuICAgICAgPyBwYXJ0c09mZnNldChkdGYsIGRhdGUpXG4gICAgICA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSk7XG5cbiAgICBpZiAoYWRPckJjID09PSBcIkJDXCIpIHtcbiAgICAgIHllYXIgPSAtTWF0aC5hYnMoeWVhcikgKyAxO1xuICAgIH1cblxuICAgIC8vIGJlY2F1c2Ugd2UncmUgdXNpbmcgaG91cjEyIGFuZCBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDI1NTY0JmNhbj0yJnE9JTIyMjQlM0EwMCUyMiUyMGRhdGV0aW1lZm9ybWF0XG4gICAgY29uc3QgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcblxuICAgIGNvbnN0IGFzVVRDID0gb2JqVG9Mb2NhbFRTKHtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheSxcbiAgICAgIGhvdXI6IGFkanVzdGVkSG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kOiAwLFxuICAgIH0pO1xuXG4gICAgbGV0IGFzVFMgPSArZGF0ZTtcbiAgICBjb25zdCBvdmVyID0gYXNUUyAlIDEwMDA7XG4gICAgYXNUUyAtPSBvdmVyID49IDAgPyBvdmVyIDogMTAwMCArIG92ZXI7XG4gICAgcmV0dXJuIChhc1VUQyAtIGFzVFMpIC8gKDYwICogMTAwMCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWQ7XG4gIH1cbn1cblxuLy8gdG9kbyAtIHJlbWFwIGNhY2hpbmdcblxubGV0IGludGxMRkNhY2hlID0ge307XG5mdW5jdGlvbiBnZXRDYWNoZWRMRihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7XG4gIGxldCBkdGYgPSBpbnRsTEZDYWNoZVtrZXldO1xuICBpZiAoIWR0Zikge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkxpc3RGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsTEZDYWNoZVtrZXldID0gZHRmO1xuICB9XG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsRFRDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZ2V0Q2FjaGVkRFRGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxEVENhY2hlW2tleV07XG4gIGlmICghZHRmKSB7XG4gICAgZHRmID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsRFRDYWNoZVtrZXldID0gZHRmO1xuICB9XG4gIHJldHVybiBkdGY7XG59XG5cbmxldCBpbnRsTnVtQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdldENhY2hlZElORihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7XG4gIGxldCBpbmYgPSBpbnRsTnVtQ2FjaGVba2V5XTtcbiAgaWYgKCFpbmYpIHtcbiAgICBpbmYgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsTnVtQ2FjaGVba2V5XSA9IGluZjtcbiAgfVxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgaW50bFJlbENhY2hlID0ge307XG5mdW5jdGlvbiBnZXRDYWNoZWRSVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3QgeyBiYXNlLCAuLi5jYWNoZUtleU9wdHMgfSA9IG9wdHM7IC8vIGV4Y2x1ZGUgYGJhc2VgIGZyb20gdGhlIG9wdGlvbnNcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgY2FjaGVLZXlPcHRzXSk7XG4gIGxldCBpbmYgPSBpbnRsUmVsQ2FjaGVba2V5XTtcbiAgaWYgKCFpbmYpIHtcbiAgICBpbmYgPSBuZXcgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsUmVsQ2FjaGVba2V5XSA9IGluZjtcbiAgfVxuICByZXR1cm4gaW5mO1xufVxuXG5sZXQgc3lzTG9jYWxlQ2FjaGUgPSBudWxsO1xuZnVuY3Rpb24gc3lzdGVtTG9jYWxlKCkge1xuICBpZiAoc3lzTG9jYWxlQ2FjaGUpIHtcbiAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7XG4gIH0gZWxzZSB7XG4gICAgc3lzTG9jYWxlQ2FjaGUgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZTtcbiAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlU3RyKSB7XG4gIC8vIEkgcmVhbGx5IHdhbnQgdG8gYXZvaWQgd3JpdGluZyBhIEJDUCA0NyBwYXJzZXJcbiAgLy8gc2VlLCBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vYmNwLTQ3XG4gIC8vIEluc3RlYWQsIHdlJ2xsIGRvIHRoaXM6XG5cbiAgLy8gYSkgaWYgdGhlIHN0cmluZyBoYXMgbm8gLXUgZXh0ZW5zaW9ucywganVzdCBsZWF2ZSBpdCBhbG9uZVxuICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmdcbiAgLy8gYykgaWYgSW50bCBmYWlscywgdHJ5IGFnYWluIHdpdGhvdXQgdGhlIC11XG5cbiAgLy8gcHJpdmF0ZSBzdWJ0YWdzIGFuZCB1bmljb2RlIHN1YnRhZ3MgaGF2ZSBvcmRlcmluZyByZXF1aXJlbWVudHMsXG4gIC8vIGFuZCB3ZSdyZSBub3QgcHJvcGVybHkgcGFyc2luZyB0aGlzLCBzbyBqdXN0IHN0cmlwIG91dCB0aGVcbiAgLy8gcHJpdmF0ZSBvbmVzIGlmIHRoZXkgZXhpc3QuXG4gIGNvbnN0IHhJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXgtXCIpO1xuICBpZiAoeEluZGV4ICE9PSAtMSkge1xuICAgIGxvY2FsZVN0ciA9IGxvY2FsZVN0ci5zdWJzdHJpbmcoMCwgeEluZGV4KTtcbiAgfVxuXG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuICBpZiAodUluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBbbG9jYWxlU3RyXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBsZXQgc2VsZWN0ZWRTdHI7XG4gICAgdHJ5IHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYobG9jYWxlU3RyKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICAgIHNlbGVjdGVkU3RyID0gbG9jYWxlU3RyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG4gICAgICBvcHRpb25zID0gZ2V0Q2FjaGVkRFRGKHNtYWxsZXIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgICAgc2VsZWN0ZWRTdHIgPSBzbWFsbGVyO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gW3NlbGVjdGVkU3RyLCBudW1iZXJpbmdTeXN0ZW0sIGNhbGVuZGFyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZVN0ciwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgaWYgKCFsb2NhbGVTdHIuaW5jbHVkZXMoXCItdS1cIikpIHtcbiAgICAgIGxvY2FsZVN0ciArPSBcIi11XCI7XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gYC1jYS0ke291dHB1dENhbGVuZGFyfWA7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZVN0cjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcE1vbnRocyhmKSB7XG4gIGNvbnN0IG1zID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDEyOyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDA5LCBpLCAxKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIG1hcFdlZWtkYXlzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNzsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzICsgaSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cbiAgcmV0dXJuIG1zO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R1ZmYobG9jLCBsZW5ndGgsIGVuZ2xpc2hGbiwgaW50bEZuKSB7XG4gIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoKTtcblxuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykge1xuICBpZiAobG9jLm51bWJlcmluZ1N5c3RlbSAmJiBsb2MubnVtYmVyaW5nU3lzdGVtICE9PSBcImxhdG5cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIgfHxcbiAgICAgICFsb2MubG9jYWxlIHx8XG4gICAgICBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoXCJlblwiKSB8fFxuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jLmludGwpLnJlc29sdmVkT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCJcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBQb2x5TnVtYmVyRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgZm9yY2VTaW1wbGUsIG9wdHMpIHtcbiAgICB0aGlzLnBhZFRvID0gb3B0cy5wYWRUbyB8fCAwO1xuICAgIHRoaXMuZmxvb3IgPSBvcHRzLmZsb29yIHx8IGZhbHNlO1xuXG4gICAgY29uc3QgeyBwYWRUbywgZmxvb3IsIC4uLm90aGVyT3B0cyB9ID0gb3B0cztcblxuICAgIGlmICghZm9yY2VTaW1wbGUgfHwgT2JqZWN0LmtleXMob3RoZXJPcHRzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBpbnRsT3B0cyA9IHsgdXNlR3JvdXBpbmc6IGZhbHNlLCAuLi5vcHRzIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoaSkge1xuICAgIGlmICh0aGlzLmluZikge1xuICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIGNvbnN0IGZpeGVkID0gdGhpcy5mbG9vciA/IE1hdGguZmxvb3IoaSkgOiByb3VuZFRvKGksIDMpO1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KGZpeGVkLCB0aGlzLnBhZFRvKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIFBvbHlEYXRlRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoZHQsIGludGwsIG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMub3JpZ2luYWxab25lID0gdW5kZWZpbmVkO1xuXG4gICAgbGV0IHogPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMub3B0cy50aW1lWm9uZSkge1xuICAgICAgLy8gRG9uJ3QgYXBwbHkgYW55IHdvcmthcm91bmRzIGlmIGEgdGltZVpvbmUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBvcHRzXG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwiZml4ZWRcIikge1xuICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS5cbiAgICAgIC8vIFRoYXQgaXMgd2h5IGZpeGVkLW9mZnNldCBUWiBpcyBzZXQgdG8gdGhhdCB1bmxlc3MgaXQgaXM6XG4gICAgICAvLyAxLiBSZXByZXNlbnRpbmcgb2Zmc2V0IDAgd2hlbiBVVEMgaXMgdXNlZCB0byBtYWludGFpbiBwcmV2aW91cyBiZWhhdmlvciBhbmQgZG9lcyBub3QgYmVjb21lIEdNVC5cbiAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOlxuICAgICAgLy8gICAgLSBzb21lIGRvIG5vdCBzdXBwb3J0IEV0Yy9cbiAgICAgIC8vICAgIC0gPCBFdGMvR01ULTE0LCA+IEV0Yy9HTVQrMTIsIGFuZCAzMC1taW51dGUgb3IgNDUtbWludXRlIG9mZnNldHMgYXJlIG5vdCBwYXJ0IG9mIHR6ZGF0YVxuICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApO1xuICAgICAgY29uc3Qgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gYEV0Yy9HTVQrJHtnbXRPZmZzZXR9YCA6IGBFdGMvR01UJHtnbXRPZmZzZXR9YDtcbiAgICAgIGlmIChkdC5vZmZzZXQgIT09IDAgJiYgSUFOQVpvbmUuY3JlYXRlKG9mZnNldFopLnZhbGlkKSB7XG4gICAgICAgIHogPSBvZmZzZXRaO1xuICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3QgYWxsIGZpeGVkLW9mZnNldCB6b25lcyBsaWtlIEV0Yy8rNDozMCBhcmUgcHJlc2VudCBpbiB0emRhdGEgc29cbiAgICAgICAgLy8gd2UgbWFudWFsbHkgYXBwbHkgdGhlIG9mZnNldCBhbmQgc3Vic3RpdHV0ZSB0aGUgem9uZSBhcyBuZWVkZWQuXG4gICAgICAgIHogPSBcIlVUQ1wiO1xuICAgICAgICB0aGlzLmR0ID0gZHQub2Zmc2V0ID09PSAwID8gZHQgOiBkdC5zZXRab25lKFwiVVRDXCIpLnBsdXMoeyBtaW51dGVzOiBkdC5vZmZzZXQgfSk7XG4gICAgICAgIHRoaXMub3JpZ2luYWxab25lID0gZHQuem9uZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR0LnpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSBpZiAoZHQuem9uZS50eXBlID09PSBcImlhbmFcIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgeiA9IGR0LnpvbmUubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3VzdG9tIHpvbmVzIGNhbiBoYXZlIGFueSBvZmZzZXQgLyBvZmZzZXROYW1lIHNvIHdlIGp1c3QgbWFudWFsbHlcbiAgICAgIC8vIGFwcGx5IHRoZSBvZmZzZXQgYW5kIHN1YnN0aXR1dGUgdGhlIHpvbmUgYXMgbmVlZGVkLlxuICAgICAgeiA9IFwiVVRDXCI7XG4gICAgICB0aGlzLmR0ID0gZHQuc2V0Wm9uZShcIlVUQ1wiKS5wbHVzKHsgbWludXRlczogZHQub2Zmc2V0IH0pO1xuICAgICAgdGhpcy5vcmlnaW5hbFpvbmUgPSBkdC56b25lO1xuICAgIH1cblxuICAgIGNvbnN0IGludGxPcHRzID0geyAuLi50aGlzLm9wdHMgfTtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IGludGxPcHRzLnRpbWVab25lIHx8IHo7XG4gICAgdGhpcy5kdGYgPSBnZXRDYWNoZWREVEYoaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgZm9ybWF0KCkge1xuICAgIGlmICh0aGlzLm9yaWdpbmFsWm9uZSkge1xuICAgICAgLy8gSWYgd2UgaGF2ZSB0byBzdWJzdGl0dXRlIGluIHRoZSBhY3R1YWwgem9uZSBuYW1lLCB3ZSBoYXZlIHRvIHVzZVxuICAgICAgLy8gZm9ybWF0VG9QYXJ0cyBzbyB0aGF0IHRoZSB0aW1lem9uZSBjYW4gYmUgcmVwbGFjZWQuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXRUb1BhcnRzKClcbiAgICAgICAgLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXQodGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgfVxuXG4gIGZvcm1hdFRvUGFydHMoKSB7XG4gICAgY29uc3QgcGFydHMgPSB0aGlzLmR0Zi5mb3JtYXRUb1BhcnRzKHRoaXMuZHQudG9KU0RhdGUoKSk7XG4gICAgaWYgKHRoaXMub3JpZ2luYWxab25lKSB7XG4gICAgICByZXR1cm4gcGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFwidGltZVpvbmVOYW1lXCIpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXROYW1lID0gdGhpcy5vcmlnaW5hbFpvbmUub2Zmc2V0TmFtZSh0aGlzLmR0LnRzLCB7XG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuZHQubG9jYWxlLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdHMudGltZVpvbmVOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wYXJ0LFxuICAgICAgICAgICAgdmFsdWU6IG9mZnNldE5hbWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFydDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQb2x5UmVsRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgaXNFbmdsaXNoLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0geyBzdHlsZTogXCJsb25nXCIsIC4uLm9wdHMgfTtcbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoY291bnQsIHVuaXQpIHtcbiAgICBpZiAodGhpcy5ydGYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5mb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybWF0UmVsYXRpdmVUaW1lKHVuaXQsIGNvdW50LCB0aGlzLm9wdHMubnVtZXJpYywgdGhpcy5vcHRzLnN0eWxlICE9PSBcImxvbmdcIik7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCkge1xuICAgIGlmICh0aGlzLnJ0Zikge1xuICAgICAgcmV0dXJuIHRoaXMucnRmLmZvcm1hdFRvUGFydHMoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBMb2NhbGUge1xuICBzdGF0aWMgZnJvbU9wdHMob3B0cykge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKG9wdHMubG9jYWxlLCBvcHRzLm51bWJlcmluZ1N5c3RlbSwgb3B0cy5vdXRwdXRDYWxlbmRhciwgb3B0cy5kZWZhdWx0VG9FTik7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciwgZGVmYXVsdFRvRU4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHNwZWNpZmllZExvY2FsZSA9IGxvY2FsZSB8fCBTZXR0aW5ncy5kZWZhdWx0TG9jYWxlO1xuICAgIC8vIHRoZSBzeXN0ZW0gbG9jYWxlIGlzIHVzZWZ1bCBmb3IgaHVtYW4gcmVhZGFibGUgc3RyaW5ncyBidXQgYW5ub3lpbmcgZm9yIHBhcnNpbmcvZm9ybWF0dGluZyBrbm93biBmb3JtYXRzXG4gICAgY29uc3QgbG9jYWxlUiA9IHNwZWNpZmllZExvY2FsZSB8fCAoZGVmYXVsdFRvRU4gPyBcImVuLVVTXCIgOiBzeXN0ZW1Mb2NhbGUoKSk7XG4gICAgY29uc3QgbnVtYmVyaW5nU3lzdGVtUiA9IG51bWJlcmluZ1N5c3RlbSB8fCBTZXR0aW5ncy5kZWZhdWx0TnVtYmVyaW5nU3lzdGVtO1xuICAgIGNvbnN0IG91dHB1dENhbGVuZGFyUiA9IG91dHB1dENhbGVuZGFyIHx8IFNldHRpbmdzLmRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGVSLCBudW1iZXJpbmdTeXN0ZW1SLCBvdXRwdXRDYWxlbmRhclIsIHNwZWNpZmllZExvY2FsZSk7XG4gIH1cblxuICBzdGF0aWMgcmVzZXRDYWNoZSgpIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG51bGw7XG4gICAgaW50bERUQ2FjaGUgPSB7fTtcbiAgICBpbnRsTnVtQ2FjaGUgPSB7fTtcbiAgICBpbnRsUmVsQ2FjaGUgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tT2JqZWN0KHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcik7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihsb2NhbGUsIG51bWJlcmluZywgb3V0cHV0Q2FsZW5kYXIsIHNwZWNpZmllZExvY2FsZSkge1xuICAgIGNvbnN0IFtwYXJzZWRMb2NhbGUsIHBhcnNlZE51bWJlcmluZ1N5c3RlbSwgcGFyc2VkT3V0cHV0Q2FsZW5kYXJdID0gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlKTtcblxuICAgIHRoaXMubG9jYWxlID0gcGFyc2VkTG9jYWxlO1xuICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gbnVtYmVyaW5nIHx8IHBhcnNlZE51bWJlcmluZ1N5c3RlbSB8fCBudWxsO1xuICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsO1xuICAgIHRoaXMuaW50bCA9IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKTtcblxuICAgIHRoaXMud2Vla2RheXNDYWNoZSA9IHsgZm9ybWF0OiB7fSwgc3RhbmRhbG9uZToge30gfTtcbiAgICB0aGlzLm1vbnRoc0NhY2hlID0geyBmb3JtYXQ6IHt9LCBzdGFuZGFsb25lOiB7fSB9O1xuICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7XG4gICAgdGhpcy5lcmFDYWNoZSA9IHt9O1xuXG4gICAgdGhpcy5zcGVjaWZpZWRMb2NhbGUgPSBzcGVjaWZpZWRMb2NhbGU7XG4gICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IG51bGw7XG4gIH1cblxuICBnZXQgZmFzdE51bWJlcnMoKSB7XG4gICAgaWYgKHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IHN1cHBvcnRzRmFzdE51bWJlcnModGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQ7XG4gIH1cblxuICBsaXN0aW5nTW9kZSgpIHtcbiAgICBjb25zdCBpc0FjdHVhbGx5RW4gPSB0aGlzLmlzRW5nbGlzaCgpO1xuICAgIGNvbnN0IGhhc05vV2VpcmRuZXNzID1cbiAgICAgICh0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gbnVsbCB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIpICYmXG4gICAgICAodGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gbnVsbCB8fCB0aGlzLm91dHB1dENhbGVuZGFyID09PSBcImdyZWdvcnlcIik7XG4gICAgcmV0dXJuIGlzQWN0dWFsbHlFbiAmJiBoYXNOb1dlaXJkbmVzcyA/IFwiZW5cIiA6IFwiaW50bFwiO1xuICB9XG5cbiAgY2xvbmUoYWx0cykge1xuICAgIGlmICghYWx0cyB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbHRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShcbiAgICAgICAgYWx0cy5sb2NhbGUgfHwgdGhpcy5zcGVjaWZpZWRMb2NhbGUsXG4gICAgICAgIGFsdHMubnVtYmVyaW5nU3lzdGVtIHx8IHRoaXMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBhbHRzLm91dHB1dENhbGVuZGFyIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIsXG4gICAgICAgIGFsdHMuZGVmYXVsdFRvRU4gfHwgZmFsc2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmVkZWZhdWx0VG9FTihhbHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7IC4uLmFsdHMsIGRlZmF1bHRUb0VOOiB0cnVlIH0pO1xuICB9XG5cbiAgcmVkZWZhdWx0VG9TeXN0ZW0oYWx0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoeyAuLi5hbHRzLCBkZWZhdWx0VG9FTjogZmFsc2UgfSk7XG4gIH1cblxuICBtb250aHMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSkge1xuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBtb250aHMsICgpID0+IHtcbiAgICAgIGNvbnN0IGludGwgPSBmb3JtYXQgPyB7IG1vbnRoOiBsZW5ndGgsIGRheTogXCJudW1lcmljXCIgfSA6IHsgbW9udGg6IGxlbmd0aCB9LFxuICAgICAgICBmb3JtYXRTdHIgPSBmb3JtYXQgPyBcImZvcm1hdFwiIDogXCJzdGFuZGFsb25lXCI7XG4gICAgICBpZiAoIXRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICAgIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwTW9udGhzKChkdCkgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcIm1vbnRoXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIHdlZWtkYXlzKGxlbmd0aCwgZm9ybWF0ID0gZmFsc2UpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgd2Vla2RheXMsICgpID0+IHtcbiAgICAgIGNvbnN0IGludGwgPSBmb3JtYXRcbiAgICAgICAgICA/IHsgd2Vla2RheTogbGVuZ3RoLCB5ZWFyOiBcIm51bWVyaWNcIiwgbW9udGg6IFwibG9uZ1wiLCBkYXk6IFwibnVtZXJpY1wiIH1cbiAgICAgICAgICA6IHsgd2Vla2RheTogbGVuZ3RoIH0sXG4gICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/IFwiZm9ybWF0XCIgOiBcInN0YW5kYWxvbmVcIjtcbiAgICAgIGlmICghdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoKGR0KSA9PlxuICAgICAgICAgIHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJ3ZWVrZGF5XCIpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIG1lcmlkaWVtcygpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKFxuICAgICAgdGhpcyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgICgpID0+IG1lcmlkaWVtcyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gSW4gdGhlb3J5IHRoZXJlIGNvdWxkIGJlIGFyaWJpdHJhcnkgZGF5IHBlcmlvZHMuIFdlJ3JlIGdvbm5hIGFzc3VtZSB0aGVyZSBhcmUgZXhhY3RseSB0d29cbiAgICAgICAgLy8gZm9yIEFNIGFuZCBQTS4gVGhpcyBpcyBwcm9iYWJseSB3cm9uZywgYnV0IGl0J3MgbWFrZXMgcGFyc2luZyB3YXkgZWFzaWVyLlxuICAgICAgICBpZiAoIXRoaXMubWVyaWRpZW1DYWNoZSkge1xuICAgICAgICAgIGNvbnN0IGludGwgPSB7IGhvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDEyXCIgfTtcbiAgICAgICAgICB0aGlzLm1lcmlkaWVtQ2FjaGUgPSBbRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgOSksIERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDE5KV0ubWFwKFxuICAgICAgICAgICAgKGR0KSA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZGF5cGVyaW9kXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm1lcmlkaWVtQ2FjaGU7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGVyYXMobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGVyYXMsICgpID0+IHtcbiAgICAgIGNvbnN0IGludGwgPSB7IGVyYTogbGVuZ3RoIH07XG5cbiAgICAgIC8vIFRoaXMgaXMgcHJvYmxlbWF0aWMuIERpZmZlcmVudCBjYWxlbmRhcnMgYXJlIGdvaW5nIHRvIGRlZmluZSBlcmFzIHRvdGFsbHkgZGlmZmVyZW50bHkuIFdoYXQgSSBuZWVkIGlzIHRoZSBtaW5pbXVtIHNldCBvZiBkYXRlc1xuICAgICAgLy8gdG8gZGVmaW5pdGVseSBlbnVtZXJhdGUgdGhlbS5cbiAgICAgIGlmICghdGhpcy5lcmFDYWNoZVtsZW5ndGhdKSB7XG4gICAgICAgIHRoaXMuZXJhQ2FjaGVbbGVuZ3RoXSA9IFtEYXRlVGltZS51dGMoLTQwLCAxLCAxKSwgRGF0ZVRpbWUudXRjKDIwMTcsIDEsIDEpXS5tYXAoKGR0KSA9PlxuICAgICAgICAgIHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJlcmFcIilcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZXJhQ2FjaGVbbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4dHJhY3QoZHQsIGludGxPcHRzLCBmaWVsZCkge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihkdCwgaW50bE9wdHMpLFxuICAgICAgcmVzdWx0cyA9IGRmLmZvcm1hdFRvUGFydHMoKSxcbiAgICAgIG1hdGNoaW5nID0gcmVzdWx0cy5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZmllbGQpO1xuICAgIHJldHVybiBtYXRjaGluZyA/IG1hdGNoaW5nLnZhbHVlIDogbnVsbDtcbiAgfVxuXG4gIG51bWJlckZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICAvLyB0aGlzIGZvcmNlc2ltcGxlIG9wdGlvbiBpcyBuZXZlciB1c2VkICh0aGUgb25seSBjYWxsZXIgc2hvcnQtY2lyY3VpdHMgb24gaXQsIGJ1dCBpdCBzZWVtcyBzYWZlciB0byBsZWF2ZSlcbiAgICAvLyAoaW4gY29udHJhc3QsIHRoZSByZXN0IG9mIHRoZSBjb25kaXRpb24gaXMgdXNlZCBoZWF2aWx5KVxuICAgIHJldHVybiBuZXcgUG9seU51bWJlckZvcm1hdHRlcih0aGlzLmludGwsIG9wdHMuZm9yY2VTaW1wbGUgfHwgdGhpcy5mYXN0TnVtYmVycywgb3B0cyk7XG4gIH1cblxuICBkdEZvcm1hdHRlcihkdCwgaW50bE9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seURhdGVGb3JtYXR0ZXIoZHQsIHRoaXMuaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgcmVsRm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seVJlbEZvcm1hdHRlcih0aGlzLmludGwsIHRoaXMuaXNFbmdsaXNoKCksIG9wdHMpO1xuICB9XG5cbiAgbGlzdEZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkTEYodGhpcy5pbnRsLCBvcHRzKTtcbiAgfVxuXG4gIGlzRW5nbGlzaCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5sb2NhbGUgPT09IFwiZW5cIiB8fFxuICAgICAgdGhpcy5sb2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gXCJlbi11c1wiIHx8XG4gICAgICBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLmludGwpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZS5zdGFydHNXaXRoKFwiZW4tdXNcIilcbiAgICApO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMubG9jYWxlID09PSBvdGhlci5sb2NhbGUgJiZcbiAgICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID09PSBvdGhlci5udW1iZXJpbmdTeXN0ZW0gJiZcbiAgICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IG90aGVyLm91dHB1dENhbGVuZGFyXG4gICAgKTtcbiAgfVxufVxuXG5sZXQgc2luZ2xldG9uID0gbnVsbDtcblxuLyoqXG4gKiBBIHpvbmUgd2l0aCBhIGZpeGVkIG9mZnNldCAobWVhbmluZyBubyBEU1QpXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuY2xhc3MgRml4ZWRPZmZzZXRab25lIGV4dGVuZHMgWm9uZSB7XG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgVVRDXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG4gIHN0YXRpYyBnZXQgdXRjSW5zdGFuY2UoKSB7XG4gICAgaWYgKHNpbmdsZXRvbiA9PT0gbnVsbCkge1xuICAgICAgc2luZ2xldG9uID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZSgwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgaW4gbWludXRlc1xuICAgKiBAcmV0dXJuIHtGaXhlZE9mZnNldFpvbmV9XG4gICAqL1xuICBzdGF0aWMgaW5zdGFuY2Uob2Zmc2V0KSB7XG4gICAgcmV0dXJuIG9mZnNldCA9PT0gMCA/IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZSA6IG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gaW5zdGFuY2Ugb2YgRml4ZWRPZmZzZXRab25lIGZyb20gYSBVVEMgb2Zmc2V0IHN0cmluZywgbGlrZSBcIlVUQys2XCJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHMgLSBUaGUgb2Zmc2V0IHN0cmluZyB0byBwYXJzZVxuICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoXCJVVEMrNlwiKVxuICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoXCJVVEMrMDZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDLTY6MDBcIilcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgc3RhdGljIHBhcnNlU3BlY2lmaWVyKHMpIHtcbiAgICBpZiAocykge1xuICAgICAgY29uc3QgciA9IHMubWF0Y2goL151dGMoPzooWystXVxcZHsxLDJ9KSg/OjooXFxkezJ9KSk/KT8kL2kpO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaXhlZE9mZnNldFpvbmUoc2lnbmVkT2Zmc2V0KHJbMV0sIHJbMl0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihvZmZzZXQpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cbiAgICB0aGlzLmZpeGVkID0gb2Zmc2V0O1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwiZml4ZWRcIjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IGBVVEMke2Zvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICB9XG5cbiAgZ2V0IGlhbmFOYW1lKCkge1xuICAgIGlmICh0aGlzLmZpeGVkID09PSAwKSB7XG4gICAgICByZXR1cm4gXCJFdGMvVVRDXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgRXRjL0dNVCR7Zm9ybWF0T2Zmc2V0KC10aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBmb3JtYXQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJmaXhlZFwiICYmIG90aGVyWm9uZS5maXhlZCA9PT0gdGhpcy5maXhlZDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQSB6b25lIHRoYXQgZmFpbGVkIHRvIHBhcnNlLiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhpcy5cbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5jbGFzcyBJbnZhbGlkWm9uZSBleHRlbmRzIFpvbmUge1xuICBjb25zdHJ1Y3Rvcih6b25lTmFtZSkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqICBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuem9uZU5hbWUgPSB6b25lTmFtZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImludmFsaWRcIjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldE5hbWUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBmb3JtYXRPZmZzZXQoKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGVxdWFscygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVpvbmUoaW5wdXQsIGRlZmF1bHRab25lKSB7XG4gIGlmIChpc1VuZGVmaW5lZChpbnB1dCkgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVmYXVsdFpvbmU7XG4gIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgIGNvbnN0IGxvd2VyZWQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlcmVkID09PSBcImRlZmF1bHRcIikgcmV0dXJuIGRlZmF1bHRab25lO1xuICAgIGVsc2UgaWYgKGxvd2VyZWQgPT09IFwibG9jYWxcIiB8fCBsb3dlcmVkID09PSBcInN5c3RlbVwiKSByZXR1cm4gU3lzdGVtWm9uZS5pbnN0YW5jZTtcbiAgICBlbHNlIGlmIChsb3dlcmVkID09PSBcInV0Y1wiIHx8IGxvd2VyZWQgPT09IFwiZ210XCIpIHJldHVybiBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgZWxzZSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKGxvd2VyZWQpIHx8IElBTkFab25lLmNyZWF0ZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIFwib2Zmc2V0XCIgaW4gaW5wdXQgJiYgdHlwZW9mIGlucHV0Lm9mZnNldCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gVGhpcyBpcyBkdW1iLCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSB3b3JrXG4gICAgLy8gc28gd2UncmUgZHVjayBjaGVja2luZyBpdFxuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEludmFsaWRab25lKGlucHV0KTtcbiAgfVxufVxuXG5sZXQgbm93ID0gKCkgPT4gRGF0ZS5ub3coKSxcbiAgZGVmYXVsdFpvbmUgPSBcInN5c3RlbVwiLFxuICBkZWZhdWx0TG9jYWxlID0gbnVsbCxcbiAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bGwsXG4gIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG51bGwsXG4gIHR3b0RpZ2l0Q3V0b2ZmWWVhciA9IDYwLFxuICB0aHJvd09uSW52YWxpZDtcblxuLyoqXG4gKiBTZXR0aW5ncyBjb250YWlucyBzdGF0aWMgZ2V0dGVycyBhbmQgc2V0dGVycyB0aGF0IGNvbnRyb2wgTHV4b24ncyBvdmVyYWxsIGJlaGF2aW9yLiBMdXhvbiBpcyBhIHNpbXBsZSBsaWJyYXJ5IHdpdGggZmV3IG9wdGlvbnMsIGJ1dCB0aGUgb25lcyBpdCBkb2VzIGhhdmUgbGl2ZSBoZXJlLlxuICovXG5jbGFzcyBTZXR0aW5ncyB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNhbGxiYWNrIGZvciByZXR1cm5pbmcgdGhlIGN1cnJlbnQgdGltZXN0YW1wLlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqL1xuICBzdGF0aWMgZ2V0IG5vdygpIHtcbiAgICByZXR1cm4gbm93O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICovXG4gIHN0YXRpYyBzZXQgbm93KG4pIHtcbiAgICBub3cgPSBuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCB0aW1lIHpvbmUgdG8gY3JlYXRlIERhdGVUaW1lcyBpbi4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogVXNlIHRoZSB2YWx1ZSBcInN5c3RlbVwiIHRvIHJlc2V0IHRoaXMgdmFsdWUgdG8gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdFpvbmUoem9uZSkge1xuICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgdGltZSB6b25lIG9iamVjdCBjdXJyZW50bHkgdXNlZCB0byBjcmVhdGUgRGF0ZVRpbWVzLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgc3lzdGVtJ3MgdGltZSB6b25lICh0aGUgb25lIHNldCBvbiB0aGUgbWFjaGluZSB0aGF0IHJ1bnMgdGhpcyBjb2RlKS5cbiAgICogQHR5cGUge1pvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRab25lKCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGRlZmF1bHRab25lLCBTeXN0ZW1ab25lLmluc3RhbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdExvY2FsZSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdExvY2FsZShsb2NhbGUpIHtcbiAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBudW1iZXJpbmcgc3lzdGVtIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0obnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgb3V0cHV0IGNhbGVuZGFyIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHRPdXRwdXRDYWxlbmRhcihvdXRwdXRDYWxlbmRhcikge1xuICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3V0b2ZmIHllYXIgYWZ0ZXIgd2hpY2ggYSBzdHJpbmcgZW5jb2RpbmcgYSB5ZWFyIGFzIHR3byBkaWdpdHMgaXMgaW50ZXJwcmV0ZWQgdG8gb2NjdXIgaW4gdGhlIGN1cnJlbnQgY2VudHVyeS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXQgdHdvRGlnaXRDdXRvZmZZZWFyKCkge1xuICAgIHJldHVybiB0d29EaWdpdEN1dG9mZlllYXI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXRvZmYgeWVhciBhZnRlciB3aGljaCBhIHN0cmluZyBlbmNvZGluZyBhIHllYXIgYXMgdHdvIGRpZ2l0cyBpcyBpbnRlcnByZXRlZCB0byBvY2N1ciBpbiB0aGUgY3VycmVudCBjZW50dXJ5LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy50d29EaWdpdEN1dG9mZlllYXIgPSAwIC8vIGN1dC1vZmYgeWVhciBpcyAwLCBzbyBhbGwgJ3l5JyBhcmUgaW50ZXJwcmV0ZWQgYXMgY3VycmVudCBjZW50dXJ5XG4gICAqIEBleGFtcGxlIFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA9IDUwIC8vICc0OScgLT4gMTk0OTsgJzUwJyAtPiAyMDUwXG4gICAqIEBleGFtcGxlIFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA9IDE5NTAgLy8gaW50ZXJwcmV0ZWQgYXMgNTBcbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gMjA1MCAvLyBBTFNPIGludGVycHJldGVkIGFzIDUwXG4gICAqL1xuICBzdGF0aWMgc2V0IHR3b0RpZ2l0Q3V0b2ZmWWVhcihjdXRvZmZZZWFyKSB7XG4gICAgdHdvRGlnaXRDdXRvZmZZZWFyID0gY3V0b2ZmWWVhciAlIDEwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciBMdXhvbiB3aWxsIHRocm93IHdoZW4gaXQgZW5jb3VudGVycyBpbnZhbGlkIERhdGVUaW1lcywgRHVyYXRpb25zLCBvciBJbnRlcnZhbHNcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRocm93T25JbnZhbGlkKCkge1xuICAgIHJldHVybiB0aHJvd09uSW52YWxpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciBMdXhvbiB3aWxsIHRocm93IHdoZW4gaXQgZW5jb3VudGVycyBpbnZhbGlkIERhdGVUaW1lcywgRHVyYXRpb25zLCBvciBJbnRlcnZhbHNcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgc2V0IHRocm93T25JbnZhbGlkKHQpIHtcbiAgICB0aHJvd09uSW52YWxpZCA9IHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgTHV4b24ncyBnbG9iYWwgY2FjaGVzLiBTaG91bGQgb25seSBiZSBuZWNlc3NhcnkgaW4gdGVzdGluZyBzY2VuYXJpb3MuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgcmVzZXRDYWNoZXMoKSB7XG4gICAgTG9jYWxlLnJlc2V0Q2FjaGUoKTtcbiAgICBJQU5BWm9uZS5yZXNldENhY2hlKCk7XG4gIH1cbn1cblxuLypcbiAgVGhpcyBpcyBqdXN0IGEganVuayBkcmF3ZXIsIGNvbnRhaW5pbmcgYW55dGhpbmcgdXNlZCBhY3Jvc3MgbXVsdGlwbGUgY2xhc3Nlcy5cbiAgQmVjYXVzZSBMdXhvbiBpcyBzbWFsbChpc2gpLCB0aGlzIHNob3VsZCBzdGF5IHNtYWxsIGFuZCB3ZSB3b24ndCB3b3JyeSBhYm91dCBzcGxpdHRpbmdcbiAgaXQgdXAgaW50bywgc2F5LCBwYXJzaW5nVXRpbC5qcyBhbmQgYmFzaWNVdGlsLmpzIGFuZCBzbyBvbi4gQnV0IHRoZXkgYXJlIGRpdmlkZWQgdXAgYnkgZmVhdHVyZSBhcmVhLlxuKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbi8vIFRZUEVTXG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInVuZGVmaW5lZFwiO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJudW1iZXJcIjtcbn1cblxuZnVuY3Rpb24gaXNJbnRlZ2VyKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcIm51bWJlclwiICYmIG8gJSAxID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZnVuY3Rpb24gaXNEYXRlKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG59XG5cbi8vIENBUEFCSUxJVElFU1xuXG5mdW5jdGlvbiBoYXNSZWxhdGl2ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgJiYgISFJbnRsLlJlbGF0aXZlVGltZUZvcm1hdDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBPQkpFQ1RTIEFORCBBUlJBWVNcblxuZnVuY3Rpb24gbWF5YmVBcnJheSh0aGluZykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGluZykgPyB0aGluZyA6IFt0aGluZ107XG59XG5cbmZ1bmN0aW9uIGJlc3RCeShhcnIsIGJ5LCBjb21wYXJlKSB7XG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gYXJyLnJlZHVjZSgoYmVzdCwgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHBhaXIgPSBbYnkobmV4dCksIG5leHRdO1xuICAgIGlmICghYmVzdCkge1xuICAgICAgcmV0dXJuIHBhaXI7XG4gICAgfSBlbHNlIGlmIChjb21wYXJlKGJlc3RbMF0sIHBhaXJbMF0pID09PSBiZXN0WzBdKSB7XG4gICAgICByZXR1cm4gYmVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhaXI7XG4gICAgfVxuICB9LCBudWxsKVsxXTtcbn1cblxuZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhLCBrKSA9PiB7XG4gICAgYVtrXSA9IG9ialtrXTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG4vLyBOVU1CRVJTIEFORCBTVFJJTkdTXG5cbmZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHRoaW5nKSAmJiB0aGluZyA+PSBib3R0b20gJiYgdGhpbmcgPD0gdG9wO1xufVxuXG4vLyB4ICUgbiBidXQgdGFrZXMgdGhlIHNpZ24gb2YgbiBpbnN0ZWFkIG9mIHhcbmZ1bmN0aW9uIGZsb29yTW9kKHgsIG4pIHtcbiAgcmV0dXJuIHggLSBuICogTWF0aC5mbG9vcih4IC8gbik7XG59XG5cbmZ1bmN0aW9uIHBhZFN0YXJ0KGlucHV0LCBuID0gMikge1xuICBjb25zdCBpc05lZyA9IGlucHV0IDwgMDtcbiAgbGV0IHBhZGRlZDtcbiAgaWYgKGlzTmVnKSB7XG4gICAgcGFkZGVkID0gXCItXCIgKyAoXCJcIiArIC1pbnB1dCkucGFkU3RhcnQobiwgXCIwXCIpO1xuICB9IGVsc2Uge1xuICAgIHBhZGRlZCA9IChcIlwiICsgaW5wdXQpLnBhZFN0YXJ0KG4sIFwiMFwiKTtcbiAgfVxuICByZXR1cm4gcGFkZGVkO1xufVxuXG5mdW5jdGlvbiBwYXJzZUludGVnZXIoc3RyaW5nKSB7XG4gIGlmIChpc1VuZGVmaW5lZChzdHJpbmcpIHx8IHN0cmluZyA9PT0gbnVsbCB8fCBzdHJpbmcgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmcsIDEwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzKGZyYWN0aW9uKSB7XG4gIC8vIFJldHVybiB1bmRlZmluZWQgKGluc3RlYWQgb2YgMCkgaW4gdGhlc2UgY2FzZXMsIHdoZXJlIGZyYWN0aW9uIGlzIG5vdCBzZXRcbiAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uKSB8fCBmcmFjdGlvbiA9PT0gbnVsbCB8fCBmcmFjdGlvbiA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZiA9IHBhcnNlRmxvYXQoXCIwLlwiICsgZnJhY3Rpb24pICogMTAwMDtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByb3VuZFRvKG51bWJlciwgZGlnaXRzLCB0b3dhcmRaZXJvID0gZmFsc2UpIHtcbiAgY29uc3QgZmFjdG9yID0gMTAgKiogZGlnaXRzLFxuICAgIHJvdW5kZXIgPSB0b3dhcmRaZXJvID8gTWF0aC50cnVuYyA6IE1hdGgucm91bmQ7XG4gIHJldHVybiByb3VuZGVyKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3I7XG59XG5cbi8vIERBVEUgQkFTSUNTXG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbn1cblxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgY29uc3QgbW9kTW9udGggPSBmbG9vck1vZChtb250aCAtIDEsIDEyKSArIDEsXG4gICAgbW9kWWVhciA9IHllYXIgKyAobW9udGggLSBtb2RNb250aCkgLyAxMjtcblxuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn1cblxuLy8gY29udmVydCBhIGNhbGVuZGFyIG9iamVjdCB0byBhIGxvY2FsIHRpbWVzdGFtcCAoZXBvY2gsIGJ1dCB3aXRoIHRoZSBvZmZzZXQgYmFrZWQgaW4pXG5mdW5jdGlvbiBvYmpUb0xvY2FsVFMob2JqKSB7XG4gIGxldCBkID0gRGF0ZS5VVEMoXG4gICAgb2JqLnllYXIsXG4gICAgb2JqLm1vbnRoIC0gMSxcbiAgICBvYmouZGF5LFxuICAgIG9iai5ob3VyLFxuICAgIG9iai5taW51dGUsXG4gICAgb2JqLnNlY29uZCxcbiAgICBvYmoubWlsbGlzZWNvbmRcbiAgKTtcblxuICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMsIHllYXJzIGJldHdlZW4gMCBhbmQgOTkgYXJlIGludGVycHJldGVkIGFzIDE5WFg7IHJldmVydCB0aGF0XG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIC8vIHNldCB0aGUgbW9udGggYW5kIGRheSBhZ2FpbiwgdGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB5ZWFyIDIwMDAgaXMgYSBsZWFwIHllYXIsIGJ1dCB5ZWFyIDEwMCBpcyBub3RcbiAgICAvLyBzbyBpZiBvYmoueWVhciBpcyBpbiA5OSwgYnV0IG9iai5kYXkgbWFrZXMgaXQgcm9sbCBvdmVyIGludG8geWVhciAxMDAsXG4gICAgLy8gdGhlIGNhbGN1bGF0aW9ucyBkb25lIGJ5IERhdGUuVVRDIGFyZSB1c2luZyB5ZWFyIDIwMDAgLSB3aGljaCBpcyBpbmNvcnJlY3RcbiAgICBkLnNldFVUQ0Z1bGxZZWFyKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5KTtcbiAgfVxuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIHdlZWtzSW5XZWVrWWVhcih3ZWVrWWVhcikge1xuICBjb25zdCBwMSA9XG4gICAgICAod2Vla1llYXIgK1xuICAgICAgICBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNCkgLVxuICAgICAgICBNYXRoLmZsb29yKHdlZWtZZWFyIC8gMTAwKSArXG4gICAgICAgIE1hdGguZmxvb3Iod2Vla1llYXIgLyA0MDApKSAlXG4gICAgICA3LFxuICAgIGxhc3QgPSB3ZWVrWWVhciAtIDEsXG4gICAgcDIgPSAobGFzdCArIE1hdGguZmxvb3IobGFzdCAvIDQpIC0gTWF0aC5mbG9vcihsYXN0IC8gMTAwKSArIE1hdGguZmxvb3IobGFzdCAvIDQwMCkpICUgNztcbiAgcmV0dXJuIHAxID09PSA0IHx8IHAyID09PSAzID8gNTMgOiA1Mjtcbn1cblxuZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhcikge1xuICBpZiAoeWVhciA+IDk5KSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSByZXR1cm4geWVhciA+IFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA/IDE5MDAgKyB5ZWFyIDogMjAwMCArIHllYXI7XG59XG5cbi8vIFBBUlNJTkdcblxuZnVuY3Rpb24gcGFyc2Vab25lSW5mbyh0cywgb2Zmc2V0Rm9ybWF0LCBsb2NhbGUsIHRpbWVab25lID0gbnVsbCkge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpLFxuICAgIGludGxPcHRzID0ge1xuICAgICAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgIH07XG5cbiAgaWYgKHRpbWVab25lKSB7XG4gICAgaW50bE9wdHMudGltZVpvbmUgPSB0aW1lWm9uZTtcbiAgfVxuXG4gIGNvbnN0IG1vZGlmaWVkID0geyB0aW1lWm9uZU5hbWU6IG9mZnNldEZvcm1hdCwgLi4uaW50bE9wdHMgfTtcblxuICBjb25zdCBwYXJzZWQgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIG1vZGlmaWVkKVxuICAgIC5mb3JtYXRUb1BhcnRzKGRhdGUpXG4gICAgLmZpbmQoKG0pID0+IG0udHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRpbWV6b25lbmFtZVwiKTtcbiAgcmV0dXJuIHBhcnNlZCA/IHBhcnNlZC52YWx1ZSA6IG51bGw7XG59XG5cbi8vIHNpZ25lZE9mZnNldCgnLTUnLCAnMzAnKSAtPiAtMzMwXG5mdW5jdGlvbiBzaWduZWRPZmZzZXQob2ZmSG91clN0ciwgb2ZmTWludXRlU3RyKSB7XG4gIGxldCBvZmZIb3VyID0gcGFyc2VJbnQob2ZmSG91clN0ciwgMTApO1xuXG4gIC8vIGRvbid0IHx8IHRoaXMgYmVjYXVzZSB3ZSB3YW50IHRvIHByZXNlcnZlIC0wXG4gIGlmIChOdW1iZXIuaXNOYU4ob2ZmSG91cikpIHtcbiAgICBvZmZIb3VyID0gMDtcbiAgfVxuXG4gIGNvbnN0IG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsXG4gICAgb2ZmTWluU2lnbmVkID0gb2ZmSG91ciA8IDAgfHwgT2JqZWN0LmlzKG9mZkhvdXIsIC0wKSA/IC1vZmZNaW4gOiBvZmZNaW47XG4gIHJldHVybiBvZmZIb3VyICogNjAgKyBvZmZNaW5TaWduZWQ7XG59XG5cbi8vIENPRVJDSU9OXG5cbmZ1bmN0aW9uIGFzTnVtYmVyKHZhbHVlKSB7XG4gIGNvbnN0IG51bWVyaWNWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09PSBcIlwiIHx8IE51bWJlci5pc05hTihudW1lcmljVmFsdWUpKVxuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB1bml0IHZhbHVlICR7dmFsdWV9YCk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdChvYmosIG5vcm1hbGl6ZXIpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICBmb3IgKGNvbnN0IHUgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KG9iaiwgdSkpIHtcbiAgICAgIGNvbnN0IHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KG9mZnNldCwgZm9ybWF0KSB7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgLyA2MCkpLFxuICAgIG1pbnV0ZXMgPSBNYXRoLnRydW5jKE1hdGguYWJzKG9mZnNldCAlIDYwKSksXG4gICAgc2lnbiA9IG9mZnNldCA+PSAwID8gXCIrXCIgOiBcIi1cIjtcblxuICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtwYWRTdGFydChob3VycywgMil9OiR7cGFkU3RhcnQobWludXRlcywgMil9YDtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke2hvdXJzfSR7bWludXRlcyA+IDAgPyBgOiR7bWludXRlc31gIDogXCJcIn1gO1xuICAgIGNhc2UgXCJ0ZWNoaWVcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7cGFkU3RhcnQoaG91cnMsIDIpfSR7cGFkU3RhcnQobWludXRlcywgMil9YDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFZhbHVlIGZvcm1hdCAke2Zvcm1hdH0gaXMgb3V0IG9mIHJhbmdlIGZvciBwcm9wZXJ0eSBmb3JtYXRgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikge1xuICByZXR1cm4gcGljayhvYmosIFtcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBtb250aHNMb25nID0gW1xuICBcIkphbnVhcnlcIixcbiAgXCJGZWJydWFyeVwiLFxuICBcIk1hcmNoXCIsXG4gIFwiQXByaWxcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5lXCIsXG4gIFwiSnVseVwiLFxuICBcIkF1Z3VzdFwiLFxuICBcIlNlcHRlbWJlclwiLFxuICBcIk9jdG9iZXJcIixcbiAgXCJOb3ZlbWJlclwiLFxuICBcIkRlY2VtYmVyXCIsXG5dO1xuXG5jb25zdCBtb250aHNTaG9ydCA9IFtcbiAgXCJKYW5cIixcbiAgXCJGZWJcIixcbiAgXCJNYXJcIixcbiAgXCJBcHJcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5cIixcbiAgXCJKdWxcIixcbiAgXCJBdWdcIixcbiAgXCJTZXBcIixcbiAgXCJPY3RcIixcbiAgXCJOb3ZcIixcbiAgXCJEZWNcIixcbl07XG5cbmNvbnN0IG1vbnRoc05hcnJvdyA9IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXTtcblxuZnVuY3Rpb24gbW9udGhzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4ubW9udGhzTmFycm93XTtcbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbLi4ubW9udGhzU2hvcnRdO1xuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc0xvbmddO1xuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuICAgIGNhc2UgXCIyLWRpZ2l0XCI6XG4gICAgICByZXR1cm4gW1wiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5jb25zdCB3ZWVrZGF5c0xvbmcgPSBbXG4gIFwiTW9uZGF5XCIsXG4gIFwiVHVlc2RheVwiLFxuICBcIldlZG5lc2RheVwiLFxuICBcIlRodXJzZGF5XCIsXG4gIFwiRnJpZGF5XCIsXG4gIFwiU2F0dXJkYXlcIixcbiAgXCJTdW5kYXlcIixcbl07XG5cbmNvbnN0IHdlZWtkYXlzU2hvcnQgPSBbXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIl07XG5cbmNvbnN0IHdlZWtkYXlzTmFycm93ID0gW1wiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCIsIFwiU1wiXTtcblxuZnVuY3Rpb24gd2Vla2RheXMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c05hcnJvd107XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLndlZWtkYXlzU2hvcnRdO1xuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLndlZWtkYXlzTG9uZ107XG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCJdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5jb25zdCBtZXJpZGllbXMgPSBbXCJBTVwiLCBcIlBNXCJdO1xuXG5jb25zdCBlcmFzTG9uZyA9IFtcIkJlZm9yZSBDaHJpc3RcIiwgXCJBbm5vIERvbWluaVwiXTtcblxuY29uc3QgZXJhc1Nob3J0ID0gW1wiQkNcIiwgXCJBRFwiXTtcblxuY29uc3QgZXJhc05hcnJvdyA9IFtcIkJcIiwgXCJBXCJdO1xuXG5mdW5jdGlvbiBlcmFzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4uZXJhc05hcnJvd107XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNTaG9ydF07XG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIHJldHVybiBbLi4uZXJhc0xvbmddO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJpZGllbUZvckRhdGVUaW1lKGR0KSB7XG4gIHJldHVybiBtZXJpZGllbXNbZHQuaG91ciA8IDEyID8gMCA6IDFdO1xufVxuXG5mdW5jdGlvbiB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07XG59XG5cbmZ1bmN0aW9uIG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gbW9udGhzKGxlbmd0aClbZHQubW9udGggLSAxXTtcbn1cblxuZnVuY3Rpb24gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gZXJhcyhsZW5ndGgpW2R0LnllYXIgPCAwID8gMCA6IDFdO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIG51bWVyaWMgPSBcImFsd2F5c1wiLCBuYXJyb3cgPSBmYWxzZSkge1xuICBjb25zdCB1bml0cyA9IHtcbiAgICB5ZWFyczogW1wieWVhclwiLCBcInlyLlwiXSxcbiAgICBxdWFydGVyczogW1wicXVhcnRlclwiLCBcInF0ci5cIl0sXG4gICAgbW9udGhzOiBbXCJtb250aFwiLCBcIm1vLlwiXSxcbiAgICB3ZWVrczogW1wid2Vla1wiLCBcIndrLlwiXSxcbiAgICBkYXlzOiBbXCJkYXlcIiwgXCJkYXlcIiwgXCJkYXlzXCJdLFxuICAgIGhvdXJzOiBbXCJob3VyXCIsIFwiaHIuXCJdLFxuICAgIG1pbnV0ZXM6IFtcIm1pbnV0ZVwiLCBcIm1pbi5cIl0sXG4gICAgc2Vjb25kczogW1wic2Vjb25kXCIsIFwic2VjLlwiXSxcbiAgfTtcblxuICBjb25zdCBsYXN0YWJsZSA9IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7XG5cbiAgaWYgKG51bWVyaWMgPT09IFwiYXV0b1wiICYmIGxhc3RhYmxlKSB7XG4gICAgY29uc3QgaXNEYXkgPSB1bml0ID09PSBcImRheXNcIjtcbiAgICBzd2l0Y2ggKGNvdW50KSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9tb3Jyb3dcIiA6IGBuZXh0ICR7dW5pdHNbdW5pdF1bMF19YDtcbiAgICAgIGNhc2UgLTE6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwieWVzdGVyZGF5XCIgOiBgbGFzdCAke3VuaXRzW3VuaXRdWzBdfWA7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9kYXlcIiA6IGB0aGlzICR7dW5pdHNbdW5pdF1bMF19YDtcbiAgICB9XG4gIH1cblxuICBjb25zdCBpc0luUGFzdCA9IE9iamVjdC5pcyhjb3VudCwgLTApIHx8IGNvdW50IDwgMCxcbiAgICBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSxcbiAgICBzaW5ndWxhciA9IGZtdFZhbHVlID09PSAxLFxuICAgIGxpbFVuaXRzID0gdW5pdHNbdW5pdF0sXG4gICAgZm10VW5pdCA9IG5hcnJvd1xuICAgICAgPyBzaW5ndWxhclxuICAgICAgICA/IGxpbFVuaXRzWzFdXG4gICAgICAgIDogbGlsVW5pdHNbMl0gfHwgbGlsVW5pdHNbMV1cbiAgICAgIDogc2luZ3VsYXJcbiAgICAgID8gdW5pdHNbdW5pdF1bMF1cbiAgICAgIDogdW5pdDtcbiAgcmV0dXJuIGlzSW5QYXN0ID8gYCR7Zm10VmFsdWV9ICR7Zm10VW5pdH0gYWdvYCA6IGBpbiAke2ZtdFZhbHVlfSAke2ZtdFVuaXR9YDtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW5zKHNwbGl0cywgdG9rZW5Ub1N0cmluZykge1xuICBsZXQgcyA9IFwiXCI7XG4gIGZvciAoY29uc3QgdG9rZW4gb2Ygc3BsaXRzKSB7XG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHMgKz0gdG9rZW4udmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzICs9IHRva2VuVG9TdHJpbmcodG9rZW4udmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmNvbnN0IG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSB7XG4gIEQ6IERBVEVfU0hPUlQsXG4gIEREOiBEQVRFX01FRCxcbiAgREREOiBEQVRFX0ZVTEwsXG4gIEREREQ6IERBVEVfSFVHRSxcbiAgdDogVElNRV9TSU1QTEUsXG4gIHR0OiBUSU1FX1dJVEhfU0VDT05EUyxcbiAgdHR0OiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VULFxuICB0dHR0OiBUSU1FX1dJVEhfTE9OR19PRkZTRVQsXG4gIFQ6IFRJTUVfMjRfU0lNUExFLFxuICBUVDogVElNRV8yNF9XSVRIX1NFQ09ORFMsXG4gIFRUVDogVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCxcbiAgVFRUVDogVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VULFxuICBmOiBEQVRFVElNRV9TSE9SVCxcbiAgZmY6IERBVEVUSU1FX01FRCxcbiAgZmZmOiBEQVRFVElNRV9GVUxMLFxuICBmZmZmOiBEQVRFVElNRV9IVUdFLFxuICBGOiBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMsXG4gIEZGOiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTLFxuICBGRkY6IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLFxuICBGRkZGOiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyxcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBGb3JtYXR0ZXIge1xuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICAvLyB3aGl0ZS1zcGFjZSBpcyBhbHdheXMgY29uc2lkZXJlZCBhIGxpdGVyYWwgaW4gdXNlci1wcm92aWRlZCBmb3JtYXRzXG4gICAgLy8gdGhlIFwiIFwiIHRva2VuIGhhcyBhIHNwZWNpYWwgbWVhbmluZyAoc2VlIHVuaXRGb3JUb2tlbilcblxuICAgIGxldCBjdXJyZW50ID0gbnVsbCxcbiAgICAgIGN1cnJlbnRGdWxsID0gXCJcIixcbiAgICAgIGJyYWNrZXRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNwbGl0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm10Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjID0gZm10LmNoYXJBdChpKTtcbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogYnJhY2tldGVkIHx8IC9eXFxzKyQvLnRlc3QoY3VycmVudEZ1bGwpLCB2YWw6IGN1cnJlbnRGdWxsIH0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogL15cXHMrJC8udGVzdChjdXJyZW50RnVsbCksIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiBicmFja2V0ZWQgfHwgL15cXHMrJC8udGVzdChjdXJyZW50RnVsbCksIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwbGl0cztcbiAgfVxuXG4gIHN0YXRpYyBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKSB7XG4gICAgcmV0dXJuIG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHNbdG9rZW5dO1xuICB9XG5cbiAgY29uc3RydWN0b3IobG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0cztcbiAgICB0aGlzLmxvYyA9IGxvY2FsZTtcbiAgICB0aGlzLnN5c3RlbUxvYyA9IG51bGw7XG4gIH1cblxuICBmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgb3B0cykge1xuICAgIGlmICh0aGlzLnN5c3RlbUxvYyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zeXN0ZW1Mb2MgPSB0aGlzLmxvYy5yZWRlZmF1bHRUb1N5c3RlbSgpO1xuICAgIH1cbiAgICBjb25zdCBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cywgLi4ub3B0cyB9KTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KCk7XG4gIH1cblxuICBkdEZvcm1hdHRlcihkdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cywgLi4ub3B0cyB9KTtcbiAgfVxuXG4gIGZvcm1hdERhdGVUaW1lKGR0LCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRGb3JtYXR0ZXIoZHQsIG9wdHMpLmZvcm1hdCgpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmR0Rm9ybWF0dGVyKGR0LCBvcHRzKS5mb3JtYXRUb1BhcnRzKCk7XG4gIH1cblxuICBmb3JtYXRJbnRlcnZhbChpbnRlcnZhbCwgb3B0cykge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihpbnRlcnZhbC5zdGFydCwgb3B0cyk7XG4gICAgcmV0dXJuIGRmLmR0Zi5mb3JtYXRSYW5nZShpbnRlcnZhbC5zdGFydC50b0pTRGF0ZSgpLCBpbnRlcnZhbC5lbmQudG9KU0RhdGUoKSk7XG4gIH1cblxuICByZXNvbHZlZE9wdGlvbnMoZHQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5kdEZvcm1hdHRlcihkdCwgb3B0cykucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cblxuICBudW0obiwgcCA9IDApIHtcbiAgICAvLyB3ZSBnZXQgc29tZSBwZXJmIG91dCBvZiBkb2luZyB0aGlzIGhlcmUsIGFubm95aW5nbHlcbiAgICBpZiAodGhpcy5vcHRzLmZvcmNlU2ltcGxlKSB7XG4gICAgICByZXR1cm4gcGFkU3RhcnQobiwgcCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0cyA9IHsgLi4udGhpcy5vcHRzIH07XG5cbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIob3B0cykuZm9ybWF0KG4pO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmbXQpIHtcbiAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsXG4gICAgICB1c2VEYXRlVGltZUZvcm1hdHRlciA9IHRoaXMubG9jLm91dHB1dENhbGVuZGFyICYmIHRoaXMubG9jLm91dHB1dENhbGVuZGFyICE9PSBcImdyZWdvcnlcIixcbiAgICAgIHN0cmluZyA9IChvcHRzLCBleHRyYWN0KSA9PiB0aGlzLmxvYy5leHRyYWN0KGR0LCBvcHRzLCBleHRyYWN0KSxcbiAgICAgIGZvcm1hdE9mZnNldCA9IChvcHRzKSA9PiB7XG4gICAgICAgIGlmIChkdC5pc09mZnNldEZpeGVkICYmIGR0Lm9mZnNldCA9PT0gMCAmJiBvcHRzLmFsbG93Wikge1xuICAgICAgICAgIHJldHVybiBcIlpcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkdC5pc1ZhbGlkID8gZHQuem9uZS5mb3JtYXRPZmZzZXQoZHQudHMsIG9wdHMuZm9ybWF0KSA6IFwiXCI7XG4gICAgICB9LFxuICAgICAgbWVyaWRpZW0gPSAoKSA9PlxuICAgICAgICBrbm93bkVuZ2xpc2hcbiAgICAgICAgICA/IG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpXG4gICAgICAgICAgOiBzdHJpbmcoeyBob3VyOiBcIm51bWVyaWNcIiwgaG91ckN5Y2xlOiBcImgxMlwiIH0sIFwiZGF5cGVyaW9kXCIpLFxuICAgICAgbW9udGggPSAobGVuZ3RoLCBzdGFuZGFsb25lKSA9PlxuICAgICAgICBrbm93bkVuZ2xpc2hcbiAgICAgICAgICA/IG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aClcbiAgICAgICAgICA6IHN0cmluZyhzdGFuZGFsb25lID8geyBtb250aDogbGVuZ3RoIH0gOiB7IG1vbnRoOiBsZW5ndGgsIGRheTogXCJudW1lcmljXCIgfSwgXCJtb250aFwiKSxcbiAgICAgIHdlZWtkYXkgPSAobGVuZ3RoLCBzdGFuZGFsb25lKSA9PlxuICAgICAgICBrbm93bkVuZ2xpc2hcbiAgICAgICAgICA/IHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKVxuICAgICAgICAgIDogc3RyaW5nKFxuICAgICAgICAgICAgICBzdGFuZGFsb25lID8geyB3ZWVrZGF5OiBsZW5ndGggfSA6IHsgd2Vla2RheTogbGVuZ3RoLCBtb250aDogXCJsb25nXCIsIGRheTogXCJudW1lcmljXCIgfSxcbiAgICAgICAgICAgICAgXCJ3ZWVrZGF5XCJcbiAgICAgICAgICAgICksXG4gICAgICBtYXliZU1hY3JvID0gKHRva2VuKSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdE9wdHMgPSBGb3JtYXR0ZXIubWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbik7XG4gICAgICAgIGlmIChmb3JtYXRPcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIGZvcm1hdE9wdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVyYSA9IChsZW5ndGgpID0+XG4gICAgICAgIGtub3duRW5nbGlzaCA/IGVyYUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIDogc3RyaW5nKHsgZXJhOiBsZW5ndGggfSwgXCJlcmFcIiksXG4gICAgICB0b2tlblRvU3RyaW5nID0gKHRva2VuKSA9PiB7XG4gICAgICAgIC8vIFdoZXJlIHBvc3NpYmxlOiBodHRwczovL2NsZHIudW5pY29kZS5vcmcvdHJhbnNsYXRpb24vZGF0ZS10aW1lL2RhdGUtdGltZS1zeW1ib2xzXG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAvLyBtc1xuICAgICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQpO1xuICAgICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCwgMyk7XG4gICAgICAgICAgLy8gc2Vjb25kc1xuICAgICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kKTtcbiAgICAgICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5zZWNvbmQsIDIpO1xuICAgICAgICAgIC8vIGZyYWN0aW9uYWwgc2Vjb25kc1xuICAgICAgICAgIGNhc2UgXCJ1dVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMCksIDIpO1xuICAgICAgICAgIGNhc2UgXCJ1dXVcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShNYXRoLmZsb29yKGR0Lm1pbGxpc2Vjb25kIC8gMTAwKSk7XG4gICAgICAgICAgLy8gbWludXRlc1xuICAgICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlKTtcbiAgICAgICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taW51dGUsIDIpO1xuICAgICAgICAgIC8vIGhvdXJzXG4gICAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyICUgMTIgPT09IDAgPyAxMiA6IGR0LmhvdXIgJSAxMik7XG4gICAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciAlIDEyID09PSAwID8gMTIgOiBkdC5ob3VyICUgMTIsIDIpO1xuICAgICAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91cik7XG4gICAgICAgICAgY2FzZSBcIkhIXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciwgMik7XG4gICAgICAgICAgLy8gb2Zmc2V0XG4gICAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgKzZcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6IFwibmFycm93XCIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WiB9KTtcbiAgICAgICAgICBjYXNlIFwiWlpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgKzA2OjAwXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHsgZm9ybWF0OiBcInNob3J0XCIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WiB9KTtcbiAgICAgICAgICBjYXNlIFwiWlpaXCI6XG4gICAgICAgICAgICAvLyBsaWtlICswNjAwXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHsgZm9ybWF0OiBcInRlY2hpZVwiLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1ogfSk7XG4gICAgICAgICAgY2FzZSBcIlpaWlpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgRVNUXG4gICAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7IGZvcm1hdDogXCJzaG9ydFwiLCBsb2NhbGU6IHRoaXMubG9jLmxvY2FsZSB9KTtcbiAgICAgICAgICBjYXNlIFwiWlpaWlpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgRWFzdGVybiBTdGFuZGFyZCBUaW1lXG4gICAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7IGZvcm1hdDogXCJsb25nXCIsIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlIH0pO1xuICAgICAgICAgIC8vIHpvbmVcbiAgICAgICAgICBjYXNlIFwielwiOlxuICAgICAgICAgICAgLy8gbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gICAgICAgICAgICByZXR1cm4gZHQuem9uZU5hbWU7XG4gICAgICAgICAgLy8gbWVyaWRpZW1zXG4gICAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpO1xuICAgICAgICAgIC8vIGRhdGVzXG4gICAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7IGRheTogXCJudW1lcmljXCIgfSwgXCJkYXlcIikgOiB0aGlzLm51bShkdC5kYXkpO1xuICAgICAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHsgZGF5OiBcIjItZGlnaXRcIiB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSwgMik7XG4gICAgICAgICAgLy8gd2Vla2RheXMgLSBzdGFuZGFsb25lXG4gICAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuICAgICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1R1ZXMnXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcInNob3J0XCIsIHRydWUpO1xuICAgICAgICAgIGNhc2UgXCJjY2NjXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJsb25nXCIsIHRydWUpO1xuICAgICAgICAgIGNhc2UgXCJjY2NjY1wiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVCdcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICAgIC8vIHdlZWtkYXlzIC0gZm9ybWF0XG4gICAgICAgICAgY2FzZSBcIkVcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuICAgICAgICAgIGNhc2UgXCJFRUVcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1R1ZXMnXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcInNob3J0XCIsIGZhbHNlKTtcbiAgICAgICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVHVlc2RheSdcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCBmYWxzZSk7XG4gICAgICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJuYXJyb3dcIiwgZmFsc2UpO1xuICAgICAgICAgIC8vIG1vbnRocyAtIHN0YW5kYWxvbmVcbiAgICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogXCJudW1lcmljXCIsIGRheTogXCJudW1lcmljXCIgfSwgXCJtb250aFwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0Lm1vbnRoKTtcbiAgICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDEsIGRvZXNuJ3Qgc2VlbSB0byB3b3JrXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogXCIyLWRpZ2l0XCIsIGRheTogXCJudW1lcmljXCIgfSwgXCJtb250aFwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0Lm1vbnRoLCAyKTtcbiAgICAgICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEphblxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgdHJ1ZSk7XG4gICAgICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSmFudWFyeVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCB0cnVlKTtcbiAgICAgICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICAgIC8vIG1vbnRocyAtIGZvcm1hdFxuICAgICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IG1vbnRoOiBcIm51bWVyaWNcIiB9LCBcIm1vbnRoXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQubW9udGgpO1xuICAgICAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAwMVxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgbW9udGg6IFwiMi1kaWdpdFwiIH0sIFwibW9udGhcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG4gICAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKYW5cbiAgICAgICAgICAgIHJldHVybiBtb250aChcInNob3J0XCIsIGZhbHNlKTtcbiAgICAgICAgICBjYXNlIFwiTU1NTVwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIGZhbHNlKTtcbiAgICAgICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgICAvLyB5ZWFyc1xuICAgICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgICAvLyBsaWtlIDIwMTRcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7IHllYXI6IFwibnVtZXJpY1wiIH0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIpO1xuICAgICAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAxNFxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgeWVhcjogXCIyLWRpZ2l0XCIgfSwgXCJ5ZWFyXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQueWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG4gICAgICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDAxMlxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgeWVhcjogXCJudW1lcmljXCIgfSwgXCJ5ZWFyXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQueWVhciwgNCk7XG4gICAgICAgICAgY2FzZSBcInl5eXl5eVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAwMDAwMTJcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IHllYXI6IFwibnVtZXJpY1wiIH0sIFwieWVhclwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0LnllYXIsIDYpO1xuICAgICAgICAgIC8vIGVyYXNcbiAgICAgICAgICBjYXNlIFwiR1wiOlxuICAgICAgICAgICAgLy8gbGlrZSBBRFxuICAgICAgICAgICAgcmV0dXJuIGVyYShcInNob3J0XCIpO1xuICAgICAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICAgICAgLy8gbGlrZSBBbm5vIERvbWluaVxuICAgICAgICAgICAgcmV0dXJuIGVyYShcImxvbmdcIik7XG4gICAgICAgICAgY2FzZSBcIkdHR0dHXCI6XG4gICAgICAgICAgICByZXR1cm4gZXJhKFwibmFycm93XCIpO1xuICAgICAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtZZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtZZWFyLCA0KTtcbiAgICAgICAgICBjYXNlIFwiV1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIpO1xuICAgICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIsIDIpO1xuICAgICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQub3JkaW5hbCk7XG4gICAgICAgICAgY2FzZSBcIm9vb1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyKTtcbiAgICAgICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyLCAyKTtcbiAgICAgICAgICBjYXNlIFwiWFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQudHMgLyAxMDAwKSk7XG4gICAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC50cyk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBtYXliZU1hY3JvKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIHRva2VuVG9TdHJpbmcpO1xuICB9XG5cbiAgZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKGR1ciwgZm10KSB7XG4gICAgY29uc3QgdG9rZW5Ub0ZpZWxkID0gKHRva2VuKSA9PiB7XG4gICAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcbiAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwic2Vjb25kXCI7XG4gICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuICAgICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJob3VyXCI7XG4gICAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICAgIHJldHVybiBcImRheVwiO1xuICAgICAgICAgIGNhc2UgXCJ3XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCI7XG4gICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1vbnRoXCI7XG4gICAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInllYXJcIjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2tlblRvU3RyaW5nID0gKGxpbGR1cikgPT4gKHRva2VuKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7XG4gICAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0obGlsZHVyLmdldChtYXBwZWQpLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRva2VucyA9IEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLFxuICAgICAgcmVhbFRva2VucyA9IHRva2Vucy5yZWR1Y2UoXG4gICAgICAgIChmb3VuZCwgeyBsaXRlcmFsLCB2YWwgfSkgPT4gKGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpKSxcbiAgICAgICAgW11cbiAgICAgICksXG4gICAgICBjb2xsYXBzZWQgPSBkdXIuc2hpZnRUbyguLi5yZWFsVG9rZW5zLm1hcCh0b2tlblRvRmllbGQpLmZpbHRlcigodCkgPT4gdCkpO1xuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnModG9rZW5zLCB0b2tlblRvU3RyaW5nKGNvbGxhcHNlZCkpO1xuICB9XG59XG5cbmNsYXNzIEludmFsaWQge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG5cbiAgdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuICogVGhpcyBmaWxlIGhhbmRsZXMgcGFyc2luZyBmb3Igd2VsbC1zcGVjaWZpZWQgZm9ybWF0cy4gSGVyZSdzIGhvdyBpdCB3b3JrczpcbiAqIFR3byB0aGluZ3MgZ28gaW50byBwYXJzaW5nOiBhIHJlZ2V4IHRvIG1hdGNoIHdpdGggYW5kIGFuIGV4dHJhY3RvciB0byB0YWtlIGFwYXJ0IHRoZSBncm91cHMgaW4gdGhlIG1hdGNoLlxuICogQW4gZXh0cmFjdG9yIGlzIGp1c3QgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgcmVnZXggbWF0Y2ggYXJyYXkgYW5kIHJldHVybnMgYSB7IHllYXI6IC4uLiwgbW9udGg6IC4uLiB9IG9iamVjdFxuICogcGFyc2UoKSBkb2VzIHRoZSB3b3JrIG9mIGV4ZWN1dGluZyB0aGUgcmVnZXggYW5kIGFwcGx5aW5nIHRoZSBleHRyYWN0b3IuIEl0IHRha2VzIG11bHRpcGxlIHJlZ2V4L2V4dHJhY3RvciBwYWlycyB0byB0cnkgaW4gc2VxdWVuY2UuXG4gKiBFeHRyYWN0b3JzIGNhbiB0YWtlIGEgXCJjdXJzb3JcIiByZXByZXNlbnRpbmcgdGhlIG9mZnNldCBpbiB0aGUgbWF0Y2ggdG8gbG9vayBhdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIGNvbWJpbmUgZXh0cmFjdG9ycy5cbiAqIGNvbWJpbmVFeHRyYWN0b3JzKCkgZG9lcyB0aGUgd29yayBvZiBjb21iaW5pbmcgdGhlbSwga2VlcGluZyB0cmFjayBvZiB0aGUgY3Vyc29yIHRocm91Z2ggbXVsdGlwbGUgZXh0cmFjdGlvbnMuXG4gKiBTb21lIGV4dHJhY3Rpb25zIGFyZSBzdXBlciBkdW1iIGFuZCBzaW1wbGVQYXJzZSBhbmQgZnJvbVN0cmluZ3MgaGVscCBEUlkgdGhlbS5cbiAqL1xuXG5jb25zdCBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KD86Oj9cXC9bQS1aYS16MC05XystXXsxLDI1Nn0oPzpcXC9bQS1aYS16MC05XystXXsxLDI1Nn0pPyk/LztcblxuZnVuY3Rpb24gY29tYmluZVJlZ2V4ZXMoLi4ucmVnZXhlcykge1xuICBjb25zdCBmdWxsID0gcmVnZXhlcy5yZWR1Y2UoKGYsIHIpID0+IGYgKyByLnNvdXJjZSwgXCJcIik7XG4gIHJldHVybiBSZWdFeHAoYF4ke2Z1bGx9JGApO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lRXh0cmFjdG9ycyguLi5leHRyYWN0b3JzKSB7XG4gIHJldHVybiAobSkgPT5cbiAgICBleHRyYWN0b3JzXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoW21lcmdlZFZhbHMsIG1lcmdlZFpvbmUsIGN1cnNvcl0sIGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgW3ZhbCwgem9uZSwgbmV4dF0gPSBleChtLCBjdXJzb3IpO1xuICAgICAgICAgIHJldHVybiBbeyAuLi5tZXJnZWRWYWxzLCAuLi52YWwgfSwgem9uZSB8fCBtZXJnZWRab25lLCBuZXh0XTtcbiAgICAgICAgfSxcbiAgICAgICAgW3t9LCBudWxsLCAxXVxuICAgICAgKVxuICAgICAgLnNsaWNlKDAsIDIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzLCAuLi5wYXR0ZXJucykge1xuICBpZiAocyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW3JlZ2V4LCBleHRyYWN0b3JdIG9mIHBhdHRlcm5zKSB7XG4gICAgY29uc3QgbSA9IHJlZ2V4LmV4ZWMocyk7XG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiBleHRyYWN0b3IobSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbbnVsbCwgbnVsbF07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVBhcnNlKC4uLmtleXMpIHtcbiAgcmV0dXJuIChtYXRjaCwgY3Vyc29yKSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgbGV0IGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2tleXNbaV1dID0gcGFyc2VJbnRlZ2VyKG1hdGNoW2N1cnNvciArIGldKTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXQsIG51bGwsIGN1cnNvciArIGldO1xuICB9O1xufVxuXG4vLyBJU08gYW5kIFNRTCBwYXJzaW5nXG5jb25zdCBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS87XG5jb25zdCBpc29FeHRlbmRlZFpvbmUgPSBgKD86JHtvZmZzZXRSZWdleC5zb3VyY2V9Pyg/OlxcXFxbKCR7aWFuYVJlZ2V4LnNvdXJjZX0pXFxcXF0pPyk/YDtcbmNvbnN0IGlzb1RpbWVCYXNlUmVnZXggPSAvKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlsuLF0oXFxkezEsMzB9KSk/KT8pPy87XG5jb25zdCBpc29UaW1lUmVnZXggPSBSZWdFeHAoYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JHtpc29FeHRlbmRlZFpvbmV9YCk7XG5jb25zdCBpc29UaW1lRXh0ZW5zaW9uUmVnZXggPSBSZWdFeHAoYCg/OlQke2lzb1RpbWVSZWdleC5zb3VyY2V9KT9gKTtcbmNvbnN0IGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vO1xuY29uc3QgaXNvV2Vla1JlZ2V4ID0gLyhcXGR7NH0pLT9XKFxcZFxcZCkoPzotPyhcXGQpKT8vO1xuY29uc3QgaXNvT3JkaW5hbFJlZ2V4ID0gLyhcXGR7NH0pLT8oXFxkezN9KS87XG5jb25zdCBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGEgPSBzaW1wbGVQYXJzZShcInllYXJcIiwgXCJvcmRpbmFsXCIpO1xuY29uc3Qgc3FsWW1kUmVnZXggPSAvKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZCkvOyAvLyBkdW1iZWQtZG93biB2ZXJzaW9uIG9mIHRoZSBJU08gb25lXG5jb25zdCBzcWxUaW1lUmVnZXggPSBSZWdFeHAoXG4gIGAke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSA/KD86JHtvZmZzZXRSZWdleC5zb3VyY2V9fCgke2lhbmFSZWdleC5zb3VyY2V9KSk/YFxuKTtcbmNvbnN0IHNxbFRpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChgKD86ICR7c3FsVGltZVJlZ2V4LnNvdXJjZX0pP2ApO1xuXG5mdW5jdGlvbiBpbnQobWF0Y2gsIHBvcywgZmFsbGJhY2spIHtcbiAgY29uc3QgbSA9IG1hdGNoW3Bvc107XG4gIHJldHVybiBpc1VuZGVmaW5lZChtKSA/IGZhbGxiYWNrIDogcGFyc2VJbnRlZ2VyKG0pO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SVNPWW1kKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICB5ZWFyOiBpbnQobWF0Y2gsIGN1cnNvciksXG4gICAgbW9udGg6IGludChtYXRjaCwgY3Vyc29yICsgMSwgMSksXG4gICAgZGF5OiBpbnQobWF0Y2gsIGN1cnNvciArIDIsIDEpLFxuICB9O1xuXG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgM107XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09UaW1lKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICBob3VyczogaW50KG1hdGNoLCBjdXJzb3IsIDApLFxuICAgIG1pbnV0ZXM6IGludChtYXRjaCwgY3Vyc29yICsgMSwgMCksXG4gICAgc2Vjb25kczogaW50KG1hdGNoLCBjdXJzb3IgKyAyLCAwKSxcbiAgICBtaWxsaXNlY29uZHM6IHBhcnNlTWlsbGlzKG1hdGNoW2N1cnNvciArIDNdKSxcbiAgfTtcblxuICByZXR1cm4gW2l0ZW0sIG51bGwsIGN1cnNvciArIDRdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SVNPT2Zmc2V0KG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgbG9jYWwgPSAhbWF0Y2hbY3Vyc29yXSAmJiAhbWF0Y2hbY3Vyc29yICsgMV0sXG4gICAgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaFtjdXJzb3IgKyAxXSwgbWF0Y2hbY3Vyc29yICsgMl0pLFxuICAgIHpvbmUgPSBsb2NhbCA/IG51bGwgOiBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UoZnVsbE9mZnNldCk7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDNdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SUFOQVpvbmUobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCB6b25lID0gbWF0Y2hbY3Vyc29yXSA/IElBTkFab25lLmNyZWF0ZShtYXRjaFtjdXJzb3JdKSA6IG51bGw7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDFdO1xufVxuXG4vLyBJU08gdGltZSBwYXJzaW5nXG5cbmNvbnN0IGlzb1RpbWVPbmx5ID0gUmVnRXhwKGBeVD8ke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSRgKTtcblxuLy8gSVNPIGR1cmF0aW9uIHBhcnNpbmdcblxuY29uc3QgaXNvRHVyYXRpb24gPVxuICAvXi0/UCg/Oig/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVkpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVcpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUQpPyg/OlQoPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylIKT8oPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylNKT8oPzooLT9cXGR7MSwyMH0pKD86Wy4sXSgtP1xcZHsxLDIwfSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgY29uc3QgW3MsIHllYXJTdHIsIG1vbnRoU3RyLCB3ZWVrU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyLCBtaWxsaXNlY29uZHNTdHJdID1cbiAgICBtYXRjaDtcblxuICBjb25zdCBoYXNOZWdhdGl2ZVByZWZpeCA9IHNbMF0gPT09IFwiLVwiO1xuICBjb25zdCBuZWdhdGl2ZVNlY29uZHMgPSBzZWNvbmRTdHIgJiYgc2Vjb25kU3RyWzBdID09PSBcIi1cIjtcblxuICBjb25zdCBtYXliZU5lZ2F0ZSA9IChudW0sIGZvcmNlID0gZmFsc2UpID0+XG4gICAgbnVtICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IChudW0gJiYgaGFzTmVnYXRpdmVQcmVmaXgpKSA/IC1udW0gOiBudW07XG5cbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICB5ZWFyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh5ZWFyU3RyKSksXG4gICAgICBtb250aHM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobW9udGhTdHIpKSxcbiAgICAgIHdlZWtzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHdlZWtTdHIpKSxcbiAgICAgIGRheXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcoZGF5U3RyKSksXG4gICAgICBob3VyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhob3VyU3RyKSksXG4gICAgICBtaW51dGVzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKG1pbnV0ZVN0cikpLFxuICAgICAgc2Vjb25kczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhzZWNvbmRTdHIpLCBzZWNvbmRTdHIgPT09IFwiLTBcIiksXG4gICAgICBtaWxsaXNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlTWlsbGlzKG1pbGxpc2Vjb25kc1N0ciksIG5lZ2F0aXZlU2Vjb25kcyksXG4gICAgfSxcbiAgXTtcbn1cblxuLy8gVGhlc2UgYXJlIGEgbGl0dGxlIGJyYWluZGVhZC4gRURUICpzaG91bGQqIHRlbGwgdXMgdGhhdCB3ZSdyZSBpbiwgc2F5LCBBbWVyaWNhL05ld19Zb3JrXG4vLyBhbmQgbm90IGp1c3QgdGhhdCB3ZSdyZSBpbiAtMjQwICpyaWdodCBub3cqLiBCdXQgc2luY2UgSSBkb24ndCB0aGluayB0aGVzZSBhcmUgdXNlZCB0aGF0IG9mdGVuXG4vLyBJJ20ganVzdCBnb2luZyB0byBpZ25vcmUgdGhhdFxuY29uc3Qgb2JzT2Zmc2V0cyA9IHtcbiAgR01UOiAwLFxuICBFRFQ6IC00ICogNjAsXG4gIEVTVDogLTUgKiA2MCxcbiAgQ0RUOiAtNSAqIDYwLFxuICBDU1Q6IC02ICogNjAsXG4gIE1EVDogLTYgKiA2MCxcbiAgTVNUOiAtNyAqIDYwLFxuICBQRFQ6IC03ICogNjAsXG4gIFBTVDogLTggKiA2MCxcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB5ZWFyOiB5ZWFyU3RyLmxlbmd0aCA9PT0gMiA/IHVudHJ1bmNhdGVZZWFyKHBhcnNlSW50ZWdlcih5ZWFyU3RyKSkgOiBwYXJzZUludGVnZXIoeWVhclN0ciksXG4gICAgbW9udGg6IG1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpICsgMSxcbiAgICBkYXk6IHBhcnNlSW50ZWdlcihkYXlTdHIpLFxuICAgIGhvdXI6IHBhcnNlSW50ZWdlcihob3VyU3RyKSxcbiAgICBtaW51dGU6IHBhcnNlSW50ZWdlcihtaW51dGVTdHIpLFxuICB9O1xuXG4gIGlmIChzZWNvbmRTdHIpIHJlc3VsdC5zZWNvbmQgPSBwYXJzZUludGVnZXIoc2Vjb25kU3RyKTtcbiAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICByZXN1bHQud2Vla2RheSA9XG4gICAgICB3ZWVrZGF5U3RyLmxlbmd0aCA+IDNcbiAgICAgICAgPyB3ZWVrZGF5c0xvbmcuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDFcbiAgICAgICAgOiB3ZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0cikgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUkZDIDI4MjIvNTMyMlxuY29uc3QgcmZjMjgyMiA9XG4gIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzI4MjIobWF0Y2gpIHtcbiAgY29uc3QgW1xuICAgICAgLFxuICAgICAgd2Vla2RheVN0cixcbiAgICAgIGRheVN0cixcbiAgICAgIG1vbnRoU3RyLFxuICAgICAgeWVhclN0cixcbiAgICAgIGhvdXJTdHIsXG4gICAgICBtaW51dGVTdHIsXG4gICAgICBzZWNvbmRTdHIsXG4gICAgICBvYnNPZmZzZXQsXG4gICAgICBtaWxPZmZzZXQsXG4gICAgICBvZmZIb3VyU3RyLFxuICAgICAgb2ZmTWludXRlU3RyLFxuICAgIF0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG5cbiAgbGV0IG9mZnNldDtcbiAgaWYgKG9ic09mZnNldCkge1xuICAgIG9mZnNldCA9IG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgfSBlbHNlIGlmIChtaWxPZmZzZXQpIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldCA9IHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpO1xuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHQsIG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KV07XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgcmV0dXJuIHNcbiAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csIFwiIFwiKVxuICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgXCIgXCIpXG4gICAgLnRyaW0oKTtcbn1cblxuLy8gaHR0cCBkYXRlXG5cbmNvbnN0IHJmYzExMjMgPVxuICAgIC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gIHJmYzg1MCA9XG4gICAgL14oTW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkXFxkKS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICBhc2NpaSA9XG4gICAgL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICggXFxkfFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgKFxcZHs0fSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzExMjNPcjg1MChtYXRjaCkge1xuICBjb25zdCBbLCB3ZWVrZGF5U3RyLCBkYXlTdHIsIG1vbnRoU3RyLCB5ZWFyU3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cl0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsXG4gICAgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpO1xuICByZXR1cm4gW3Jlc3VsdCwgRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXTtcbn1cblxuY29uc3QgaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1ltZFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3QgaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29XZWVrUmVnZXgsIGlzb1RpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb09yZGluYWxSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IGlzb1RpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvVGltZVJlZ2V4KTtcblxuY29uc3QgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhcbiAgZXh0cmFjdElTT1ltZCxcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcbmNvbnN0IGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKFxuICBleHRyYWN0SVNPV2Vla0RhdGEsXG4gIGV4dHJhY3RJU09UaW1lLFxuICBleHRyYWN0SVNPT2Zmc2V0LFxuICBleHRyYWN0SUFOQVpvbmVcbik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09PcmRpbmFsRGF0YSxcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcbmNvbnN0IGV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09UaW1lLFxuICBleHRyYWN0SVNPT2Zmc2V0LFxuICBleHRyYWN0SUFOQVpvbmVcbik7XG5cbi8qXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBzLFxuICAgIFtpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sXG4gICAgW2lzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXRdLFxuICAgIFtpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZV0sXG4gICAgW2lzb1RpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZUFuZE9mZnNldF1cbiAgKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSRkMyODIyRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShwcmVwcm9jZXNzUkZDMjgyMihzKSwgW3JmYzI4MjIsIGV4dHJhY3RSRkMyODIyXSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRUUERhdGUocykge1xuICByZXR1cm4gcGFyc2UoXG4gICAgcyxcbiAgICBbcmZjMTEyMywgZXh0cmFjdFJGQzExMjNPcjg1MF0sXG4gICAgW3JmYzg1MCwgZXh0cmFjdFJGQzExMjNPcjg1MF0sXG4gICAgW2FzY2lpLCBleHRyYWN0QVNDSUldXG4gICk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSVNPRHVyYXRpb24ocykge1xuICByZXR1cm4gcGFyc2UocywgW2lzb0R1cmF0aW9uLCBleHRyYWN0SVNPRHVyYXRpb25dKTtcbn1cblxuY29uc3QgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpO1xuXG5mdW5jdGlvbiBwYXJzZUlTT1RpbWVPbmx5KHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29UaW1lT25seSwgZXh0cmFjdElTT1RpbWVPbmx5XSk7XG59XG5cbmNvbnN0IHNxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxZbWRSZWdleCwgc3FsVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IHNxbFRpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoc3FsVGltZVJlZ2V4KTtcblxuY29uc3QgZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKFxuICBleHRyYWN0SVNPVGltZSxcbiAgZXh0cmFjdElTT09mZnNldCxcbiAgZXh0cmFjdElBTkFab25lXG4pO1xuXG5mdW5jdGlvbiBwYXJzZVNRTChzKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBzLFxuICAgIFtzcWxZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sXG4gICAgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXVxuICApO1xufVxuXG5jb25zdCBJTlZBTElEJDIgPSBcIkludmFsaWQgRHVyYXRpb25cIjtcblxuLy8gdW5pdCBjb252ZXJzaW9uIGNvbnN0YW50c1xuY29uc3QgbG93T3JkZXJNYXRyaXggPSB7XG4gICAgd2Vla3M6IHtcbiAgICAgIGRheXM6IDcsXG4gICAgICBob3VyczogNyAqIDI0LFxuICAgICAgbWludXRlczogNyAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIGRheXM6IHtcbiAgICAgIGhvdXJzOiAyNCxcbiAgICAgIG1pbnV0ZXM6IDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICBob3VyczogeyBtaW51dGVzOiA2MCwgc2Vjb25kczogNjAgKiA2MCwgbWlsbGlzZWNvbmRzOiA2MCAqIDYwICogMTAwMCB9LFxuICAgIG1pbnV0ZXM6IHsgc2Vjb25kczogNjAsIG1pbGxpc2Vjb25kczogNjAgKiAxMDAwIH0sXG4gICAgc2Vjb25kczogeyBtaWxsaXNlY29uZHM6IDEwMDAgfSxcbiAgfSxcbiAgY2FzdWFsTWF0cml4ID0ge1xuICAgIHllYXJzOiB7XG4gICAgICBxdWFydGVyczogNCxcbiAgICAgIG1vbnRoczogMTIsXG4gICAgICB3ZWVrczogNTIsXG4gICAgICBkYXlzOiAzNjUsXG4gICAgICBob3VyczogMzY1ICogMjQsXG4gICAgICBtaW51dGVzOiAzNjUgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgcXVhcnRlcnM6IHtcbiAgICAgIG1vbnRoczogMyxcbiAgICAgIHdlZWtzOiAxMyxcbiAgICAgIGRheXM6IDkxLFxuICAgICAgaG91cnM6IDkxICogMjQsXG4gICAgICBtaW51dGVzOiA5MSAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiA5MSAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgbW9udGhzOiB7XG4gICAgICB3ZWVrczogNCxcbiAgICAgIGRheXM6IDMwLFxuICAgICAgaG91cnM6IDMwICogMjQsXG4gICAgICBtaW51dGVzOiAzMCAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG5cbiAgICAuLi5sb3dPcmRlck1hdHJpeCxcbiAgfSxcbiAgZGF5c0luWWVhckFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0MDAsXG4gIGRheXNJbk1vbnRoQWNjdXJhdGUgPSAxNDYwOTcuMCAvIDQ4MDAsXG4gIGFjY3VyYXRlTWF0cml4ID0ge1xuICAgIHllYXJzOiB7XG4gICAgICBxdWFydGVyczogNCxcbiAgICAgIG1vbnRoczogMTIsXG4gICAgICB3ZWVrczogZGF5c0luWWVhckFjY3VyYXRlIC8gNyxcbiAgICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSxcbiAgICAgIGhvdXJzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICBxdWFydGVyczoge1xuICAgICAgbW9udGhzOiAzLFxuICAgICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDI4LFxuICAgICAgZGF5czogZGF5c0luWWVhckFjY3VyYXRlIC8gNCxcbiAgICAgIGhvdXJzOiAoZGF5c0luWWVhckFjY3VyYXRlICogMjQpIC8gNCxcbiAgICAgIG1pbnV0ZXM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwKSAvIDQsXG4gICAgICBzZWNvbmRzOiAoZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwKSAvIDQsXG4gICAgICBtaWxsaXNlY29uZHM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwKSAvIDQsXG4gICAgfSxcbiAgICBtb250aHM6IHtcbiAgICAgIHdlZWtzOiBkYXlzSW5Nb250aEFjY3VyYXRlIC8gNyxcbiAgICAgIGRheXM6IGRheXNJbk1vbnRoQWNjdXJhdGUsXG4gICAgICBob3VyczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0LFxuICAgICAgbWludXRlczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIC4uLmxvd09yZGVyTWF0cml4LFxuICB9O1xuXG4vLyB1bml0cyBvcmRlcmVkIGJ5IHNpemVcbmNvbnN0IG9yZGVyZWRVbml0cyQxID0gW1xuICBcInllYXJzXCIsXG4gIFwicXVhcnRlcnNcIixcbiAgXCJtb250aHNcIixcbiAgXCJ3ZWVrc1wiLFxuICBcImRheXNcIixcbiAgXCJob3Vyc1wiLFxuICBcIm1pbnV0ZXNcIixcbiAgXCJzZWNvbmRzXCIsXG4gIFwibWlsbGlzZWNvbmRzXCIsXG5dO1xuXG5jb25zdCByZXZlcnNlVW5pdHMgPSBvcmRlcmVkVW5pdHMkMS5zbGljZSgwKS5yZXZlcnNlKCk7XG5cbi8vIGNsb25lIHJlYWxseSBtZWFucyBcImNyZWF0ZSBhbm90aGVyIGluc3RhbmNlIGp1c3QgbGlrZSB0aGlzIG9uZSwgYnV0IHdpdGggdGhlc2UgY2hhbmdlc1wiXG5mdW5jdGlvbiBjbG9uZSQxKGR1ciwgYWx0cywgY2xlYXIgPSBmYWxzZSkge1xuICAvLyBkZWVwIG1lcmdlIGZvciB2YWxzXG4gIGNvbnN0IGNvbmYgPSB7XG4gICAgdmFsdWVzOiBjbGVhciA/IGFsdHMudmFsdWVzIDogeyAuLi5kdXIudmFsdWVzLCAuLi4oYWx0cy52YWx1ZXMgfHwge30pIH0sXG4gICAgbG9jOiBkdXIubG9jLmNsb25lKGFsdHMubG9jKSxcbiAgICBjb252ZXJzaW9uQWNjdXJhY3k6IGFsdHMuY29udmVyc2lvbkFjY3VyYWN5IHx8IGR1ci5jb252ZXJzaW9uQWNjdXJhY3ksXG4gICAgbWF0cml4OiBhbHRzLm1hdHJpeCB8fCBkdXIubWF0cml4LFxuICB9O1xuICByZXR1cm4gbmV3IER1cmF0aW9uKGNvbmYpO1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvblRvTWlsbGlzKG1hdHJpeCwgdmFscykge1xuICBsZXQgc3VtID0gdmFscy5taWxsaXNlY29uZHMgPz8gMDtcbiAgZm9yIChjb25zdCB1bml0IG9mIHJldmVyc2VVbml0cy5zbGljZSgxKSkge1xuICAgIGlmICh2YWxzW3VuaXRdKSB7XG4gICAgICBzdW0gKz0gdmFsc1t1bml0XSAqIG1hdHJpeFt1bml0XVtcIm1pbGxpc2Vjb25kc1wiXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cblxuLy8gTkI6IG11dGF0ZXMgcGFyYW1ldGVyc1xuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWVzKG1hdHJpeCwgdmFscykge1xuICAvLyB0aGUgbG9naWMgYmVsb3cgYXNzdW1lcyB0aGUgb3ZlcmFsbCB2YWx1ZSBvZiB0aGUgZHVyYXRpb24gaXMgcG9zaXRpdmVcbiAgLy8gaWYgdGhpcyBpcyBub3QgdGhlIGNhc2UsIGZhY3RvciBpcyB1c2VkIHRvIG1ha2UgaXQgc29cbiAgY29uc3QgZmFjdG9yID0gZHVyYXRpb25Ub01pbGxpcyhtYXRyaXgsIHZhbHMpIDwgMCA/IC0xIDogMTtcblxuICBvcmRlcmVkVW5pdHMkMS5yZWR1Y2VSaWdodCgocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbHNbY3VycmVudF0pKSB7XG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNWYWwgPSB2YWxzW3ByZXZpb3VzXSAqIGZhY3RvcjtcbiAgICAgICAgY29uc3QgY29udiA9IG1hdHJpeFtjdXJyZW50XVtwcmV2aW91c107XG5cbiAgICAgICAgLy8gaWYgKHByZXZpb3VzVmFsIDwgMCk6XG4gICAgICAgIC8vIGxvd2VyIG9yZGVyIHVuaXQgaXMgbmVnYXRpdmUgKGUuZy4geyB5ZWFyczogMiwgZGF5czogLTIgfSlcbiAgICAgICAgLy8gbm9ybWFsaXplIHRoaXMgYnkgcmVkdWNpbmcgdGhlIGhpZ2hlciBvcmRlciB1bml0IGJ5IHRoZSBhcHByb3ByaWF0ZSBhbW91bnRcbiAgICAgICAgLy8gYW5kIGluY3JlYXNpbmcgdGhlIGxvd2VyIG9yZGVyIHVuaXRcbiAgICAgICAgLy8gdGhpcyBjYW4gbmV2ZXIgbWFrZSB0aGUgaGlnaGVyIG9yZGVyIHVuaXQgbmVnYXRpdmUsIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBvbmx5IG9wZXJhdGVzXG4gICAgICAgIC8vIG9uIHBvc2l0aXZlIGR1cmF0aW9ucywgc28gdGhlIGFtb3VudCBvZiB0aW1lIHJlcHJlc2VudGVkIGJ5IHRoZSBsb3dlciBvcmRlciB1bml0IGNhbm5vdFxuICAgICAgICAvLyBiZSBsYXJnZXIgdGhhbiB0aGUgaGlnaGVyIG9yZGVyIHVuaXRcbiAgICAgICAgLy8gZWxzZTpcbiAgICAgICAgLy8gbG93ZXIgb3JkZXIgdW5pdCBpcyBwb3NpdGl2ZSAoZS5nLiB7IHllYXJzOiAyLCBkYXlzOiA0NTAgfSBvciB7IHllYXJzOiAtMiwgZGF5czogNDUwIH0pXG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBhdHRlbXB0IHRvIGNvbnZlcnQgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBsb3dlciBvcmRlciB1bml0IGludG9cbiAgICAgICAgLy8gdGhlIGhpZ2hlciBvcmRlciBvbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gTWF0aC5mbG9vciB0YWtlcyBjYXJlIG9mIGJvdGggb2YgdGhlc2UgY2FzZXMsIHJvdW5kaW5nIGF3YXkgZnJvbSAwXG4gICAgICAgIC8vIGlmIHByZXZpb3VzVmFsIDwgMCBpdCBtYWtlcyB0aGUgYWJzb2x1dGUgdmFsdWUgbGFyZ2VyXG4gICAgICAgIC8vIGlmIHByZXZpb3VzVmFsID49IGl0IG1ha2VzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBzbWFsbGVyXG4gICAgICAgIGNvbnN0IHJvbGxVcCA9IE1hdGguZmxvb3IocHJldmlvdXNWYWwgLyBjb252KTtcbiAgICAgICAgdmFsc1tjdXJyZW50XSArPSByb2xsVXAgKiBmYWN0b3I7XG4gICAgICAgIHZhbHNbcHJldmlvdXNdIC09IHJvbGxVcCAqIGNvbnYgKiBmYWN0b3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgIH1cbiAgfSwgbnVsbCk7XG5cbiAgLy8gdHJ5IHRvIGNvbnZlcnQgYW55IGRlY2ltYWxzIGludG8gc21hbGxlciB1bml0cyBpZiBwb3NzaWJsZVxuICAvLyBmb3IgZXhhbXBsZSBmb3IgeyB5ZWFyczogMi41LCBkYXlzOiAwLCBzZWNvbmRzOiAwIH0gd2Ugd2FudCB0byBnZXQgeyB5ZWFyczogMiwgZGF5czogMTgyLCBob3VyczogMTIgfVxuICBvcmRlcmVkVW5pdHMkMS5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnN0IGZyYWN0aW9uID0gdmFsc1twcmV2aW91c10gJSAxO1xuICAgICAgICB2YWxzW3ByZXZpb3VzXSAtPSBmcmFjdGlvbjtcbiAgICAgICAgdmFsc1tjdXJyZW50XSArPSBmcmFjdGlvbiAqIG1hdHJpeFtwcmV2aW91c11bY3VycmVudF07XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgIH1cbiAgfSwgbnVsbCk7XG59XG5cbi8vIFJlbW92ZSBhbGwgcHJvcGVydGllcyB3aXRoIGEgdmFsdWUgb2YgMCBmcm9tIGFuIG9iamVjdFxuZnVuY3Rpb24gcmVtb3ZlWmVyb2VzKHZhbHMpIHtcbiAgY29uc3QgbmV3VmFscyA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YWxzKSkge1xuICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgbmV3VmFsc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdWYWxzO1xufVxuXG4vKipcbiAqIEEgRHVyYXRpb24gb2JqZWN0IHJlcHJlc2VudHMgYSBwZXJpb2Qgb2YgdGltZSwgbGlrZSBcIjIgbW9udGhzXCIgb3IgXCIxIGRheSwgMSBob3VyXCIuIENvbmNlcHR1YWxseSwgaXQncyBqdXN0IGEgbWFwIG9mIHVuaXRzIHRvIHRoZWlyIHF1YW50aXRpZXMsIGFjY29tcGFuaWVkIGJ5IHNvbWUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGFuZCBtZXRob2RzIGZvciBjcmVhdGluZywgcGFyc2luZywgaW50ZXJyb2dhdGluZywgdHJhbnNmb3JtaW5nLCBhbmQgZm9ybWF0dGluZyB0aGVtLiBUaGV5IGNhbiBiZSB1c2VkIG9uIHRoZWlyIG93biBvciBpbiBjb25qdW5jdGlvbiB3aXRoIG90aGVyIEx1eG9uIHR5cGVzOyBmb3IgZXhhbXBsZSwgeW91IGNhbiB1c2Uge0BsaW5rIERhdGVUaW1lI3BsdXN9IHRvIGFkZCBhIER1cmF0aW9uIG9iamVjdCB0byBhIERhdGVUaW1lLCBwcm9kdWNpbmcgYW5vdGhlciBEYXRlVGltZS5cbiAqXG4gKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIER1cmF0aW9uOlxuICpcbiAqICogKipDcmVhdGlvbioqIFRvIGNyZWF0ZSBhIER1cmF0aW9uLCB1c2Uge0BsaW5rIER1cmF0aW9uLmZyb21NaWxsaXN9LCB7QGxpbmsgRHVyYXRpb24uZnJvbU9iamVjdH0sIG9yIHtAbGluayBEdXJhdGlvbi5mcm9tSVNPfS5cbiAqICogKipVbml0IHZhbHVlcyoqIFNlZSB0aGUge0BsaW5rIER1cmF0aW9uI3llYXJzfSwge0BsaW5rIER1cmF0aW9uI21vbnRoc30sIHtAbGluayBEdXJhdGlvbiN3ZWVrc30sIHtAbGluayBEdXJhdGlvbiNkYXlzfSwge0BsaW5rIER1cmF0aW9uI2hvdXJzfSwge0BsaW5rIER1cmF0aW9uI21pbnV0ZXN9LCB7QGxpbmsgRHVyYXRpb24jc2Vjb25kc30sIHtAbGluayBEdXJhdGlvbiNtaWxsaXNlY29uZHN9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlICB7QGxpbmsgRHVyYXRpb24jbG9jYWxlfSBhbmQge0BsaW5rIER1cmF0aW9uI251bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKiogVG8gY3JlYXRlIG5ldyBEdXJhdGlvbnMgb3V0IG9mIG9sZCBvbmVzIHVzZSB7QGxpbmsgRHVyYXRpb24jcGx1c30sIHtAbGluayBEdXJhdGlvbiNtaW51c30sIHtAbGluayBEdXJhdGlvbiNub3JtYWxpemV9LCB7QGxpbmsgRHVyYXRpb24jc2V0fSwge0BsaW5rIER1cmF0aW9uI3JlY29uZmlndXJlfSwge0BsaW5rIER1cmF0aW9uI3NoaWZ0VG99LCBhbmQge0BsaW5rIER1cmF0aW9uI25lZ2F0ZX0uXG4gKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgRHVyYXRpb24gaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgRHVyYXRpb24jYXN9LCB7QGxpbmsgRHVyYXRpb24jdG9JU099LCB7QGxpbmsgRHVyYXRpb24jdG9Gb3JtYXR9LCBhbmQge0BsaW5rIER1cmF0aW9uI3RvSlNPTn1cbiAqXG4gKiBUaGVyZSdzIGFyZSBtb3JlIG1ldGhvZHMgZG9jdW1lbnRlZCBiZWxvdy4gSW4gYWRkaXRpb24sIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHN1YnRsZXIgdG9waWNzIGxpa2UgaW50ZXJuYXRpb25hbGl6YXRpb24gYW5kIHZhbGlkaXR5LCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cbmNsYXNzIER1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09IFwibG9uZ3Rlcm1cIiB8fCBmYWxzZTtcbiAgICBsZXQgbWF0cml4ID0gYWNjdXJhdGUgPyBhY2N1cmF0ZU1hdHJpeCA6IGNhc3VhbE1hdHJpeDtcblxuICAgIGlmIChjb25maWcubWF0cml4KSB7XG4gICAgICBtYXRyaXggPSBjb25maWcubWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVzID0gY29uZmlnLnZhbHVlcztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmxvYyA9IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY29udmVyc2lvbkFjY3VyYWN5ID0gYWNjdXJhdGUgPyBcImxvbmd0ZXJtXCIgOiBcImNhc3VhbFwiO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc0x1eG9uRHVyYXRpb24gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBEdXJhdGlvbiBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IG9mIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbU1pbGxpcyhjb3VudCwgb3B0cykge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiBjb3VudCB9LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXJzJyBhbmQgJ2hvdXJzJy5cbiAgICogSWYgdGhpcyBvYmplY3QgaXMgZW1wdHkgdGhlbiBhIHplcm8gbWlsbGlzZWNvbmRzIGR1cmF0aW9uIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnF1YXJ0ZXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGhzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla3NcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5kYXlzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91cnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9W11dIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIHByZXNldCBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm1hdHJpeD1PYmplY3RdIC0gdGhlIGN1c3RvbSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBEdXJhdGlvbi5mcm9tT2JqZWN0OiBhcmd1bWVudCBleHBlY3RlZCB0byBiZSBhbiBvYmplY3QsIGdvdCAke1xuICAgICAgICAgIG9iaiA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIG9ialxuICAgICAgICB9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgIHZhbHVlczogbm9ybWFsaXplT2JqZWN0KG9iaiwgRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpLFxuICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeSxcbiAgICAgIG1hdHJpeDogb3B0cy5tYXRyaXgsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBEdXJhdGlvbkxpa2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVtYmVyIHwgRHVyYXRpb259IGR1cmF0aW9uTGlrZVxuICAgKiBPbmUgb2Y6XG4gICAqIC0gb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIC0gbnVtYmVyIHJlcHJlc2VudGluZyBtaWxsaXNlY29uZHNcbiAgICogLSBEdXJhdGlvbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBmcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uTGlrZSkge1xuICAgIGlmIChpc051bWJlcihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhkdXJhdGlvbkxpa2UpO1xuICAgIH0gZWxzZSBpZiAoRHVyYXRpb24uaXNEdXJhdGlvbihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gZHVyYXRpb25MaWtlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uTGlrZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICBgVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCAke2R1cmF0aW9uTGlrZX0gb2YgdHlwZSAke3R5cGVvZiBkdXJhdGlvbkxpa2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhbiBJU08gODYwMSBkdXJhdGlvbiBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGV4dCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1AzWTZNMVc0RFQxMkgzME01UycpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAzLCBtb250aHM6IDYsIHdlZWtzOiAxLCBkYXlzOiA0LCBob3VyczogMTIsIG1pbnV0ZXM6IDMwLCBzZWNvbmRzOiA1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUFQyM0gnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjMgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQNVkzTScpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiA1LCBtb250aHM6IDMgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMpIHtcbiAgICBjb25zdCBbcGFyc2VkXSA9IHBhcnNlSVNPRHVyYXRpb24odGV4dCk7XG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYW4gSVNPIDg2MDEgdGltZSBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGV4dCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTE6MjI6MzMuNDQ0JykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAyMiwgc2Vjb25kczogMzMsIG1pbGxpc2Vjb25kczogNDQ0IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExOjAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJ1QxMTowMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJ1QxMTAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09UaW1lT25seSh0ZXh0KTtcbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChwYXJzZWQsIG9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgSVNPIDg2MDFgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRHVyYXRpb24gaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZER1cmF0aW9uRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRHVyYXRpb24oeyBpbnZhbGlkIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB7XG4gICAgICB5ZWFyOiBcInllYXJzXCIsXG4gICAgICB5ZWFyczogXCJ5ZWFyc1wiLFxuICAgICAgcXVhcnRlcjogXCJxdWFydGVyc1wiLFxuICAgICAgcXVhcnRlcnM6IFwicXVhcnRlcnNcIixcbiAgICAgIG1vbnRoOiBcIm1vbnRoc1wiLFxuICAgICAgbW9udGhzOiBcIm1vbnRoc1wiLFxuICAgICAgd2VlazogXCJ3ZWVrc1wiLFxuICAgICAgd2Vla3M6IFwid2Vla3NcIixcbiAgICAgIGRheTogXCJkYXlzXCIsXG4gICAgICBkYXlzOiBcImRheXNcIixcbiAgICAgIGhvdXI6IFwiaG91cnNcIixcbiAgICAgIGhvdXJzOiBcImhvdXJzXCIsXG4gICAgICBtaW51dGU6IFwibWludXRlc1wiLFxuICAgICAgbWludXRlczogXCJtaW51dGVzXCIsXG4gICAgICBzZWNvbmQ6IFwic2Vjb25kc1wiLFxuICAgICAgc2Vjb25kczogXCJzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZDogXCJtaWxsaXNlY29uZHNcIixcbiAgICAgIG1pbGxpc2Vjb25kczogXCJtaWxsaXNlY29uZHNcIixcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcblxuICAgIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEdXJhdGlvbi4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRHVyYXRpb24obykge1xuICAgIHJldHVybiAobyAmJiBvLmlzTHV4b25EdXJhdGlvbikgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEdXJhdGlvbiwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEdXJhdGlvblxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuIFlvdSBtYXkgdXNlIHRoZXNlIHRva2VuczpcbiAgICogKiBgU2AgZm9yIG1pbGxpc2Vjb25kc1xuICAgKiAqIGBzYCBmb3Igc2Vjb25kc1xuICAgKiAqIGBtYCBmb3IgbWludXRlc1xuICAgKiAqIGBoYCBmb3IgaG91cnNcbiAgICogKiBgZGAgZm9yIGRheXNcbiAgICogKiBgd2AgZm9yIHdlZWtzXG4gICAqICogYE1gIGZvciBtb250aHNcbiAgICogKiBgeWAgZm9yIHllYXJzXG4gICAqIE5vdGVzOlxuICAgKiAqIEFkZCBwYWRkaW5nIGJ5IHJlcGVhdGluZyB0aGUgdG9rZW4sIGUuZy4gXCJ5eVwiIHBhZHMgdGhlIHllYXJzIHRvIHR3byBkaWdpdHMsIFwiaGhoaFwiIHBhZHMgdGhlIGhvdXJzIG91dCB0byBmb3VyIGRpZ2l0c1xuICAgKiAqIFRva2VucyBjYW4gYmUgZXNjYXBlZCBieSB3cmFwcGluZyB3aXRoIHNpbmdsZSBxdW90ZXMuXG4gICAqICogVGhlIGR1cmF0aW9uIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBzZXQgb2YgdW5pdHMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgdXNpbmcge0BsaW5rIER1cmF0aW9uI3NoaWZ0VG99IGFuZCB0aGUgRHVyYXRpb25zJ3MgY29udmVyc2lvbiBhY2N1cmFjeSBzZXR0aW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmxvb3I9dHJ1ZV0gLSBmbG9vciBudW1lcmljYWwgdmFsdWVzXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInkgZCBzXCIpIC8vPT4gXCIxIDYgMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInl5IGRkIHNzc1wiKSAvLz0+IFwiMDEgMDYgMDAyXCJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvRm9ybWF0KFwiTSBTXCIpIC8vPT4gXCIxMiA1MTg0MDIwMDBcIlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkge1xuICAgIC8vIHJldmVyc2UtY29tcGF0IHNpbmNlIDEuMjsgd2UgYWx3YXlzIHJvdW5kIGRvd24gbm93LCBuZXZlciB1cCwgYW5kIHdlIGRvIGl0IGJ5IGRlZmF1bHRcbiAgICBjb25zdCBmbXRPcHRzID0ge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGZsb29yOiBvcHRzLnJvdW5kICE9PSBmYWxzZSAmJiBvcHRzLmZsb29yICE9PSBmYWxzZSxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYywgZm10T3B0cykuZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKHRoaXMsIGZtdClcbiAgICAgIDogSU5WQUxJRCQyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBEdXJhdGlvbiB3aXRoIGFsbCB1bml0cyBpbmNsdWRlZC5cbiAgICogVG8gbW9kaWZ5IGl0cyBiZWhhdmlvciB1c2UgdGhlIGBsaXN0U3R5bGVgIGFuZCBhbnkgSW50bC5OdW1iZXJGb3JtYXQgb3B0aW9uLCB0aG91Z2ggYHVuaXREaXNwbGF5YCBpcyBlc3BlY2lhbGx5IHJlbGV2YW50LlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludGwvTnVtYmVyRm9ybWF0XG4gICAqIEBwYXJhbSBvcHRzIC0gT24gb3B0aW9uIG9iamVjdCB0byBvdmVycmlkZSB0aGUgZm9ybWF0dGluZy4gQWNjZXB0cyB0aGUgc2FtZSBrZXlzIGFzIHRoZSBvcHRpb25zIHBhcmFtZXRlciBvZiB0aGUgbmF0aXZlIGBJbnQuTnVtYmVyRm9ybWF0YCBjb25zdHJ1Y3RvciwgYXMgd2VsbCBhcyBgbGlzdFN0eWxlYC5cbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogdmFyIGR1ciA9IER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxLCBob3VyczogNSwgbWludXRlczogNiB9KVxuICAgKiBkdXIudG9IdW1hbigpIC8vPT4gJzEgZGF5LCA1IGhvdXJzLCA2IG1pbnV0ZXMnXG4gICAqIGR1ci50b0h1bWFuKHsgbGlzdFN0eWxlOiBcImxvbmdcIiB9KSAvLz0+ICcxIGRheSwgNSBob3VycywgYW5kIDYgbWludXRlcydcbiAgICogZHVyLnRvSHVtYW4oeyB1bml0RGlzcGxheTogXCJzaG9ydFwiIH0pIC8vPT4gJzEgZGF5LCA1IGhyLCA2IG1pbidcbiAgICogYGBgXG4gICAqL1xuICB0b0h1bWFuKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQyO1xuXG4gICAgY29uc3QgbCA9IG9yZGVyZWRVbml0cyQxXG4gICAgICAubWFwKCh1bml0KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMudmFsdWVzW3VuaXRdO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxvY1xuICAgICAgICAgIC5udW1iZXJGb3JtYXR0ZXIoeyBzdHlsZTogXCJ1bml0XCIsIHVuaXREaXNwbGF5OiBcImxvbmdcIiwgLi4ub3B0cywgdW5pdDogdW5pdC5zbGljZSgwLCAtMSkgfSlcbiAgICAgICAgICAuZm9ybWF0KHZhbCk7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigobikgPT4gbik7XG5cbiAgICByZXR1cm4gdGhpcy5sb2NcbiAgICAgIC5saXN0Rm9ybWF0dGVyKHsgdHlwZTogXCJjb25qdW5jdGlvblwiLCBzdHlsZTogb3B0cy5saXN0U3R5bGUgfHwgXCJuYXJyb3dcIiwgLi4ub3B0cyB9KVxuICAgICAgLmZvcm1hdChsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCB0aGlzIER1cmF0aW9uJ3MgdmFsdWVzLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICB0b09iamVjdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHt9O1xuICAgIHJldHVybiB7IC4uLnRoaXMudmFsdWVzIH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24uXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMywgc2Vjb25kczogNDUgfSkudG9JU08oKSAvLz0+ICdQM1lUNDVTJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbW9udGhzOiA0LCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1A0TVQ0NVMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDUgfSkudG9JU08oKSAvLz0+ICdQNU0nXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaW51dGVzOiA1IH0pLnRvSVNPKCkgLy89PiAnUFQ1TSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbGxpc2Vjb25kczogNiB9KS50b0lTTygpIC8vPT4gJ1BUMC4wMDZTJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTTygpIHtcbiAgICAvLyB3ZSBjb3VsZCB1c2UgdGhlIGZvcm1hdHRlciwgYnV0IHRoaXMgaXMgYW4gZWFzaWVyIHdheSB0byBnZXQgdGhlIG1pbmltdW0gc3RyaW5nXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IHMgPSBcIlBcIjtcbiAgICBpZiAodGhpcy55ZWFycyAhPT0gMCkgcyArPSB0aGlzLnllYXJzICsgXCJZXCI7XG4gICAgaWYgKHRoaXMubW9udGhzICE9PSAwIHx8IHRoaXMucXVhcnRlcnMgIT09IDApIHMgKz0gdGhpcy5tb250aHMgKyB0aGlzLnF1YXJ0ZXJzICogMyArIFwiTVwiO1xuICAgIGlmICh0aGlzLndlZWtzICE9PSAwKSBzICs9IHRoaXMud2Vla3MgKyBcIldcIjtcbiAgICBpZiAodGhpcy5kYXlzICE9PSAwKSBzICs9IHRoaXMuZGF5cyArIFwiRFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwIHx8IHRoaXMubWludXRlcyAhPT0gMCB8fCB0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApXG4gICAgICBzICs9IFwiVFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwKSBzICs9IHRoaXMuaG91cnMgKyBcIkhcIjtcbiAgICBpZiAodGhpcy5taW51dGVzICE9PSAwKSBzICs9IHRoaXMubWludXRlcyArIFwiTVwiO1xuICAgIGlmICh0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApXG4gICAgICAvLyB0aGlzIHdpbGwgaGFuZGxlIFwiZmxvYXRpbmcgcG9pbnQgbWFkbmVzc1wiIGJ5IHJlbW92aW5nIGV4dHJhIGRlY2ltYWwgcGxhY2VzXG4gICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81ODgwMDQvaXMtZmxvYXRpbmctcG9pbnQtbWF0aC1icm9rZW5cbiAgICAgIHMgKz0gcm91bmRUbyh0aGlzLnNlY29uZHMgKyB0aGlzLm1pbGxpc2Vjb25kcyAvIDEwMDAsIDMpICsgXCJTXCI7XG4gICAgaWYgKHMgPT09IFwiUFwiKSBzICs9IFwiVDBTXCI7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24sIGZvcm1hdHRlZCBhcyBhIHRpbWUgb2YgZGF5LlxuICAgKiBOb3RlIHRoYXQgdGhpcyB3aWxsIHJldHVybiBudWxsIGlmIHRoZSBkdXJhdGlvbiBpcyBpbnZhbGlkLCBuZWdhdGl2ZSwgb3IgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDI0IGhvdXJzLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlUHJlZml4PWZhbHNlXSAtIGluY2x1ZGUgdGhlIGBUYCBwcmVmaXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKCkgLy89PiAnMTE6MDA6MDAuMDAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwOjAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IHN1cHByZXNzU2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcxMTowMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QxMTowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzExMDAwMC4wMDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPVGltZShvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBtaWxsaXMgPSB0aGlzLnRvTWlsbGlzKCk7XG4gICAgaWYgKG1pbGxpcyA8IDAgfHwgbWlsbGlzID49IDg2NDAwMDAwKSByZXR1cm4gbnVsbDtcblxuICAgIG9wdHMgPSB7XG4gICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogZmFsc2UsXG4gICAgICBzdXBwcmVzc1NlY29uZHM6IGZhbHNlLFxuICAgICAgaW5jbHVkZVByZWZpeDogZmFsc2UsXG4gICAgICBmb3JtYXQ6IFwiZXh0ZW5kZWRcIixcbiAgICAgIC4uLm9wdHMsXG4gICAgICBpbmNsdWRlT2Zmc2V0OiBmYWxzZSxcbiAgICB9O1xuXG4gICAgY29uc3QgZGF0ZVRpbWUgPSBEYXRlVGltZS5mcm9tTWlsbGlzKG1pbGxpcywgeyB6b25lOiBcIlVUQ1wiIH0pO1xuICAgIHJldHVybiBkYXRlVGltZS50b0lTT1RpbWUob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gbWlsbGlzZWNvbmRzIHZhbHVlIG9mIHRoaXMgRHVyYXRpb24uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvTWlsbGlzKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuXG4gICAgcmV0dXJuIGR1cmF0aW9uVG9NaWxsaXModGhpcy5tYXRyaXgsIHRoaXMudmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLiBBbGlhcyBvZiB7QGxpbmsgdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9NaWxsaXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHRoaXMgRHVyYXRpb24gbG9uZ2VyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gYWRkLiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSxcbiAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIG9yZGVyZWRVbml0cyQxKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoZHVyLnZhbHVlcywgaykgfHwgaGFzT3duUHJvcGVydHkodGhpcy52YWx1ZXMsIGspKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7IHZhbHVlczogcmVzdWx0IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBzaG9ydGVyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgbWludXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5wbHVzKGR1ci5uZWdhdGUoKSk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdW5pdC4gQXJpdHkgaXMgMSBvciAyOiB0aGUgdmFsdWUgb2YgdGhlIHVuaXQgYW5kLCBvcHRpb25hbGx5LCB0aGUgdW5pdCBuYW1lLiBNdXN0IHJldHVybiBhIG51bWJlci5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cyh4ID0+IHggKiAyKSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDYwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cygoeCwgdSkgPT4gdSA9PT0gXCJob3Vyc1wiID8geCAqIDIgOiB4KSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBtYXBVbml0cyhmbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy52YWx1ZXMpKSB7XG4gICAgICByZXN1bHRba10gPSBhc051bWJlcihmbih0aGlzLnZhbHVlc1trXSwgaykpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7IHZhbHVlczogcmVzdWx0IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgneWVhcnMnKSAvLz0+IDJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5nZXQoJ21vbnRocycpIC8vPT4gMFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnZGF5cycpIC8vPT4gM1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW0R1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCldO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHVyLnNldCh7IHllYXJzOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyBob3VyczogOCwgbWludXRlczogMzAgfSlcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzZXQodmFsdWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgbWl4ZWQgPSB7IC4uLnRoaXMudmFsdWVzLCAuLi5ub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KSB9O1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHsgdmFsdWVzOiBtaXhlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUgYW5kL29yIG51bWJlcmluZ1N5c3RlbS4gIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgZHVyLnJlY29uZmlndXJlKHsgbG9jYWxlOiAnZW4tR0InIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcmVjb25maWd1cmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgY29udmVyc2lvbkFjY3VyYWN5LCBtYXRyaXggfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSB9KTtcbiAgICBjb25zdCBvcHRzID0geyBsb2MsIG1hdHJpeCwgY29udmVyc2lvbkFjY3VyYWN5IH07XG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGR1cmF0aW9uIGluIHRoZSBzcGVjaWZpZWQgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlcycgb3IgJ2RheXMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ2RheXMnKSAvLz0+IDM2NVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdtb250aHMnKSAvLz0+IDEyXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe2hvdXJzOiA2MH0pLmFzKCdkYXlzJykgLy89PiAyLjVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgYXModW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnNoaWZ0VG8odW5pdCkuZ2V0KHVuaXQpIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZHVjZSB0aGlzIER1cmF0aW9uIHRvIGl0cyBjYW5vbmljYWwgcmVwcmVzZW50YXRpb24gaW4gaXRzIGN1cnJlbnQgdW5pdHMuXG4gICAqIEFzc3VtaW5nIHRoZSBvdmVyYWxsIHZhbHVlIG9mIHRoZSBEdXJhdGlvbiBpcyBwb3NpdGl2ZSwgdGhpcyBtZWFuczpcbiAgICogLSBleGNlc3NpdmUgdmFsdWVzIGZvciBsb3dlci1vcmRlciB1bml0cyBhcmUgY29udmVydGVkIHRvIGhpZ2hlci1vcmRlciB1bml0cyAoaWYgcG9zc2libGUsIHNlZSBmaXJzdCBhbmQgc2Vjb25kIGV4YW1wbGUpXG4gICAqIC0gbmVnYXRpdmUgbG93ZXItb3JkZXIgdW5pdHMgYXJlIGNvbnZlcnRlZCB0byBoaWdoZXIgb3JkZXIgdW5pdHMgKHRoZXJlIG11c3QgYmUgc3VjaCBhIGhpZ2hlciBvcmRlciB1bml0LCBvdGhlcndpc2VcbiAgICogICB0aGUgb3ZlcmFsbCB2YWx1ZSB3b3VsZCBiZSBuZWdhdGl2ZSwgc2VlIHNlY29uZCBleGFtcGxlKVxuICAgKiAtIGZyYWN0aW9uYWwgdmFsdWVzIGZvciBoaWdoZXItb3JkZXIgdW5pdHMgYXJlIGNvbnZlcnRlZCB0byBsb3dlci1vcmRlciB1bml0cyAoaWYgcG9zc2libGUsIHNlZSBmb3VydGggZXhhbXBsZSlcbiAgICpcbiAgICogSWYgdGhlIG92ZXJhbGwgdmFsdWUgaXMgbmVnYXRpdmUsIHRoZSByZXN1bHQgb2YgdGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgdGhpcy5uZWdhdGUoKS5ub3JtYWxpemUoKS5uZWdhdGUoKWAuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMiwgZGF5czogNTAwMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMTUsIGRheXM6IDI1NSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDUwMDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEyLCBtaW51dGVzOiAtNDUgfSkubm9ybWFsaXplKCkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAxNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMi41LCBkYXlzOiAwLCBob3VyczogMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMiwgZGF5czogMTgyLCBob3VyczogMTIgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBub3JtYWxpemVWYWx1ZXModGhpcy5tYXRyaXgsIHZhbHMpO1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHsgdmFsdWVzOiB2YWxzIH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2NhbGUgdW5pdHMgdG8gaXRzIGxhcmdlc3QgcmVwcmVzZW50YXRpb25cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbGxpc2Vjb25kczogOTAwMDAgfSkucmVzY2FsZSgpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDEsIHNlY29uZHM6IDMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICByZXNjYWxlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCB2YWxzID0gcmVtb3ZlWmVyb2VzKHRoaXMubm9ybWFsaXplKCkuc2hpZnRUb0FsbCgpLnRvT2JqZWN0KCkpO1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHsgdmFsdWVzOiB2YWxzIH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdGhpcyBEdXJhdGlvbiBpbnRvIGl0cyByZXByZXNlbnRhdGlvbiBpbiBhIGRpZmZlcmVudCBzZXQgb2YgdW5pdHMuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgc2Vjb25kczogMzAgfSkuc2hpZnRUbygnbWludXRlcycsICdtaWxsaXNlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBtaW51dGVzOiA2MCwgbWlsbGlzZWNvbmRzOiAzMDAwMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc2hpZnRUbyguLi51bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKCh1KSA9PiBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHUpKTtcblxuICAgIGNvbnN0IGJ1aWx0ID0ge30sXG4gICAgICBhY2N1bXVsYXRlZCA9IHt9LFxuICAgICAgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBsZXQgbGFzdFVuaXQ7XG5cbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmICh1bml0cy5pbmRleE9mKGspID49IDApIHtcbiAgICAgICAgbGFzdFVuaXQgPSBrO1xuXG4gICAgICAgIGxldCBvd24gPSAwO1xuXG4gICAgICAgIC8vIGFueXRoaW5nIHdlIGhhdmVuJ3QgYm9pbGVkIGRvd24geWV0IHNob3VsZCBnZXQgYm9pbGVkIHRvIHRoaXMgdW5pdFxuICAgICAgICBmb3IgKGNvbnN0IGFrIGluIGFjY3VtdWxhdGVkKSB7XG4gICAgICAgICAgb3duICs9IHRoaXMubWF0cml4W2FrXVtrXSAqIGFjY3VtdWxhdGVkW2FrXTtcbiAgICAgICAgICBhY2N1bXVsYXRlZFtha10gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXRcbiAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHNba10pKSB7XG4gICAgICAgICAgb3duICs9IHZhbHNba107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IGtlZXAgdGhlIGludGVnZXIgcGFydCBmb3Igbm93IGluIHRoZSBob3BlcyBvZiBwdXR0aW5nIGFueSBkZWNpbWFsIHBhcnRcbiAgICAgICAgLy8gaW50byBhIHNtYWxsZXIgdW5pdCBsYXRlclxuICAgICAgICBjb25zdCBpID0gTWF0aC50cnVuYyhvd24pO1xuICAgICAgICBidWlsdFtrXSA9IGk7XG4gICAgICAgIGFjY3VtdWxhdGVkW2tdID0gKG93biAqIDEwMDAgLSBpICogMTAwMCkgLyAxMDAwO1xuXG4gICAgICAgIC8vIG90aGVyd2lzZSwga2VlcCBpdCBpbiB0aGUgd2luZ3MgdG8gYm9pbCBpdCBsYXRlclxuICAgICAgfSBlbHNlIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IHZhbHNba107XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYW55dGhpbmcgbGVmdG92ZXIgYmVjb21lcyB0aGUgZGVjaW1hbCBmb3IgdGhlIGxhc3QgdW5pdFxuICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHlcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgaWYgKGFjY3VtdWxhdGVkW2tleV0gIT09IDApIHtcbiAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9XG4gICAgICAgICAga2V5ID09PSBsYXN0VW5pdCA/IGFjY3VtdWxhdGVkW2tleV0gOiBhY2N1bXVsYXRlZFtrZXldIC8gdGhpcy5tYXRyaXhbbGFzdFVuaXRdW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCBidWlsdCk7XG4gICAgcmV0dXJuIGNsb25lJDEodGhpcywgeyB2YWx1ZXM6IGJ1aWx0IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNoaWZ0IHRoaXMgRHVyYXRpb24gdG8gYWxsIGF2YWlsYWJsZSB1bml0cy5cbiAgICogU2FtZSBhcyBzaGlmdFRvKFwieWVhcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCIpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc2hpZnRUb0FsbCgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuc2hpZnRUbyhcbiAgICAgIFwieWVhcnNcIixcbiAgICAgIFwibW9udGhzXCIsXG4gICAgICBcIndlZWtzXCIsXG4gICAgICBcImRheXNcIixcbiAgICAgIFwiaG91cnNcIixcbiAgICAgIFwibWludXRlc1wiLFxuICAgICAgXCJzZWNvbmRzXCIsXG4gICAgICBcIm1pbGxpc2Vjb25kc1wiXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG5lZ2F0aXZlIG9mIHRoaXMgRHVyYXRpb24uXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgc2Vjb25kczogMzAgfSkubmVnYXRlKCkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IC0xLCBzZWNvbmRzOiAtMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG5lZ2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbmVnYXRlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykpIHtcbiAgICAgIG5lZ2F0ZWRba10gPSB0aGlzLnZhbHVlc1trXSA9PT0gMCA/IDAgOiAtdGhpcy52YWx1ZXNba107XG4gICAgfVxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHsgdmFsdWVzOiBuZWdhdGVkIH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgeWVhcnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBxdWFydGVycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBxdWFydGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMucXVhcnRlcnMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1vbnRocyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2Vla3NcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMud2Vla3MgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRheXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgZGF5cygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuZGF5cyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaG91cnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgaG91cnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLmhvdXJzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaW51dGVzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbnV0ZXMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5zZWNvbmRzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbGxpc2Vjb25kcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRHVyYXRpb24gaXMgaW52YWxpZC4gSW52YWxpZCBkdXJhdGlvbnMgYXJlIHJldHVybmVkIGJ5IGRpZmYgb3BlcmF0aW9uc1xuICAgKiBvbiBpbnZhbGlkIERhdGVUaW1lcyBvciBJbnRlcnZhbHMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRXF1YWxpdHkgY2hlY2tcbiAgICogVHdvIER1cmF0aW9ucyBhcmUgZXF1YWwgaWZmIHRoZXkgaGF2ZSB0aGUgc2FtZSB1bml0cyBhbmQgdGhlIHNhbWUgdmFsdWVzIGZvciBlYWNoIHVuaXQuXG4gICAqIEBwYXJhbSB7RHVyYXRpb259IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHtcbiAgICAgIC8vIENvbnNpZGVyIDAgYW5kIHVuZGVmaW5lZCBhcyBlcXVhbFxuICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQgfHwgdjEgPT09IDApIHJldHVybiB2MiA9PT0gdW5kZWZpbmVkIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzJDEpIHtcbiAgICAgIGlmICghZXEodGhpcy52YWx1ZXNbdV0sIG90aGVyLnZhbHVlc1t1XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5jb25zdCBJTlZBTElEJDEgPSBcIkludmFsaWQgSW50ZXJ2YWxcIjtcblxuLy8gY2hlY2tzIGlmIHRoZSBzdGFydCBpcyBlcXVhbCB0byBvciBiZWZvcmUgdGhlIGVuZFxuZnVuY3Rpb24gdmFsaWRhdGVTdGFydEVuZChzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQgfHwgIXN0YXJ0LmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBzdGFydFwiKTtcbiAgfSBlbHNlIGlmICghZW5kIHx8ICFlbmQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIGVuZFwiKTtcbiAgfSBlbHNlIGlmIChlbmQgPCBzdGFydCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFxuICAgICAgXCJlbmQgYmVmb3JlIHN0YXJ0XCIsXG4gICAgICBgVGhlIGVuZCBvZiBhbiBpbnRlcnZhbCBtdXN0IGJlIGFmdGVyIGl0cyBzdGFydCwgYnV0IHlvdSBoYWQgc3RhcnQ9JHtzdGFydC50b0lTTygpfSBhbmQgZW5kPSR7ZW5kLnRvSVNPKCl9YFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBJbnRlcnZhbCBvYmplY3QgcmVwcmVzZW50cyBhIGhhbGYtb3BlbiBpbnRlcnZhbCBvZiB0aW1lLCB3aGVyZSBlYWNoIGVuZHBvaW50IGlzIGEge0BsaW5rIERhdGVUaW1lfS4gQ29uY2VwdHVhbGx5LCBpdCdzIGEgY29udGFpbmVyIGZvciB0aG9zZSB0d28gZW5kcG9pbnRzLCBhY2NvbXBhbmllZCBieSBtZXRob2RzIGZvciBjcmVhdGluZywgcGFyc2luZywgaW50ZXJyb2dhdGluZywgY29tcGFyaW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgbWV0aG9kcyBhbmQgZ2V0dGVycyBpbiBJbnRlcnZhbDpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKiBUbyBjcmVhdGUgYW4gSW50ZXJ2YWwsIHVzZSB7QGxpbmsgSW50ZXJ2YWwuZnJvbURhdGVUaW1lc30sIHtAbGluayBJbnRlcnZhbC5hZnRlcn0sIHtAbGluayBJbnRlcnZhbC5iZWZvcmV9LCBvciB7QGxpbmsgSW50ZXJ2YWwuZnJvbUlTT30uXG4gKiAqICoqQWNjZXNzb3JzKiogVXNlIHtAbGluayBJbnRlcnZhbCNzdGFydH0gYW5kIHtAbGluayBJbnRlcnZhbCNlbmR9IHRvIGdldCB0aGUgc3RhcnQgYW5kIGVuZC5cbiAqICogKipJbnRlcnJvZ2F0aW9uKiogVG8gYW5hbHl6ZSB0aGUgSW50ZXJ2YWwsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjY291bnR9LCB7QGxpbmsgSW50ZXJ2YWwjbGVuZ3RofSwge0BsaW5rIEludGVydmFsI2hhc1NhbWV9LCB7QGxpbmsgSW50ZXJ2YWwjY29udGFpbnN9LCB7QGxpbmsgSW50ZXJ2YWwjaXNBZnRlcn0sIG9yIHtAbGluayBJbnRlcnZhbCNpc0JlZm9yZX0uXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgb3RoZXIgSW50ZXJ2YWxzIG91dCBvZiB0aGlzIG9uZSwgdXNlIHtAbGluayBJbnRlcnZhbCNzZXR9LCB7QGxpbmsgSW50ZXJ2YWwjc3BsaXRBdH0sIHtAbGluayBJbnRlcnZhbCNzcGxpdEJ5fSwge0BsaW5rIEludGVydmFsI2RpdmlkZUVxdWFsbHl9LCB7QGxpbmsgSW50ZXJ2YWwubWVyZ2V9LCB7QGxpbmsgSW50ZXJ2YWwueG9yfSwge0BsaW5rIEludGVydmFsI3VuaW9ufSwge0BsaW5rIEludGVydmFsI2ludGVyc2VjdGlvbn0sIG9yIHtAbGluayBJbnRlcnZhbCNkaWZmZXJlbmNlfS5cbiAqICogKipDb21wYXJpc29uKiogVG8gY29tcGFyZSB0aGlzIEludGVydmFsIHRvIGFub3RoZXIgb25lLCB1c2Uge0BsaW5rIEludGVydmFsI2VxdWFsc30sIHtAbGluayBJbnRlcnZhbCNvdmVybGFwc30sIHtAbGluayBJbnRlcnZhbCNhYnV0c1N0YXJ0fSwge0BsaW5rIEludGVydmFsI2FidXRzRW5kfSwge0BsaW5rIEludGVydmFsI2VuZ3VsZnN9XG4gKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgSW50ZXJ2YWwgaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgSW50ZXJ2YWwjdG9TdHJpbmd9LCB7QGxpbmsgSW50ZXJ2YWwjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU099LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU09EYXRlfSwge0BsaW5rIEludGVydmFsI3RvSVNPVGltZX0sIHtAbGluayBJbnRlcnZhbCN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgSW50ZXJ2YWwjdG9EdXJhdGlvbn0uXG4gKi9cbmNsYXNzIEludGVydmFsIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnMgPSBjb25maWcuc3RhcnQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5lID0gY29uZmlnLmVuZDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaXNMdXhvbkludGVydmFsID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbiA9IG51bGwpIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBJbnRlcnZhbCBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG5cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSW50ZXJ2YWxFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7IGludmFsaWQgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBmcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBidWlsdFN0YXJ0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCksXG4gICAgICBidWlsdEVuZCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcblxuICAgIGNvbnN0IHZhbGlkYXRlRXJyb3IgPSB2YWxpZGF0ZVN0YXJ0RW5kKGJ1aWx0U3RhcnQsIGJ1aWx0RW5kKTtcblxuICAgIGlmICh2YWxpZGF0ZUVycm9yID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBzdGFydDogYnVpbHRTdGFydCxcbiAgICAgICAgZW5kOiBidWlsdEVuZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVFcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzdGF0aWMgYWZ0ZXIoc3RhcnQsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0LCBkdC5wbHVzKGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIGVuZCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgYmFja3dhcmRzIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBiZWZvcmUoZW5kLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgZHQgPSBmcmllbmRseURhdGVUaW1lKGVuZCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQubWludXMoZHVyKSwgZHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy5cbiAgICogQWNjZXB0cyBgPHN0YXJ0Pi88ZW5kPmAsIGA8c3RhcnQ+LzxkdXJhdGlvbj5gLCBhbmQgYDxkdXJhdGlvbj4vPGVuZD5gIGZvcm1hdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uI2Zyb21JU099XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgY29uc3QgW3MsIGVdID0gKHRleHQgfHwgXCJcIikuc3BsaXQoXCIvXCIsIDIpO1xuICAgIGlmIChzICYmIGUpIHtcbiAgICAgIGxldCBzdGFydCwgc3RhcnRJc1ZhbGlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhcnQgPSBEYXRlVGltZS5mcm9tSVNPKHMsIG9wdHMpO1xuICAgICAgICBzdGFydElzVmFsaWQgPSBzdGFydC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdGFydElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGVuZCwgZW5kSXNWYWxpZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVuZCA9IERhdGVUaW1lLmZyb21JU08oZSwgb3B0cyk7XG4gICAgICAgIGVuZElzVmFsaWQgPSBlbmQuaXNWYWxpZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRJc1ZhbGlkICYmIGVuZElzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhlLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmFmdGVyKHN0YXJ0LCBkdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhzLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmJlZm9yZShlbmQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGFuIEludGVydmFsLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNJbnRlcnZhbChvKSB7XG4gICAgcmV0dXJuIChvICYmIG8uaXNMdXhvbkludGVydmFsKSB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHR5cGUge0RhdGVUaW1lfVxuICAgKi9cbiAgZ2V0IHN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnMgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVuZCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHR5cGUge0RhdGVUaW1lfVxuICAgKi9cbiAgZ2V0IGVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5lIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhdCBsZWFzdCBpdHMgc3RhcnQsIG1lYW5pbmcgdGhhdCB0aGUgSW50ZXJ2YWwgaXNuJ3QgJ2JhY2t3YXJkcycuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZFJlYXNvbiA9PT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBJbnRlcnZhbCBpcyBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZEV4cGxhbmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgbGVuZ3RoKHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9EdXJhdGlvbiguLi5bdW5pdF0pLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb3VudCBvZiBtaW51dGVzLCBob3VycywgZGF5cywgbW9udGhzLCBvciB5ZWFycyBpbmNsdWRlZCBpbiB0aGUgSW50ZXJ2YWwsIGV2ZW4gaW4gcGFydC5cbiAgICogVW5saWtlIHtAbGluayBJbnRlcnZhbCNsZW5ndGh9IHRoaXMgY291bnRzIHNlY3Rpb25zIG9mIHRoZSBjYWxlbmRhciwgbm90IHBlcmlvZHMgb2YgdGltZSwgZS5nLiBzcGVjaWZ5aW5nICdkYXknXG4gICAqIGFza3MgJ3doYXQgZGF0ZXMgYXJlIGluY2x1ZGVkIGluIHRoaXMgaW50ZXJ2YWw/Jywgbm90ICdob3cgbWFueSBkYXlzIGxvbmcgaXMgdGhpcyBpbnRlcnZhbD8nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdD0nbWlsbGlzZWNvbmRzJ10gLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBjb3VudCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydC5zdGFydE9mKHVuaXQpLFxuICAgICAgZW5kID0gdGhpcy5lbmQuc3RhcnRPZih1bml0KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpKSArIChlbmQudmFsdWVPZigpICE9PSB0aGlzLmVuZC52YWx1ZU9mKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgYW5kIGVuZCBhcmUgYm90aCBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNTYW1lKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5lLm1pbnVzKDEpLmhhc1NhbWUodGhpcy5zLCB1bml0KSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgRGF0ZVRpbWVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zLnZhbHVlT2YoKSA9PT0gdGhpcy5lLnZhbHVlT2YoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPiBkYXRlVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCZWZvcmUoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmUgPD0gZGF0ZVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBjb250YWlucyB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgY29udGFpbnMoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPD0gZGF0ZVRpbWUgJiYgdGhpcy5lID4gZGF0ZVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRzXCIgdGhlIHN0YXJ0IGFuZC9vciBlbmQgZGF0ZXMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAtIHRoZSB2YWx1ZXMgdG8gc2V0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5zdGFydCAtIHRoZSBzdGFydGluZyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSB2YWx1ZXMuZW5kIC0gdGhlIGVuZGluZyBEYXRlVGltZVxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHNldCh7IHN0YXJ0LCBlbmQgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0IHx8IHRoaXMucywgZW5kIHx8IHRoaXMuZSk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBhdCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3BsaXRBdCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNvcnRlZCA9IGRhdGVUaW1lc1xuICAgICAgICAubWFwKGZyaWVuZGx5RGF0ZVRpbWUpXG4gICAgICAgIC5maWx0ZXIoKGQpID0+IHRoaXMuY29udGFpbnMoZCkpXG4gICAgICAgIC5zb3J0KCksXG4gICAgICByZXN1bHRzID0gW107XG4gICAgbGV0IHsgcyB9ID0gdGhpcyxcbiAgICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIGNvbnN0IGFkZGVkID0gc29ydGVkW2ldIHx8IHRoaXMuZSxcbiAgICAgICAgbmV4dCA9ICthZGRlZCA+ICt0aGlzLmUgPyB0aGlzLmUgOiBhZGRlZDtcbiAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIG5leHQpKTtcbiAgICAgIHMgPSBuZXh0O1xuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgaW50byBzbWFsbGVyIEludGVydmFscywgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cbiAgICogTGVmdCBvdmVyIHRpbWUgaXMgZ3JvdXBlZCBpbnRvIGEgc21hbGxlciBpbnRlcnZhbFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGxlbmd0aCBvZiBlYWNoIHJlc3VsdGluZyBpbnRlcnZhbC5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzcGxpdEJ5KGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbik7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhZHVyLmlzVmFsaWQgfHwgZHVyLmFzKFwibWlsbGlzZWNvbmRzXCIpID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IHsgcyB9ID0gdGhpcyxcbiAgICAgIGlkeCA9IDEsXG4gICAgICBuZXh0O1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChzIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHRoaXMuc3RhcnQucGx1cyhkdXIubWFwVW5pdHMoKHgpID0+IHggKiBpZHgpKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICAgIGlkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgaW50byB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBzbWFsbGVyIGludGVydmFscy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlck9mUGFydHMgLSBUaGUgbnVtYmVyIG9mIEludGVydmFscyB0byBkaXZpZGUgdGhlIEludGVydmFsIGludG8uXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZGl2aWRlRXF1YWxseShudW1iZXJPZlBhcnRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gdGhpcy5zcGxpdEJ5KHRoaXMubGVuZ3RoKCkgLyBudW1iZXJPZlBhcnRzKS5zbGljZSgwLCBudW1iZXJPZlBhcnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbFxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgb3ZlcmxhcHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lID4gb3RoZXIucyAmJiB0aGlzLnMgPCBvdGhlci5lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBlbmQgaXMgYWRqYWNlbnQgdG8gdGhlIHNwZWNpZmllZCBJbnRlcnZhbCdzIHN0YXJ0LlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgYWJ1dHNTdGFydChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICt0aGlzLmUgPT09ICtvdGhlci5zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3MgZW5kLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgYWJ1dHNFbmQob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiArb3RoZXIuZSA9PT0gK3RoaXMucztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGVuZ3VsZnMgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVuZ3VsZnMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPD0gb3RoZXIucyAmJiB0aGlzLmUgPj0gb3RoZXIuZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIGFzIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnMuZXF1YWxzKG90aGVyLnMpICYmIHRoaXMuZS5lcXVhbHMob3RoZXIuZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgYW5kIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHJlc3VsdGluZyBJbnRlcnZhbCBoYXMgdGhlIG1heGltdW0gc3RhcnQgdGltZSBhbmQgdGhlIG1pbmltdW0gZW5kIHRpbWUgb2YgdGhlIHR3byBJbnRlcnZhbHMuXG4gICAqIFJldHVybnMgbnVsbCBpZiB0aGUgaW50ZXJzZWN0aW9uIGlzIGVtcHR5LCBtZWFuaW5nLCB0aGUgaW50ZXJ2YWxzIGRvbid0IGludGVyc2VjdC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBpbnRlcnNlY3Rpb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgcyA9IHRoaXMucyA+IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgZSA9IHRoaXMuZSA8IG90aGVyLmUgPyB0aGlzLmUgOiBvdGhlci5lO1xuXG4gICAgaWYgKHMgPj0gZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSB1bmlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtaW5pbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtYXhpbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHVuaW9uKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHMgPSB0aGlzLnMgPCBvdGhlci5zID8gdGhpcy5zIDogb3RoZXIucyxcbiAgICAgIGUgPSB0aGlzLmUgPiBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSBhbiBhcnJheSBvZiBJbnRlcnZhbHMgaW50byBhIGVxdWl2YWxlbnQgbWluaW1hbCBzZXQgb2YgSW50ZXJ2YWxzLlxuICAgKiBDb21iaW5lcyBvdmVybGFwcGluZyBhbmQgYWRqYWNlbnQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0FycmF5fSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgbWVyZ2UoaW50ZXJ2YWxzKSB7XG4gICAgY29uc3QgW2ZvdW5kLCBmaW5hbF0gPSBpbnRlcnZhbHNcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnMgLSBiLnMpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoW3NvZmFyLCBjdXJyZW50XSwgaXRlbSkgPT4ge1xuICAgICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtzb2ZhciwgaXRlbV07XG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtzb2ZhciwgY3VycmVudC51bmlvbihpdGVtKV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1tdLCBudWxsXVxuICAgICAgKTtcbiAgICBpZiAoZmluYWwpIHtcbiAgICAgIGZvdW5kLnB1c2goZmluYWwpO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIEludGVydmFscyByZXByZXNlbnRpbmcgdGhlIHNwYW5zIG9mIHRpbWUgdGhhdCBvbmx5IGFwcGVhciBpbiBvbmUgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyB4b3IoaW50ZXJ2YWxzKSB7XG4gICAgbGV0IHN0YXJ0ID0gbnVsbCxcbiAgICAgIGN1cnJlbnRDb3VudCA9IDA7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdLFxuICAgICAgZW5kcyA9IGludGVydmFscy5tYXAoKGkpID0+IFtcbiAgICAgICAgeyB0aW1lOiBpLnMsIHR5cGU6IFwic1wiIH0sXG4gICAgICAgIHsgdGltZTogaS5lLCB0eXBlOiBcImVcIiB9LFxuICAgICAgXSksXG4gICAgICBmbGF0dGVuZWQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLmVuZHMpLFxuICAgICAgYXJyID0gZmxhdHRlbmVkLnNvcnQoKGEsIGIpID0+IGEudGltZSAtIGIudGltZSk7XG5cbiAgICBmb3IgKGNvbnN0IGkgb2YgYXJyKSB7XG4gICAgICBjdXJyZW50Q291bnQgKz0gaS50eXBlID09PSBcInNcIiA/IDEgOiAtMTtcblxuICAgICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IGkudGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGFydCAmJiArc3RhcnQgIT09ICtpLnRpbWUpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCwgaS50aW1lKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEludGVydmFsLm1lcmdlKHJlc3VsdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIHNwYW4gb2YgdGltZSBpbiB0aGlzIEludGVydmFsIHRoYXQgZG9lc24ndCBvdmVybGFwIHdpdGggYW55IG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0gey4uLkludGVydmFsfSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBkaWZmZXJlbmNlKC4uLmludGVydmFscykge1xuICAgIHJldHVybiBJbnRlcnZhbC54b3IoW3RoaXNdLmNvbmNhdChpbnRlcnZhbHMpKVxuICAgICAgLm1hcCgoaSkgPT4gdGhpcy5pbnRlcnNlY3Rpb24oaSkpXG4gICAgICAuZmlsdGVyKChpKSA9PiBpICYmICFpLmlzRW1wdHkoKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGFwcHJvcHJpYXRlIGZvciBkZWJ1Z2dpbmcuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiBgWyR7dGhpcy5zLnRvSVNPKCl9IOKAkyAke3RoaXMuZS50b0lTTygpfSlgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIEludGVydmFsLiBBY2NlcHRzIHRoZSBzYW1lIG9wdGlvbnMgYXMgdGhlXG4gICAqIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3IgYW5kIGFueSBwcmVzZXRzIGRlZmluZWQgYnkgTHV4b24sIHN1Y2ggYXNcbiAgICoge0BsaW5rIERhdGVUaW1lLkRBVEVfRlVMTH0gb3Ige0BsaW5rIERhdGVUaW1lLlRJTUVfU0lNUExFfS4gVGhlIGV4YWN0IGJlaGF2aW9yIG9mIHRoaXMgbWV0aG9kXG4gICAqIGlzIGJyb3dzZXItc3BlY2lmaWMsIGJ1dCBpbiBnZW5lcmFsIGl0IHdpbGwgcmV0dXJuIGFuIGFwcHJvcHJpYXRlIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgKiBJbnRlcnZhbCBpbiB0aGUgYXNzaWduZWQgbG9jYWxlLiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlblxuICAgKiBzcGVjaWZpZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtmb3JtYXRPcHRzPURhdGVUaW1lLkRBVEVfU0hPUlRdIC0gRWl0aGVyIGEgRGF0ZVRpbWUgcHJlc2V0IG9yXG4gICAqIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3Igb3B0aW9ucy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBzdGFydCBEYXRlVGltZS5cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbUlTTygnMjAyMi0xMS0wN1QwOTowMFovMjAyMi0xMS0wOFQwOTowMFonKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDExLzcvMjAyMiDigJMgMTEvOC8yMDIyXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21JU08oJzIwMjItMTEtMDdUMDk6MDBaLzIwMjItMTEtMDhUMDk6MDBaJykudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMKTsgLy89PiBOb3ZlbWJlciA3IOKAkyA4LCAyMDIyXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21JU08oJzIwMjItMTEtMDdUMDk6MDBaLzIwMjItMTEtMDhUMDk6MDBaJykudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMLCB7IGxvY2FsZTogJ2ZyLUZSJyB9KTsgLy89PiA34oCTOCBub3ZlbWJyZSAyMDIyXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21JU08oJzIwMjItMTEtMDdUMTc6MDBaLzIwMjItMTEtMDdUMTk6MDBaJykudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV9TSU1QTEUpOyAvLz0+IDY6MDAg4oCTIDg6MDAgUE1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbUlTTygnMjAyMi0xMS0wN1QxNzowMFovMjAyMi0xMS0wN1QxOTowMFonKS50b0xvY2FsZVN0cmluZyh7IHdlZWtkYXk6ICdzaG9ydCcsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICcyLWRpZ2l0JywgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KTsgLy89PiBNb24sIE5vdiAwNywgNjowMCDigJMgODowMCBwXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvTG9jYWxlU3RyaW5nKGZvcm1hdE9wdHMgPSBEQVRFX1NIT1JULCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5zLmxvYy5jbG9uZShvcHRzKSwgZm9ybWF0T3B0cykuZm9ybWF0SW50ZXJ2YWwodGhpcylcbiAgICAgIDogSU5WQUxJRCQxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIHNhbWUgb3B0aW9ucyBhcyB7QGxpbmsgRGF0ZVRpbWUjdG9JU099XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPKG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPKG9wdHMpfS8ke3RoaXMuZS50b0lTTyhvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBkYXRlIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSB0aW1lIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09EYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09EYXRlKCl9LyR7dGhpcy5lLnRvSVNPRGF0ZSgpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRpbWUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIGRhdGUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBzYW1lIG9wdGlvbnMgYXMge0BsaW5rIERhdGVUaW1lI3RvSVNPfVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1RpbWUob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09UaW1lKG9wdHMpfS8ke3RoaXMuZS50b0lTT1RpbWUob3B0cyl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdFxuICAgKiBzdHJpbmcuICoqWW91IG1heSBub3Qgd2FudCB0aGlzLioqIFNlZSB7QGxpbmsgSW50ZXJ2YWwjdG9Mb2NhbGVTdHJpbmd9IGZvciBhIG1vcmUgZmxleGlibGVcbiAgICogZm9ybWF0dGluZyB0b29sLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0ZUZvcm1hdCAtIFRoZSBmb3JtYXQgc3RyaW5nLiBUaGlzIHN0cmluZyBmb3JtYXRzIHRoZSBzdGFydCBhbmQgZW5kIHRpbWUuXG4gICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9IGZvciBkZXRhaWxzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIE9wdGlvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zZXBhcmF0b3IgPSAgJyDigJMgJ10gLSBBIHNlcGFyYXRvciB0byBwbGFjZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kXG4gICAqIHJlcHJlc2VudGF0aW9ucy5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9Gb3JtYXQoZGF0ZUZvcm1hdCwgeyBzZXBhcmF0b3IgPSBcIiDigJMgXCIgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDE7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0Zvcm1hdChkYXRlRm9ybWF0KX0ke3NlcGFyYXRvcn0ke3RoaXMuZS50b0Zvcm1hdChkYXRlRm9ybWF0KX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIER1cmF0aW9uIHJlcHJlc2VudGluZyB0aGUgdGltZSBzcGFubmVkIGJ5IHRoaXMgaW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDg4NDg5MjU3IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignZGF5cycpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDEuMDI0MTgxMjE1Mjc3Nzc3OCB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQuODIwOTUgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcycsICdzZWNvbmRzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQsIHNlY29uZHM6IDQ5LjI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ3NlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBzZWNvbmRzOiA4ODQ4OS4yNTcgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHRvRHVyYXRpb24odW5pdCwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCh0aGlzLmludmFsaWRSZWFzb24pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lLmRpZmYodGhpcy5zLCB1bml0LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gbWFwRm4gb24gdGhlIGludGVydmFsIHN0YXJ0IGFuZCBlbmQsIHJldHVybmluZyBhIG5ldyBJbnRlcnZhbCBmcm9tIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1hcEZuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQudG9VVEMoKSlcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikubWFwRW5kcG9pbnRzKGVuZHBvaW50ID0+IGVuZHBvaW50LnBsdXMoeyBob3VyczogMiB9KSlcbiAgICovXG4gIG1hcEVuZHBvaW50cyhtYXBGbikge1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKG1hcEZuKHRoaXMucyksIG1hcEZuKHRoaXMuZSkpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIEluZm8gY2xhc3MgY29udGFpbnMgc3RhdGljIG1ldGhvZHMgZm9yIHJldHJpZXZpbmcgZ2VuZXJhbCB0aW1lIGFuZCBkYXRlIHJlbGF0ZWQgZGF0YS4gRm9yIGV4YW1wbGUsIGl0IGhhcyBtZXRob2RzIGZvciBmaW5kaW5nIG91dCBpZiBhIHRpbWUgem9uZSBoYXMgYSBEU1QsIGZvciBsaXN0aW5nIHRoZSBtb250aHMgaW4gYW55IHN1cHBvcnRlZCBsb2NhbGUsIGFuZCBmb3IgZGlzY292ZXJpbmcgd2hpY2ggb2YgTHV4b24gZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqL1xuY2xhc3MgSW5mbyB7XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgY29udGFpbnMgYSBEU1QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFt6b25lPSdsb2NhbCddIC0gWm9uZSB0byBjaGVjay4gRGVmYXVsdHMgdG8gdGhlIGVudmlyb25tZW50J3MgbG9jYWwgem9uZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBoYXNEU1Qoem9uZSA9IFNldHRpbmdzLmRlZmF1bHRab25lKSB7XG4gICAgY29uc3QgcHJvdG8gPSBEYXRlVGltZS5ub3coKS5zZXRab25lKHpvbmUpLnNldCh7IG1vbnRoOiAxMiB9KTtcblxuICAgIHJldHVybiAhem9uZS5pc1VuaXZlcnNhbCAmJiBwcm90by5vZmZzZXQgIT09IHByb3RvLnNldCh7IG1vbnRoOiA2IH0pLm9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBab25lIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZElBTkFab25lKHpvbmUpIHtcbiAgICByZXR1cm4gSUFOQVpvbmUuaXNWYWxpZFpvbmUoem9uZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGlucHV0IGludG8gYSB7QGxpbmsgWm9uZX0gaW5zdGFuY2UuXG4gICAqXG4gICAqICogSWYgYGlucHV0YCBpcyBhbHJlYWR5IGEgWm9uZSBpbnN0YW5jZSwgaXQgaXMgcmV0dXJuZWQgdW5jaGFuZ2VkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgY29udGFpbmluZyBhIHZhbGlkIHRpbWUgem9uZSBuYW1lLCBhIFpvbmUgaW5zdGFuY2VcbiAgICogICB3aXRoIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXRgIGlzIGEgc3RyaW5nIHRoYXQgZG9lc24ndCByZWZlciB0byBhIGtub3duIHRpbWUgem9uZSwgYSBab25lXG4gICAqICAgaW5zdGFuY2Ugd2l0aCB7QGxpbmsgWm9uZSNpc1ZhbGlkfSA9PSBmYWxzZSBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXQgaXMgYSBudW1iZXIsIGEgWm9uZSBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgZml4ZWQgb2Zmc2V0XG4gICAqICAgaW4gbWludXRlcyBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXRgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgdGhlIGRlZmF1bHQgem9uZSBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZXxudW1iZXJ9IFtpbnB1dF0gLSB0aGUgdmFsdWUgdG8gYmUgY29udmVydGVkXG4gICAqIEByZXR1cm4ge1pvbmV9XG4gICAqL1xuICBzdGF0aWMgbm9ybWFsaXplWm9uZShpbnB1dCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIHN0YW5kYWxvbmUgbW9udGggbmFtZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygpWzBdIC8vPT4gJ0phbnVhcnknXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdzaG9ydCcpWzBdIC8vPT4gJ0phbidcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ251bWVyaWMnKVswXSAvLz0+ICcxJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnLCB7IGxvY2FsZTogJ2ZyLUNBJyB9IClbMF0gLy89PiAnamFudi4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2aEnXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdsb25nJywgeyBvdXRwdXRDYWxlbmRhcjogJ2lzbGFtaWMnIH0pWzBdIC8vPT4gJ1JhYmnKuyBJJ1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtb250aHMoXG4gICAgbGVuZ3RoID0gXCJsb25nXCIsXG4gICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsLCBvdXRwdXRDYWxlbmRhciA9IFwiZ3JlZ29yeVwiIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikpLm1vbnRocyhsZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgbW9udGggbmFtZXMuXG4gICAqIEZvcm1hdCBtb250aHMgZGlmZmVyIGZyb20gc3RhbmRhbG9uZSBtb250aHMgaW4gdGhhdCB0aGV5J3JlIG1lYW50IHRvIGFwcGVhciBuZXh0IHRvIHRoZSBkYXkgb2YgdGhlIG1vbnRoLiBJbiBzb21lIGxhbmd1YWdlcywgdGhhdFxuICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuXG4gICAqIFNlZSB7QGxpbmsgSW5mbyNtb250aHN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgbW9udGhzRm9ybWF0KFxuICAgIGxlbmd0aCA9IFwibG9uZ1wiLFxuICAgIHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbCwgb3V0cHV0Q2FsZW5kYXIgPSBcImdyZWdvcnlcIiB9ID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSB3ZWVrIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSB3ZWVrZGF5IHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JylbMF0gLy89PiAnTW9uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0pWzBdIC8vPT4gJ2x1bi4nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2KfZhNin2KvZhtmK2YYnXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHdlZWtkYXlzKGxlbmd0aCA9IFwibG9uZ1wiLCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIGxvY09iaiA9IG51bGwgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkpLndlZWtkYXlzKGxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCB3ZWVrIG5hbWVzLlxuICAgKiBGb3JtYXQgd2Vla2RheXMgZGlmZmVyIGZyb20gc3RhbmRhbG9uZSB3ZWVrZGF5cyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gbW9yZSBkYXRlIGluZm9ybWF0aW9uLiBJbiBzb21lIGxhbmd1YWdlcywgdGhhdFxuICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuXG4gICAqIFNlZSB7QGxpbmsgSW5mbyN3ZWVrZGF5c31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPW51bGxdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgd2Vla2RheXNGb3JtYXQoXG4gICAgbGVuZ3RoID0gXCJsb25nXCIsXG4gICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgbWVyaWRpZW1zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5tZXJpZGllbXMoKSAvLz0+IFsgJ0FNJywgJ1BNJyBdXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKHsgbG9jYWxlOiAnbXknIH0pIC8vPT4gWyAn4YCU4YC24YCU4YCA4YC6JywgJ+GAiuGAlOGAsScgXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtZXJpZGllbXMoeyBsb2NhbGUgPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSkubWVyaWRpZW1zKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGVyYXMsIHN1Y2ggYXMgWydCQycsICdBRCddLiBUaGUgbG9jYWxlIGNhbiBiZSBzcGVjaWZpZWQsIGJ1dCB0aGUgY2FsZW5kYXIgc3lzdGVtIGlzIGFsd2F5cyBHcmVnb3JpYW4uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdzaG9ydCddIC0gdGhlIGxlbmd0aCBvZiB0aGUgZXJhIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwic2hvcnRcIiBvciBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygpIC8vPT4gWyAnQkMnLCAnQUQnIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJykgLy89PiBbICdCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJyBdXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygnbG9uZycsIHsgbG9jYWxlOiAnZnInIH0pIC8vPT4gWyAnYXZhbnQgSsOpc3VzLUNocmlzdCcsICdhcHLDqHMgSsOpc3VzLUNocmlzdCcgXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBlcmFzKGxlbmd0aCA9IFwic2hvcnRcIiwgeyBsb2NhbGUgPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVsbCwgXCJncmVnb3J5XCIpLmVyYXMobGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAgICogU29tZSBmZWF0dXJlcyBvZiBMdXhvbiBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgZW52aXJvbm1lbnRzLiBGb3IgZXhhbXBsZSwgb24gb2xkZXIgYnJvd3NlcnMsIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGluZyBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmdcbiAgICogQGV4YW1wbGUgSW5mby5mZWF0dXJlcygpIC8vPT4geyByZWxhdGl2ZTogZmFsc2UgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZmVhdHVyZXMoKSB7XG4gICAgcmV0dXJuIHsgcmVsYXRpdmU6IGhhc1JlbGF0aXZlKCkgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXlEaWZmKGVhcmxpZXIsIGxhdGVyKSB7XG4gIGNvbnN0IHV0Y0RheVN0YXJ0ID0gKGR0KSA9PiBkdC50b1VUQygwLCB7IGtlZXBMb2NhbFRpbWU6IHRydWUgfSkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCksXG4gICAgbXMgPSB1dGNEYXlTdGFydChsYXRlcikgLSB1dGNEYXlTdGFydChlYXJsaWVyKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoRHVyYXRpb24uZnJvbU1pbGxpcyhtcykuYXMoXCJkYXlzXCIpKTtcbn1cblxuZnVuY3Rpb24gaGlnaE9yZGVyRGlmZnMoY3Vyc29yLCBsYXRlciwgdW5pdHMpIHtcbiAgY29uc3QgZGlmZmVycyA9IFtcbiAgICBbXCJ5ZWFyc1wiLCAoYSwgYikgPT4gYi55ZWFyIC0gYS55ZWFyXSxcbiAgICBbXCJxdWFydGVyc1wiLCAoYSwgYikgPT4gYi5xdWFydGVyIC0gYS5xdWFydGVyICsgKGIueWVhciAtIGEueWVhcikgKiA0XSxcbiAgICBbXCJtb250aHNcIiwgKGEsIGIpID0+IGIubW9udGggLSBhLm1vbnRoICsgKGIueWVhciAtIGEueWVhcikgKiAxMl0sXG4gICAgW1xuICAgICAgXCJ3ZWVrc1wiLFxuICAgICAgKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgZGF5cyA9IGRheURpZmYoYSwgYik7XG4gICAgICAgIHJldHVybiAoZGF5cyAtIChkYXlzICUgNykpIC8gNztcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbXCJkYXlzXCIsIGRheURpZmZdLFxuICBdO1xuXG4gIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgY29uc3QgZWFybGllciA9IGN1cnNvcjtcbiAgbGV0IGxvd2VzdE9yZGVyLCBoaWdoV2F0ZXI7XG5cbiAgLyogVGhpcyBsb29wIHRyaWVzIHRvIGRpZmYgdXNpbmcgbGFyZ2VyIHVuaXRzIGZpcnN0LlxuICAgICBJZiB3ZSBvdmVyc2hvb3QsIHdlIGJhY2t0cmFjayBhbmQgdHJ5IHRoZSBuZXh0IHNtYWxsZXIgdW5pdC5cbiAgICAgXCJjdXJzb3JcIiBzdGFydHMgb3V0IGF0IHRoZSBlYXJsaWVyIHRpbWVzdGFtcCBhbmQgbW92ZXMgY2xvc2VyIGFuZCBjbG9zZXIgdG8gXCJsYXRlclwiXG4gICAgIGFzIHdlIHVzZSBzbWFsbGVyIGFuZCBzbWFsbGVyIHVuaXRzLlxuICAgICBoaWdoV2F0ZXIga2VlcHMgdHJhY2sgb2Ygd2hlcmUgd2Ugd291bGQgYmUgaWYgd2UgYWRkZWQgb25lIG1vcmUgb2YgdGhlIHNtYWxsZXN0IHVuaXQsXG4gICAgIHRoaXMgaXMgdXNlZCBsYXRlciB0byBwb3RlbnRpYWxseSBjb252ZXJ0IGFueSBkaWZmZXJlbmNlIHNtYWxsZXIgdGhhbiB0aGUgc21hbGxlc3QgaGlnaGVyIG9yZGVyIHVuaXRcbiAgICAgaW50byBhIGZyYWN0aW9uIG9mIHRoYXQgc21hbGxlc3QgaGlnaGVyIG9yZGVyIHVuaXRcbiAgKi9cbiAgZm9yIChjb25zdCBbdW5pdCwgZGlmZmVyXSBvZiBkaWZmZXJzKSB7XG4gICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkge1xuICAgICAgbG93ZXN0T3JkZXIgPSB1bml0O1xuXG4gICAgICByZXN1bHRzW3VuaXRdID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpO1xuICAgICAgaGlnaFdhdGVyID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuXG4gICAgICBpZiAoaGlnaFdhdGVyID4gbGF0ZXIpIHtcbiAgICAgICAgLy8gd2Ugb3ZlcnNob3QgdGhlIGVuZCBwb2ludCwgYmFja3RyYWNrIGN1cnNvciBieSAxXG4gICAgICAgIHJlc3VsdHNbdW5pdF0tLTtcbiAgICAgICAgY3Vyc29yID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuXG4gICAgICAgIC8vIGlmIHdlIGFyZSBzdGlsbCBvdmVyc2hvb3Rpbmcgbm93LCB3ZSBuZWVkIHRvIGJhY2t0cmFjayBhZ2FpblxuICAgICAgICAvLyB0aGlzIGhhcHBlbnMgaW4gY2VydGFpbiBzaXR1YXRpb25zIHdoZW4gZGlmZmluZyB0aW1lcyBpbiBkaWZmZXJlbnQgem9uZXMsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhpcyBjYWxjdWxhdGlvbiBpZ25vcmVzIHRpbWUgem9uZXNcbiAgICAgICAgaWYgKGN1cnNvciA+IGxhdGVyKSB7XG4gICAgICAgICAgLy8ga2VlcCB0aGUgXCJvdmVyc2hvdCBieSAxXCIgYXJvdW5kIGFzIGhpZ2hXYXRlclxuICAgICAgICAgIGhpZ2hXYXRlciA9IGN1cnNvcjtcbiAgICAgICAgICAvLyBiYWNrdHJhY2sgY3Vyc29yIGJ5IDFcbiAgICAgICAgICByZXN1bHRzW3VuaXRdLS07XG4gICAgICAgICAgY3Vyc29yID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJzb3IgPSBoaWdoV2F0ZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdO1xufVxuXG5mdW5jdGlvbiBkaWZmIChlYXJsaWVyLCBsYXRlciwgdW5pdHMsIG9wdHMpIHtcbiAgbGV0IFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdID0gaGlnaE9yZGVyRGlmZnMoZWFybGllciwgbGF0ZXIsIHVuaXRzKTtcblxuICBjb25zdCByZW1haW5pbmdNaWxsaXMgPSBsYXRlciAtIGN1cnNvcjtcblxuICBjb25zdCBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIoXG4gICAgKHUpID0+IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIiwgXCJtaWxsaXNlY29uZHNcIl0uaW5kZXhPZih1KSA+PSAwXG4gICk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaGlnaFdhdGVyIDwgbGF0ZXIpIHtcbiAgICAgIGhpZ2hXYXRlciA9IGN1cnNvci5wbHVzKHsgW2xvd2VzdE9yZGVyXTogMSB9KTtcbiAgICB9XG5cbiAgICBpZiAoaGlnaFdhdGVyICE9PSBjdXJzb3IpIHtcbiAgICAgIHJlc3VsdHNbbG93ZXN0T3JkZXJdID0gKHJlc3VsdHNbbG93ZXN0T3JkZXJdIHx8IDApICsgcmVtYWluaW5nTWlsbGlzIC8gKGhpZ2hXYXRlciAtIGN1cnNvcik7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZHVyYXRpb24gPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHJlc3VsdHMsIG9wdHMpO1xuXG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKHJlbWFpbmluZ01pbGxpcywgb3B0cylcbiAgICAgIC5zaGlmdFRvKC4uLmxvd2VyT3JkZXJVbml0cylcbiAgICAgIC5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cblxuY29uc3QgbnVtYmVyaW5nU3lzdGVtcyA9IHtcbiAgYXJhYjogXCJbXFx1MDY2MC1cXHUwNjY5XVwiLFxuICBhcmFiZXh0OiBcIltcXHUwNkYwLVxcdTA2RjldXCIsXG4gIGJhbGk6IFwiW1xcdTFCNTAtXFx1MUI1OV1cIixcbiAgYmVuZzogXCJbXFx1MDlFNi1cXHUwOUVGXVwiLFxuICBkZXZhOiBcIltcXHUwOTY2LVxcdTA5NkZdXCIsXG4gIGZ1bGx3aWRlOiBcIltcXHVGRjEwLVxcdUZGMTldXCIsXG4gIGd1anI6IFwiW1xcdTBBRTYtXFx1MEFFRl1cIixcbiAgaGFuaWRlYzogXCJb44CHfOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdXVwiLFxuICBraG1yOiBcIltcXHUxN0UwLVxcdTE3RTldXCIsXG4gIGtuZGE6IFwiW1xcdTBDRTYtXFx1MENFRl1cIixcbiAgbGFvbzogXCJbXFx1MEVEMC1cXHUwRUQ5XVwiLFxuICBsaW1iOiBcIltcXHUxOTQ2LVxcdTE5NEZdXCIsXG4gIG1seW06IFwiW1xcdTBENjYtXFx1MEQ2Rl1cIixcbiAgbW9uZzogXCJbXFx1MTgxMC1cXHUxODE5XVwiLFxuICBteW1yOiBcIltcXHUxMDQwLVxcdTEwNDldXCIsXG4gIG9yeWE6IFwiW1xcdTBCNjYtXFx1MEI2Rl1cIixcbiAgdGFtbGRlYzogXCJbXFx1MEJFNi1cXHUwQkVGXVwiLFxuICB0ZWx1OiBcIltcXHUwQzY2LVxcdTBDNkZdXCIsXG4gIHRoYWk6IFwiW1xcdTBFNTAtXFx1MEU1OV1cIixcbiAgdGlidDogXCJbXFx1MEYyMC1cXHUwRjI5XVwiLFxuICBsYXRuOiBcIlxcXFxkXCIsXG59O1xuXG5jb25zdCBudW1iZXJpbmdTeXN0ZW1zVVRGMTYgPSB7XG4gIGFyYWI6IFsxNjMyLCAxNjQxXSxcbiAgYXJhYmV4dDogWzE3NzYsIDE3ODVdLFxuICBiYWxpOiBbNjk5MiwgNzAwMV0sXG4gIGJlbmc6IFsyNTM0LCAyNTQzXSxcbiAgZGV2YTogWzI0MDYsIDI0MTVdLFxuICBmdWxsd2lkZTogWzY1Mjk2LCA2NTMwM10sXG4gIGd1anI6IFsyNzkwLCAyNzk5XSxcbiAga2htcjogWzYxMTIsIDYxMjFdLFxuICBrbmRhOiBbMzMwMiwgMzMxMV0sXG4gIGxhb286IFszNzkyLCAzODAxXSxcbiAgbGltYjogWzY0NzAsIDY0NzldLFxuICBtbHltOiBbMzQzMCwgMzQzOV0sXG4gIG1vbmc6IFs2MTYwLCA2MTY5XSxcbiAgbXltcjogWzQxNjAsIDQxNjldLFxuICBvcnlhOiBbMjkxOCwgMjkyN10sXG4gIHRhbWxkZWM6IFszMDQ2LCAzMDU1XSxcbiAgdGVsdTogWzMxNzQsIDMxODNdLFxuICB0aGFpOiBbMzY2NCwgMzY3M10sXG4gIHRpYnQ6IFszODcyLCAzODgxXSxcbn07XG5cbmNvbnN0IGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5cbmZ1bmN0aW9uIHBhcnNlRGlnaXRzKHN0cikge1xuICBsZXQgdmFsdWUgPSBwYXJzZUludChzdHIsIDEwKTtcbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICBpZiAoc3RyW2ldLnNlYXJjaChudW1iZXJpbmdTeXN0ZW1zLmhhbmlkZWMpICE9PSAtMSkge1xuICAgICAgICB2YWx1ZSArPSBoYW5pZGVjQ2hhcnMuaW5kZXhPZihzdHJbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbnVtYmVyaW5nU3lzdGVtc1VURjE2KSB7XG4gICAgICAgICAgY29uc3QgW21pbiwgbWF4XSA9IG51bWJlcmluZ1N5c3RlbXNVVEYxNltrZXldO1xuICAgICAgICAgIGlmIChjb2RlID49IG1pbiAmJiBjb2RlIDw9IG1heCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gY29kZSAtIG1pbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZ2l0UmVnZXgoeyBudW1iZXJpbmdTeXN0ZW0gfSwgYXBwZW5kID0gXCJcIikge1xuICByZXR1cm4gbmV3IFJlZ0V4cChgJHtudW1iZXJpbmdTeXN0ZW1zW251bWJlcmluZ1N5c3RlbSB8fCBcImxhdG5cIl19JHthcHBlbmR9YCk7XG59XG5cbmNvbnN0IE1JU1NJTkdfRlRQID0gXCJtaXNzaW5nIEludGwuRGF0ZVRpbWVGb3JtYXQuZm9ybWF0VG9QYXJ0cyBzdXBwb3J0XCI7XG5cbmZ1bmN0aW9uIGludFVuaXQocmVnZXgsIHBvc3QgPSAoaSkgPT4gaSkge1xuICByZXR1cm4geyByZWdleCwgZGVzZXI6IChbc10pID0+IHBvc3QocGFyc2VEaWdpdHMocykpIH07XG59XG5cbmNvbnN0IE5CU1AgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDE2MCk7XG5jb25zdCBzcGFjZU9yTkJTUCA9IGBbICR7TkJTUH1dYDtcbmNvbnN0IHNwYWNlT3JOQlNQUmVnRXhwID0gbmV3IFJlZ0V4cChzcGFjZU9yTkJTUCwgXCJnXCIpO1xuXG5mdW5jdGlvbiBmaXhMaXN0UmVnZXgocykge1xuICAvLyBtYWtlIGRvdHMgb3B0aW9uYWwgYW5kIGFsc28gbWFrZSB0aGVtIGxpdGVyYWxcbiAgLy8gbWFrZSBzcGFjZSBhbmQgbm9uIGJyZWFrYWJsZSBzcGFjZSBjaGFyYWN0ZXJzIGludGVyY2hhbmdlYWJsZVxuICByZXR1cm4gcy5yZXBsYWNlKC9cXC4vZywgXCJcXFxcLj9cIikucmVwbGFjZShzcGFjZU9yTkJTUFJlZ0V4cCwgc3BhY2VPck5CU1ApO1xufVxuXG5mdW5jdGlvbiBzdHJpcEluc2Vuc2l0aXZpdGllcyhzKSB7XG4gIHJldHVybiBzXG4gICAgLnJlcGxhY2UoL1xcLi9nLCBcIlwiKSAvLyBpZ25vcmUgZG90cyB0aGF0IHdlcmUgbWFkZSBvcHRpb25hbFxuICAgIC5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBcIiBcIikgLy8gaW50ZXJjaGFuZ2Ugc3BhY2UgYW5kIG5ic3BcbiAgICAudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gb25lT2Yoc3RyaW5ncywgc3RhcnRJbmRleCkge1xuICBpZiAoc3RyaW5ncyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICByZWdleDogUmVnRXhwKHN0cmluZ3MubWFwKGZpeExpc3RSZWdleCkuam9pbihcInxcIikpLFxuICAgICAgZGVzZXI6IChbc10pID0+XG4gICAgICAgIHN0cmluZ3MuZmluZEluZGV4KChpKSA9PiBzdHJpcEluc2Vuc2l0aXZpdGllcyhzKSA9PT0gc3RyaXBJbnNlbnNpdGl2aXRpZXMoaSkpICsgc3RhcnRJbmRleCxcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIG9mZnNldChyZWdleCwgZ3JvdXBzKSB7XG4gIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFssIGgsIG1dKSA9PiBzaWduZWRPZmZzZXQoaCwgbSksIGdyb3VwcyB9O1xufVxuXG5mdW5jdGlvbiBzaW1wbGUocmVnZXgpIHtcbiAgcmV0dXJuIHsgcmVnZXgsIGRlc2VyOiAoW3NdKSA9PiBzIH07XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVRva2VuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIik7XG59XG5cbi8qKlxuICogQHBhcmFtIHRva2VuXG4gKiBAcGFyYW0ge0xvY2FsZX0gbG9jXG4gKi9cbmZ1bmN0aW9uIHVuaXRGb3JUb2tlbih0b2tlbiwgbG9jKSB7XG4gIGNvbnN0IG9uZSA9IGRpZ2l0UmVnZXgobG9jKSxcbiAgICB0d28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Mn1cIiksXG4gICAgdGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7M31cIiksXG4gICAgZm91ciA9IGRpZ2l0UmVnZXgobG9jLCBcIns0fVwiKSxcbiAgICBzaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Nn1cIiksXG4gICAgb25lT3JUd28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSwyfVwiKSxcbiAgICBvbmVUb1RocmVlID0gZGlnaXRSZWdleChsb2MsIFwiezEsM31cIiksXG4gICAgb25lVG9TaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw2fVwiKSxcbiAgICBvbmVUb05pbmUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw5fVwiKSxcbiAgICB0d29Ub0ZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Miw0fVwiKSxcbiAgICBmb3VyVG9TaXggPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NCw2fVwiKSxcbiAgICBsaXRlcmFsID0gKHQpID0+ICh7IHJlZ2V4OiBSZWdFeHAoZXNjYXBlVG9rZW4odC52YWwpKSwgZGVzZXI6IChbc10pID0+IHMsIGxpdGVyYWw6IHRydWUgfSksXG4gICAgdW5pdGF0ZSA9ICh0KSA9PiB7XG4gICAgICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodC52YWwpIHtcbiAgICAgICAgLy8gZXJhXG4gICAgICAgIGNhc2UgXCJHXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwic2hvcnRcIiksIDApO1xuICAgICAgICBjYXNlIFwiR0dcIjpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLmVyYXMoXCJsb25nXCIpLCAwKTtcbiAgICAgICAgLy8geWVhcnNcbiAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1NpeCk7XG4gICAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3b1RvRm91ciwgdW50cnVuY2F0ZVllYXIpO1xuICAgICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuICAgICAgICBjYXNlIFwieXl5eXlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyVG9TaXgpO1xuICAgICAgICBjYXNlIFwieXl5eXl5XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQoc2l4KTtcbiAgICAgICAgLy8gbW9udGhzXG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCB0cnVlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIHRydWUpLCAxKTtcbiAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJMTFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocyhcInNob3J0XCIsIGZhbHNlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIGZhbHNlKSwgMSk7XG4gICAgICAgIC8vIGRhdGVzXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwiZGRcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICAvLyBvcmRpbmFsc1xuICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpO1xuICAgICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuICAgICAgICAvLyB0aW1lXG4gICAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwiaGhcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcInNzXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcbiAgICAgICAgY2FzZSBcIlNTU1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKG9uZVRvTmluZSk7XG4gICAgICAgIGNhc2UgXCJ1dVwiOlxuICAgICAgICAgIHJldHVybiBzaW1wbGUob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwidXV1XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcbiAgICAgICAgLy8gbWVyaWRpZW1cbiAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLm1lcmlkaWVtcygpLCAwKTtcbiAgICAgICAgLy8gd2Vla1llYXIgKGspXG4gICAgICAgIGNhc2UgXCJra2trXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7XG4gICAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3b1RvRm91ciwgdW50cnVuY2F0ZVllYXIpO1xuICAgICAgICAvLyB3ZWVrTnVtYmVyIChXKVxuICAgICAgICBjYXNlIFwiV1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcIldXXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgLy8gd2Vla2RheXNcbiAgICAgICAgY2FzZSBcIkVcIjpcbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpO1xuICAgICAgICBjYXNlIFwiRUVFXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcInNob3J0XCIsIGZhbHNlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcImxvbmdcIiwgZmFsc2UpLCAxKTtcbiAgICAgICAgY2FzZSBcImNjY1wiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCB0cnVlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJjY2NjXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcImxvbmdcIiwgdHJ1ZSksIDEpO1xuICAgICAgICAvLyBvZmZzZXQvem9uZVxuICAgICAgICBjYXNlIFwiWlwiOlxuICAgICAgICBjYXNlIFwiWlpcIjpcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSg/OjooJHt0d28uc291cmNlfSkpP2ApLCAyKTtcbiAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgIHJldHVybiBvZmZzZXQobmV3IFJlZ0V4cChgKFsrLV0ke29uZU9yVHdvLnNvdXJjZX0pKCR7dHdvLnNvdXJjZX0pP2ApLCAyKTtcbiAgICAgICAgLy8gd2UgZG9uJ3Qgc3VwcG9ydCBaWlpaIChQU1QpIG9yIFpaWlpaIChQYWNpZmljIFN0YW5kYXJkIFRpbWUpIGluIHBhcnNpbmdcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlXG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgcmV0dXJuIHNpbXBsZSgvW2Etel8rLS9dezEsMjU2fT8vaSk7XG4gICAgICAgIC8vIHRoaXMgc3BlY2lhbC1jYXNlIFwidG9rZW5cIiByZXByZXNlbnRzIGEgcGxhY2Ugd2hlcmUgYSBtYWNyby10b2tlbiBleHBhbmRlZCBpbnRvIGEgd2hpdGUtc3BhY2UgbGl0ZXJhbFxuICAgICAgICAvLyBpbiB0aGlzIGNhc2Ugd2UgYWNjZXB0IGFueSBub24tbmV3bGluZSB3aGl0ZS1zcGFjZVxuICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgIHJldHVybiBzaW1wbGUoL1teXFxTXFxuXFxyXS8pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgY29uc3QgdW5pdCA9IHVuaXRhdGUodG9rZW4pIHx8IHtcbiAgICBpbnZhbGlkUmVhc29uOiBNSVNTSU5HX0ZUUCxcbiAgfTtcblxuICB1bml0LnRva2VuID0gdG9rZW47XG5cbiAgcmV0dXJuIHVuaXQ7XG59XG5cbmNvbnN0IHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsID0ge1xuICB5ZWFyOiB7XG4gICAgXCIyLWRpZ2l0XCI6IFwieXlcIixcbiAgICBudW1lcmljOiBcInl5eXl5XCIsXG4gIH0sXG4gIG1vbnRoOiB7XG4gICAgbnVtZXJpYzogXCJNXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiTU1cIixcbiAgICBzaG9ydDogXCJNTU1cIixcbiAgICBsb25nOiBcIk1NTU1cIixcbiAgfSxcbiAgZGF5OiB7XG4gICAgbnVtZXJpYzogXCJkXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiZGRcIixcbiAgfSxcbiAgd2Vla2RheToge1xuICAgIHNob3J0OiBcIkVFRVwiLFxuICAgIGxvbmc6IFwiRUVFRVwiLFxuICB9LFxuICBkYXlwZXJpb2Q6IFwiYVwiLFxuICBkYXlQZXJpb2Q6IFwiYVwiLFxuICBob3VyMTI6IHtcbiAgICBudW1lcmljOiBcImhcIixcbiAgICBcIjItZGlnaXRcIjogXCJoaFwiLFxuICB9LFxuICBob3VyMjQ6IHtcbiAgICBudW1lcmljOiBcIkhcIixcbiAgICBcIjItZGlnaXRcIjogXCJISFwiLFxuICB9LFxuICBtaW51dGU6IHtcbiAgICBudW1lcmljOiBcIm1cIixcbiAgICBcIjItZGlnaXRcIjogXCJtbVwiLFxuICB9LFxuICBzZWNvbmQ6IHtcbiAgICBudW1lcmljOiBcInNcIixcbiAgICBcIjItZGlnaXRcIjogXCJzc1wiLFxuICB9LFxuICB0aW1lWm9uZU5hbWU6IHtcbiAgICBsb25nOiBcIlpaWlpaXCIsXG4gICAgc2hvcnQ6IFwiWlpaXCIsXG4gIH0sXG59O1xuXG5mdW5jdGlvbiB0b2tlbkZvclBhcnQocGFydCwgZm9ybWF0T3B0cywgcmVzb2x2ZWRPcHRzKSB7XG4gIGNvbnN0IHsgdHlwZSwgdmFsdWUgfSA9IHBhcnQ7XG5cbiAgaWYgKHR5cGUgPT09IFwibGl0ZXJhbFwiKSB7XG4gICAgY29uc3QgaXNTcGFjZSA9IC9eXFxzKyQvLnRlc3QodmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiAhaXNTcGFjZSxcbiAgICAgIHZhbDogaXNTcGFjZSA/IFwiIFwiIDogdmFsdWUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlID0gZm9ybWF0T3B0c1t0eXBlXTtcblxuICAvLyBUaGUgdXNlciBtaWdodCBoYXZlIGV4cGxpY2l0bHkgc3BlY2lmaWVkIGhvdXIxMiBvciBob3VyQ3ljbGVcbiAgLy8gaWYgc28sIHJlc3BlY3QgdGhlaXIgZGVjaXNpb25cbiAgLy8gaWYgbm90LCByZWZlciBiYWNrIHRvIHRoZSByZXNvbHZlZE9wdHMsIHdoaWNoIGFyZSBiYXNlZCBvbiB0aGUgbG9jYWxlXG4gIGxldCBhY3R1YWxUeXBlID0gdHlwZTtcbiAgaWYgKHR5cGUgPT09IFwiaG91clwiKSB7XG4gICAgaWYgKGZvcm1hdE9wdHMuaG91cjEyICE9IG51bGwpIHtcbiAgICAgIGFjdHVhbFR5cGUgPSBmb3JtYXRPcHRzLmhvdXIxMiA/IFwiaG91cjEyXCIgOiBcImhvdXIyNFwiO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0T3B0cy5ob3VyQ3ljbGUgIT0gbnVsbCkge1xuICAgICAgaWYgKGZvcm1hdE9wdHMuaG91ckN5Y2xlID09PSBcImgxMVwiIHx8IGZvcm1hdE9wdHMuaG91ckN5Y2xlID09PSBcImgxMlwiKSB7XG4gICAgICAgIGFjdHVhbFR5cGUgPSBcImhvdXIxMlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0dWFsVHlwZSA9IFwiaG91cjI0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRva2VucyBvbmx5IGRpZmZlcmVudGlhdGUgYmV0d2VlbiAyNCBob3VycyBvciBub3QsXG4gICAgICAvLyBzbyB3ZSBkbyBub3QgbmVlZCB0byBjaGVjayBob3VyQ3ljbGUgaGVyZSwgd2hpY2ggaXMgbGVzcyBzdXBwb3J0ZWQgYW55d2F5c1xuICAgICAgYWN0dWFsVHlwZSA9IHJlc29sdmVkT3B0cy5ob3VyMTIgPyBcImhvdXIxMlwiIDogXCJob3VyMjRcIjtcbiAgICB9XG4gIH1cbiAgbGV0IHZhbCA9IHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsW2FjdHVhbFR5cGVdO1xuICBpZiAodHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIikge1xuICAgIHZhbCA9IHZhbFtzdHlsZV07XG4gIH1cblxuICBpZiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgdmFsLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBidWlsZFJlZ2V4KHVuaXRzKSB7XG4gIGNvbnN0IHJlID0gdW5pdHMubWFwKCh1KSA9PiB1LnJlZ2V4KS5yZWR1Y2UoKGYsIHIpID0+IGAke2Z9KCR7ci5zb3VyY2V9KWAsIFwiXCIpO1xuICByZXR1cm4gW2BeJHtyZX0kYCwgdW5pdHNdO1xufVxuXG5mdW5jdGlvbiBtYXRjaChpbnB1dCwgcmVnZXgsIGhhbmRsZXJzKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBpbnB1dC5tYXRjaChyZWdleCk7XG5cbiAgaWYgKG1hdGNoZXMpIHtcbiAgICBjb25zdCBhbGwgPSB7fTtcbiAgICBsZXQgbWF0Y2hJbmRleCA9IDE7XG4gICAgZm9yIChjb25zdCBpIGluIGhhbmRsZXJzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoaGFuZGxlcnMsIGkpKSB7XG4gICAgICAgIGNvbnN0IGggPSBoYW5kbGVyc1tpXSxcbiAgICAgICAgICBncm91cHMgPSBoLmdyb3VwcyA/IGguZ3JvdXBzICsgMSA6IDE7XG4gICAgICAgIGlmICghaC5saXRlcmFsICYmIGgudG9rZW4pIHtcbiAgICAgICAgICBhbGxbaC50b2tlbi52YWxbMF1dID0gaC5kZXNlcihtYXRjaGVzLnNsaWNlKG1hdGNoSW5kZXgsIG1hdGNoSW5kZXggKyBncm91cHMpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaEluZGV4ICs9IGdyb3VwcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFttYXRjaGVzLCBhbGxdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbbWF0Y2hlcywge31dO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lRnJvbU1hdGNoZXMobWF0Y2hlcykge1xuICBjb25zdCB0b0ZpZWxkID0gKHRva2VuKSA9PiB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHJldHVybiBcInNlY29uZFwiO1xuICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgcmV0dXJuIFwibWludXRlXCI7XG4gICAgICBjYXNlIFwiaFwiOlxuICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgcmV0dXJuIFwiZGF5XCI7XG4gICAgICBjYXNlIFwib1wiOlxuICAgICAgICByZXR1cm4gXCJvcmRpbmFsXCI7XG4gICAgICBjYXNlIFwiTFwiOlxuICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgcmV0dXJuIFwibW9udGhcIjtcbiAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgIHJldHVybiBcInllYXJcIjtcbiAgICAgIGNhc2UgXCJFXCI6XG4gICAgICBjYXNlIFwiY1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrZGF5XCI7XG4gICAgICBjYXNlIFwiV1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrTnVtYmVyXCI7XG4gICAgICBjYXNlIFwia1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrWWVhclwiO1xuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFwicXVhcnRlclwiO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGxldCB6b25lID0gbnVsbDtcbiAgbGV0IHNwZWNpZmljT2Zmc2V0O1xuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMueikpIHtcbiAgICB6b25lID0gSUFOQVpvbmUuY3JlYXRlKG1hdGNoZXMueik7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMuWikpIHtcbiAgICBpZiAoIXpvbmUpIHtcbiAgICAgIHpvbmUgPSBuZXcgRml4ZWRPZmZzZXRab25lKG1hdGNoZXMuWik7XG4gICAgfVxuICAgIHNwZWNpZmljT2Zmc2V0ID0gbWF0Y2hlcy5aO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnEpKSB7XG4gICAgbWF0Y2hlcy5NID0gKG1hdGNoZXMucSAtIDEpICogMyArIDE7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMuaCkpIHtcbiAgICBpZiAobWF0Y2hlcy5oIDwgMTIgJiYgbWF0Y2hlcy5hID09PSAxKSB7XG4gICAgICBtYXRjaGVzLmggKz0gMTI7XG4gICAgfSBlbHNlIGlmIChtYXRjaGVzLmggPT09IDEyICYmIG1hdGNoZXMuYSA9PT0gMCkge1xuICAgICAgbWF0Y2hlcy5oID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAobWF0Y2hlcy5HID09PSAwICYmIG1hdGNoZXMueSkge1xuICAgIG1hdGNoZXMueSA9IC1tYXRjaGVzLnk7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMudSkpIHtcbiAgICBtYXRjaGVzLlMgPSBwYXJzZU1pbGxpcyhtYXRjaGVzLnUpO1xuICB9XG5cbiAgY29uc3QgdmFscyA9IE9iamVjdC5rZXlzKG1hdGNoZXMpLnJlZHVjZSgociwgaykgPT4ge1xuICAgIGNvbnN0IGYgPSB0b0ZpZWxkKGspO1xuICAgIGlmIChmKSB7XG4gICAgICByW2ZdID0gbWF0Y2hlc1trXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfSwge30pO1xuXG4gIHJldHVybiBbdmFscywgem9uZSwgc3BlY2lmaWNPZmZzZXRdO1xufVxuXG5sZXQgZHVtbXlEYXRlVGltZUNhY2hlID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0RHVtbXlEYXRlVGltZSgpIHtcbiAgaWYgKCFkdW1teURhdGVUaW1lQ2FjaGUpIHtcbiAgICBkdW1teURhdGVUaW1lQ2FjaGUgPSBEYXRlVGltZS5mcm9tTWlsbGlzKDE1NTU1NTU1NTU1NTUpO1xuICB9XG5cbiAgcmV0dXJuIGR1bW15RGF0ZVRpbWVDYWNoZTtcbn1cblxuZnVuY3Rpb24gbWF5YmVFeHBhbmRNYWNyb1Rva2VuKHRva2VuLCBsb2NhbGUpIHtcbiAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICBjb25zdCBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4udmFsKTtcbiAgY29uc3QgdG9rZW5zID0gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSk7XG5cbiAgaWYgKHRva2VucyA9PSBudWxsIHx8IHRva2Vucy5pbmNsdWRlcyh1bmRlZmluZWQpKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gZXhwYW5kTWFjcm9Ub2tlbnModG9rZW5zLCBsb2NhbGUpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQoLi4udG9rZW5zLm1hcCgodCkgPT4gbWF5YmVFeHBhbmRNYWNyb1Rva2VuKHQsIGxvY2FsZSkpKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICBjb25zdCB0b2tlbnMgPSBleHBhbmRNYWNyb1Rva2VucyhGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm9ybWF0KSwgbG9jYWxlKSxcbiAgICB1bml0cyA9IHRva2Vucy5tYXAoKHQpID0+IHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpKSxcbiAgICBkaXNxdWFsaWZ5aW5nVW5pdCA9IHVuaXRzLmZpbmQoKHQpID0+IHQuaW52YWxpZFJlYXNvbik7XG5cbiAgaWYgKGRpc3F1YWxpZnlpbmdVbml0KSB7XG4gICAgcmV0dXJuIHsgaW5wdXQsIHRva2VucywgaW52YWxpZFJlYXNvbjogZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvbiB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtyZWdleFN0cmluZywgaGFuZGxlcnNdID0gYnVpbGRSZWdleCh1bml0cyksXG4gICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgW3Jhd01hdGNoZXMsIG1hdGNoZXNdID0gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycyksXG4gICAgICBbcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldF0gPSBtYXRjaGVzXG4gICAgICAgID8gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKVxuICAgICAgICA6IFtudWxsLCBudWxsLCB1bmRlZmluZWRdO1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcImFcIikgJiYgaGFzT3duUHJvcGVydHkobWF0Y2hlcywgXCJIXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXG4gICAgICAgIFwiQ2FuJ3QgaW5jbHVkZSBtZXJpZGllbSB3aGVuIHNwZWNpZnlpbmcgMjQtaG91ciBmb3JtYXRcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaW5wdXQsIHRva2VucywgcmVnZXgsIHJhd01hdGNoZXMsIG1hdGNoZXMsIHJlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KSB7XG4gIGNvbnN0IHsgcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZFJlYXNvbiB9ID0gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KTtcbiAgcmV0dXJuIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkUmVhc29uXTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSkge1xuICBpZiAoIWZvcm1hdE9wdHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGZvcm1hdHRlciA9IEZvcm1hdHRlci5jcmVhdGUobG9jYWxlLCBmb3JtYXRPcHRzKTtcbiAgY29uc3QgZGYgPSBmb3JtYXR0ZXIuZHRGb3JtYXR0ZXIoZ2V0RHVtbXlEYXRlVGltZSgpKTtcbiAgY29uc3QgcGFydHMgPSBkZi5mb3JtYXRUb1BhcnRzKCk7XG4gIGNvbnN0IHJlc29sdmVkT3B0cyA9IGRmLnJlc29sdmVkT3B0aW9ucygpO1xuICByZXR1cm4gcGFydHMubWFwKChwKSA9PiB0b2tlbkZvclBhcnQocCwgZm9ybWF0T3B0cywgcmVzb2x2ZWRPcHRzKSk7XG59XG5cbmNvbnN0IG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdLFxuICBsZWFwTGFkZGVyID0gWzAsIDMxLCA2MCwgOTEsIDEyMSwgMTUyLCAxODIsIDIxMywgMjQ0LCAyNzQsIDMwNSwgMzM1XTtcblxuZnVuY3Rpb24gdW5pdE91dE9mUmFuZ2UodW5pdCwgdmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFxuICAgIFwidW5pdCBvdXQgb2YgcmFuZ2VcIixcbiAgICBgeW91IHNwZWNpZmllZCAke3ZhbHVlfSAob2YgdHlwZSAke3R5cGVvZiB2YWx1ZX0pIGFzIGEgJHt1bml0fSwgd2hpY2ggaXMgaW52YWxpZGBcbiAgKTtcbn1cblxuZnVuY3Rpb24gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5KSk7XG5cbiAgaWYgKHllYXIgPCAxMDAgJiYgeWVhciA+PSAwKSB7XG4gICAgZC5zZXRVVENGdWxsWWVhcihkLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwKTtcbiAgfVxuXG4gIGNvbnN0IGpzID0gZC5nZXRVVENEYXkoKTtcblxuICByZXR1cm4ganMgPT09IDAgPyA3IDoganM7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgcmV0dXJuIGRheSArIChpc0xlYXBZZWFyKHllYXIpID8gbGVhcExhZGRlciA6IG5vbkxlYXBMYWRkZXIpW21vbnRoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCkge1xuICBjb25zdCB0YWJsZSA9IGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcixcbiAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoKGkpID0+IGkgPCBvcmRpbmFsKSxcbiAgICBkYXkgPSBvcmRpbmFsIC0gdGFibGVbbW9udGgwXTtcbiAgcmV0dXJuIHsgbW9udGg6IG1vbnRoMCArIDEsIGRheSB9O1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgY29uc3QgeyB5ZWFyLCBtb250aCwgZGF5IH0gPSBncmVnT2JqLFxuICAgIG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KSxcbiAgICB3ZWVrZGF5ID0gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpO1xuXG4gIGxldCB3ZWVrTnVtYmVyID0gTWF0aC5mbG9vcigob3JkaW5hbCAtIHdlZWtkYXkgKyAxMCkgLyA3KSxcbiAgICB3ZWVrWWVhcjtcblxuICBpZiAod2Vla051bWJlciA8IDEpIHtcbiAgICB3ZWVrWWVhciA9IHllYXIgLSAxO1xuICAgIHdlZWtOdW1iZXIgPSB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKHdlZWtOdW1iZXIgPiB3ZWVrc0luV2Vla1llYXIoeWVhcikpIHtcbiAgICB3ZWVrWWVhciA9IHllYXIgKyAxO1xuICAgIHdlZWtOdW1iZXIgPSAxO1xuICB9IGVsc2Uge1xuICAgIHdlZWtZZWFyID0geWVhcjtcbiAgfVxuXG4gIHJldHVybiB7IHdlZWtZZWFyLCB3ZWVrTnVtYmVyLCB3ZWVrZGF5LCAuLi50aW1lT2JqZWN0KGdyZWdPYmopIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtUb0dyZWdvcmlhbih3ZWVrRGF0YSkge1xuICBjb25zdCB7IHdlZWtZZWFyLCB3ZWVrTnVtYmVyLCB3ZWVrZGF5IH0gPSB3ZWVrRGF0YSxcbiAgICB3ZWVrZGF5T2ZKYW40ID0gZGF5T2ZXZWVrKHdlZWtZZWFyLCAxLCA0KSxcbiAgICB5ZWFySW5EYXlzID0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG5cbiAgbGV0IG9yZGluYWwgPSB3ZWVrTnVtYmVyICogNyArIHdlZWtkYXkgLSB3ZWVrZGF5T2ZKYW40IC0gMyxcbiAgICB5ZWFyO1xuXG4gIGlmIChvcmRpbmFsIDwgMSkge1xuICAgIHllYXIgPSB3ZWVrWWVhciAtIDE7XG4gICAgb3JkaW5hbCArPSBkYXlzSW5ZZWFyKHllYXIpO1xuICB9IGVsc2UgaWYgKG9yZGluYWwgPiB5ZWFySW5EYXlzKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyICsgMTtcbiAgICBvcmRpbmFsIC09IGRheXNJblllYXIod2Vla1llYXIpO1xuICB9IGVsc2Uge1xuICAgIHllYXIgPSB3ZWVrWWVhcjtcbiAgfVxuXG4gIGNvbnN0IHsgbW9udGgsIGRheSB9ID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKTtcbiAgcmV0dXJuIHsgeWVhciwgbW9udGgsIGRheSwgLi4udGltZU9iamVjdCh3ZWVrRGF0YSkgfTtcbn1cblxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9PcmRpbmFsKGdyZWdEYXRhKSB7XG4gIGNvbnN0IHsgeWVhciwgbW9udGgsIGRheSB9ID0gZ3JlZ0RhdGE7XG4gIGNvbnN0IG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KTtcbiAgcmV0dXJuIHsgeWVhciwgb3JkaW5hbCwgLi4udGltZU9iamVjdChncmVnRGF0YSkgfTtcbn1cblxuZnVuY3Rpb24gb3JkaW5hbFRvR3JlZ29yaWFuKG9yZGluYWxEYXRhKSB7XG4gIGNvbnN0IHsgeWVhciwgb3JkaW5hbCB9ID0gb3JkaW5hbERhdGE7XG4gIGNvbnN0IHsgbW9udGgsIGRheSB9ID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKTtcbiAgcmV0dXJuIHsgeWVhciwgbW9udGgsIGRheSwgLi4udGltZU9iamVjdChvcmRpbmFsRGF0YSkgfTtcbn1cblxuZnVuY3Rpb24gaGFzSW52YWxpZFdlZWtEYXRhKG9iaikge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLndlZWtZZWFyKSxcbiAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla051bWJlciwgMSwgd2Vla3NJbldlZWtZZWFyKG9iai53ZWVrWWVhcikpLFxuICAgIHZhbGlkV2Vla2RheSA9IGludGVnZXJCZXR3ZWVuKG9iai53ZWVrZGF5LCAxLCA3KTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIndlZWtZZWFyXCIsIG9iai53ZWVrWWVhcik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkV2Vlaykge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIndlZWtcIiwgb2JqLndlZWspO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWtkYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrZGF5XCIsIG9iai53ZWVrZGF5KTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFzSW52YWxpZE9yZGluYWxEYXRhKG9iaikge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgIHZhbGlkT3JkaW5hbCA9IGludGVnZXJCZXR3ZWVuKG9iai5vcmRpbmFsLCAxLCBkYXlzSW5ZZWFyKG9iai55ZWFyKSk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ5ZWFyXCIsIG9iai55ZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRPcmRpbmFsKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwib3JkaW5hbFwiLCBvYmoub3JkaW5hbCk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgIHZhbGlkTW9udGggPSBpbnRlZ2VyQmV0d2VlbihvYmoubW9udGgsIDEsIDEyKSxcbiAgICB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1vbnRoKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibW9udGhcIiwgb2JqLm1vbnRoKTtcbiAgfSBlbHNlIGlmICghdmFsaWREYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJkYXlcIiwgb2JqLmRheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhc0ludmFsaWRUaW1lRGF0YShvYmopIHtcbiAgY29uc3QgeyBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQgfSA9IG9iajtcbiAgY29uc3QgdmFsaWRIb3VyID1cbiAgICAgIGludGVnZXJCZXR3ZWVuKGhvdXIsIDAsIDIzKSB8fFxuICAgICAgKGhvdXIgPT09IDI0ICYmIG1pbnV0ZSA9PT0gMCAmJiBzZWNvbmQgPT09IDAgJiYgbWlsbGlzZWNvbmQgPT09IDApLFxuICAgIHZhbGlkTWludXRlID0gaW50ZWdlckJldHdlZW4obWludXRlLCAwLCA1OSksXG4gICAgdmFsaWRTZWNvbmQgPSBpbnRlZ2VyQmV0d2VlbihzZWNvbmQsIDAsIDU5KSxcbiAgICB2YWxpZE1pbGxpc2Vjb25kID0gaW50ZWdlckJldHdlZW4obWlsbGlzZWNvbmQsIDAsIDk5OSk7XG5cbiAgaWYgKCF2YWxpZEhvdXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJob3VyXCIsIGhvdXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1pbnV0ZSkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1pbnV0ZVwiLCBtaW51dGUpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFNlY29uZCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInNlY29uZFwiLCBzZWNvbmQpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1pbGxpc2Vjb25kKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibWlsbGlzZWNvbmRcIiwgbWlsbGlzZWNvbmQpO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuXG5jb25zdCBJTlZBTElEID0gXCJJbnZhbGlkIERhdGVUaW1lXCI7XG5jb25zdCBNQVhfREFURSA9IDguNjRlMTU7XG5cbmZ1bmN0aW9uIHVuc3VwcG9ydGVkWm9uZSh6b25lKSB7XG4gIHJldHVybiBuZXcgSW52YWxpZChcInVuc3VwcG9ydGVkIHpvbmVcIiwgYHRoZSB6b25lIFwiJHt6b25lLm5hbWV9XCIgaXMgbm90IHN1cHBvcnRlZGApO1xufVxuXG4vLyB3ZSBjYWNoZSB3ZWVrIGRhdGEgb24gdGhlIERUIG9iamVjdCBhbmQgdGhpcyBpbnRlcm1lZGlhdGVzIHRoZSBjYWNoZVxuZnVuY3Rpb24gcG9zc2libHlDYWNoZWRXZWVrRGF0YShkdCkge1xuICBpZiAoZHQud2Vla0RhdGEgPT09IG51bGwpIHtcbiAgICBkdC53ZWVrRGF0YSA9IGdyZWdvcmlhblRvV2VlayhkdC5jKTtcbiAgfVxuICByZXR1cm4gZHQud2Vla0RhdGE7XG59XG5cbi8vIGNsb25lIHJlYWxseSBtZWFucywgXCJtYWtlIGEgbmV3IG9iamVjdCB3aXRoIHRoZXNlIG1vZGlmaWNhdGlvbnNcIi4gYWxsIFwic2V0dGVyc1wiIHJlYWxseSB1c2UgdGhpc1xuLy8gdG8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aGlsZSBvbmx5IGNoYW5naW5nIHNvbWUgb2YgdGhlIHByb3BlcnRpZXNcbmZ1bmN0aW9uIGNsb25lKGluc3QsIGFsdHMpIHtcbiAgY29uc3QgY3VycmVudCA9IHtcbiAgICB0czogaW5zdC50cyxcbiAgICB6b25lOiBpbnN0LnpvbmUsXG4gICAgYzogaW5zdC5jLFxuICAgIG86IGluc3QubyxcbiAgICBsb2M6IGluc3QubG9jLFxuICAgIGludmFsaWQ6IGluc3QuaW52YWxpZCxcbiAgfTtcbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IC4uLmN1cnJlbnQsIC4uLmFsdHMsIG9sZDogY3VycmVudCB9KTtcbn1cblxuLy8gZmluZCB0aGUgcmlnaHQgb2Zmc2V0IGEgZ2l2ZW4gbG9jYWwgdGltZS4gVGhlIG8gaW5wdXQgaXMgb3VyIGd1ZXNzLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoXG4vLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKVxuZnVuY3Rpb24gZml4T2Zmc2V0KGxvY2FsVFMsIG8sIHR6KSB7XG4gIC8vIE91ciBVVEMgdGltZSBpcyBqdXN0IGEgZ3Vlc3MgYmVjYXVzZSBvdXIgb2Zmc2V0IGlzIGp1c3QgYSBndWVzc1xuICBsZXQgdXRjR3Vlc3MgPSBsb2NhbFRTIC0gbyAqIDYwICogMTAwMDtcblxuICAvLyBUZXN0IHdoZXRoZXIgdGhlIHpvbmUgbWF0Y2hlcyB0aGUgb2Zmc2V0IGZvciB0aGlzIHRzXG4gIGNvbnN0IG8yID0gdHoub2Zmc2V0KHV0Y0d1ZXNzKTtcblxuICAvLyBJZiBzbywgb2Zmc2V0IGRpZG4ndCBjaGFuZ2UgYW5kIHdlJ3JlIGRvbmVcbiAgaWYgKG8gPT09IG8yKSB7XG4gICAgcmV0dXJuIFt1dGNHdWVzcywgb107XG4gIH1cblxuICAvLyBJZiBub3QsIGNoYW5nZSB0aGUgdHMgYnkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlIG9mZnNldFxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMTAwMDtcblxuICAvLyBJZiB0aGF0IGdpdmVzIHVzIHRoZSBsb2NhbCB0aW1lIHdlIHdhbnQsIHdlJ3JlIGRvbmVcbiAgY29uc3QgbzMgPSB0ei5vZmZzZXQodXRjR3Vlc3MpO1xuICBpZiAobzIgPT09IG8zKSB7XG4gICAgcmV0dXJuIFt1dGNHdWVzcywgbzJdO1xuICB9XG5cbiAgLy8gSWYgaXQncyBkaWZmZXJlbnQsIHdlJ3JlIGluIGEgaG9sZSB0aW1lLiBUaGUgb2Zmc2V0IGhhcyBjaGFuZ2VkLCBidXQgdGhlIHdlIGRvbid0IGFkanVzdCB0aGUgdGltZVxuICByZXR1cm4gW2xvY2FsVFMgLSBNYXRoLm1pbihvMiwgbzMpICogNjAgKiAxMDAwLCBNYXRoLm1heChvMiwgbzMpXTtcbn1cblxuLy8gY29udmVydCBhbiBlcG9jaCB0aW1lc3RhbXAgaW50byBhIGNhbGVuZGFyIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBvZmZzZXRcbmZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldCkge1xuICB0cyArPSBvZmZzZXQgKiA2MCAqIDEwMDA7XG5cbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRzKTtcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXk6IGQuZ2V0VVRDRGF0ZSgpLFxuICAgIGhvdXI6IGQuZ2V0VVRDSG91cnMoKSxcbiAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLFxuICAgIHNlY29uZDogZC5nZXRVVENTZWNvbmRzKCksXG4gICAgbWlsbGlzZWNvbmQ6IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksXG4gIH07XG59XG5cbi8vIGNvbnZlcnQgYSBjYWxlbmRhciBvYmplY3QgdG8gYSBlcG9jaCB0aW1lc3RhbXBcbmZ1bmN0aW9uIG9ialRvVFMob2JqLCBvZmZzZXQsIHpvbmUpIHtcbiAgcmV0dXJuIGZpeE9mZnNldChvYmpUb0xvY2FsVFMob2JqKSwgb2Zmc2V0LCB6b25lKTtcbn1cblxuLy8gY3JlYXRlIGEgbmV3IERUIGluc3RhbmNlIGJ5IGFkZGluZyBhIGR1cmF0aW9uLCBhZGp1c3RpbmcgZm9yIERTVHNcbmZ1bmN0aW9uIGFkanVzdFRpbWUoaW5zdCwgZHVyKSB7XG4gIGNvbnN0IG9QcmUgPSBpbnN0Lm8sXG4gICAgeWVhciA9IGluc3QuYy55ZWFyICsgTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgIG1vbnRoID0gaW5zdC5jLm1vbnRoICsgTWF0aC50cnVuYyhkdXIubW9udGhzKSArIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSAqIDMsXG4gICAgYyA9IHtcbiAgICAgIC4uLmluc3QuYyxcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheTpcbiAgICAgICAgTWF0aC5taW4oaW5zdC5jLmRheSwgZGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArXG4gICAgICAgIE1hdGgudHJ1bmMoZHVyLmRheXMpICtcbiAgICAgICAgTWF0aC50cnVuYyhkdXIud2Vla3MpICogNyxcbiAgICB9LFxuICAgIG1pbGxpc1RvQWRkID0gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgICB5ZWFyczogZHVyLnllYXJzIC0gTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgICAgcXVhcnRlcnM6IGR1ci5xdWFydGVycyAtIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSxcbiAgICAgIG1vbnRoczogZHVyLm1vbnRocyAtIE1hdGgudHJ1bmMoZHVyLm1vbnRocyksXG4gICAgICB3ZWVrczogZHVyLndlZWtzIC0gTWF0aC50cnVuYyhkdXIud2Vla3MpLFxuICAgICAgZGF5czogZHVyLmRheXMgLSBNYXRoLnRydW5jKGR1ci5kYXlzKSxcbiAgICAgIGhvdXJzOiBkdXIuaG91cnMsXG4gICAgICBtaW51dGVzOiBkdXIubWludXRlcyxcbiAgICAgIHNlY29uZHM6IGR1ci5zZWNvbmRzLFxuICAgICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzLFxuICAgIH0pLmFzKFwibWlsbGlzZWNvbmRzXCIpLFxuICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7XG5cbiAgbGV0IFt0cywgb10gPSBmaXhPZmZzZXQobG9jYWxUUywgb1ByZSwgaW5zdC56b25lKTtcblxuICBpZiAobWlsbGlzVG9BZGQgIT09IDApIHtcbiAgICB0cyArPSBtaWxsaXNUb0FkZDtcbiAgICAvLyB0aGF0IGNvdWxkIGhhdmUgY2hhbmdlZCB0aGUgb2Zmc2V0IGJ5IGdvaW5nIG92ZXIgYSBEU1QsIGJ1dCB3ZSB3YW50IHRvIGtlZXAgdGhlIHRzIHRoZSBzYW1lXG4gICAgbyA9IGluc3Quem9uZS5vZmZzZXQodHMpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHMsIG8gfTtcbn1cblxuLy8gaGVscGVyIHVzZWZ1bCBpbiB0dXJuaW5nIHRoZSByZXN1bHRzIG9mIHBhcnNpbmcgaW50byByZWFsIGRhdGVzXG4vLyBieSBoYW5kbGluZyB0aGUgem9uZSBvcHRpb25zXG5mdW5jdGlvbiBwYXJzZURhdGFUb0RhdGVUaW1lKHBhcnNlZCwgcGFyc2VkWm9uZSwgb3B0cywgZm9ybWF0LCB0ZXh0LCBzcGVjaWZpY09mZnNldCkge1xuICBjb25zdCB7IHNldFpvbmUsIHpvbmUgfSA9IG9wdHM7XG4gIGlmICgocGFyc2VkICYmIE9iamVjdC5rZXlzKHBhcnNlZCkubGVuZ3RoICE9PSAwKSB8fCBwYXJzZWRab25lKSB7XG4gICAgY29uc3QgaW50ZXJwcmV0YXRpb25ab25lID0gcGFyc2VkWm9uZSB8fCB6b25lLFxuICAgICAgaW5zdCA9IERhdGVUaW1lLmZyb21PYmplY3QocGFyc2VkLCB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIHpvbmU6IGludGVycHJldGF0aW9uWm9uZSxcbiAgICAgICAgc3BlY2lmaWNPZmZzZXQsXG4gICAgICB9KTtcbiAgICByZXR1cm4gc2V0Wm9uZSA/IGluc3QgOiBpbnN0LnNldFpvbmUoem9uZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXG4gICAgICBuZXcgSW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgJHtmb3JtYXR9YClcbiAgICApO1xuICB9XG59XG5cbi8vIGlmIHlvdSB3YW50IHRvIG91dHB1dCBhIHRlY2huaWNhbCBmb3JtYXQgKGUuZy4gUkZDIDI4MjIpLCB0aGlzIGhlbHBlclxuLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzXG5mdW5jdGlvbiB0b1RlY2hGb3JtYXQoZHQsIGZvcm1hdCwgYWxsb3daID0gdHJ1ZSkge1xuICByZXR1cm4gZHQuaXNWYWxpZFxuICAgID8gRm9ybWF0dGVyLmNyZWF0ZShMb2NhbGUuY3JlYXRlKFwiZW4tVVNcIiksIHtcbiAgICAgICAgYWxsb3daLFxuICAgICAgICBmb3JjZVNpbXBsZTogdHJ1ZSxcbiAgICAgIH0pLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyhkdCwgZm9ybWF0KVxuICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gdG9JU09EYXRlKG8sIGV4dGVuZGVkKSB7XG4gIGNvbnN0IGxvbmdGb3JtYXQgPSBvLmMueWVhciA+IDk5OTkgfHwgby5jLnllYXIgPCAwO1xuICBsZXQgYyA9IFwiXCI7XG4gIGlmIChsb25nRm9ybWF0ICYmIG8uYy55ZWFyID49IDApIGMgKz0gXCIrXCI7XG4gIGMgKz0gcGFkU3RhcnQoby5jLnllYXIsIGxvbmdGb3JtYXQgPyA2IDogNCk7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9IGVsc2Uge1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiB0b0lTT1RpbWUoXG4gIG8sXG4gIGV4dGVuZGVkLFxuICBzdXBwcmVzc1NlY29uZHMsXG4gIHN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICBpbmNsdWRlT2Zmc2V0LFxuICBleHRlbmRlZFpvbmVcbikge1xuICBsZXQgYyA9IHBhZFN0YXJ0KG8uYy5ob3VyKTtcbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIjpcIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuICAgIGlmIChvLmMubWlsbGlzZWNvbmQgIT09IDAgfHwgby5jLnNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NTZWNvbmRzKSB7XG4gICAgICBjICs9IFwiOlwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuICB9XG5cbiAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCBvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuXG4gICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHtcbiAgICAgIGMgKz0gXCIuXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwICYmICFleHRlbmRlZFpvbmUpIHtcbiAgICAgIGMgKz0gXCJaXCI7XG4gICAgfSBlbHNlIGlmIChvLm8gPCAwKSB7XG4gICAgICBjICs9IFwiLVwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vICUgNjApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYyArPSBcIitcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gJSA2MCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChleHRlbmRlZFpvbmUpIHtcbiAgICBjICs9IFwiW1wiICsgby56b25lLmlhbmFOYW1lICsgXCJdXCI7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbi8vIGRlZmF1bHRzIGZvciB1bnNwZWNpZmllZCB1bml0cyBpbiB0aGUgc3VwcG9ydGVkIGNhbGVuZGFyc1xuY29uc3QgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gICAgbW9udGg6IDEsXG4gICAgZGF5OiAxLFxuICAgIGhvdXI6IDAsXG4gICAgbWludXRlOiAwLFxuICAgIHNlY29uZDogMCxcbiAgICBtaWxsaXNlY29uZDogMCxcbiAgfSxcbiAgZGVmYXVsdFdlZWtVbml0VmFsdWVzID0ge1xuICAgIHdlZWtOdW1iZXI6IDEsXG4gICAgd2Vla2RheTogMSxcbiAgICBob3VyOiAwLFxuICAgIG1pbnV0ZTogMCxcbiAgICBzZWNvbmQ6IDAsXG4gICAgbWlsbGlzZWNvbmQ6IDAsXG4gIH0sXG4gIGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcyA9IHtcbiAgICBvcmRpbmFsOiAxLFxuICAgIGhvdXI6IDAsXG4gICAgbWludXRlOiAwLFxuICAgIHNlY29uZDogMCxcbiAgICBtaWxsaXNlY29uZDogMCxcbiAgfTtcblxuLy8gVW5pdHMgaW4gdGhlIHN1cHBvcnRlZCBjYWxlbmRhcnMsIHNvcnRlZCBieSBiaWduZXNzXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXCJ5ZWFyXCIsIFwibW9udGhcIiwgXCJkYXlcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl0sXG4gIG9yZGVyZWRXZWVrVW5pdHMgPSBbXG4gICAgXCJ3ZWVrWWVhclwiLFxuICAgIFwid2Vla051bWJlclwiLFxuICAgIFwid2Vla2RheVwiLFxuICAgIFwiaG91clwiLFxuICAgIFwibWludXRlXCIsXG4gICAgXCJzZWNvbmRcIixcbiAgICBcIm1pbGxpc2Vjb25kXCIsXG4gIF0sXG4gIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTtcblxuLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzXG5mdW5jdGlvbiBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHtcbiAgICB5ZWFyOiBcInllYXJcIixcbiAgICB5ZWFyczogXCJ5ZWFyXCIsXG4gICAgbW9udGg6IFwibW9udGhcIixcbiAgICBtb250aHM6IFwibW9udGhcIixcbiAgICBkYXk6IFwiZGF5XCIsXG4gICAgZGF5czogXCJkYXlcIixcbiAgICBob3VyOiBcImhvdXJcIixcbiAgICBob3VyczogXCJob3VyXCIsXG4gICAgbWludXRlOiBcIm1pbnV0ZVwiLFxuICAgIG1pbnV0ZXM6IFwibWludXRlXCIsXG4gICAgcXVhcnRlcjogXCJxdWFydGVyXCIsXG4gICAgcXVhcnRlcnM6IFwicXVhcnRlclwiLFxuICAgIHNlY29uZDogXCJzZWNvbmRcIixcbiAgICBzZWNvbmRzOiBcInNlY29uZFwiLFxuICAgIG1pbGxpc2Vjb25kOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmRzOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgd2Vla2RheTogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla2RheXM6IFwid2Vla2RheVwiLFxuICAgIHdlZWtudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtzbnVtYmVyOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVrbnVtYmVyczogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3llYXI6IFwid2Vla1llYXJcIixcbiAgICB3ZWVreWVhcnM6IFwid2Vla1llYXJcIixcbiAgICBvcmRpbmFsOiBcIm9yZGluYWxcIixcbiAgfVt1bml0LnRvTG93ZXJDYXNlKCldO1xuXG4gIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5cbi8vIHRoaXMgaXMgYSBkdW1iZWQgZG93biB2ZXJzaW9uIG9mIGZyb21PYmplY3QoKSB0aGF0IHJ1bnMgYWJvdXQgNjAlIGZhc3RlclxuLy8gYnV0IGRvZXNuJ3QgZG8gYW55IHZhbGlkYXRpb24sIG1ha2VzIGEgYnVuY2ggb2YgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCB1bml0c1xuLy8gYXJlIHByZXNlbnQsIGFuZCBzbyBvbi5cbmZ1bmN0aW9uIHF1aWNrRFQob2JqLCBvcHRzKSB7XG4gIGNvbnN0IHpvbmUgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgIGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpLFxuICAgIHRzTm93ID0gU2V0dGluZ3Mubm93KCk7XG5cbiAgbGV0IHRzLCBvO1xuXG4gIC8vIGFzc3VtZSB3ZSBoYXZlIHRoZSBoaWdoZXItb3JkZXIgdW5pdHNcbiAgaWYgKCFpc1VuZGVmaW5lZChvYmoueWVhcikpIHtcbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQob2JqW3VdKSkge1xuICAgICAgICBvYmpbdV0gPSBkZWZhdWx0VW5pdFZhbHVlc1t1XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEob2JqKSB8fCBoYXNJbnZhbGlkVGltZURhdGEob2JqKTtcbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2Zmc2V0UHJvdmlzID0gem9uZS5vZmZzZXQodHNOb3cpO1xuICAgIFt0cywgb10gPSBvYmpUb1RTKG9iaiwgb2Zmc2V0UHJvdmlzLCB6b25lKTtcbiAgfSBlbHNlIHtcbiAgICB0cyA9IHRzTm93O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IHRzLCB6b25lLCBsb2MsIG8gfSk7XG59XG5cbmZ1bmN0aW9uIGRpZmZSZWxhdGl2ZShzdGFydCwgZW5kLCBvcHRzKSB7XG4gIGNvbnN0IHJvdW5kID0gaXNVbmRlZmluZWQob3B0cy5yb3VuZCkgPyB0cnVlIDogb3B0cy5yb3VuZCxcbiAgICBmb3JtYXQgPSAoYywgdW5pdCkgPT4ge1xuICAgICAgYyA9IHJvdW5kVG8oYywgcm91bmQgfHwgb3B0cy5jYWxlbmRhcnkgPyAwIDogMiwgdHJ1ZSk7XG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBlbmQubG9jLmNsb25lKG9wdHMpLnJlbEZvcm1hdHRlcihvcHRzKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICAgIH0sXG4gICAgZGlmZmVyID0gKHVuaXQpID0+IHtcbiAgICAgIGlmIChvcHRzLmNhbGVuZGFyeSkge1xuICAgICAgICBpZiAoIWVuZC5oYXNTYW1lKHN0YXJ0LCB1bml0KSkge1xuICAgICAgICAgIHJldHVybiBlbmQuc3RhcnRPZih1bml0KS5kaWZmKHN0YXJ0LnN0YXJ0T2YodW5pdCksIHVuaXQpLmdldCh1bml0KTtcbiAgICAgICAgfSBlbHNlIHJldHVybiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCk7XG4gICAgICB9XG4gICAgfTtcblxuICBpZiAob3B0cy51bml0KSB7XG4gICAgcmV0dXJuIGZvcm1hdChkaWZmZXIob3B0cy51bml0KSwgb3B0cy51bml0KTtcbiAgfVxuXG4gIGZvciAoY29uc3QgdW5pdCBvZiBvcHRzLnVuaXRzKSB7XG4gICAgY29uc3QgY291bnQgPSBkaWZmZXIodW5pdCk7XG4gICAgaWYgKE1hdGguYWJzKGNvdW50KSA+PSAxKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzdGFydCA+IGVuZCA/IC0wIDogMCwgb3B0cy51bml0c1tvcHRzLnVuaXRzLmxlbmd0aCAtIDFdKTtcbn1cblxuZnVuY3Rpb24gbGFzdE9wdHMoYXJnTGlzdCkge1xuICBsZXQgb3B0cyA9IHt9LFxuICAgIGFyZ3M7XG4gIGlmIChhcmdMaXN0Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXSA9PT0gXCJvYmplY3RcIikge1xuICAgIG9wdHMgPSBhcmdMaXN0W2FyZ0xpc3QubGVuZ3RoIC0gMV07XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCkuc2xpY2UoMCwgYXJnTGlzdC5sZW5ndGggLSAxKTtcbiAgfSBlbHNlIHtcbiAgICBhcmdzID0gQXJyYXkuZnJvbShhcmdMaXN0KTtcbiAgfVxuICByZXR1cm4gW29wdHMsIGFyZ3NdO1xufVxuXG4vKipcbiAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBBIERhdGVUaW1lIGNvbXByaXNlcyBvZjpcbiAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guXG4gKiAqIEEgdGltZSB6b25lLiBFYWNoIGluc3RhbmNlIGlzIGNvbnNpZGVyZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpYyB6b25lIChieSBkZWZhdWx0IHRoZSBsb2NhbCBzeXN0ZW0ncyB6b25lKS5cbiAqICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIHRoYXQgZWZmZWN0IGhvdyBvdXRwdXQgc3RyaW5ncyBhcmUgZm9ybWF0dGVkLCBzdWNoIGFzIGBsb2NhbGVgLCBgbnVtYmVyaW5nU3lzdGVtYCwgYW5kIGBvdXRwdXRDYWxlbmRhcmAuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25hbGl0eSBpdCBwcm92aWRlczpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgRGF0ZVRpbWUubG9jYWx9LCB7QGxpbmsgRGF0ZVRpbWUudXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgRGF0ZVRpbWUuZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUlTT30sIHtAbGluayBEYXRlVGltZS5mcm9tSFRUUH0sIGFuZCB7QGxpbmsgRGF0ZVRpbWUuZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBEYXRlVGltZS5mcm9tRm9ybWF0fS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUpTRGF0ZX0uXG4gKiAqICoqR3JlZ29yaWFuIGNhbGVuZGFyIGFuZCB0aW1lKio6IFRvIGV4YW1pbmUgdGhlIEdyZWdvcmlhbiBwcm9wZXJ0aWVzIG9mIGEgRGF0ZVRpbWUgaW5kaXZpZHVhbGx5IChpLmUgYXMgb3Bwb3NlZCB0byBjb2xsZWN0aXZlbHkgdGhyb3VnaCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9KSwgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjeWVhcn0sIHtAbGluayBEYXRlVGltZSNtb250aH0sXG4gKiB7QGxpbmsgRGF0ZVRpbWUjZGF5fSwge0BsaW5rIERhdGVUaW1lI2hvdXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXRlfSwge0BsaW5rIERhdGVUaW1lI3NlY29uZH0sIHtAbGluayBEYXRlVGltZSNtaWxsaXNlY29uZH0gYWNjZXNzb3JzLlxuICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIERhdGVUaW1lI3dlZWtZZWFyfSwge0BsaW5rIERhdGVUaW1lI3dlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIERhdGVUaW1lI3dlZWtkYXl9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjbG9jYWxlfSBhbmQge0BsaW5rIERhdGVUaW1lI251bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKio6IFRvIHRyYW5zZm9ybSB0aGUgRGF0ZVRpbWUgaW50byBvdGhlciBEYXRlVGltZXMsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjc2V0fSwge0BsaW5rIERhdGVUaW1lI3JlY29uZmlndXJlfSwge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9LCB7QGxpbmsgRGF0ZVRpbWUjc2V0TG9jYWxlfSwge0BsaW5rIERhdGVUaW1lLnBsdXN9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXN9LCB7QGxpbmsgRGF0ZVRpbWUjZW5kT2Z9LCB7QGxpbmsgRGF0ZVRpbWUjc3RhcnRPZn0sIHtAbGluayBEYXRlVGltZSN0b1VUQ30sIGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbH0uXG4gKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZX0sIHtAbGluayBEYXRlVGltZSN0b1JlbGF0aXZlQ2FsZW5kYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9KU09OfSwge0BsaW5rIERhdGVUaW1lI3RvSVNPfSwge0BsaW5rIERhdGVUaW1lI3RvSFRUUH0sIHtAbGluayBEYXRlVGltZSN0b09iamVjdH0sIHtAbGluayBEYXRlVGltZSN0b1JGQzI4MjJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9TdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9LCB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9KU0RhdGV9LlxuICpcbiAqIFRoZXJlJ3MgcGxlbnR5IG90aGVycyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiwgdGltZSB6b25lcywgYWx0ZXJuYXRpdmUgY2FsZW5kYXJzLCB2YWxpZGl0eSwgYW5kIHNvIG9uLCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cbmNsYXNzIERhdGVUaW1lIHtcbiAgLyoqXG4gICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgY29uc3Qgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lO1xuXG4gICAgbGV0IGludmFsaWQgPVxuICAgICAgY29uZmlnLmludmFsaWQgfHxcbiAgICAgIChOdW1iZXIuaXNOYU4oY29uZmlnLnRzKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGwpIHx8XG4gICAgICAoIXpvbmUuaXNWYWxpZCA/IHVuc3VwcG9ydGVkWm9uZSh6b25lKSA6IG51bGwpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudHMgPSBpc1VuZGVmaW5lZChjb25maWcudHMpID8gU2V0dGluZ3Mubm93KCkgOiBjb25maWcudHM7XG5cbiAgICBsZXQgYyA9IG51bGwsXG4gICAgICBvID0gbnVsbDtcbiAgICBpZiAoIWludmFsaWQpIHtcbiAgICAgIGNvbnN0IHVuY2hhbmdlZCA9IGNvbmZpZy5vbGQgJiYgY29uZmlnLm9sZC50cyA9PT0gdGhpcy50cyAmJiBjb25maWcub2xkLnpvbmUuZXF1YWxzKHpvbmUpO1xuXG4gICAgICBpZiAodW5jaGFuZ2VkKSB7XG4gICAgICAgIFtjLCBvXSA9IFtjb25maWcub2xkLmMsIGNvbmZpZy5vbGQub107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvdCA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjID0gdHNUb09iaih0aGlzLnRzLCBvdCk7XG4gICAgICAgIGludmFsaWQgPSBOdW1iZXIuaXNOYU4oYy55ZWFyKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGw7XG4gICAgICAgIGMgPSBpbnZhbGlkID8gbnVsbCA6IGM7XG4gICAgICAgIG8gPSBpbnZhbGlkID8gbnVsbCA6IG90O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3pvbmUgPSB6b25lO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pbnZhbGlkID0gaW52YWxpZDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLndlZWtEYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmMgPSBjO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubyA9IG87XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc0x1eG9uRGF0ZVRpbWUgPSB0cnVlO1xuICB9XG5cbiAgLy8gQ09OU1RSVUNUXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZvciB0aGUgY3VycmVudCBpbnN0YW50LCBpbiB0aGUgc3lzdGVtJ3MgdGltZSB6b25lLlxuICAgKlxuICAgKiBVc2UgU2V0dGluZ3MgdG8gb3ZlcnJpZGUgdGhlc2UgZGVmYXVsdCB2YWx1ZXMgaWYgbmVlZGVkLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTygpIC8vfj4gbm93IGluIHRoZSBJU08gZm9ybWF0XG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKHt9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhbCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoeyB6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMCwgd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogXCJ1dGNcIiB9KSAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMCwgaW4gVVRDXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbCgpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0gPSBhcmdzO1xuICAgIHJldHVybiBxdWlja0RUKHsgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0sIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGluIFVUQ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGB1dGMoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdXRwdXRDYWxlbmRhcl0gLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWiB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUsIHsgbG9jYWxlOiBcImZyXCIgfSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVogd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgdXRjKCkge1xuICAgIGNvbnN0IFtvcHRzLCBhcmdzXSA9IGxhc3RPcHRzKGFyZ3VtZW50cyksXG4gICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG5cbiAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgcmV0dXJuIHF1aWNrRFQoeyB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQgfSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21KU0RhdGUoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdHMgPSBpc0RhdGUoZGF0ZSkgPyBkYXRlLnZhbHVlT2YoKSA6IE5hTjtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRzKSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21NaWxsaXMobWlsbGlzZWNvbmRzLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIWlzTnVtYmVyKG1pbGxpc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgYGZyb21NaWxsaXMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXQsIGJ1dCByZWNlaXZlZCBhICR7dHlwZW9mIG1pbGxpc2Vjb25kc30gd2l0aCB2YWx1ZSAke21pbGxpc2Vjb25kc31gXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzIDwgLU1BWF9EQVRFIHx8IG1pbGxpc2Vjb25kcyA+IE1BWF9EQVRFKSB7XG4gICAgICAvLyB0aGlzIGlzbid0IHBlcmZlY3QgYmVjYXVzZSBiZWNhdXNlIHdlIGNhbiBzdGlsbCBlbmQgdXAgb3V0IG9mIHJhbmdlIGJlY2F1c2Ugb2YgYWRkaXRpb25hbCBzaGlmdGluZywgYnV0IGl0J3MgYSBzdGFydFxuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJUaW1lc3RhbXAgb3V0IG9mIHJhbmdlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IG1pbGxpc2Vjb25kcyxcbiAgICAgICAgem9uZTogbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVwb2NoIChtZWFuaW5nIHNpbmNlIDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgLSBhIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21TZWNvbmRzKHNlY29uZHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghaXNOdW1iZXIoc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21TZWNvbmRzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IHNlY29uZHMgKiAxMDAwLFxuICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcicgYW5kICdob3VyJyB3aXRoIHJlYXNvbmFibGUgZGVmYXVsdHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnllYXIgLSBhIHllYXIsIHN1Y2ggYXMgMTk4N1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoIC0gYSBtb250aCwgMS0xMlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheSAtIGEgZGF5IG9mIHRoZSBtb250aCwgMS0zMSwgZGVwZW5kaW5nIG9uIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm9yZGluYWwgLSBkYXkgb2YgdGhlIHllYXIsIDEtMzY1IG9yIDM2NlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtZZWFyIC0gYW4gSVNPIHdlZWsgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtOdW1iZXIgLSBhbiBJU08gd2VlayBudW1iZXIsIGJldHdlZW4gMSBhbmQgNTIgb3IgNTMsIGRlcGVuZGluZyBvbiB0aGUgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtkYXkgLSBhbiBJU08gd2Vla2RheSwgMS03LCB3aGVyZSAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3VyIC0gaG91ciBvZiB0aGUgZGF5LCAwLTIzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlIC0gbWludXRlIG9mIHRoZSBob3VyLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kIC0gc2Vjb25kIG9mIHRoZSBtaW51dGUsIDAtNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZCAtIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIDAtOTk5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gaW50ZXJwcmV0IHRoZSBudW1iZXJzIGluIHRoZSBjb250ZXh0IG9mIGEgcGFydGljdWxhciB6b25lLiBDYW4gdGFrZSBhbnkgdmFsdWUgdGFrZW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHNldFpvbmUoKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgeWVhcjogMTk4MiwgbW9udGg6IDUsIGRheTogMjV9KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgeWVhcjogMTk4MiB9KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTAxLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9KSAvL34+IHRvZGF5IGF0IDEwOjI2OjA2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ3V0YycgfSksXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ2xvY2FsJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9LCB7IHpvbmU6ICdBbWVyaWNhL05ld19Zb3JrJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgd2Vla1llYXI6IDIwMTYsIHdlZWtOdW1iZXI6IDIsIHdlZWtkYXk6IDMgfSkudG9JU09EYXRlKCkgLy89PiAnMjAxNi0wMS0xMydcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICAgIGlmICghem9uZVRvVXNlLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTtcbiAgICB9XG5cbiAgICBjb25zdCB0c05vdyA9IFNldHRpbmdzLm5vdygpLFxuICAgICAgb2Zmc2V0UHJvdmlzID0gIWlzVW5kZWZpbmVkKG9wdHMuc3BlY2lmaWNPZmZzZXQpXG4gICAgICAgID8gb3B0cy5zcGVjaWZpY09mZnNldFxuICAgICAgICA6IHpvbmVUb1VzZS5vZmZzZXQodHNOb3cpLFxuICAgICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZU9iamVjdChvYmosIG5vcm1hbGl6ZVVuaXQpLFxuICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksXG4gICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yTUQgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5tb250aCkgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsXG4gICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcixcbiAgICAgIGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpO1xuXG4gICAgLy8gY2FzZXM6XG4gICAgLy8ganVzdCBhIHdlZWtkYXkgLT4gdGhpcyB3ZWVrJ3MgaW5zdGFuY2Ugb2YgdGhhdCB3ZWVrZGF5LCBubyB3b3JyaWVzXG4gICAgLy8gKGdyZWdvcmlhbiBkYXRhIG9yIG9yZGluYWwpICsgKHdlZWtZZWFyIG9yIHdlZWtOdW1iZXIpIC0+IGVycm9yXG4gICAgLy8gKGdyZWdvcmlhbiBtb250aCBvciBkYXkpICsgb3JkaW5hbCAtPiBlcnJvclxuICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB3ZWVrcyBvciBvcmRpbmFscyBvciBncmVnb3JpYW4sIGRlcGVuZGluZyBvbiB3aGF0J3Mgc3BlY2lmaWVkXG5cbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXG4gICAgICAgIFwiQ2FuJ3QgbWl4IHdlZWtZZWFyL3dlZWtOdW1iZXIgdW5pdHMgd2l0aCB5ZWFyL21vbnRoL2RheSBvciBvcmRpbmFsc1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiAhY29udGFpbnNHcmVnb3IpO1xuXG4gICAgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcbiAgICBsZXQgdW5pdHMsXG4gICAgICBkZWZhdWx0VmFsdWVzLFxuICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcbiAgICBpZiAodXNlV2Vla0RhdGEpIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFdlZWtVbml0cztcbiAgICAgIGRlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0V2Vla1VuaXRWYWx1ZXM7XG4gICAgICBvYmpOb3cgPSBncmVnb3JpYW5Ub1dlZWsob2JqTm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkT3JkaW5hbFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvT3JkaW5hbChvYmpOb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRVbml0cztcbiAgICAgIGRlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0VW5pdFZhbHVlcztcbiAgICB9XG5cbiAgICAvLyBzZXQgZGVmYXVsdCB2YWx1ZXMgZm9yIG1pc3Npbmcgc3R1ZmZcbiAgICBsZXQgZm91bmRGaXJzdCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgdSBvZiB1bml0cykge1xuICAgICAgY29uc3QgdiA9IG5vcm1hbGl6ZWRbdV07XG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7XG4gICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZEZpcnN0KSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IG9iak5vd1t1XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhlIHZhbHVlcyB3ZSBoYXZlIGFyZSBpbiByYW5nZVxuICAgIGNvbnN0IGhpZ2hlck9yZGVySW52YWxpZCA9IHVzZVdlZWtEYXRhXG4gICAgICAgID8gaGFzSW52YWxpZFdlZWtEYXRhKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogY29udGFpbnNPcmRpbmFsXG4gICAgICAgID8gaGFzSW52YWxpZE9yZGluYWxEYXRhKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEobm9ybWFsaXplZCksXG4gICAgICBpbnZhbGlkID0gaGlnaGVyT3JkZXJJbnZhbGlkIHx8IGhhc0ludmFsaWRUaW1lRGF0YShub3JtYWxpemVkKTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZVxuICAgIGNvbnN0IGdyZWdvcmlhbiA9IHVzZVdlZWtEYXRhXG4gICAgICAgID8gd2Vla1RvR3JlZ29yaWFuKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogY29udGFpbnNPcmRpbmFsXG4gICAgICAgID8gb3JkaW5hbFRvR3JlZ29yaWFuKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogbm9ybWFsaXplZCxcbiAgICAgIFt0c0ZpbmFsLCBvZmZzZXRGaW5hbF0gPSBvYmpUb1RTKGdyZWdvcmlhbiwgb2Zmc2V0UHJvdmlzLCB6b25lVG9Vc2UpLFxuICAgICAgaW5zdCA9IG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiB0c0ZpbmFsLFxuICAgICAgICB6b25lOiB6b25lVG9Vc2UsXG4gICAgICAgIG86IG9mZnNldEZpbmFsLFxuICAgICAgICBsb2MsXG4gICAgICB9KTtcblxuICAgIC8vIGdyZWdvcmlhbiBkYXRhICsgd2Vla2RheSBzZXJ2ZXMgb25seSB0byB2YWxpZGF0ZVxuICAgIGlmIChub3JtYWxpemVkLndlZWtkYXkgJiYgY29udGFpbnNHcmVnb3IgJiYgb2JqLndlZWtkYXkgIT09IGluc3Qud2Vla2RheSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXG4gICAgICAgIFwibWlzbWF0Y2hlZCB3ZWVrZGF5XCIsXG4gICAgICAgIGB5b3UgY2FuJ3Qgc3BlY2lmeSBib3RoIGEgd2Vla2RheSBvZiAke25vcm1hbGl6ZWQud2Vla2RheX0gYW5kIGEgZGF0ZSBvZiAke2luc3QudG9JU08oKX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMrMDY6MDAnLCB7c2V0Wm9uZTogdHJ1ZX0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJywge3pvbmU6ICd1dGMnfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VJU09EYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiSVNPIDg2MDFcIiwgdGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgUkZDIDI4MjIgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgdGhlIG9mZnNldCBpcyBhbHdheXMgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjM6MTIgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJ0ZyaSwgMjUgTm92IDIwMTYgMTM6MjM6MTIgKzA2MDAnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjMgWicpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21SRkMyODIyKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlUkZDMjgyMkRhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJSRkMgMjgyMlwiLCB0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSFRUUCBoZWFkZXIgZGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gY29udmVydCB0aGUgdGltZSB0byB0aGlzIHpvbmUuIFNpbmNlIEhUVFAgZGF0ZXMgYXJlIGFsd2F5cyBpbiBVVEMsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIHRoZSBmaXhlZC1vZmZzZXQgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZy4gRm9yIEhUVFAgZGF0ZXMsIHRoaXMgaXMgYWx3YXlzIFVUQywgc28gdGhpcyBvcHRpb24gaXMgZXF1aXZhbGVudCB0byBzZXR0aW5nIHRoZSBgem9uZWAgb3B0aW9uIHRvICd1dGMnLCBidXQgdGhpcyBvcHRpb24gaXMgaW5jbHVkZWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggc2ltaWxhciBtZXRob2RzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuLCAwNiBOb3YgMTk5NCAwODo0OTozNyBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuZGF5LCAwNi1Ob3YtOTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biBOb3YgIDYgMDg6NDk6MzcgMTk5NCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21IVFRQKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSFRUUERhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJIVFRQXCIsIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL3BhcnNpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzID0ge30pIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodGV4dCkgfHwgaXNVbmRlZmluZWQoZm10KSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbUZvcm1hdCByZXF1aXJlcyBhbiBpbnB1dCBzdHJpbmcgYW5kIGEgZm9ybWF0XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0gb3B0cyxcbiAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIGRlZmF1bHRUb0VOOiB0cnVlLFxuICAgICAgfSksXG4gICAgICBbdmFscywgcGFyc2VkWm9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRdID0gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZVRvVXNlLCB0ZXh0LCBmbXQpO1xuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgYGZvcm1hdCAke2ZtdH1gLCB0ZXh0LCBzcGVjaWZpY09mZnNldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0IGluc3RlYWRcbiAgICovXG4gIHN0YXRpYyBmcm9tU3RyaW5nKHRleHQsIGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgU1FMIGRhdGUsIHRpbWUsIG9yIGRhdGV0aW1lXG4gICAqIERlZmF1bHRzIHRvIGVuLVVTIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSdzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSBzdHJpbmcgdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNScpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIgQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnLCB7IHNldFpvbmU6IHRydWUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInLCB7IHpvbmU6ICdBbWVyaWNhL0xvc19BbmdlbGVzJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcwOToxMjozNC4zNDInKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tU1FMKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlU1FMKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiU1FMXCIsIHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBEYXRlVGltZSBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbiA9IG51bGwpIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEYXRlVGltZSBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG5cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IGludmFsaWQgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlVGltZS4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRGF0ZVRpbWUobykge1xuICAgIHJldHVybiAobyAmJiBvLmlzTHV4b25EYXRlVGltZSkgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUHJvZHVjZSB0aGUgZm9ybWF0IHN0cmluZyBmb3IgYSBzZXQgb2Ygb3B0aW9uc1xuICAgKiBAcGFyYW0gZm9ybWF0T3B0c1xuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHBhcnNlRm9ybWF0Rm9yT3B0cyhmb3JtYXRPcHRzLCBsb2NhbGVPcHRzID0ge30pIHtcbiAgICBjb25zdCB0b2tlbkxpc3QgPSBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgTG9jYWxlLmZyb21PYmplY3QobG9jYWxlT3B0cykpO1xuICAgIHJldHVybiAhdG9rZW5MaXN0ID8gbnVsbCA6IHRva2VuTGlzdC5tYXAoKHQpID0+ICh0ID8gdC52YWwgOiBudWxsKSkuam9pbihcIlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9kdWNlIHRoZSB0aGUgZnVsbHkgZXhwYW5kZWQgZm9ybWF0IHRva2VuIGZvciB0aGUgbG9jYWxlXG4gICAqIERvZXMgTk9UIHF1b3RlIGNoYXJhY3RlcnMsIHNvIHF1b3RlZCB0b2tlbnMgd2lsbCBub3Qgcm91bmQgdHJpcCBjb3JyZWN0bHlcbiAgICogQHBhcmFtIGZtdFxuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGV4cGFuZEZvcm1hdChmbXQsIGxvY2FsZU9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gZXhwYW5kTWFjcm9Ub2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIExvY2FsZS5mcm9tT2JqZWN0KGxvY2FsZU9wdHMpKTtcbiAgICByZXR1cm4gZXhwYW5kZWQubWFwKCh0KSA9PiB0LnZhbCkuam9pbihcIlwiKTtcbiAgfVxuXG4gIC8vIElORk9cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnbW9udGgnKTsgLy89PiA3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW3VuaXRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIERhdGVUaW1lIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEYXRlVGltZSBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbGUgb2YgYSBEYXRlVGltZSwgc3VjaCAnZW4tR0InLiBUaGUgbG9jYWxlIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG91dHB1dCBjYWxlbmRhciBvZiBhIERhdGVUaW1lLCBzdWNoICdpc2xhbWljJy4gVGhlIG91dHB1dCBjYWxlbmRhciBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvdXRwdXRDYWxlbmRhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGltZSB6b25lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIERhdGVUaW1lLlxuICAgKiBAdHlwZSB7Wm9uZX1cbiAgICovXG4gIGdldCB6b25lKCkge1xuICAgIHJldHVybiB0aGlzLl96b25lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZSBvZiB0aGUgdGltZSB6b25lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IHpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxN1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy55ZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBxdWFydGVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBNYXRoLmNlaWwodGhpcy5jLm1vbnRoIC8gMykgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtb250aCAoMS0xMikuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5tb250aCAvLz0+IDVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCAoMS0zMGlzaCkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5kYXkgLy89PiAyNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmRheSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5ob3VyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWludXRlIG9mIHRoZSBob3VyICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwKS5taW51dGUgLy89PiAzMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbnV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlY29uZCBvZiB0aGUgbWludXRlICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1Mikuc2Vjb25kIC8vPT4gNTJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5zZWNvbmQgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbGxpc2Vjb25kIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMiwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciAoMS01MmlzaCkuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkud2Vla051bWJlciAvLz0+IDIxXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrTnVtYmVyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrLlxuICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDExLCAzMSkud2Vla2RheSAvLz0+IDRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRpbmFsIChtZWFuaW5nIHRoZSBkYXkgb2YgdGhlIHllYXIpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1XG4gICAqIEB0eXBlIHtudW1iZXJ8RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdCcuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLm1vbnRoU2hvcnQgLy89PiBPY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBtb250aFNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocyhcInNob3J0XCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG1vbnRoTG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJsb25nXCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgc2hvcnQgd2Vla2RheSwgc3VjaCBhcyAnTW9uJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheVNob3J0IC8vPT4gTW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIGxvbmcgd2Vla2RheSwgc3VjaCBhcyAnTW9uZGF5Jy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheUxvbmcgLy89PiBNb25kYXlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB3ZWVrZGF5TG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cyhcImxvbmdcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm9mZnNldCAvLz0+IC0yNDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gK3RoaXMubyA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgb2Zmc2V0TmFtZVNob3J0KCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvZmZzZXROYW1lTG9uZygpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNPZmZzZXRGaXhlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy56b25lLmlzVW5pdmVyc2FsIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5EU1QoKSB7XG4gICAgaWYgKHRoaXMuaXNPZmZzZXRGaXhlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLm9mZnNldCA+IHRoaXMuc2V0KHsgbW9udGg6IDEsIGRheTogMSB9KS5vZmZzZXQgfHxcbiAgICAgICAgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7IG1vbnRoOiA1IH0pLm9mZnNldFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRob3NlIERhdGVUaW1lcyB3aGljaCBoYXZlIHRoZSBzYW1lIGxvY2FsIHRpbWUgYXMgdGhpcyBEYXRlVGltZSwgYnV0IGEgZGlmZmVyZW50IG9mZnNldCBmcm9tIFVUQ1xuICAgKiBpbiB0aGlzIERhdGVUaW1lJ3Mgem9uZS4gRHVyaW5nIERTVCBjaGFuZ2VzIGxvY2FsIHRpbWUgY2FuIGJlIGFtYmlndW91cywgZm9yIGV4YW1wbGVcbiAgICogYDIwMjMtMTAtMjlUMDI6MzA6MDBgIGluIGBFdXJvcGUvQmVybGluYCBjYW4gaGF2ZSBvZmZzZXQgYCswMTowMGAgb3IgYCswMjowMGAuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGJvdGggcG9zc2libGUgRGF0ZVRpbWVzIGlmIHRoaXMgRGF0ZVRpbWUncyBsb2NhbCB0aW1lIGlzIGFtYmlndW91cy5cbiAgICogQHJldHVybnMge0RhdGVUaW1lW119XG4gICAqL1xuICBnZXRQb3NzaWJsZU9mZnNldHMoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgdGhpcy5pc09mZnNldEZpeGVkKSB7XG4gICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cbiAgICBjb25zdCBkYXlNcyA9IDg2NDAwMDAwO1xuICAgIGNvbnN0IG1pbnV0ZU1zID0gNjAwMDA7XG4gICAgY29uc3QgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyh0aGlzLmMpO1xuICAgIGNvbnN0IG9FYXJsaWVyID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gZGF5TXMpO1xuICAgIGNvbnN0IG9MYXRlciA9IHRoaXMuem9uZS5vZmZzZXQobG9jYWxUUyArIGRheU1zKTtcblxuICAgIGNvbnN0IG8xID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gb0VhcmxpZXIgKiBtaW51dGVNcyk7XG4gICAgY29uc3QgbzIgPSB0aGlzLnpvbmUub2Zmc2V0KGxvY2FsVFMgLSBvTGF0ZXIgKiBtaW51dGVNcyk7XG4gICAgaWYgKG8xID09PSBvMikge1xuICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgY29uc3QgdHMxID0gbG9jYWxUUyAtIG8xICogbWludXRlTXM7XG4gICAgY29uc3QgdHMyID0gbG9jYWxUUyAtIG8yICogbWludXRlTXM7XG4gICAgY29uc3QgYzEgPSB0c1RvT2JqKHRzMSwgbzEpO1xuICAgIGNvbnN0IGMyID0gdHNUb09iaih0czIsIG8yKTtcbiAgICBpZiAoXG4gICAgICBjMS5ob3VyID09PSBjMi5ob3VyICYmXG4gICAgICBjMS5taW51dGUgPT09IGMyLm1pbnV0ZSAmJlxuICAgICAgYzEuc2Vjb25kID09PSBjMi5zZWNvbmQgJiZcbiAgICAgIGMxLm1pbGxpc2Vjb25kID09PSBjMi5taWxsaXNlY29uZFxuICAgICkge1xuICAgICAgcmV0dXJuIFtjbG9uZSh0aGlzLCB7IHRzOiB0czEgfSksIGNsb25lKHRoaXMsIHsgdHM6IHRzMiB9KV07XG4gICAgfVxuICAgIHJldHVybiBbdGhpc107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW4gYSBsZWFwIHllYXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5pc0luTGVhcFllYXIgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyBtb250aFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAyKS5kYXlzSW5Nb250aCAvLz0+IDI5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYsIDMpLmRheXNJbk1vbnRoIC8vPT4gMzFcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5Nb250aCgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5ZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBkYXlzSW5ZZWFyKHRoaXMueWVhcikgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdlZWtzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDA0KS53ZWVrc0luV2Vla1llYXIgLy89PiA1M1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS53ZWVrc0luV2Vla1llYXIgLy89PiA1MlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gd2Vla3NJbldlZWtZZWFyKHRoaXMud2Vla1llYXIpIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJlc29sdmVkIEludGwgb3B0aW9ucyBmb3IgdGhpcyBEYXRlVGltZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgaW4gdW5kZXJzdGFuZGluZyB0aGUgYmVoYXZpb3Igb2YgZm9ybWF0dGluZyBtZXRob2RzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gdGhlIHNhbWUgb3B0aW9ucyBhcyB0b0xvY2FsZVN0cmluZ1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICByZXNvbHZlZExvY2FsZU9wdGlvbnMob3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXIgfSA9IEZvcm1hdHRlci5jcmVhdGUoXG4gICAgICB0aGlzLmxvYy5jbG9uZShvcHRzKSxcbiAgICAgIG9wdHNcbiAgICApLnJlc29sdmVkT3B0aW9ucyh0aGlzKTtcbiAgICByZXR1cm4geyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXI6IGNhbGVuZGFyIH07XG4gIH1cblxuICAvLyBUUkFOU0ZPUk1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIFVUQy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKlxuICAgKiBFcXVpdmFsZW50IHRvIHtAbGluayBEYXRlVGltZSNzZXRab25lfSgndXRjJylcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBvcHRpb25hbGx5LCBhbiBvZmZzZXQgZnJvbSBVVEMgaW4gbWludXRlc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gb3B0aW9ucyB0byBwYXNzIHRvIGBzZXRab25lKClgXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgdG9VVEMob2Zmc2V0ID0gMCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0Wm9uZShGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2Uob2Zmc2V0KSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIHRoZSBob3N0J3MgbG9jYWwgem9uZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKlxuICAgKiBFcXVpdmFsZW50IHRvIGBzZXRab25lKCdsb2NhbCcpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHRvTG9jYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0Wm9uZShTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIHNwZWNpZmllZCB6b25lLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzZXR0ZXIga2VlcHMgdGhlIHVuZGVybHlpbmcgdGltZSB0aGUgc2FtZSAoYXMgaW4sIHRoZSBzYW1lIHRpbWVzdGFtcCksIGJ1dCB0aGUgbmV3IGluc3RhbmNlIHdpbGwgcmVwb3J0IGRpZmZlcmVudCBsb2NhbCB0aW1lcyBhbmQgY29uc2lkZXIgRFNUcyB3aGVuIG1ha2luZyBjb21wdXRhdGlvbnMsIGFzIHdpdGgge0BsaW5rIERhdGVUaW1lI3BsdXN9LiBZb3UgbWF5IHdpc2ggdG8gdXNlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsfSBhbmQge0BsaW5rIERhdGVUaW1lI3RvVVRDfSB3aGljaCBwcm92aWRlIHNpbXBsZSBjb252ZW5pZW5jZSB3cmFwcGVycyBmb3IgY29tbW9ubHkgdXNlZCB6b25lcy5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW3pvbmU9J2xvY2FsJ10gLSBhIHpvbmUgaWRlbnRpZmllci4gQXMgYSBzdHJpbmcsIHRoYXQgY2FuIGJlIGFueSBJQU5BIHpvbmUgc3VwcG9ydGVkIGJ5IHRoZSBob3N0IGVudmlyb25tZW50LCBvciBhIGZpeGVkLW9mZnNldCBuYW1lIG9mIHRoZSBmb3JtICdVVEMrMycsIG9yIHRoZSBzdHJpbmdzICdsb2NhbCcgb3IgJ3V0YycuIFlvdSBtYXkgYWxzbyBzdXBwbHkgYW4gaW5zdGFuY2Ugb2YgYSB7QGxpbmsgRGF0ZVRpbWUjWm9uZX0gY2xhc3MuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmtlZXBMb2NhbFRpbWU9ZmFsc2VdIC0gSWYgdHJ1ZSwgYWRqdXN0IHRoZSB1bmRlcmx5aW5nIHRpbWUgc28gdGhhdCB0aGUgbG9jYWwgdGltZSBzdGF5cyB0aGUgc2FtZSwgYnV0IGluIHRoZSB0YXJnZXQgem9uZS4gWW91IHNob3VsZCByYXJlbHkgbmVlZCB0aGlzLlxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHNldFpvbmUoem9uZSwgeyBrZWVwTG9jYWxUaW1lID0gZmFsc2UsIGtlZXBDYWxlbmRhclRpbWUgPSBmYWxzZSB9ID0ge30pIHtcbiAgICB6b25lID0gbm9ybWFsaXplWm9uZSh6b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKHpvbmUuZXF1YWxzKHRoaXMuem9uZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld1RTID0gdGhpcy50cztcbiAgICAgIGlmIChrZWVwTG9jYWxUaW1lIHx8IGtlZXBDYWxlbmRhclRpbWUpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0R3Vlc3MgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgY29uc3QgYXNPYmogPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgICAgIFtuZXdUU10gPSBvYmpUb1RTKGFzT2JqLCBvZmZzZXRHdWVzcywgem9uZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvbmUodGhpcywgeyB0czogbmV3VFMsIHpvbmUgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvciBvdXRwdXRDYWxlbmRhci4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICByZWNvbmZpZ3VyZSh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciB9ID0ge30pIHtcbiAgICBjb25zdCBsb2MgPSB0aGlzLmxvYy5jbG9uZSh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciB9KTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyBsb2MgfSk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqIEp1c3QgYSBjb252ZW5pZW50IGFsaWFzIGZvciByZWNvbmZpZ3VyZSh7IGxvY2FsZSB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkuc2V0TG9jYWxlKCdlbi1HQicpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc2V0TG9jYWxlKGxvY2FsZSkge1xuICAgIHJldHVybiB0aGlzLnJlY29uZmlndXJlKHsgbG9jYWxlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogWW91IGNhbiBvbmx5IHNldCB1bml0cyB3aXRoIHRoaXMgbWV0aG9kOyBmb3IgXCJzZXR0aW5nXCIgbWV0YWRhdGEsIHNlZSB7QGxpbmsgRGF0ZVRpbWUjcmVjb25maWd1cmV9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgd2Vla2RheTogNSB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDA1LCBvcmRpbmFsOiAyMzQgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzZXQodmFsdWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZU9iamVjdCh2YWx1ZXMsIG5vcm1hbGl6ZVVuaXQpLFxuICAgICAgc2V0dGluZ1dlZWtTdHVmZiA9XG4gICAgICAgICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtZZWFyKSB8fFxuICAgICAgICAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fFxuICAgICAgICAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrZGF5KSxcbiAgICAgIGNvbnRhaW5zT3JkaW5hbCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm9yZGluYWwpLFxuICAgICAgY29udGFpbnNHcmVnb3JZZWFyID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQueWVhciksXG4gICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICBjb250YWluc0dyZWdvciA9IGNvbnRhaW5zR3JlZ29yWWVhciB8fCBjb250YWluc0dyZWdvck1ELFxuICAgICAgZGVmaW5pdGVXZWVrRGVmID0gbm9ybWFsaXplZC53ZWVrWWVhciB8fCBub3JtYWxpemVkLndlZWtOdW1iZXI7XG5cbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXG4gICAgICAgIFwiQ2FuJ3QgbWl4IHdlZWtZZWFyL3dlZWtOdW1iZXIgdW5pdHMgd2l0aCB5ZWFyL21vbnRoL2RheSBvciBvcmRpbmFsc1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuXG4gICAgbGV0IG1peGVkO1xuICAgIGlmIChzZXR0aW5nV2Vla1N0dWZmKSB7XG4gICAgICBtaXhlZCA9IHdlZWtUb0dyZWdvcmlhbih7IC4uLmdyZWdvcmlhblRvV2Vlayh0aGlzLmMpLCAuLi5ub3JtYWxpemVkIH0pO1xuICAgIH0gZWxzZSBpZiAoIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCkpIHtcbiAgICAgIG1peGVkID0gb3JkaW5hbFRvR3JlZ29yaWFuKHsgLi4uZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYyksIC4uLm5vcm1hbGl6ZWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0geyAuLi50aGlzLnRvT2JqZWN0KCksIC4uLm5vcm1hbGl6ZWQgfTtcblxuICAgICAgLy8gaWYgd2UgZGlkbid0IHNldCB0aGUgZGF5IGJ1dCB3ZSBlbmRlZCB1cCBvbiBhbiBvdmVyZmxvdyBkYXRlLFxuICAgICAgLy8gdXNlIHRoZSBsYXN0IGRheSBvZiB0aGUgcmlnaHQgbW9udGhcbiAgICAgIGlmIChpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSkpIHtcbiAgICAgICAgbWl4ZWQuZGF5ID0gTWF0aC5taW4oZGF5c0luTW9udGgobWl4ZWQueWVhciwgbWl4ZWQubW9udGgpLCBtaXhlZC5kYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IFt0cywgb10gPSBvYmpUb1RTKG1peGVkLCB0aGlzLm8sIHRoaXMuem9uZSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdHMsIG8gfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICpcbiAgICogQWRkaW5nIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBvciBtaWxsaXNlY29uZHMgaW5jcmVhc2VzIHRoZSB0aW1lc3RhbXAgYnkgdGhlIHJpZ2h0IG51bWJlciBvZiBtaWxsaXNlY29uZHMuIEFkZGluZyBkYXlzLCBtb250aHMsIG9yIHllYXJzIHNoaWZ0cyB0aGUgY2FsZW5kYXIsIGFjY291bnRpbmcgZm9yIERTVHMgYW5kIGxlYXAgeWVhcnMgYWxvbmcgdGhlIHdheS4gVGh1cywgYGR0LnBsdXMoeyBob3VyczogMjQgfSlgIG1heSByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdGltZSB0aGFuIGBkdC5wbHVzKHsgZGF5czogMSB9KWAgaWYgdGhlcmUncyBhIERTVCBzaGlmdCBpbiBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoMTIzKSAvL34+IGluIDEyMyBtaWxsaXNlY29uZHNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IG1pbnV0ZXM6IDE1IH0pIC8vfj4gaW4gMTUgbWludXRlc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KSAvL34+IHRoaXMgdGltZSB0b21vcnJvd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogLTEgfSkgLy9+PiB0aGlzIHRpbWUgeWVzdGVyZGF5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBob3VyczogMywgbWludXRlczogMTMgfSkgLy9+PiBpbiAzIGhyLCAxMyBtaW5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyhEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDMsIG1pbnV0ZXM6IDEzIH0pKSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbik7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3QgYSBwZXJpb2Qgb2YgdGltZSB0byB0aGlzIERhdGVUaW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBEYXRlVGltZVxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI3BsdXN9XG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIHN1YnRyYWN0LiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKVxuICAgQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBtaW51cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKS5uZWdhdGUoKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgYWRqdXN0VGltZSh0aGlzLCBkdXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoaXMgRGF0ZVRpbWUgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHVuaXQgb2YgdGltZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaGUgdW5pdCB0byBnbyB0byB0aGUgYmVnaW5uaW5nIG9mLiBDYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCdtb250aCcpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCd5ZWFyJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdkYXknKS50b0lTT1RpbWUoKTsgLy89PiAnMDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignaG91cicpLnRvSVNPVGltZSgpOyAvLz0+ICcwNTowMDowMC4wMDAtMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhcnRPZih1bml0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG8gPSB7fSxcbiAgICAgIG5vcm1hbGl6ZWRVbml0ID0gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1bml0KTtcbiAgICBzd2l0Y2ggKG5vcm1hbGl6ZWRVbml0KSB7XG4gICAgICBjYXNlIFwieWVhcnNcIjpcbiAgICAgICAgby5tb250aCA9IDE7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFwicXVhcnRlcnNcIjpcbiAgICAgIGNhc2UgXCJtb250aHNcIjpcbiAgICAgICAgby5kYXkgPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcIndlZWtzXCI6XG4gICAgICBjYXNlIFwiZGF5c1wiOlxuICAgICAgICBvLmhvdXIgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcImhvdXJzXCI6XG4gICAgICAgIG8ubWludXRlID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgXCJtaW51dGVzXCI6XG4gICAgICAgIG8uc2Vjb25kID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XG4gICAgICAgIG8ubWlsbGlzZWNvbmQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIG5vIGRlZmF1bHQsIGludmFsaWQgdW5pdHMgdGhyb3cgaW4gbm9ybWFsaXplVW5pdCgpXG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSBcIndlZWtzXCIpIHtcbiAgICAgIG8ud2Vla2RheSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSBcInF1YXJ0ZXJzXCIpIHtcbiAgICAgIGNvbnN0IHEgPSBNYXRoLmNlaWwodGhpcy5tb250aCAvIDMpO1xuICAgICAgby5tb250aCA9IChxIC0gMSkgKiAzICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZXQobyk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGlzIERhdGVUaW1lIHRvIHRoZSBlbmQgKG1lYW5pbmcgdGhlIGxhc3QgbWlsbGlzZWNvbmQpIG9mIGEgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGhlIHVuaXQgdG8gZ28gdG8gdGhlIGVuZCBvZi4gQ2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgb3IgJ21pbGxpc2Vjb25kJy5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ21vbnRoJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd5ZWFyJykudG9JU08oKTsgLy89PiAnMjAxNC0xMi0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd3ZWVrJykudG9JU08oKTsgLy8gPT4gJzIwMTQtMDMtMDlUMjM6NTk6NTkuOTk5LTA1OjAwJywgd2Vla3Mgc3RhcnQgb24gTW9uZGF5c1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2RheScpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMjM6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2hvdXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDA1OjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBlbmRPZih1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyB0aGlzLnBsdXMoeyBbdW5pdF06IDEgfSlcbiAgICAgICAgICAuc3RhcnRPZih1bml0KVxuICAgICAgICAgIC5taW51cygxKVxuICAgICAgOiB0aGlzO1xuICB9XG5cbiAgLy8gT1VUUFVUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy5cbiAgICogKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZSBmb3JtYXR0aW5nIHRvb2wuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL2Zvcm1hdHRpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnKSAvLz0+ICcyMDE3IEFwciAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCdmcicpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJywgeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+ICcyMDE3IGF2ci4gMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KFwiSEggJ2hvdXJzIGFuZCcgbW0gJ21pbnV0ZXMnXCIpIC8vPT4gJzIwIGhvdXJzIGFuZCA1NSBtaW51dGVzJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5yZWRlZmF1bHRUb0VOKG9wdHMpKS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcodGhpcywgZm10KVxuICAgICAgOiBJTlZBTElEO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIGRhdGUuIEFjY2VwdHMgdGhlIHNhbWUgb3B0aW9ucyBhcyB0aGUgSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBhbmQgYW55IHByZXNldHMgZGVmaW5lZCBieSBMdXhvbiwgc3VjaCBhcyBgRGF0ZVRpbWUuREFURV9GVUxMYCBvciBgRGF0ZVRpbWUuVElNRV9TSU1QTEVgLlxuICAgKiBUaGUgZXhhY3QgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2QgaXMgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGluIGdlbmVyYWwgaXQgd2lsbCByZXR1cm4gYW4gYXBwcm9wcmlhdGUgcmVwcmVzZW50YXRpb25cbiAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSBmb3JtYXRPcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDQvMjAvMjAxN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2VuLWdiJykudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiAnMjAvMDQvMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMKTsgLy89PiAnQXByaWwgMjAsIDIwMTcnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCwgeyBsb2NhbGU6ICdmcicgfSk7IC8vPT4gJzI4IGFvw7t0IDIwMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUKTsgLy89PiAnNC8yMC8yMDE3LCAxMTozMiBBTSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyB3ZWVrZGF5OiAnbG9uZycsIG1vbnRoOiAnbG9uZycsIGRheTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHVyc2RheSwgQXByaWwgMjAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHUsIEFwciAyMCwgMTE6MjcgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JywgaG91ckN5Y2xlOiAnaDIzJyB9KTsgLy89PiAnMTE6MzInXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvTG9jYWxlU3RyaW5nKGZvcm1hdE9wdHMgPSBEQVRFX1NIT1JULCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIGZvcm1hdE9wdHMpLmZvcm1hdERhdGVUaW1lKHRoaXMpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBmb3JtYXQgXCJwYXJ0c1wiLCBtZWFuaW5nIGluZGl2aWR1YWwgdG9rZW5zIGFsb25nIHdpdGggbWV0YWRhdGEuIFRoaXMgaXMgYWxsb3dzIGNhbGxlcnMgdG8gcG9zdC1wcm9jZXNzIGluZGl2aWR1YWwgc2VjdGlvbnMgb2YgdGhlIGZvcm1hdHRlZCBvdXRwdXQuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0L2Zvcm1hdFRvUGFydHNcbiAgICogQHBhcmFtIG9wdHMge09iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMsIHNhbWUgYXMgYHRvTG9jYWxlU3RyaW5nYC5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVQYXJ0cygpOyAvLz0+IFtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdkYXknLCB2YWx1ZTogJzI1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbW9udGgnLCB2YWx1ZTogJzA1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAneWVhcicsIHZhbHVlOiAnMTk4MicgfVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiBdXG4gICAqL1xuICB0b0xvY2FsZVBhcnRzKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgb3B0cykuZm9ybWF0RGF0ZVRpbWVQYXJ0cyh0aGlzKVxuICAgICAgOiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5leHRlbmRlZFpvbmU9ZmFsc2VdIC0gYWRkIHRoZSB0aW1lIHpvbmUgZm9ybWF0IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODMsIDUsIDI1KS50b0lTTygpIC8vPT4gJzE5ODItMDUtMjVUMDA6MDA6MDAuMDAwWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oKSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNS0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMjAxNzA0MjJUMjA0NzA1LjMzNS0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTTyh7XG4gICAgZm9ybWF0ID0gXCJleHRlbmRlZFwiLFxuICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLFxuICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzID0gZmFsc2UsXG4gICAgaW5jbHVkZU9mZnNldCA9IHRydWUsXG4gICAgZXh0ZW5kZWRab25lID0gZmFsc2UsXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBleHQgPSBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIjtcblxuICAgIGxldCBjID0gdG9JU09EYXRlKHRoaXMsIGV4dCk7XG4gICAgYyArPSBcIlRcIjtcbiAgICBjICs9IHRvSVNPVGltZSh0aGlzLCBleHQsIHN1cHByZXNzU2Vjb25kcywgc3VwcHJlc3NNaWxsaXNlY29uZHMsIGluY2x1ZGVPZmZzZXQsIGV4dGVuZGVkWm9uZSk7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyBkYXRlIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygxOTgyLCA1LCAyNSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wNS0yNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMTk4MjA1MjUnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPRGF0ZSh7IGZvcm1hdCA9IFwiZXh0ZW5kZWRcIiB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB3ZWVrIGRhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT1dlZWtEYXRlKCkgLy89PiAnMTk4Mi1XMjEtMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09XZWVrRGF0ZSgpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIFwia2tray0nVydXVy1jXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3MgdGltZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZXh0ZW5kZWRab25lPXRydWVdIC0gYWRkIHRoZSB0aW1lIHpvbmUgZm9ybWF0IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVQcmVmaXg9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgYFRgIHByZWZpeFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoKSAvLz0+ICcwNzozNDoxOS4zNjFaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0LCBzZWNvbmRzOiAwLCBtaWxsaXNlY29uZHM6IDAgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzA3OjM0WidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMDczNDE5LjM2MVonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQgfSkudG9JU09UaW1lKHsgaW5jbHVkZVByZWZpeDogdHJ1ZSB9KSAvLz0+ICdUMDc6MzQ6MTkuMzYxWidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09UaW1lKHtcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGluY2x1ZGVQcmVmaXggPSBmYWxzZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZSxcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCIsXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgYyA9IGluY2x1ZGVQcmVmaXggPyBcIlRcIiA6IFwiXCI7XG4gICAgcmV0dXJuIChcbiAgICAgIGMgK1xuICAgICAgdG9JU09UaW1lKFxuICAgICAgICB0aGlzLFxuICAgICAgICBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIixcbiAgICAgICAgc3VwcHJlc3NTZWNvbmRzLFxuICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyxcbiAgICAgICAgaW5jbHVkZU9mZnNldCxcbiAgICAgICAgZXh0ZW5kZWRab25lXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIFJGQyAyODIyLWNvbXBhdGlibGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwICswMDAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9SRkMyODIyKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCAtMDQwMCdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9SRkMyODIyKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgXCJFRUUsIGRkIExMTCB5eXl5IEhIOm1tOnNzIFpaWlwiLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSFRUUCBoZWFkZXJzLiBUaGUgb3V0cHV0IGlzIGFsd2F5cyBleHByZXNzZWQgaW4gR01ULlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSBzdHJpbmcgY29uZm9ybXMgdG8gUkZDIDExMjMuXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCBHTVQnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMywgMTkpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMTk6MDA6MDAgR01UJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0hUVFAoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLnRvVVRDKCksIFwiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyAnR01UJ1wiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgRGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMRGF0ZSgpIC8vPT4gJzIwMTQtMDctMTMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU1FMRGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0b0lTT0RhdGUodGhpcywgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gU1FMIFRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVpvbmU9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgem9uZSwgc3VjaCBhcyAnQW1lcmljYS9OZXdfWW9yaycuIE92ZXJyaWRlcyBpbmNsdWRlT2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKCkgLy89PiAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSBBbWVyaWNhL05ld19Zb3JrJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1NRTFRpbWUoeyBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSwgaW5jbHVkZVpvbmUgPSBmYWxzZSwgaW5jbHVkZU9mZnNldFNwYWNlID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBsZXQgZm10ID0gXCJISDptbTpzcy5TU1NcIjtcblxuICAgIGlmIChpbmNsdWRlWm9uZSB8fCBpbmNsdWRlT2Zmc2V0KSB7XG4gICAgICBpZiAoaW5jbHVkZU9mZnNldFNwYWNlKSB7XG4gICAgICAgIGZtdCArPSBcIiBcIjtcbiAgICAgIH1cbiAgICAgIGlmIChpbmNsdWRlWm9uZSkge1xuICAgICAgICBmbXQgKz0gXCJ6XCI7XG4gICAgICB9IGVsc2UgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgICAgZm10ICs9IFwiWlpcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIGZtdCwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gU1FMIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVab25lPWZhbHNlXSAtIGluY2x1ZGUgdGhlIHpvbmUsIHN1Y2ggYXMgJ0FtZXJpY2EvTmV3X1lvcmsnLiBPdmVycmlkZXMgaW5jbHVkZU9mZnNldC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXRTcGFjZT10cnVlXSAtIGluY2x1ZGUgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHRpbWUgYW5kIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJzA1OjE1OjE2LjM0NSAtMDQ6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUwoKSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCBaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9TUUwoKSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCAtMDQ6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9TUUwoeyBpbmNsdWRlWm9uZTogdHJ1ZSB9KSAvLz0+ICcyMDE0LTA3LTEzIDAwOjAwOjAwLjAwMCBBbWVyaWNhL05ld19Zb3JrJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1NRTChvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMudG9TUUxEYXRlKCl9ICR7dGhpcy50b1NRTFRpbWUob3B0cyl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIGRlYnVnZ2luZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50b0lTTygpIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4gQWxpYXMgb2Yge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZXBvY2ggbWlsbGlzZWNvbmRzIG9mIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvTWlsbGlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9TZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIC8gMTAwMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBzZWNvbmRzIChhcyBhIHdob2xlIG51bWJlcikgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEJTT04gc2VyaWFsaXphYmxlIGVxdWl2YWxlbnQgdG8gdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7RGF0ZX1cbiAgICovXG4gIHRvQlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRoaXMgRGF0ZVRpbWUncyB5ZWFyLCBtb250aCwgZGF5LCBhbmQgc28gb24uXG4gICAqIEBwYXJhbSBvcHRzIC0gb3B0aW9ucyBmb3IgZ2VuZXJhdGluZyB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZUNvbmZpZz1mYWxzZV0gLSBpbmNsdWRlIGNvbmZpZ3VyYXRpb24gYXR0cmlidXRlcyBpbiB0aGUgb3V0cHV0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvT2JqZWN0KCkgLy89PiB7IHllYXI6IDIwMTcsIG1vbnRoOiA0LCBkYXk6IDIyLCBob3VyOiAyMCwgbWludXRlOiA0OSwgc2Vjb25kOiA0MiwgbWlsbGlzZWNvbmQ6IDI2OCB9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHRvT2JqZWN0KG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG5cbiAgICBjb25zdCBiYXNlID0geyAuLi50aGlzLmMgfTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICB0b0pTRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTik7XG4gIH1cblxuICAvLyBDT01QQVJFXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBEYXRlVGltZXMgYXMgYSBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBEYXRlVGltZSB0byBjb21wYXJlIHRoaXMgb25lIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIGFycmF5IG9mIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBpMSA9IERhdGVUaW1lLmZyb21JU08oJzE5ODItMDUtMjVUMDk6NDUnKSxcbiAgICogICAgIGkyID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4My0xMC0xNFQxMDozMCcpO1xuICAgKiBpMi5kaWZmKGkxKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDQzODA3NTAwMDAwIH1cbiAgICogaTIuZGlmZihpMSwgJ2hvdXJzJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDEyMTY4Ljc1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOS4wMzEyNSB9XG4gICAqIGkyLmRpZmYoaTEsIFsnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnXSkudG9PYmplY3QoKSAvLz0+IHsgbW9udGhzOiAxNiwgZGF5czogMTksIGhvdXJzOiAwLjc1IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1ck9wdHMgPSB7IGxvY2FsZTogdGhpcy5sb2NhbGUsIG51bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW0sIC4uLm9wdHMgfTtcblxuICAgIGNvbnN0IHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLFxuICAgICAgZWFybGllciA9IG90aGVySXNMYXRlciA/IHRoaXMgOiBvdGhlckRhdGVUaW1lLFxuICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgIGRpZmZlZCA9IGRpZmYoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBkdXJPcHRzKTtcblxuICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgcmlnaHQgbm93LlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9XG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmTm93KHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmKERhdGVUaW1lLm5vdygpLCB1bml0LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgc3Bhbm5pbmcgYmV0d2VlbiB0aGlzIERhdGVUaW1lIGFuZCBhbm90aGVyIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgZW5kIHBvaW50IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBEYXRlVGltZSBpcyBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWUgYXMgYW5vdGhlciBEYXRlVGltZS5cbiAgICogSGlnaGVyLW9yZGVyIHVuaXRzIG11c3QgYWxzbyBiZSBpZGVudGljYWwgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYC5cbiAgICogTm90ZSB0aGF0IHRpbWUgem9uZXMgYXJlICoqaWdub3JlZCoqIGluIHRoaXMgY29tcGFyaXNvbiwgd2hpY2ggY29tcGFyZXMgdGhlICoqbG9jYWwqKiBjYWxlbmRhciB0aW1lLiBVc2Uge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9IHRvIGNvbnZlcnQgb25lIG9mIHRoZSBkYXRlcyBpZiBuZWVkZWQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLmhhc1NhbWUob3RoZXJEVCwgJ2RheScpOyAvL34+IHRydWUgaWYgb3RoZXJEVCBpcyBpbiB0aGUgc2FtZSBjdXJyZW50IGNhbGVuZGFyIGRheVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzU2FtZShvdGhlckRhdGVUaW1lLCB1bml0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IGlucHV0TXMgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKTtcbiAgICBjb25zdCBhZGp1c3RlZFRvWm9uZSA9IHRoaXMuc2V0Wm9uZShvdGhlckRhdGVUaW1lLnpvbmUsIHsga2VlcExvY2FsVGltZTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gYWRqdXN0ZWRUb1pvbmUuc3RhcnRPZih1bml0KSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gYWRqdXN0ZWRUb1pvbmUuZW5kT2YodW5pdCk7XG4gIH1cblxuICAvKipcbiAgICogRXF1YWxpdHkgY2hlY2tcbiAgICogVHdvIERhdGVUaW1lcyBhcmUgZXF1YWwgaWYgYW5kIG9ubHkgaWYgdGhleSByZXByZXNlbnQgdGhlIHNhbWUgbWlsbGlzZWNvbmQsIGhhdmUgdGhlIHNhbWUgem9uZSBhbmQgbG9jYXRpb24sIGFuZCBhcmUgYm90aCB2YWxpZC5cbiAgICogVG8gY29tcGFyZSBqdXN0IHRoZSBtaWxsaXNlY29uZCB2YWx1ZXMsIHVzZSBgK2R0MSA9PT0gK2R0MmAuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyIC0gdGhlIG90aGVyIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pc1ZhbGlkICYmXG4gICAgICBvdGhlci5pc1ZhbGlkICYmXG4gICAgICB0aGlzLnZhbHVlT2YoKSA9PT0gb3RoZXIudmFsdWVPZigpICYmXG4gICAgICB0aGlzLnpvbmUuZXF1YWxzKG90aGVyLnpvbmUpICYmXG4gICAgICB0aGlzLmxvYy5lcXVhbHMob3RoZXIubG9jKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHRoaXMgdGltZSByZWxhdGl2ZSB0byBub3csIHN1Y2ggYXMgXCJpbiB0d28gZGF5c1wiLiBDYW4gb25seSBpbnRlcm5hdGlvbmFsaXplIGlmIHlvdXJcbiAgICogcGxhdGZvcm0gc3VwcG9ydHMgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQuIFJvdW5kcyBkb3duIGJ5IGRlZmF1bHQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgb3V0cHV0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IFtvcHRpb25zLmJhc2U9RGF0ZVRpbWUubm93KCldIC0gdGhlIERhdGVUaW1lIHRvIHVzZSBhcyB0aGUgYmFzaXMgdG8gd2hpY2ggdGhpcyB0aW1lIGlzIGNvbXBhcmVkLiBEZWZhdWx0cyB0byBub3cuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdHlsZT1cImxvbmdcIl0gLSB0aGUgc3R5bGUgb2YgdW5pdHMsIG11c3QgYmUgXCJsb25nXCIsIFwic2hvcnRcIiwgb3IgXCJuYXJyb3dcIlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gb3B0aW9ucy51bml0IC0gdXNlIGEgc3BlY2lmaWMgdW5pdCBvciBhcnJheSBvZiB1bml0czsgaWYgb21pdHRlZCwgb3IgYW4gYXJyYXksIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSBiZXN0IHVuaXQuIFVzZSBhbiBhcnJheSBvciBvbmUgb2YgXCJ5ZWFyc1wiLCBcInF1YXJ0ZXJzXCIsIFwibW9udGhzXCIsIFwid2Vla3NcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIG9yIFwic2Vjb25kc1wiXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucm91bmQ9dHJ1ZV0gLSB3aGV0aGVyIHRvIHJvdW5kIHRoZSBudW1iZXJzIGluIHRoZSBvdXRwdXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5wYWRkaW5nPTBdIC0gcGFkZGluZyBpbiBtaWxsaXNlY29uZHMuIFRoaXMgYWxsb3dzIHlvdSB0byByb3VuZCB1cCB0aGUgcmVzdWx0IGlmIGl0IGZpdHMgaW5zaWRlIHRoZSB0aHJlc2hvbGQuIERvbid0IHVzZSBpbiBjb21iaW5hdGlvbiB3aXRoIHtyb3VuZDogZmFsc2V9IGJlY2F1c2UgdGhlIGRlY2ltYWwgb3V0cHV0IHdpbGwgaW5jbHVkZSB0aGUgcGFkZGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gXCJpbiAxIGRheVwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnRvUmVsYXRpdmUoeyBkYXlzOiAxIH0pIC8vPT4gXCJkZW50cm8gZGUgMSBkw61hXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSh7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkYW5zIDIzIGhldXJlc1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZSh7IHVuaXQ6IFwiaG91cnNcIiB9KSAvLz0+IFwiNDggaG91cnMgYWdvXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBob3VyczogMzYgfSkudG9SZWxhdGl2ZSh7IHJvdW5kOiBmYWxzZSB9KSAvLz0+IFwiMS41IGRheXMgYWdvXCJcbiAgICovXG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwgeyB6b25lOiB0aGlzLnpvbmUgfSksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nID8gKHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZykgOiAwO1xuICAgIGxldCB1bml0cyA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl07XG4gICAgbGV0IHVuaXQgPSBvcHRpb25zLnVuaXQ7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy51bml0KSkge1xuICAgICAgdW5pdHMgPSBvcHRpb25zLnVuaXQ7XG4gICAgICB1bml0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKGJhc2UsIHRoaXMucGx1cyhwYWRkaW5nKSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG51bWVyaWM6IFwiYWx3YXlzXCIsXG4gICAgICB1bml0cyxcbiAgICAgIHVuaXQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRhdGUgcmVsYXRpdmUgdG8gdG9kYXksIHN1Y2ggYXMgXCJ5ZXN0ZXJkYXlcIiBvciBcIm5leHQgbW9udGhcIi5cbiAgICogT25seSBpbnRlcm5hdGlvbmFsaXplcyBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0OyBpZiBvbWl0dGVkLCB0aGUgbWV0aG9kIHdpbGwgcGljayB0aGUgdW5pdC4gVXNlIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBvciBcImRheXNcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSBvdmVycmlkZSB0aGUgbnVtYmVyaW5nU3lzdGVtIG9mIHRoaXMgRGF0ZVRpbWUuIFRoZSBJbnRsIHN5c3RlbSBtYXkgY2hvb3NlIG5vdCB0byBob25vciB0aGlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCJ0b21vcnJvd1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiXCJtYcOxYW5hXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKHsgbG9jYWxlOiBcImZyXCIgfSkgLy89PiBcImRlbWFpblwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoKSAvLz0+IFwiMiBkYXlzIGFnb1wiXG4gICAqL1xuICB0b1JlbGF0aXZlQ2FsZW5kYXIob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIGRpZmZSZWxhdGl2ZShvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwgeyB6b25lOiB0aGlzLnpvbmUgfSksIHRoaXMsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBudW1lcmljOiBcImF1dG9cIixcbiAgICAgIHVuaXRzOiBbXCJ5ZWFyc1wiLCBcIm1vbnRoc1wiLCBcImRheXNcIl0sXG4gICAgICBjYWxlbmRhcnk6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtaW4gb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1pbmltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtaW4gRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cbiAgc3RhdGljIG1pbiguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWluIHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgKGkpID0+IGkudmFsdWVPZigpLCBNYXRoLm1pbik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtYXggb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1heGltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtYXggRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cbiAgc3RhdGljIG1heCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWF4IHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgKGkpID0+IGkudmFsdWVPZigpLCBNYXRoLm1heCk7XG4gIH1cblxuICAvLyBNSVNDXG5cbiAgLyoqXG4gICAqIEV4cGxhaW4gaG93IGEgc3RyaW5nIHdvdWxkIGJlIHBhcnNlZCBieSBmcm9tRm9ybWF0KClcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSBkZXNjcmlwdGlvbilcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRha2VuIGJ5IGZyb21Gb3JtYXQoKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZnJvbUZvcm1hdEV4cGxhaW4odGV4dCwgZm10LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwgfSA9IG9wdGlvbnMsXG4gICAgICBsb2NhbGVUb1VzZSA9IExvY2FsZS5mcm9tT3B0cyh7XG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBkZWZhdWx0VG9FTjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIHJldHVybiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdEV4cGxhaW4gaW5zdGVhZFxuICAgKi9cbiAgc3RhdGljIGZyb21TdHJpbmdFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyk7XG4gIH1cblxuICAvLyBGT1JNQVQgUFJFU0VUU1xuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlIDEwLzE0LzE5ODNcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9TSE9SVCgpIHtcbiAgICByZXR1cm4gREFURV9TSE9SVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfTUVEKCkge1xuICAgIHJldHVybiBEQVRFX01FRDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIE9jdCAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFX01FRF9XSVRIX1dFRUtEQVk7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9GVUxMKCkge1xuICAgIHJldHVybiBEQVRFX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9IVUdFKCkge1xuICAgIHJldHVybiBEQVRFX0hVR0U7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9TSU1QTEUoKSB7XG4gICAgcmV0dXJuIFRJTUVfU0lNUExFO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBUSU1FX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gVElNRV9XSVRIX1NIT1JUX09GRlNFVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiBUSU1FX1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzAnLCBhbHdheXMgMjQtaG91ci5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9TSU1QTEUoKSB7XG4gICAgcmV0dXJuIFRJTUVfMjRfU0lNUExFO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBUSU1FXzI0X1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFRFQnLCBhbHdheXMgMjQtaG91ci5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLCBhbHdheXMgMjQtaG91ci5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVCgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfU0hPUlQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfTUVEKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRUQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFM7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpLCAxNCBPY3QgMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMsIDk6MzAgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTEwoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaWRheSwgT2N0b2JlciAxNCwgMTk4MywgOTozMCBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRSgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfSFVHRTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmlkYXksIE9jdG9iZXIgMTQsIDE5ODMsIDk6MzA6MzMgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUztcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZyaWVuZGx5RGF0ZVRpbWUoZGF0ZVRpbWVpc2gpIHtcbiAgaWYgKERhdGVUaW1lLmlzRGF0ZVRpbWUoZGF0ZVRpbWVpc2gpKSB7XG4gICAgcmV0dXJuIGRhdGVUaW1laXNoO1xuICB9IGVsc2UgaWYgKGRhdGVUaW1laXNoICYmIGRhdGVUaW1laXNoLnZhbHVlT2YgJiYgaXNOdW1iZXIoZGF0ZVRpbWVpc2gudmFsdWVPZigpKSkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGVUaW1laXNoKTtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiB0eXBlb2YgZGF0ZVRpbWVpc2ggPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbU9iamVjdChkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgYFVua25vd24gZGF0ZXRpbWUgYXJndW1lbnQ6ICR7ZGF0ZVRpbWVpc2h9LCBvZiB0eXBlICR7dHlwZW9mIGRhdGVUaW1laXNofWBcbiAgICApO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBRdWVyeSBTZXR0aW5ncyAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IERFRkFVTFRfUVVFUllfU0VUVElOR1MgPSB7XG4gICAgcmVuZGVyTnVsbEFzOiBcIlxcXFwtXCIsXG4gICAgdGFza0NvbXBsZXRpb25UcmFja2luZzogZmFsc2UsXG4gICAgdGFza0NvbXBsZXRpb25Vc2VFbW9qaVNob3J0aGFuZDogZmFsc2UsXG4gICAgdGFza0NvbXBsZXRpb25UZXh0OiBcImNvbXBsZXRpb25cIixcbiAgICB0YXNrQ29tcGxldGlvbkRhdGVGb3JtYXQ6IFwieXl5eS1NTS1kZFwiLFxuICAgIHJlY3Vyc2l2ZVN1YlRhc2tDb21wbGV0aW9uOiBmYWxzZSxcbiAgICB3YXJuT25FbXB0eVJlc3VsdDogdHJ1ZSxcbiAgICByZWZyZXNoRW5hYmxlZDogdHJ1ZSxcbiAgICByZWZyZXNoSW50ZXJ2YWw6IDI1MDAsXG4gICAgZGVmYXVsdERhdGVGb3JtYXQ6IFwiTU1NTSBkZCwgeXl5eVwiLFxuICAgIGRlZmF1bHREYXRlVGltZUZvcm1hdDogXCJoOm1tIGEgLSBNTU1NIGRkLCB5eXl5XCIsXG4gICAgbWF4UmVjdXJzaXZlUmVuZGVyRGVwdGg6IDQsXG4gICAgdGFibGVJZENvbHVtbk5hbWU6IFwiRmlsZVwiLFxuICAgIHRhYmxlR3JvdXBDb2x1bW5OYW1lOiBcIkdyb3VwXCIsXG4gICAgc2hvd1Jlc3VsdENvdW50OiB0cnVlLFxufTtcbmNvbnN0IERFRkFVTFRfRVhQT1JUX1NFVFRJTkdTID0ge1xuICAgIGFsbG93SHRtbDogdHJ1ZSxcbn07XG4vKiogRGVmYXVsdCBzZXR0aW5ncyBmb3IgZGF0YXZpZXcgb24gaW5zdGFsbC4gKi9cbih7XG4gICAgLi4uREVGQVVMVF9RVUVSWV9TRVRUSU5HUyxcbiAgICAuLi5ERUZBVUxUX0VYUE9SVF9TRVRUSU5HUyxcbiAgICAuLi57XG4gICAgICAgIGlubGluZVF1ZXJ5UHJlZml4OiBcIj1cIixcbiAgICAgICAgaW5saW5lSnNRdWVyeVByZWZpeDogXCIkPVwiLFxuICAgICAgICBpbmxpbmVRdWVyaWVzSW5Db2RlYmxvY2tzOiB0cnVlLFxuICAgICAgICBlbmFibGVJbmxpbmVEYXRhdmlldzogdHJ1ZSxcbiAgICAgICAgZW5hYmxlRGF0YXZpZXdKczogZmFsc2UsXG4gICAgICAgIGVuYWJsZUlubGluZURhdGF2aWV3SnM6IGZhbHNlLFxuICAgICAgICBwcmV0dHlSZW5kZXJJbmxpbmVGaWVsZHM6IHRydWUsXG4gICAgICAgIHByZXR0eVJlbmRlcklubGluZUZpZWxkc0luTGl2ZVByZXZpZXc6IHRydWUsXG4gICAgICAgIGRhdGF2aWV3SnNLZXl3b3JkOiBcImRhdGF2aWV3anNcIixcbiAgICB9LFxufSk7XG5cbi8qKiBGdW5jdGlvbmFsIHJldHVybiB0eXBlIGZvciBlcnJvciBoYW5kbGluZy4gKi9cbmNsYXNzIFN1Y2Nlc3Mge1xuICAgIHZhbHVlO1xuICAgIHN1Y2Nlc3NmdWw7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnN1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgIH1cbiAgICBtYXAoZikge1xuICAgICAgICByZXR1cm4gbmV3IFN1Y2Nlc3MoZih0aGlzLnZhbHVlKSk7XG4gICAgfVxuICAgIGZsYXRNYXAoZikge1xuICAgICAgICByZXR1cm4gZih0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgbWFwRXJyKGYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGJpbWFwKHN1Y2MsIF9mYWlsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChzdWNjKTtcbiAgICB9XG4gICAgb3JFbHNlKF92YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgY2FzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9yRWxzZVRocm93KF9tZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbn1cbi8qKiBGdW5jdGlvbmFsIHJldHVybiB0eXBlIGZvciBlcnJvciBoYW5kbGluZy4gKi9cbmNsYXNzIEZhaWx1cmUge1xuICAgIGVycm9yO1xuICAgIHN1Y2Nlc3NmdWw7XG4gICAgY29uc3RydWN0b3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLnN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICB9XG4gICAgbWFwKF9mKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmbGF0TWFwKF9mKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBtYXBFcnIoZikge1xuICAgICAgICByZXR1cm4gbmV3IEZhaWx1cmUoZih0aGlzLmVycm9yKSk7XG4gICAgfVxuICAgIGJpbWFwKF9zdWNjLCBmYWlsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcEVycihmYWlsKTtcbiAgICB9XG4gICAgb3JFbHNlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY2FzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9yRWxzZVRocm93KG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSh0aGlzLmVycm9yKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiICsgdGhpcy5lcnJvcik7XG4gICAgfVxufVxuLyoqIE1vbmFkaWMgJ1Jlc3VsdCcgdHlwZSB3aGljaCBlbmNhcHN1bGF0ZXMgd2hldGhlciBhIHByb2NlZHVyZSBzdWNjZWVkZWQgb3IgZmFpbGVkLCBhcyB3ZWxsIGFzIGl0J3MgcmV0dXJuIHZhbHVlLiAqL1xudmFyIFJlc3VsdDtcbihmdW5jdGlvbiAoUmVzdWx0KSB7XG4gICAgLyoqIENvbnN0cnVjdCBhIG5ldyBzdWNjZXNzIHJlc3VsdCB3cmFwcGluZyB0aGUgZ2l2ZW4gdmFsdWUuICovXG4gICAgZnVuY3Rpb24gc3VjY2Vzcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1Y2Nlc3ModmFsdWUpO1xuICAgIH1cbiAgICBSZXN1bHQuc3VjY2VzcyA9IHN1Y2Nlc3M7XG4gICAgLyoqIENvbnN0cnVjdCBhIG5ldyBmYWlsdXJlIHZhbHVlIHdyYXBwaW5nIHRoZSBnaXZlbiBlcnJvci4gKi9cbiAgICBmdW5jdGlvbiBmYWlsdXJlKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmFpbHVyZShlcnJvcik7XG4gICAgfVxuICAgIFJlc3VsdC5mYWlsdXJlID0gZmFpbHVyZTtcbiAgICAvKiogSm9pbiB0d28gcmVzdWx0cyB3aXRoIGEgYmktZnVuY3Rpb24gYW5kIHJldHVybiBhIG5ldyByZXN1bHQuICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcDIoZmlyc3QsIHNlY29uZCwgZikge1xuICAgICAgICBpZiAoZmlyc3Quc3VjY2Vzc2Z1bCkge1xuICAgICAgICAgICAgaWYgKHNlY29uZC5zdWNjZXNzZnVsKVxuICAgICAgICAgICAgICAgIHJldHVybiBmKGZpcnN0LnZhbHVlLCBzZWNvbmQudmFsdWUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsdXJlKHNlY29uZC5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZShmaXJzdC5lcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgUmVzdWx0LmZsYXRNYXAyID0gZmxhdE1hcDI7XG4gICAgLyoqIEpvaW4gdHdvIHJlc3VsdHMgd2l0aCBhIGJpLWZ1bmN0aW9uIGFuZCByZXR1cm4gYSBuZXcgcmVzdWx0LiAqL1xuICAgIGZ1bmN0aW9uIG1hcDIoZmlyc3QsIHNlY29uZCwgZikge1xuICAgICAgICByZXR1cm4gZmxhdE1hcDIoZmlyc3QsIHNlY29uZCwgKGEsIGIpID0+IHN1Y2Nlc3MoZihhLCBiKSkpO1xuICAgIH1cbiAgICBSZXN1bHQubWFwMiA9IG1hcDI7XG59KShSZXN1bHQgfHwgKFJlc3VsdCA9IHt9KSk7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG52YXIgcGFyc2ltbW9uX3VtZF9taW4gPSB7ZXhwb3J0czoge319O1xuXG5wYXJzaW1tb25fdW1kX21pbi5leHBvcnRzO1xuXG4oZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXHQhZnVuY3Rpb24obix0KXttb2R1bGUuZXhwb3J0cz10KCk7fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOmNvbW1vbmpzR2xvYmFsLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciB0PXt9O2Z1bmN0aW9uIHIoZSl7aWYodFtlXSlyZXR1cm4gdFtlXS5leHBvcnRzO3ZhciB1PXRbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiBuW2VdLmNhbGwodS5leHBvcnRzLHUsdS5leHBvcnRzLHIpLHUubD0hMCx1LmV4cG9ydHN9cmV0dXJuIHIubT1uLHIuYz10LHIuZD1mdW5jdGlvbihuLHQsZSl7ci5vKG4sdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDplfSk7fSxyLnI9ZnVuY3Rpb24obil7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7fSxyLm49ZnVuY3Rpb24obil7dmFyIHQ9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIHIuZCh0LFwiYVwiLHQpLHR9LHIubz1mdW5jdGlvbihuLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobix0KX0sci5wPVwiXCIscihyLnM9MCl9KFtmdW5jdGlvbihuLHQscil7ZnVuY3Rpb24gZShuKXtpZighKHRoaXMgaW5zdGFuY2VvZiBlKSlyZXR1cm4gbmV3IGUobik7dGhpcy5fPW47fXZhciB1PWUucHJvdG90eXBlO2Z1bmN0aW9uIG8obix0KXtmb3IodmFyIHI9MDtyPG47cisrKXQocik7fWZ1bmN0aW9uIGkobix0LHIpe3JldHVybiBmdW5jdGlvbihuLHQpe28odC5sZW5ndGgsZnVuY3Rpb24ocil7bih0W3JdLHIsdCk7fSk7fShmdW5jdGlvbihyLGUsdSl7dD1uKHQscixlLHUpO30sciksdH1mdW5jdGlvbiBhKG4sdCl7cmV0dXJuIGkoZnVuY3Rpb24odCxyLGUsdSl7cmV0dXJuIHQuY29uY2F0KFtuKHIsZSx1KV0pfSxbXSx0KX1mdW5jdGlvbiBmKG4sdCl7dmFyIHI9e3Y6MCxidWY6dH07cmV0dXJuIG8obixmdW5jdGlvbigpe3ZhciBuO3I9e3Y6ci52PDwxfChuPXIuYnVmLG5bMF0+PjcpLGJ1ZjpmdW5jdGlvbihuKXt2YXIgdD1pKGZ1bmN0aW9uKG4sdCxyLGUpe3JldHVybiBuLmNvbmNhdChyPT09ZS5sZW5ndGgtMT9CdWZmZXIuZnJvbShbdCwwXSkucmVhZFVJbnQxNkJFKDApOmUucmVhZFVJbnQxNkJFKHIpKX0sW10sbik7cmV0dXJuIEJ1ZmZlci5mcm9tKGEoZnVuY3Rpb24obil7cmV0dXJuIChuPDwxJjY1NTM1KT4+OH0sdCkpfShyLmJ1Zil9O30pLHJ9ZnVuY3Rpb24gYygpe3JldHVybiBcInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyfWZ1bmN0aW9uIHMoKXtpZighYygpKXRocm93IG5ldyBFcnJvcihcIkJ1ZmZlciBnbG9iYWwgZG9lcyBub3QgZXhpc3Q7IHBsZWFzZSB1c2Ugd2VicGFjayBpZiB5b3UgbmVlZCB0byBwYXJzZSBCdWZmZXJzIGluIHRoZSBicm93c2VyLlwiKX1mdW5jdGlvbiBsKG4pe3MoKTt2YXIgdD1pKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4rdH0sMCxuKTtpZih0JTghPTApdGhyb3cgbmV3IEVycm9yKFwiVGhlIGJpdHMgW1wiK24uam9pbihcIiwgXCIpK1wiXSBhZGQgdXAgdG8gXCIrdCtcIiB3aGljaCBpcyBub3QgYW4gZXZlbiBudW1iZXIgb2YgYnl0ZXM7IHRoZSB0b3RhbCBzaG91bGQgYmUgZGl2aXNpYmxlIGJ5IDhcIik7dmFyIHIsdT10Lzgsbz0ocj1mdW5jdGlvbihuKXtyZXR1cm4gbj40OH0saShmdW5jdGlvbihuLHQpe3JldHVybiBufHwocih0KT90Om4pfSxudWxsLG4pKTtpZihvKXRocm93IG5ldyBFcnJvcihvK1wiIGJpdCByYW5nZSByZXF1ZXN0ZWQgZXhjZWVkcyA0OCBiaXQgKDYgYnl0ZSkgTnVtYmVyIG1heC5cIik7cmV0dXJuIG5ldyBlKGZ1bmN0aW9uKHQscil7dmFyIGU9dStyO3JldHVybiBlPnQubGVuZ3RoP3gocix1LnRvU3RyaW5nKCkrXCIgYnl0ZXNcIik6YihlLGkoZnVuY3Rpb24obix0KXt2YXIgcj1mKHQsbi5idWYpO3JldHVybiB7Y29sbDpuLmNvbGwuY29uY2F0KHIudiksYnVmOnIuYnVmfX0se2NvbGw6W10sYnVmOnQuc2xpY2UocixlKX0sbikuY29sbCl9KX1mdW5jdGlvbiBoKG4sdCl7cmV0dXJuIG5ldyBlKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHMoKSxlK3Q+ci5sZW5ndGg/eChlLHQrXCIgYnl0ZXMgZm9yIFwiK24pOmIoZSt0LHIuc2xpY2UoZSxlK3QpKX0pfWZ1bmN0aW9uIHAobix0KXtpZihcIm51bWJlclwiIT10eXBlb2Yocj10KXx8TWF0aC5mbG9vcihyKSE9PXJ8fHQ8MHx8dD42KXRocm93IG5ldyBFcnJvcihuK1wiIHJlcXVpcmVzIGludGVnZXIgbGVuZ3RoIGluIHJhbmdlIFswLCA2XS5cIik7dmFyIHI7fWZ1bmN0aW9uIGQobil7cmV0dXJuIHAoXCJ1aW50QkVcIixuKSxoKFwidWludEJFKFwiK24rXCIpXCIsbikubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlYWRVSW50QkUoMCxuKX0pfWZ1bmN0aW9uIHYobil7cmV0dXJuIHAoXCJ1aW50TEVcIixuKSxoKFwidWludExFKFwiK24rXCIpXCIsbikubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlYWRVSW50TEUoMCxuKX0pfWZ1bmN0aW9uIGcobil7cmV0dXJuIHAoXCJpbnRCRVwiLG4pLGgoXCJpbnRCRShcIituK1wiKVwiLG4pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZWFkSW50QkUoMCxuKX0pfWZ1bmN0aW9uIG0obil7cmV0dXJuIHAoXCJpbnRMRVwiLG4pLGgoXCJpbnRMRShcIituK1wiKVwiLG4pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZWFkSW50TEUoMCxuKX0pfWZ1bmN0aW9uIHkobil7cmV0dXJuIG4gaW5zdGFuY2VvZiBlfWZ1bmN0aW9uIEUobil7cmV0dXJuIFwiW29iamVjdCBBcnJheV1cIj09PXt9LnRvU3RyaW5nLmNhbGwobil9ZnVuY3Rpb24gdyhuKXtyZXR1cm4gYygpJiZCdWZmZXIuaXNCdWZmZXIobil9ZnVuY3Rpb24gYihuLHQpe3JldHVybiB7c3RhdHVzOiEwLGluZGV4Om4sdmFsdWU6dCxmdXJ0aGVzdDotMSxleHBlY3RlZDpbXX19ZnVuY3Rpb24geChuLHQpe3JldHVybiBFKHQpfHwodD1bdF0pLHtzdGF0dXM6ITEsaW5kZXg6LTEsdmFsdWU6bnVsbCxmdXJ0aGVzdDpuLGV4cGVjdGVkOnR9fWZ1bmN0aW9uIEIobix0KXtpZighdClyZXR1cm4gbjtpZihuLmZ1cnRoZXN0PnQuZnVydGhlc3QpcmV0dXJuIG47dmFyIHI9bi5mdXJ0aGVzdD09PXQuZnVydGhlc3Q/ZnVuY3Rpb24obix0KXtpZihmdW5jdGlvbigpe2lmKHZvaWQgMCE9PWUuX3N1cHBvcnRzU2V0KXJldHVybiBlLl9zdXBwb3J0c1NldDt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0O3JldHVybiBlLl9zdXBwb3J0c1NldD1uLG59KCkmJkFycmF5LmZyb20pe2Zvcih2YXIgcj1uZXcgU2V0KG4pLHU9MDt1PHQubGVuZ3RoO3UrKylyLmFkZCh0W3VdKTt2YXIgbz1BcnJheS5mcm9tKHIpO3JldHVybiBvLnNvcnQoKSxvfWZvcih2YXIgaT17fSxhPTA7YTxuLmxlbmd0aDthKyspaVtuW2FdXT0hMDtmb3IodmFyIGY9MDtmPHQubGVuZ3RoO2YrKylpW3RbZl1dPSEwO3ZhciBjPVtdO2Zvcih2YXIgcyBpbiBpKSh7fSkuaGFzT3duUHJvcGVydHkuY2FsbChpLHMpJiZjLnB1c2gocyk7cmV0dXJuIGMuc29ydCgpLGN9KG4uZXhwZWN0ZWQsdC5leHBlY3RlZCk6dC5leHBlY3RlZDtyZXR1cm4ge3N0YXR1czpuLnN0YXR1cyxpbmRleDpuLmluZGV4LHZhbHVlOm4udmFsdWUsZnVydGhlc3Q6dC5mdXJ0aGVzdCxleHBlY3RlZDpyfX12YXIgaj17fTtmdW5jdGlvbiBTKG4sdCl7aWYodyhuKSlyZXR1cm4ge29mZnNldDp0LGxpbmU6LTEsY29sdW1uOi0xfTtuIGluIGp8fChqW25dPXt9KTtmb3IodmFyIHI9altuXSxlPTAsdT0wLG89MCxpPXQ7aT49MDspe2lmKGkgaW4gcil7ZT1yW2ldLmxpbmUsMD09PW8mJihvPXJbaV0ubGluZVN0YXJ0KTticmVha30oXCJcXG5cIj09PW4uY2hhckF0KGkpfHxcIlxcclwiPT09bi5jaGFyQXQoaSkmJlwiXFxuXCIhPT1uLmNoYXJBdChpKzEpKSYmKHUrKywwPT09byYmKG89aSsxKSksaS0tO312YXIgYT1lK3UsZj10LW87cmV0dXJuIHJbdF09e2xpbmU6YSxsaW5lU3RhcnQ6b30se29mZnNldDp0LGxpbmU6YSsxLGNvbHVtbjpmKzF9fWZ1bmN0aW9uIF8obil7aWYoIXkobikpdGhyb3cgbmV3IEVycm9yKFwibm90IGEgcGFyc2VyOiBcIituKX1mdW5jdGlvbiBMKG4sdCl7cmV0dXJuIFwic3RyaW5nXCI9PXR5cGVvZiBuP24uY2hhckF0KHQpOm5bdF19ZnVuY3Rpb24gTyhuKXtpZihcIm51bWJlclwiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJub3QgYSBudW1iZXI6IFwiK24pfWZ1bmN0aW9uIGsobil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJub3QgYSBmdW5jdGlvbjogXCIrbil9ZnVuY3Rpb24gUChuKXtpZihcInN0cmluZ1wiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJub3QgYSBzdHJpbmc6IFwiK24pfXZhciBxPTIsQT0zLEk9OCxGPTUqSSxNPTQqSSx6PVwiICBcIjtmdW5jdGlvbiBSKG4sdCl7cmV0dXJuIG5ldyBBcnJheSh0KzEpLmpvaW4obil9ZnVuY3Rpb24gVShuLHQscil7dmFyIGU9dC1uLmxlbmd0aDtyZXR1cm4gZTw9MD9uOlIocixlKStufWZ1bmN0aW9uIFcobix0LHIsZSl7cmV0dXJuIHtmcm9tOm4tdD4wP24tdDowLHRvOm4rcj5lP2U6bityfX1mdW5jdGlvbiBEKG4sdCl7dmFyIHIsZSx1LG8sZixjPXQuaW5kZXgscz1jLm9mZnNldCxsPTE7aWYocz09PW4ubGVuZ3RoKXJldHVybiBcIkdvdCB0aGUgZW5kIG9mIHRoZSBpbnB1dFwiO2lmKHcobikpe3ZhciBoPXMtcyVJLHA9cy1oLGQ9VyhoLEYsTStJLG4ubGVuZ3RoKSx2PWEoZnVuY3Rpb24obil7cmV0dXJuIGEoZnVuY3Rpb24obil7cmV0dXJuIFUobi50b1N0cmluZygxNiksMixcIjBcIil9LG4pfSxmdW5jdGlvbihuLHQpe3ZhciByPW4ubGVuZ3RoLGU9W10sdT0wO2lmKHI8PXQpcmV0dXJuIFtuLnNsaWNlKCldO2Zvcih2YXIgbz0wO288cjtvKyspZVt1XXx8ZS5wdXNoKFtdKSxlW3VdLnB1c2gobltvXSksKG8rMSkldD09MCYmdSsrO3JldHVybiBlfShuLnNsaWNlKGQuZnJvbSxkLnRvKS50b0pTT04oKS5kYXRhLEkpKTtvPWZ1bmN0aW9uKG4pe3JldHVybiAwPT09bi5mcm9tJiYxPT09bi50bz97ZnJvbTpuLmZyb20sdG86bi50b306e2Zyb206bi5mcm9tL0ksdG86TWF0aC5mbG9vcihuLnRvL0kpfX0oZCksZT1oL0kscj0zKnAscD49NCYmKHIrPTEpLGw9Mix1PWEoZnVuY3Rpb24obil7cmV0dXJuIG4ubGVuZ3RoPD00P24uam9pbihcIiBcIik6bi5zbGljZSgwLDQpLmpvaW4oXCIgXCIpK1wiICBcIituLnNsaWNlKDQpLmpvaW4oXCIgXCIpfSx2KSwoZj0oOCooby50bz4wP28udG8tMTpvLnRvKSkudG9TdHJpbmcoMTYpLmxlbmd0aCk8MiYmKGY9Mik7fWVsc2Uge3ZhciBnPW4uc3BsaXQoL1xcclxcbnxbXFxuXFxyXFx1MjAyOFxcdTIwMjldLyk7cj1jLmNvbHVtbi0xLGU9Yy5saW5lLTEsbz1XKGUscSxBLGcubGVuZ3RoKSx1PWcuc2xpY2Uoby5mcm9tLG8udG8pLGY9by50by50b1N0cmluZygpLmxlbmd0aDt9dmFyIG09ZS1vLmZyb207cmV0dXJuIHcobikmJihmPSg4KihvLnRvPjA/by50by0xOm8udG8pKS50b1N0cmluZygxNikubGVuZ3RoKTwyJiYoZj0yKSxpKGZ1bmN0aW9uKHQsZSx1KXt2YXIgaSxhPXU9PT1tLGM9YT9cIj4gXCI6ejtyZXR1cm4gaT13KG4pP1UoKDgqKG8uZnJvbSt1KSkudG9TdHJpbmcoMTYpLGYsXCIwXCIpOlUoKG8uZnJvbSt1KzEpLnRvU3RyaW5nKCksZixcIiBcIiksW10uY29uY2F0KHQsW2MraStcIiB8IFwiK2VdLGE/W3orUihcIiBcIixmKStcIiB8IFwiK1UoXCJcIixyLFwiIFwiKStSKFwiXlwiLGwpXTpbXSl9LFtdLHUpLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gTihuLHQpe3JldHVybiBbXCJcXG5cIixcIi0tIFBBUlNJTkcgRkFJTEVEIFwiK1IoXCItXCIsNTApLFwiXFxuXFxuXCIsRChuLHQpLFwiXFxuXFxuXCIsKHI9dC5leHBlY3RlZCwxPT09ci5sZW5ndGg/XCJFeHBlY3RlZDpcXG5cXG5cIityWzBdOlwiRXhwZWN0ZWQgb25lIG9mIHRoZSBmb2xsb3dpbmc6IFxcblxcblwiK3Iuam9pbihcIiwgXCIpKSxcIlxcblwiXS5qb2luKFwiXCIpO3ZhciByO31mdW5jdGlvbiBHKG4pe3JldHVybiB2b2lkIDAhPT1uLmZsYWdzP24uZmxhZ3M6W24uZ2xvYmFsP1wiZ1wiOlwiXCIsbi5pZ25vcmVDYXNlP1wiaVwiOlwiXCIsbi5tdWx0aWxpbmU/XCJtXCI6XCJcIixuLnVuaWNvZGU/XCJ1XCI6XCJcIixuLnN0aWNreT9cInlcIjpcIlwiXS5qb2luKFwiXCIpfWZ1bmN0aW9uIEMoKXtmb3IodmFyIG49W10uc2xpY2UuY2FsbChhcmd1bWVudHMpLHQ9bi5sZW5ndGgscj0wO3I8dDtyKz0xKV8obltyXSk7cmV0dXJuIGUoZnVuY3Rpb24ocixlKXtmb3IodmFyIHUsbz1uZXcgQXJyYXkodCksaT0wO2k8dDtpKz0xKXtpZighKHU9QihuW2ldLl8ocixlKSx1KSkuc3RhdHVzKXJldHVybiB1O29baV09dS52YWx1ZSxlPXUuaW5kZXg7fXJldHVybiBCKGIoZSxvKSx1KX0pfWZ1bmN0aW9uIEooKXt2YXIgbj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7aWYoMD09PW4ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInNlcU1hcCBuZWVkcyBhdCBsZWFzdCBvbmUgYXJndW1lbnRcIik7dmFyIHQ9bi5wb3AoKTtyZXR1cm4gayh0KSxDLmFwcGx5KG51bGwsbikubWFwKGZ1bmN0aW9uKG4pe3JldHVybiB0LmFwcGx5KG51bGwsbil9KX1mdW5jdGlvbiBUKCl7dmFyIG49W10uc2xpY2UuY2FsbChhcmd1bWVudHMpLHQ9bi5sZW5ndGg7aWYoMD09PXQpcmV0dXJuIFkoXCJ6ZXJvIGFsdGVybmF0ZXNcIik7Zm9yKHZhciByPTA7cjx0O3IrPTEpXyhuW3JdKTtyZXR1cm4gZShmdW5jdGlvbih0LHIpe2Zvcih2YXIgZSx1PTA7dTxuLmxlbmd0aDt1Kz0xKWlmKChlPUIoblt1XS5fKHQsciksZSkpLnN0YXR1cylyZXR1cm4gZTtyZXR1cm4gZX0pfWZ1bmN0aW9uIFYobix0KXtyZXR1cm4gSChuLHQpLm9yKFgoW10pKX1mdW5jdGlvbiBIKG4sdCl7cmV0dXJuIF8obiksXyh0KSxKKG4sdC50aGVuKG4pLm1hbnkoKSxmdW5jdGlvbihuLHQpe3JldHVybiBbbl0uY29uY2F0KHQpfSl9ZnVuY3Rpb24gSyhuKXtQKG4pO3ZhciB0PVwiJ1wiK24rXCInXCI7cmV0dXJuIGUoZnVuY3Rpb24ocixlKXt2YXIgdT1lK24ubGVuZ3RoLG89ci5zbGljZShlLHUpO3JldHVybiBvPT09bj9iKHUsbyk6eChlLHQpfSl9ZnVuY3Rpb24gUShuLHQpeyFmdW5jdGlvbihuKXtpZighKG4gaW5zdGFuY2VvZiBSZWdFeHApKXRocm93IG5ldyBFcnJvcihcIm5vdCBhIHJlZ2V4cDogXCIrbik7Zm9yKHZhciB0PUcobikscj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgZT10LmNoYXJBdChyKTtpZihcImlcIiE9PWUmJlwibVwiIT09ZSYmXCJ1XCIhPT1lJiZcInNcIiE9PWUpdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCByZWdleHAgZmxhZyBcIicrZSsnXCI6ICcrbil9fShuKSxhcmd1bWVudHMubGVuZ3RoPj0yP08odCk6dD0wO3ZhciByPWZ1bmN0aW9uKG4pe3JldHVybiBSZWdFeHAoXCJeKD86XCIrbi5zb3VyY2UrXCIpXCIsRyhuKSl9KG4pLHU9XCJcIituO3JldHVybiBlKGZ1bmN0aW9uKG4sZSl7dmFyIG89ci5leGVjKG4uc2xpY2UoZSkpO2lmKG8pe2lmKDA8PXQmJnQ8PW8ubGVuZ3RoKXt2YXIgaT1vWzBdLGE9b1t0XTtyZXR1cm4gYihlK2kubGVuZ3RoLGEpfXJldHVybiB4KGUsXCJ2YWxpZCBtYXRjaCBncm91cCAoMCB0byBcIitvLmxlbmd0aCtcIikgaW4gXCIrdSl9cmV0dXJuIHgoZSx1KX0pfWZ1bmN0aW9uIFgobil7cmV0dXJuIGUoZnVuY3Rpb24odCxyKXtyZXR1cm4gYihyLG4pfSl9ZnVuY3Rpb24gWShuKXtyZXR1cm4gZShmdW5jdGlvbih0LHIpe3JldHVybiB4KHIsbil9KX1mdW5jdGlvbiBaKG4pe2lmKHkobikpcmV0dXJuIGUoZnVuY3Rpb24odCxyKXt2YXIgZT1uLl8odCxyKTtyZXR1cm4gZS5pbmRleD1yLGUudmFsdWU9XCJcIixlfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pcmV0dXJuIFooSyhuKSk7aWYobiBpbnN0YW5jZW9mIFJlZ0V4cClyZXR1cm4gWihRKG4pKTt0aHJvdyBuZXcgRXJyb3IoXCJub3QgYSBzdHJpbmcsIHJlZ2V4cCwgb3IgcGFyc2VyOiBcIituKX1mdW5jdGlvbiAkKG4pe3JldHVybiBfKG4pLGUoZnVuY3Rpb24odCxyKXt2YXIgZT1uLl8odCxyKSx1PXQuc2xpY2UocixlLmluZGV4KTtyZXR1cm4gZS5zdGF0dXM/eChyLCdub3QgXCInK3UrJ1wiJyk6YihyLG51bGwpfSl9ZnVuY3Rpb24gbm4obil7cmV0dXJuIGsobiksZShmdW5jdGlvbih0LHIpe3ZhciBlPUwodCxyKTtyZXR1cm4gcjx0Lmxlbmd0aCYmbihlKT9iKHIrMSxlKTp4KHIsXCJhIGNoYXJhY3Rlci9ieXRlIG1hdGNoaW5nIFwiK24pfSl9ZnVuY3Rpb24gdG4obix0KXthcmd1bWVudHMubGVuZ3RoPDImJih0PW4sbj12b2lkIDApO3ZhciByPWUoZnVuY3Rpb24obixlKXtyZXR1cm4gci5fPXQoKS5fLHIuXyhuLGUpfSk7cmV0dXJuIG4/ci5kZXNjKG4pOnJ9ZnVuY3Rpb24gcm4oKXtyZXR1cm4gWShcImZhbnRhc3ktbGFuZC9lbXB0eVwiKX11LnBhcnNlPWZ1bmN0aW9uKG4pe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBuJiYhdyhuKSl0aHJvdyBuZXcgRXJyb3IoXCIucGFyc2UgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIHN0cmluZyBvciBCdWZmZXIgYXMgaXRzIGFyZ3VtZW50XCIpO3ZhciB0LHI9dGhpcy5za2lwKGFuKS5fKG4sMCk7cmV0dXJuIHQ9ci5zdGF0dXM/e3N0YXR1czohMCx2YWx1ZTpyLnZhbHVlfTp7c3RhdHVzOiExLGluZGV4OlMobixyLmZ1cnRoZXN0KSxleHBlY3RlZDpyLmV4cGVjdGVkfSxkZWxldGUgaltuXSx0fSx1LnRyeVBhcnNlPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMucGFyc2Uobik7aWYodC5zdGF0dXMpcmV0dXJuIHQudmFsdWU7dmFyIHI9TihuLHQpLGU9bmV3IEVycm9yKHIpO3Rocm93IGUudHlwZT1cIlBhcnNpbW1vbkVycm9yXCIsZS5yZXN1bHQ9dCxlfSx1LmFzc2VydD1mdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLmNoYWluKGZ1bmN0aW9uKHIpe3JldHVybiBuKHIpP1gocik6WSh0KX0pfSx1Lm9yPWZ1bmN0aW9uKG4pe3JldHVybiBUKHRoaXMsbil9LHUudHJpbT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy53cmFwKG4sbil9LHUud3JhcD1mdW5jdGlvbihuLHQpe3JldHVybiBKKG4sdGhpcyx0LGZ1bmN0aW9uKG4sdCl7cmV0dXJuIHR9KX0sdS50aHJ1PWZ1bmN0aW9uKG4pe3JldHVybiBuKHRoaXMpfSx1LnRoZW49ZnVuY3Rpb24obil7cmV0dXJuIF8obiksQyh0aGlzLG4pLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gblsxXX0pfSx1Lm1hbnk9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3JldHVybiBlKGZ1bmN0aW9uKHQscil7Zm9yKHZhciBlPVtdLHU9dm9pZCAwOzspe2lmKCEodT1CKG4uXyh0LHIpLHUpKS5zdGF0dXMpcmV0dXJuIEIoYihyLGUpLHUpO2lmKHI9PT11LmluZGV4KXRocm93IG5ldyBFcnJvcihcImluZmluaXRlIGxvb3AgZGV0ZWN0ZWQgaW4gLm1hbnkoKSBwYXJzZXIgLS0tIGNhbGxpbmcgLm1hbnkoKSBvbiBhIHBhcnNlciB3aGljaCBjYW4gYWNjZXB0IHplcm8gY2hhcmFjdGVycyBpcyB1c3VhbGx5IHRoZSBjYXVzZVwiKTtyPXUuaW5kZXgsZS5wdXNoKHUudmFsdWUpO319KX0sdS50aWVXaXRoPWZ1bmN0aW9uKG4pe3JldHVybiBQKG4pLHRoaXMubWFwKGZ1bmN0aW9uKHQpe2lmKGZ1bmN0aW9uKG4pe2lmKCFFKG4pKXRocm93IG5ldyBFcnJvcihcIm5vdCBhbiBhcnJheTogXCIrbil9KHQpLHQubGVuZ3RoKXtQKHRbMF0pO2Zvcih2YXIgcj10WzBdLGU9MTtlPHQubGVuZ3RoO2UrKylQKHRbZV0pLHIrPW4rdFtlXTtyZXR1cm4gcn1yZXR1cm4gXCJcIn0pfSx1LnRpZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRpZVdpdGgoXCJcIil9LHUudGltZXM9ZnVuY3Rpb24obix0KXt2YXIgcj10aGlzO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDImJih0PW4pLE8obiksTyh0KSxlKGZ1bmN0aW9uKGUsdSl7Zm9yKHZhciBvPVtdLGk9dm9pZCAwLGE9dm9pZCAwLGY9MDtmPG47Zis9MSl7aWYoYT1CKGk9ci5fKGUsdSksYSksIWkuc3RhdHVzKXJldHVybiBhO3U9aS5pbmRleCxvLnB1c2goaS52YWx1ZSk7fWZvcig7Zjx0JiYoYT1CKGk9ci5fKGUsdSksYSksaS5zdGF0dXMpO2YrPTEpdT1pLmluZGV4LG8ucHVzaChpLnZhbHVlKTtyZXR1cm4gQihiKHUsbyksYSl9KX0sdS5yZXN1bHQ9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIG59KX0sdS5hdE1vc3Q9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMudGltZXMoMCxuKX0sdS5hdExlYXN0PWZ1bmN0aW9uKG4pe3JldHVybiBKKHRoaXMudGltZXMobiksdGhpcy5tYW55KCksZnVuY3Rpb24obix0KXtyZXR1cm4gbi5jb25jYXQodCl9KX0sdS5tYXA9ZnVuY3Rpb24obil7ayhuKTt2YXIgdD10aGlzO3JldHVybiBlKGZ1bmN0aW9uKHIsZSl7dmFyIHU9dC5fKHIsZSk7cmV0dXJuIHUuc3RhdHVzP0IoYih1LmluZGV4LG4odS52YWx1ZSkpLHUpOnV9KX0sdS5jb250cmFtYXA9ZnVuY3Rpb24obil7ayhuKTt2YXIgdD10aGlzO3JldHVybiBlKGZ1bmN0aW9uKHIsZSl7dmFyIHU9dC5wYXJzZShuKHIuc2xpY2UoZSkpKTtyZXR1cm4gdS5zdGF0dXM/YihlK3IubGVuZ3RoLHUudmFsdWUpOnV9KX0sdS5wcm9tYXA9ZnVuY3Rpb24obix0KXtyZXR1cm4gayhuKSxrKHQpLHRoaXMuY29udHJhbWFwKG4pLm1hcCh0KX0sdS5za2lwPWZ1bmN0aW9uKG4pe3JldHVybiBDKHRoaXMsbikubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuWzBdfSl9LHUubWFyaz1mdW5jdGlvbigpe3JldHVybiBKKGVuLHRoaXMsZW4sZnVuY3Rpb24obix0LHIpe3JldHVybiB7c3RhcnQ6bix2YWx1ZTp0LGVuZDpyfX0pfSx1Lm5vZGU9ZnVuY3Rpb24obil7cmV0dXJuIEooZW4sdGhpcyxlbixmdW5jdGlvbih0LHIsZSl7cmV0dXJuIHtuYW1lOm4sdmFsdWU6cixzdGFydDp0LGVuZDplfX0pfSx1LnNlcEJ5PWZ1bmN0aW9uKG4pe3JldHVybiBWKHRoaXMsbil9LHUuc2VwQnkxPWZ1bmN0aW9uKG4pe3JldHVybiBIKHRoaXMsbil9LHUubG9va2FoZWFkPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnNraXAoWihuKSl9LHUubm90Rm9sbG93ZWRCeT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5za2lwKCQobikpfSx1LmRlc2M9ZnVuY3Rpb24obil7RShuKXx8KG49W25dKTt2YXIgdD10aGlzO3JldHVybiBlKGZ1bmN0aW9uKHIsZSl7dmFyIHU9dC5fKHIsZSk7cmV0dXJuIHUuc3RhdHVzfHwodS5leHBlY3RlZD1uKSx1fSl9LHUuZmFsbGJhY2s9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMub3IoWChuKSl9LHUuYXA9ZnVuY3Rpb24obil7cmV0dXJuIEoobix0aGlzLGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4odCl9KX0sdS5jaGFpbj1mdW5jdGlvbihuKXt2YXIgdD10aGlzO3JldHVybiBlKGZ1bmN0aW9uKHIsZSl7dmFyIHU9dC5fKHIsZSk7cmV0dXJuIHUuc3RhdHVzP0Iobih1LnZhbHVlKS5fKHIsdS5pbmRleCksdSk6dX0pfSx1LmNvbmNhdD11Lm9yLHUuZW1wdHk9cm4sdS5vZj1YLHVbXCJmYW50YXN5LWxhbmQvYXBcIl09dS5hcCx1W1wiZmFudGFzeS1sYW5kL2NoYWluXCJdPXUuY2hhaW4sdVtcImZhbnRhc3ktbGFuZC9jb25jYXRcIl09dS5jb25jYXQsdVtcImZhbnRhc3ktbGFuZC9lbXB0eVwiXT11LmVtcHR5LHVbXCJmYW50YXN5LWxhbmQvb2ZcIl09dS5vZix1W1wiZmFudGFzeS1sYW5kL21hcFwiXT11Lm1hcDt2YXIgZW49ZShmdW5jdGlvbihuLHQpe3JldHVybiBiKHQsUyhuLHQpKX0pLHVuPWUoZnVuY3Rpb24obix0KXtyZXR1cm4gdD49bi5sZW5ndGg/eCh0LFwiYW55IGNoYXJhY3Rlci9ieXRlXCIpOmIodCsxLEwobix0KSl9KSxvbj1lKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGIobi5sZW5ndGgsbi5zbGljZSh0KSl9KSxhbj1lKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIHQ8bi5sZW5ndGg/eCh0LFwiRU9GXCIpOmIodCxudWxsKX0pLGZuPVEoL1swLTldLykuZGVzYyhcImEgZGlnaXRcIiksY249USgvWzAtOV0qLykuZGVzYyhcIm9wdGlvbmFsIGRpZ2l0c1wiKSxzbj1RKC9bYS16XS9pKS5kZXNjKFwiYSBsZXR0ZXJcIiksbG49USgvW2Etel0qL2kpLmRlc2MoXCJvcHRpb25hbCBsZXR0ZXJzXCIpLGhuPVEoL1xccyovKS5kZXNjKFwib3B0aW9uYWwgd2hpdGVzcGFjZVwiKSxwbj1RKC9cXHMrLykuZGVzYyhcIndoaXRlc3BhY2VcIiksZG49SyhcIlxcclwiKSx2bj1LKFwiXFxuXCIpLGduPUsoXCJcXHJcXG5cIiksbW49VChnbix2bixkbikuZGVzYyhcIm5ld2xpbmVcIikseW49VChtbixhbik7ZS5hbGw9b24sZS5hbHQ9VCxlLmFueT11bixlLmNyPWRuLGUuY3JlYXRlTGFuZ3VhZ2U9ZnVuY3Rpb24obil7dmFyIHQ9e307Zm9yKHZhciByIGluIG4pKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJmZ1bmN0aW9uKHIpe3Rbcl09dG4oZnVuY3Rpb24oKXtyZXR1cm4gbltyXSh0KX0pO30ocik7cmV0dXJuIHR9LGUuY3JsZj1nbixlLmN1c3RvbT1mdW5jdGlvbihuKXtyZXR1cm4gZShuKGIseCkpfSxlLmRpZ2l0PWZuLGUuZGlnaXRzPWNuLGUuZW1wdHk9cm4sZS5lbmQ9eW4sZS5lb2Y9YW4sZS5mYWlsPVksZS5mb3JtYXRFcnJvcj1OLGUuaW5kZXg9ZW4sZS5pc1BhcnNlcj15LGUubGF6eT10bixlLmxldHRlcj1zbixlLmxldHRlcnM9bG4sZS5sZj12bixlLmxvb2thaGVhZD1aLGUubWFrZUZhaWx1cmU9eCxlLm1ha2VTdWNjZXNzPWIsZS5uZXdsaW5lPW1uLGUubm9uZU9mPWZ1bmN0aW9uKG4pe3JldHVybiBubihmdW5jdGlvbih0KXtyZXR1cm4gbi5pbmRleE9mKHQpPDB9KS5kZXNjKFwibm9uZSBvZiAnXCIrbitcIidcIil9LGUubm90Rm9sbG93ZWRCeT0kLGUub2Y9WCxlLm9uZU9mPWZ1bmN0aW9uKG4pe2Zvcih2YXIgdD1uLnNwbGl0KFwiXCIpLHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdPVwiJ1wiK3Rbcl0rXCInXCI7cmV0dXJuIG5uKGZ1bmN0aW9uKHQpe3JldHVybiBuLmluZGV4T2YodCk+PTB9KS5kZXNjKHQpfSxlLm9wdFdoaXRlc3BhY2U9aG4sZS5QYXJzZXI9ZSxlLnJhbmdlPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5uKGZ1bmN0aW9uKHIpe3JldHVybiBuPD1yJiZyPD10fSkuZGVzYyhuK1wiLVwiK3QpfSxlLnJlZ2V4PVEsZS5yZWdleHA9USxlLnNlcEJ5PVYsZS5zZXBCeTE9SCxlLnNlcT1DLGUuc2VxTWFwPUosZS5zZXFPYmo9ZnVuY3Rpb24oKXtmb3IodmFyIG4sdD17fSxyPTAsdT0obj1hcmd1bWVudHMsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobikpLG89dS5sZW5ndGgsaT0wO2k8bztpKz0xKXt2YXIgYT11W2ldO2lmKCF5KGEpKXtpZihFKGEpJiYyPT09YS5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBhWzBdJiZ5KGFbMV0pKXt2YXIgZj1hWzBdO2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGYpKXRocm93IG5ldyBFcnJvcihcInNlcU9iajogZHVwbGljYXRlIGtleSBcIitmKTt0W2ZdPSEwLHIrKztjb250aW51ZX10aHJvdyBuZXcgRXJyb3IoXCJzZXFPYmogYXJndW1lbnRzIG11c3QgYmUgcGFyc2VycyBvciBbc3RyaW5nLCBwYXJzZXJdIGFycmF5IHBhaXJzLlwiKX19aWYoMD09PXIpdGhyb3cgbmV3IEVycm9yKFwic2VxT2JqIGV4cGVjdHMgYXQgbGVhc3Qgb25lIG5hbWVkIHBhcnNlciwgZm91bmQgemVyb1wiKTtyZXR1cm4gZShmdW5jdGlvbihuLHQpe2Zvcih2YXIgcixlPXt9LGk9MDtpPG87aSs9MSl7dmFyIGEsZjtpZihFKHVbaV0pPyhhPXVbaV1bMF0sZj11W2ldWzFdKTooYT1udWxsLGY9dVtpXSksIShyPUIoZi5fKG4sdCkscikpLnN0YXR1cylyZXR1cm4gcjthJiYoZVthXT1yLnZhbHVlKSx0PXIuaW5kZXg7fXJldHVybiBCKGIodCxlKSxyKX0pfSxlLnN0cmluZz1LLGUuc3VjY2VlZD1YLGUudGFrZVdoaWxlPWZ1bmN0aW9uKG4pe3JldHVybiBrKG4pLGUoZnVuY3Rpb24odCxyKXtmb3IodmFyIGU9cjtlPHQubGVuZ3RoJiZuKEwodCxlKSk7KWUrKztyZXR1cm4gYihlLHQuc2xpY2UocixlKSl9KX0sZS50ZXN0PW5uLGUud2hpdGVzcGFjZT1wbixlW1wiZmFudGFzeS1sYW5kL2VtcHR5XCJdPXJuLGVbXCJmYW50YXN5LWxhbmQvb2ZcIl09WCxlLkJpbmFyeT17Yml0U2VxOmwsYml0U2VxT2JqOmZ1bmN0aW9uKG4pe3MoKTt2YXIgdD17fSxyPTAsZT1hKGZ1bmN0aW9uKG4pe2lmKEUobikpe3ZhciBlPW47aWYoMiE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIltcIitlLmpvaW4oXCIsIFwiKStcIl0gc2hvdWxkIGJlIGxlbmd0aCAyLCBnb3QgbGVuZ3RoIFwiK2UubGVuZ3RoKTtpZihQKGVbMF0pLE8oZVsxXSksT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZVswXSkpdGhyb3cgbmV3IEVycm9yKFwiZHVwbGljYXRlIGtleSBpbiBiaXRTZXFPYmo6IFwiK2VbMF0pO3JldHVybiB0W2VbMF1dPSEwLHIrKyxlfXJldHVybiBPKG4pLFtudWxsLG5dfSxuKTtpZihyPDEpdGhyb3cgbmV3IEVycm9yKFwiYml0U2VxT2JqIGV4cGVjdHMgYXQgbGVhc3Qgb25lIG5hbWVkIHBhaXIsIGdvdCBbXCIrbi5qb2luKFwiLCBcIikrXCJdXCIpO3ZhciB1PWEoZnVuY3Rpb24obil7cmV0dXJuIG5bMF19LGUpO3JldHVybiBsKGEoZnVuY3Rpb24obil7cmV0dXJuIG5bMV19LGUpKS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIGkoZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbCE9PXRbMF0mJihuW3RbMF1dPXRbMV0pLG59LHt9LGEoZnVuY3Rpb24odCxyKXtyZXR1cm4gW3QsbltyXV19LHUpKX0pfSxieXRlOmZ1bmN0aW9uKG4pe2lmKHMoKSxPKG4pLG4+MjU1KXRocm93IG5ldyBFcnJvcihcIlZhbHVlIHNwZWNpZmllZCB0byBieXRlIGNvbnN0cnVjdG9yIChcIituK1wiPTB4XCIrbi50b1N0cmluZygxNikrXCIpIGlzIGxhcmdlciBpbiB2YWx1ZSB0aGFuIGEgc2luZ2xlIGJ5dGUuXCIpO3ZhciB0PShuPjE1P1wiMHhcIjpcIjB4MFwiKStuLnRvU3RyaW5nKDE2KTtyZXR1cm4gZShmdW5jdGlvbihyLGUpe3ZhciB1PUwocixlKTtyZXR1cm4gdT09PW4/YihlKzEsdSk6eChlLHQpfSl9LGJ1ZmZlcjpmdW5jdGlvbihuKXtyZXR1cm4gaChcImJ1ZmZlclwiLG4pLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gQnVmZmVyLmZyb20obil9KX0sZW5jb2RlZFN0cmluZzpmdW5jdGlvbihuLHQpe3JldHVybiBoKFwic3RyaW5nXCIsdCkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvU3RyaW5nKG4pfSl9LHVpbnRCRTpkLHVpbnQ4QkU6ZCgxKSx1aW50MTZCRTpkKDIpLHVpbnQzMkJFOmQoNCksdWludExFOnYsdWludDhMRTp2KDEpLHVpbnQxNkxFOnYoMiksdWludDMyTEU6dig0KSxpbnRCRTpnLGludDhCRTpnKDEpLGludDE2QkU6ZygyKSxpbnQzMkJFOmcoNCksaW50TEU6bSxpbnQ4TEU6bSgxKSxpbnQxNkxFOm0oMiksaW50MzJMRTptKDQpLGZsb2F0QkU6aChcImZsb2F0QkVcIiw0KS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIG4ucmVhZEZsb2F0QkUoMCl9KSxmbG9hdExFOmgoXCJmbG9hdExFXCIsNCkubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuLnJlYWRGbG9hdExFKDApfSksZG91YmxlQkU6aChcImRvdWJsZUJFXCIsOCkubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuLnJlYWREb3VibGVCRSgwKX0pLGRvdWJsZUxFOmgoXCJkb3VibGVMRVwiLDgpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gbi5yZWFkRG91YmxlTEUoMCl9KX0sbi5leHBvcnRzPWU7fV0pfSk7IFxufSAocGFyc2ltbW9uX3VtZF9taW4sIHBhcnNpbW1vbl91bWRfbWluLmV4cG9ydHMpKTtcblxudmFyIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cyA9IHBhcnNpbW1vbl91bWRfbWluLmV4cG9ydHM7XG5cbnZhciBlbW9qaVJlZ2V4ID0gKCkgPT4ge1xuXHQvLyBodHRwczovL210aHMuYmUvZW1vamlcblx0cmV0dXJuIC9bIyowLTldXFx1RkUwRj9cXHUyMEUzfFtcXHhBOVxceEFFXFx1MjAzQ1xcdTIwNDlcXHUyMTIyXFx1MjEzOVxcdTIxOTQtXFx1MjE5OVxcdTIxQTlcXHUyMUFBXFx1MjMxQVxcdTIzMUJcXHUyMzI4XFx1MjNDRlxcdTIzRUQtXFx1MjNFRlxcdTIzRjFcXHUyM0YyXFx1MjNGOC1cXHUyM0ZBXFx1MjRDMlxcdTI1QUFcXHUyNUFCXFx1MjVCNlxcdTI1QzBcXHUyNUZCXFx1MjVGQ1xcdTI1RkVcXHUyNjAwLVxcdTI2MDRcXHUyNjBFXFx1MjYxMVxcdTI2MTRcXHUyNjE1XFx1MjYxOFxcdTI2MjBcXHUyNjIyXFx1MjYyM1xcdTI2MjZcXHUyNjJBXFx1MjYyRVxcdTI2MkZcXHUyNjM4LVxcdTI2M0FcXHUyNjQwXFx1MjY0MlxcdTI2NDgtXFx1MjY1M1xcdTI2NUZcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdFXFx1MjY3RlxcdTI2OTJcXHUyNjk0LVxcdTI2OTdcXHUyNjk5XFx1MjY5QlxcdTI2OUNcXHUyNkEwXFx1MjZBN1xcdTI2QUFcXHUyNkIwXFx1MjZCMVxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzhcXHUyNkNGXFx1MjZEMVxcdTI2RDNcXHUyNkU5XFx1MjZGMC1cXHUyNkY1XFx1MjZGN1xcdTI2RjhcXHUyNkZBXFx1MjcwMlxcdTI3MDhcXHUyNzA5XFx1MjcwRlxcdTI3MTJcXHUyNzE0XFx1MjcxNlxcdTI3MURcXHUyNzIxXFx1MjczM1xcdTI3MzRcXHUyNzQ0XFx1Mjc0N1xcdTI3NTdcXHUyNzYzXFx1MjdBMVxcdTI5MzRcXHUyOTM1XFx1MkIwNS1cXHUyQjA3XFx1MkIxQlxcdTJCMUNcXHUyQjU1XFx1MzAzMFxcdTMwM0RcXHUzMjk3XFx1MzI5OV1cXHVGRTBGP3xbXFx1MjYxRFxcdTI3MENcXHUyNzBEXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdTI3MEFcXHUyNzBCXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHUyM0U5LVxcdTIzRUNcXHUyM0YwXFx1MjNGM1xcdTI1RkRcXHUyNjkzXFx1MjZBMVxcdTI2QUJcXHUyNkM1XFx1MjZDRVxcdTI2RDRcXHUyNkVBXFx1MjZGRFxcdTI3MDVcXHUyNzI4XFx1Mjc0Q1xcdTI3NEVcXHUyNzUzLVxcdTI3NTVcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTJCNTBdfFxcdTI2RjkoPzpcXHVGRTBGfFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFxcdTI3NjRcXHVGRTBGPyg/OlxcdTIwMEQoPzpcXHVEODNEXFx1REQyNXxcXHVEODNFXFx1REU3OSkpP3xcXHVEODNDKD86W1xcdURDMDRcXHVERDcwXFx1REQ3MVxcdUREN0VcXHVERDdGXFx1REUwMlxcdURFMzdcXHVERjIxXFx1REYyNC1cXHVERjJDXFx1REYzNlxcdURGN0RcXHVERjk2XFx1REY5N1xcdURGOTktXFx1REY5QlxcdURGOUVcXHVERjlGXFx1REZDRFxcdURGQ0VcXHVERkQ0LVxcdURGREZcXHVERkY1XFx1REZGN11cXHVGRTBGP3xbXFx1REY4NVxcdURGQzJcXHVERkM3XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERkMzXFx1REZDNFxcdURGQ0FdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURGQ0JcXHVERkNDXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGN0NcXHVERjdFLVxcdURGODRcXHVERjg2LVxcdURGOTNcXHVERkEwLVxcdURGQzFcXHVERkM1XFx1REZDNlxcdURGQzhcXHVERkM5XFx1REZDRi1cXHVERkQzXFx1REZFMC1cXHVERkYwXFx1REZGOC1cXHVERkZGXXxcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdfFxcdURERTlcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdfFxcdURERUFcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXXxcXHVEREVCXFx1RDgzQ1tcXHVEREVFLVxcdURERjBcXHVEREYyXFx1RERGNFxcdURERjddfFxcdURERUNcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVFXFx1RERGMS1cXHVEREYzXFx1RERGNS1cXHVEREZBXFx1RERGQ1xcdURERkVdfFxcdURERURcXHVEODNDW1xcdURERjBcXHVEREYyXFx1RERGM1xcdURERjdcXHVEREY5XFx1RERGQV18XFx1RERFRVxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XXxcXHVEREVGXFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XXxcXHVEREYwXFx1RDgzQ1tcXHVEREVBXFx1RERFQy1cXHVEREVFXFx1RERGMlxcdURERjNcXHVEREY1XFx1RERGN1xcdURERkNcXHVEREZFXFx1RERGRl18XFx1RERGMVxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXXxcXHVEREYyXFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXXxcXHVEREYzXFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdfFxcdURERjRcXHVEODNDXFx1RERGMnxcXHVEREY1XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdfFxcdURERjZcXHVEODNDXFx1RERFNnxcXHVEREY3XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ118XFx1RERGOFxcdUQ4M0NbXFx1RERFNi1cXHVEREVBXFx1RERFQy1cXHVEREY0XFx1RERGNy1cXHVEREY5XFx1RERGQlxcdURERkQtXFx1RERGRl18XFx1RERGOVxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVEXFx1RERFRi1cXHVEREY0XFx1RERGN1xcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkZdfFxcdURERkFcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdfFxcdURERkJcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdfFxcdURERkNcXHVEODNDW1xcdURERUJcXHVEREY4XXxcXHVEREZEXFx1RDgzQ1xcdURERjB8XFx1RERGRVxcdUQ4M0NbXFx1RERFQVxcdURERjldfFxcdURERkZcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ118XFx1REZGM1xcdUZFMEY/KD86XFx1MjAwRCg/OlxcdTI2QTdcXHVGRTBGP3xcXHVEODNDXFx1REYwOCkpP3xcXHVERkY0KD86XFx1MjAwRFxcdTI2MjBcXHVGRTBGP3xcXHVEQjQwXFx1REM2N1xcdURCNDBcXHVEQzYyXFx1REI0MCg/OlxcdURDNjVcXHVEQjQwXFx1REM2RVxcdURCNDBcXHVEQzY3fFxcdURDNzNcXHVEQjQwXFx1REM2M1xcdURCNDBcXHVEQzc0fFxcdURDNzdcXHVEQjQwXFx1REM2Q1xcdURCNDBcXHVEQzczKVxcdURCNDBcXHVEQzdGKT8pfFxcdUQ4M0QoPzpbXFx1REMwOFxcdURDMjZdKD86XFx1MjAwRFxcdTJCMUIpP3xbXFx1REMzRlxcdURDRkRcXHVERDQ5XFx1REQ0QVxcdURENkZcXHVERDcwXFx1REQ3M1xcdURENzYtXFx1REQ3OVxcdUREODdcXHVERDhBLVxcdUREOERcXHVEREE1XFx1RERBOFxcdUREQjFcXHVEREIyXFx1RERCQ1xcdUREQzItXFx1RERDNFxcdURERDEtXFx1REREM1xcdUREREMtXFx1RERERVxcdURERTFcXHVEREUzXFx1RERFOFxcdURERUZcXHVEREYzXFx1RERGQVxcdURFQ0JcXHVERUNELVxcdURFQ0ZcXHVERUUwLVxcdURFRTVcXHVERUU5XFx1REVGMFxcdURFRjNdXFx1RkUwRj98W1xcdURDNDJcXHVEQzQzXFx1REM0Ni1cXHVEQzUwXFx1REM2NlxcdURDNjdcXHVEQzZCLVxcdURDNkRcXHVEQzcyXFx1REM3NC1cXHVEQzc2XFx1REM3OFxcdURDN0NcXHVEQzgzXFx1REM4NVxcdURDOEZcXHVEQzkxXFx1RENBQVxcdUREN0FcXHVERDk1XFx1REQ5NlxcdURFNENcXHVERTRGXFx1REVDMFxcdURFQ0NdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdURDNkVcXHVEQzcwXFx1REM3MVxcdURDNzNcXHVEQzc3XFx1REM4MVxcdURDODJcXHVEQzg2XFx1REM4N1xcdURFNDUtXFx1REU0N1xcdURFNEJcXHVERTREXFx1REU0RVxcdURFQTNcXHVERUI0LVxcdURFQjZdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURENzRcXHVERDkwXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdURDMDAtXFx1REMwN1xcdURDMDktXFx1REMxNFxcdURDMTYtXFx1REMyNVxcdURDMjctXFx1REMzQVxcdURDM0MtXFx1REMzRVxcdURDNDBcXHVEQzQ0XFx1REM0NVxcdURDNTEtXFx1REM2NVxcdURDNkFcXHVEQzc5LVxcdURDN0JcXHVEQzdELVxcdURDODBcXHVEQzg0XFx1REM4OC1cXHVEQzhFXFx1REM5MFxcdURDOTItXFx1RENBOVxcdURDQUItXFx1RENGQ1xcdURDRkYtXFx1REQzRFxcdURENEItXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdUREQTRcXHVEREZCLVxcdURFMkRcXHVERTJGLVxcdURFMzRcXHVERTM3LVxcdURFNDRcXHVERTQ4LVxcdURFNEFcXHVERTgwLVxcdURFQTJcXHVERUE0LVxcdURFQjNcXHVERUI3LVxcdURFQkZcXHVERUMxLVxcdURFQzVcXHVERUQwLVxcdURFRDJcXHVERUQ1LVxcdURFRDdcXHVERURDLVxcdURFREZcXHVERUVCXFx1REVFQ1xcdURFRjQtXFx1REVGQ1xcdURGRTAtXFx1REZFQlxcdURGRjBdfFxcdURDMTUoPzpcXHUyMDBEXFx1RDgzRVxcdUREQkEpP3xcXHVEQzNCKD86XFx1MjAwRFxcdTI3NDRcXHVGRTBGPyk/fFxcdURDNDFcXHVGRTBGPyg/OlxcdTIwMERcXHVEODNEXFx1RERFOFxcdUZFMEY/KT98XFx1REM2OCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4fFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldXFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OlxcdURDOEJcXHUyMDBEXFx1RDgzRCk/XFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXSkpKT98XFx1REZGQyg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGQ1xcdURGRkVcXHVERkZGXSkpKT98XFx1REZGRSg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSkpKT98XFx1REZGRig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKSkpPykpP3xcXHVEQzY5KD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0QpP1tcXHVEQzY4XFx1REM2OV18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRCg/OltcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdURDNjYoPzpcXHUyMDBEXFx1RDgzRFxcdURDNjYpP3xcXHVEQzY3KD86XFx1MjAwRFxcdUQ4M0RbXFx1REM2NlxcdURDNjddKT98XFx1REM2OVxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPykpfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXSkpKT98XFx1REZGQyg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQlxcdURGRkQtXFx1REZGRl0pKSk/fFxcdURGRkQoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OltcXHVEQzY4XFx1REM2OV18XFx1REM4QlxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XSlcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdfFxcdUREMURcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV1cXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKSkpP3xcXHVERkZFKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldfFxcdURDOEJcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldXFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSkpKT98XFx1REZGRig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSkpKT8pKT98XFx1REM2Rig/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8pP3xcXHVERDc1KD86XFx1RkUwRnxcXHVEODNDW1xcdURGRkItXFx1REZGRl0pPyg/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8pP3xcXHVERTJFKD86XFx1MjAwRFxcdUQ4M0RcXHVEQ0E4KT98XFx1REUzNSg/OlxcdTIwMERcXHVEODNEXFx1RENBQik/fFxcdURFMzYoPzpcXHUyMDBEXFx1RDgzQ1xcdURGMkJcXHVGRTBGPyk/KXxcXHVEODNFKD86W1xcdUREMENcXHVERDBGXFx1REQxOC1cXHVERDFGXFx1REQzMC1cXHVERDM0XFx1REQzNlxcdURENzdcXHVEREI1XFx1RERCNlxcdUREQkJcXHVEREQyXFx1REREM1xcdURERDVcXHVERUMzLVxcdURFQzVcXHVERUYwXFx1REVGMi1cXHVERUY4XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERDI2XFx1REQzNVxcdUREMzctXFx1REQzOVxcdUREM0RcXHVERDNFXFx1RERCOFxcdUREQjlcXHVERENELVxcdUREQ0ZcXHVEREQ0XFx1RERENi1cXHVEREREXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFtcXHVERERFXFx1RERERl0oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdUREMERcXHVERDBFXFx1REQxMC1cXHVERDE3XFx1REQyMC1cXHVERDI1XFx1REQyNy1cXHVERDJGXFx1REQzQVxcdUREM0YtXFx1REQ0NVxcdURENDctXFx1REQ3NlxcdURENzgtXFx1RERCNFxcdUREQjdcXHVEREJBXFx1RERCQy1cXHVERENDXFx1REREMFxcdURERTAtXFx1RERGRlxcdURFNzAtXFx1REU3Q1xcdURFODAtXFx1REU4OFxcdURFOTAtXFx1REVCRFxcdURFQkYtXFx1REVDMlxcdURFQ0UtXFx1REVEQlxcdURFRTAtXFx1REVFOF18XFx1REQzQyg/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj98XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REREMSg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMSkpfFxcdUQ4M0MoPzpcXHVERkZCKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkMtXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpP3xcXHVERkZDKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCXFx1REZGQ1xcdURGRkVcXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGODRcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdfFxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRl0pKSk/fFxcdURGRkUoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEKD86XFx1RDgzRFxcdURDOEJcXHUyMDBEKT9cXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpP3xcXHVERkZGKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRV18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpPykpP3xcXHVERUYxKD86XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkMtXFx1REZGRl0pP3xcXHVERkZDKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSk/fFxcdURGRkQoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKT98XFx1REZGRSg/OlxcdTIwMERcXHVEODNFXFx1REVGMlxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl0pP3xcXHVERkZGKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKT8pKT8pL2c7XG59O1xuXG4vKiogTm9ybWFsaXplIGEgZHVyYXRpb24gdG8gYWxsIG9mIHRoZSBwcm9wZXIgdW5pdHMuICovXG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXIpIHtcbiAgICBpZiAoZHVyID09PSB1bmRlZmluZWQgfHwgZHVyID09PSBudWxsKVxuICAgICAgICByZXR1cm4gZHVyO1xuICAgIHJldHVybiBkdXIuc2hpZnRUb0FsbCgpLm5vcm1hbGl6ZSgpO1xufVxuLyoqIEdldCB0aGUgXCJ0aXRsZVwiIGZvciBhIGZpbGUsIGJ5IHN0cmlwcGluZyBvdGhlciBwYXJ0cyBvZiB0aGUgcGF0aCBhcyB3ZWxsIGFzIHRoZSBleHRlbnNpb24uICovXG5mdW5jdGlvbiBnZXRGaWxlVGl0bGUocGF0aCkge1xuICAgIGlmIChwYXRoLmluY2x1ZGVzKFwiL1wiKSlcbiAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgaWYgKHBhdGguZW5kc1dpdGgoXCIubWRcIikpXG4gICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCAtIDMpO1xuICAgIHJldHVybiBwYXRoO1xufVxuLyoqIEEgcGFyc2ltbW9uIHBhcnNlciB3aGljaCBjYW5vbmljYWxpemVzIHZhcmlhYmxlIG5hbWVzIHdoaWxlIHByb3Blcmx5IHJlc3BlY3RpbmcgZW1vamkuICovXG5wYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleChuZXcgUmVnRXhwKGVtb2ppUmVnZXgoKSwgXCJcIikpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXgoL1swLTlcXHB7TGV0dGVyfV8tXSsvdSkubWFwKHN0ciA9PiBzdHIudG9Mb2NhbGVMb3dlckNhc2UoKSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy53aGl0ZXNwYWNlLm1hcChfID0+IFwiLVwiKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFueS5tYXAoXyA9PiBcIlwiKSlcbiAgICAubWFueSgpXG4gICAgLm1hcChyZXN1bHQgPT4gcmVzdWx0LmpvaW4oXCJcIikpO1xuY29uc3QgSEVBREVSX0NBTk9OSUNBTElaRVIgPSBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleChuZXcgUmVnRXhwKGVtb2ppUmVnZXgoKSwgXCJcIikpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXgoL1swLTlcXHB7TGV0dGVyfV8tXSsvdSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy53aGl0ZXNwYWNlLm1hcChfID0+IFwiIFwiKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFueS5tYXAoXyA9PiBcIiBcIikpXG4gICAgLm1hbnkoKVxuICAgIC5tYXAocmVzdWx0ID0+IHtcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIikuc3BsaXQoL1xccysvKS5qb2luKFwiIFwiKS50cmltKCk7XG59KTtcbi8qKlxuICogTm9ybWFsaXplcyB0aGUgdGV4dCBpbiBhIGhlYWRlciB0byBiZSBzb21ldGhpbmcgdGhhdCBpcyBhY3R1YWxseSBsaW5rYWJsZSB0by4gVGhpcyBtaW1pY3NcbiAqIGhvdyBPYnNpZGlhbiBkb2VzIGl0J3Mgbm9ybWFsaXphdGlvbiwgY29sbGFwc2luZyByZXBlYXRlZCBzcGFjZXMgYW5kIHN0cmlwcGluZyBvdXQgY29udHJvbCBjaGFyYWN0ZXJzLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXJGb3JMaW5rKGhlYWRlcikge1xuICAgIHJldHVybiBIRUFERVJfQ0FOT05JQ0FMSVpFUi50cnlQYXJzZShoZWFkZXIpO1xufVxuLyoqIFJlbmRlciBhIGR1cmF0aW9uIGluIGEgbWluaW1hbCBmb3JtYXQgdG8gc2F2ZSBzcGFjZS4gKi9cbmZ1bmN0aW9uIHJlbmRlck1pbmltYWxEdXJhdGlvbihkdXIpIHtcbiAgICBkdXIgPSBub3JtYWxpemVEdXJhdGlvbihkdXIpO1xuICAgIC8vIHRvSHVtYW4gb3V0cHV0cyB6ZXJvIHF1YW50aXRpZXMgZS5nLiBcIjAgc2Vjb25kc1wiXG4gICAgZHVyID0gRHVyYXRpb24uZnJvbU9iamVjdChPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZHVyLnRvT2JqZWN0KCkpLmZpbHRlcigoWywgcXVhbnRpdHldKSA9PiBxdWFudGl0eSAhPSAwKSkpO1xuICAgIHJldHVybiBkdXIudG9IdW1hbigpO1xufVxuXG52YXIgVmFsdWVzO1xuKGZ1bmN0aW9uIChWYWx1ZXMpIHtcbiAgICAvKiogQ29udmVydCBhbiBhcmJpdHJhcnkgdmFsdWUgaW50byBhIHJlYXNvbmFibGUsIE1hcmtkb3duLWZyaWVuZGx5IHN0cmluZyBpZiBwb3NzaWJsZS4gKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyhmaWVsZCwgc2V0dGluZyA9IERFRkFVTFRfUVVFUllfU0VUVElOR1MsIHJlY3Vyc2l2ZSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCB3cmFwcGVkID0gd3JhcFZhbHVlKGZpZWxkKTtcbiAgICAgICAgaWYgKCF3cmFwcGVkKVxuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmcucmVuZGVyTnVsbEFzO1xuICAgICAgICBzd2l0Y2ggKHdyYXBwZWQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZy5yZW5kZXJOdWxsQXM7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWU7XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiICsgd3JhcHBlZC52YWx1ZTtcbiAgICAgICAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWUub3V0ZXJIVE1MO1xuICAgICAgICAgICAgY2FzZSBcIndpZGdldFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkLnZhbHVlLm1hcmtkb3duKCk7XG4gICAgICAgICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkLnZhbHVlLm1hcmtkb3duKCk7XG4gICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8ZnVuY3Rpb24+XCI7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCJbXCI7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdyYXBwZWQudmFsdWUubWFwKGYgPT4gdG9TdHJpbmcoZiwgc2V0dGluZywgdHJ1ZSkpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCJdXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFwieyBcIiArXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHdyYXBwZWQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gZVswXSArIFwiOiBcIiArIHRvU3RyaW5nKGVbMV0sIHNldHRpbmcsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCIsIFwiKSArXG4gICAgICAgICAgICAgICAgICAgIFwiIH1cIik7XG4gICAgICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVkLnZhbHVlLnNlY29uZCA9PSAwICYmIHdyYXBwZWQudmFsdWUuaG91ciA9PSAwICYmIHdyYXBwZWQudmFsdWUubWludXRlID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWUudG9Gb3JtYXQoc2V0dGluZy5kZWZhdWx0RGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkLnZhbHVlLnRvRm9ybWF0KHNldHRpbmcuZGVmYXVsdERhdGVUaW1lRm9ybWF0KTtcbiAgICAgICAgICAgIGNhc2UgXCJkdXJhdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJNaW5pbWFsRHVyYXRpb24od3JhcHBlZC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWVzLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgLyoqIFdyYXAgYSBsaXRlcmFsIHZhbHVlIHNvIHlvdSBjYW4gc3dpdGNoIG9uIGl0IGVhc2lseS4gKi9cbiAgICBmdW5jdGlvbiB3cmFwVmFsdWUodmFsKSB7XG4gICAgICAgIGlmIChpc051bGwodmFsKSlcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwibnVsbFwiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyKHZhbCkpXG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBcIm51bWJlclwiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzU3RyaW5nKHZhbCkpXG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBcInN0cmluZ1wiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzQm9vbGVhbih2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJib29sZWFuXCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZSBpZiAoaXNEdXJhdGlvbih2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkdXJhdGlvblwiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzRGF0ZSh2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkYXRlXCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZSBpZiAoaXNXaWRnZXQodmFsKSlcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwid2lkZ2V0XCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheSh2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJhcnJheVwiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzTGluayh2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJsaW5rXCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbih2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJmdW5jdGlvblwiLCB2YWx1ZTogdmFsIH07XG4gICAgICAgIGVsc2UgaWYgKGlzSHRtbCh2YWwpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJodG1sXCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodmFsKSlcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwib2JqZWN0XCIsIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgVmFsdWVzLndyYXBWYWx1ZSA9IHdyYXBWYWx1ZTtcbiAgICAvKiogUmVjdXJzaXZlbHkgbWFwIGNvbXBsZXggb2JqZWN0cyBhdCB0aGUgbGVhdmVzLiAqL1xuICAgIGZ1bmN0aW9uIG1hcExlYXZlcyh2YWwsIGZ1bmMpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gbWFwTGVhdmVzKHZhbHVlLCBmdW5jKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWwpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWFwTGVhdmVzKHZhbHVlLCBmdW5jKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmModmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBWYWx1ZXMubWFwTGVhdmVzID0gbWFwTGVhdmVzO1xuICAgIC8qKiBDb21wYXJlIHR3byBhcmJpdHJhcnkgSmF2YVNjcmlwdCB2YWx1ZXMuIFByb2R1Y2VzIGEgdG90YWwgb3JkZXJpbmcgb3ZlciBBTlkgcG9zc2libGUgZGF0YXZpZXcgdmFsdWUuICovXG4gICAgZnVuY3Rpb24gY29tcGFyZVZhbHVlKHZhbDEsIHZhbDIsIGxpbmtOb3JtYWxpemVyKSB7XG4gICAgICAgIC8vIEhhbmRsZSB1bmRlZmluZWQvbnVsbHMgZmlyc3QuXG4gICAgICAgIGlmICh2YWwxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB2YWwxID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHZhbDIgPSBudWxsO1xuICAgICAgICBpZiAodmFsMSA9PT0gbnVsbCAmJiB2YWwyID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGVsc2UgaWYgKHZhbDEgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGVsc2UgaWYgKHZhbDIgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgLy8gQSBub24tbnVsbCB2YWx1ZSBub3cgd2hpY2ggd2UgY2FuIHdyYXAgJiBjb21wYXJlIG9uLlxuICAgICAgICBsZXQgd3JhcDEgPSB3cmFwVmFsdWUodmFsMSk7XG4gICAgICAgIGxldCB3cmFwMiA9IHdyYXBWYWx1ZSh2YWwyKTtcbiAgICAgICAgaWYgKHdyYXAxID09PSB1bmRlZmluZWQgJiYgd3JhcDIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBlbHNlIGlmICh3cmFwMSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBlbHNlIGlmICh3cmFwMiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIC8vIFNob3J0LWNpcmN1aXQgb24gZGlmZmVyZW50IHR5cGVzIG9yIG9uIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAgaWYgKHdyYXAxLnR5cGUgIT0gd3JhcDIudHlwZSlcbiAgICAgICAgICAgIHJldHVybiB3cmFwMS50eXBlLmxvY2FsZUNvbXBhcmUod3JhcDIudHlwZSk7XG4gICAgICAgIGlmICh3cmFwMS52YWx1ZSA9PT0gd3JhcDIudmFsdWUpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgc3dpdGNoICh3cmFwMS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAxLnZhbHVlLmxvY2FsZUNvbXBhcmUod3JhcDIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIGlmICh3cmFwMS52YWx1ZSA8IHdyYXAyLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod3JhcDEudmFsdWUgPT0gd3JhcDIudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgaWYgKHdyYXAxLnZhbHVlID09IHdyYXAyLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3cmFwMS52YWx1ZSA/IDEgOiAtMTtcbiAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgICAgbGV0IGxpbmsxID0gd3JhcDEudmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmsyID0gd3JhcDIudmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZSA9IGxpbmtOb3JtYWxpemVyID8/ICgoeCkgPT4geCk7XG4gICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgY29tcGFyZSBieSBmaWxlIG5hbWUgb3IgZGlzcGxheSwgc2luY2UgdGhhdCB3b3VsZCBicmVhayBsaW5rIGVxdWFsaXR5LiBDb21wYXJlIGJ5IHBhdGguXG4gICAgICAgICAgICAgICAgbGV0IHBhdGhDb21wYXJlID0gbm9ybWFsaXplKGxpbmsxLnBhdGgpLmxvY2FsZUNvbXBhcmUobm9ybWFsaXplKGxpbmsyLnBhdGgpKTtcbiAgICAgICAgICAgICAgICBpZiAocGF0aENvbXBhcmUgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGhDb21wYXJlO1xuICAgICAgICAgICAgICAgIC8vIFRoZW4gY29tcGFyZSBieSB0eXBlLlxuICAgICAgICAgICAgICAgIGxldCB0eXBlQ29tcGFyZSA9IGxpbmsxLnR5cGUubG9jYWxlQ29tcGFyZShsaW5rMi50eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZUNvbXBhcmUgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVDb21wYXJlO1xuICAgICAgICAgICAgICAgIC8vIFRoZW4gY29tcGFyZSBieSBzdWJwYXRoIGV4aXN0ZW5jZS5cbiAgICAgICAgICAgICAgICBpZiAobGluazEuc3VicGF0aCAmJiAhbGluazIuc3VicGF0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKCFsaW5rMS5zdWJwYXRoICYmIGxpbmsyLnN1YnBhdGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmsxLnN1YnBhdGggJiYgIWxpbmsyLnN1YnBhdGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIC8vIFNpbmNlIGJvdGggaGF2ZSBhIHN1YnBhdGgsIGNvbXBhcmUgYnkgc3VicGF0aC5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGxpbmsxLnN1YnBhdGggPz8gXCJcIikubG9jYWxlQ29tcGFyZShsaW5rMi5zdWJwYXRoID8/IFwiXCIpO1xuICAgICAgICAgICAgY2FzZSBcImRhdGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcDEudmFsdWUgPCB3cmFwMi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgIDogd3JhcDEudmFsdWUuZXF1YWxzKHdyYXAyLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgICAgICAgICBjYXNlIFwiZHVyYXRpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcDEudmFsdWUgPCB3cmFwMi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgIDogd3JhcDEudmFsdWUuZXF1YWxzKHdyYXAyLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICBsZXQgZjEgPSB3cmFwMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgZjIgPSB3cmFwMi52YWx1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgTWF0aC5taW4oZjEubGVuZ3RoLCBmMi5sZW5ndGgpOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wID0gY29tcGFyZVZhbHVlKGYxW2luZGV4XSwgZjJbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZjEubGVuZ3RoIC0gZjIubGVuZ3RoO1xuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICAgIGxldCBvMSA9IHdyYXAxLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBvMiA9IHdyYXAyLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBrMSA9IEFycmF5LmZyb20oT2JqZWN0LmtleXMobzEpKTtcbiAgICAgICAgICAgICAgICBsZXQgazIgPSBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG8yKSk7XG4gICAgICAgICAgICAgICAgazEuc29ydCgpO1xuICAgICAgICAgICAgICAgIGsyLnNvcnQoKTtcbiAgICAgICAgICAgICAgICBsZXQga2V5Q29tcGFyZSA9IGNvbXBhcmVWYWx1ZShrMSwgazIpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlDb21wYXJlICE9IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlDb21wYXJlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBrMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29tcCA9IGNvbXBhcmVWYWx1ZShvMVtrZXldLCBvMltrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAgIT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGNhc2UgXCJ3aWRnZXRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBWYWx1ZXMuY29tcGFyZVZhbHVlID0gY29tcGFyZVZhbHVlO1xuICAgIC8qKiBGaW5kIHRoZSBjb3JyZXNwb25kaW5nIERhdGF2ZWl3IHR5cGUgZm9yIGFuIGFyYml0cmFyeSB2YWx1ZS4gKi9cbiAgICBmdW5jdGlvbiB0eXBlT2YodmFsKSB7XG4gICAgICAgIHJldHVybiB3cmFwVmFsdWUodmFsKT8udHlwZTtcbiAgICB9XG4gICAgVmFsdWVzLnR5cGVPZiA9IHR5cGVPZjtcbiAgICAvKiogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBcInRydXRoeVwiIChpLmUuLCBpcyBub24tbnVsbCBhbmQgaGFzIGRhdGEgaW4gaXQpLiAqL1xuICAgIGZ1bmN0aW9uIGlzVHJ1dGh5KGZpZWxkKSB7XG4gICAgICAgIGxldCB3cmFwcGVkID0gd3JhcFZhbHVlKGZpZWxkKTtcbiAgICAgICAgaWYgKCF3cmFwcGVkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKHdyYXBwZWQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkLnZhbHVlICE9IDA7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWUubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWU7XG4gICAgICAgICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiAhIXdyYXBwZWQudmFsdWUucGF0aDtcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWUudG9NaWxsaXMoKSAhPSAwO1xuICAgICAgICAgICAgY2FzZSBcImR1cmF0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQudmFsdWUuYXMoXCJzZWNvbmRzXCIpICE9IDA7XG4gICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHdyYXBwZWQudmFsdWUpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlZC52YWx1ZS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgICAgICAgY2FzZSBcIndpZGdldFwiOlxuICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWVzLmlzVHJ1dGh5ID0gaXNUcnV0aHk7XG4gICAgLyoqIERlZXAgY29weSBhIGZpZWxkLiAqL1xuICAgIGZ1bmN0aW9uIGRlZXBDb3B5KGZpZWxkKSB7XG4gICAgICAgIGlmIChmaWVsZCA9PT0gbnVsbCB8fCBmaWVsZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICBpZiAoVmFsdWVzLmlzQXJyYXkoZmllbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KGZpZWxkLm1hcCh2ID0+IGRlZXBDb3B5KHYpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVmFsdWVzLmlzT2JqZWN0KGZpZWxkKSkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkKSlcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGRlZXBDb3B5KHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWVzLmRlZXBDb3B5ID0gZGVlcENvcHk7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09IFwic3RyaW5nXCI7XG4gICAgfVxuICAgIFZhbHVlcy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PSBcIm51bWJlclwiO1xuICAgIH1cbiAgICBWYWx1ZXMuaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBmdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgaW5zdGFuY2VvZiBEYXRlVGltZTtcbiAgICB9XG4gICAgVmFsdWVzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuICAgIFZhbHVlcy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbiAgICBmdW5jdGlvbiBpc051bGwodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIFZhbHVlcy5pc051bGwgPSBpc051bGw7XG4gICAgZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbiAgICB9XG4gICAgVmFsdWVzLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiO1xuICAgIH1cbiAgICBWYWx1ZXMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGZ1bmN0aW9uIGlzTGluayh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIExpbms7XG4gICAgfVxuICAgIFZhbHVlcy5pc0xpbmsgPSBpc0xpbms7XG4gICAgZnVuY3Rpb24gaXNXaWRnZXQodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgaW5zdGFuY2VvZiBXaWRnZXQ7XG4gICAgfVxuICAgIFZhbHVlcy5pc1dpZGdldCA9IGlzV2lkZ2V0O1xuICAgIGZ1bmN0aW9uIGlzSHRtbCh2YWwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFZhbHVlcy5pc0h0bWwgPSBpc0h0bWw7XG4gICAgLyoqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IChhbmQgbm90IGFueSBvdGhlciBkYXRhdmlldy1yZWNvZ25pemVkIG9iamVjdC1saWtlIHR5cGUpLiAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiB2YWwgPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgIWlzSHRtbCh2YWwpICYmXG4gICAgICAgICAgICAhaXNXaWRnZXQodmFsKSAmJlxuICAgICAgICAgICAgIWlzQXJyYXkodmFsKSAmJlxuICAgICAgICAgICAgIWlzRHVyYXRpb24odmFsKSAmJlxuICAgICAgICAgICAgIWlzRGF0ZSh2YWwpICYmXG4gICAgICAgICAgICAhaXNMaW5rKHZhbCkgJiZcbiAgICAgICAgICAgIHZhbCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAhaXNOdWxsKHZhbCkpO1xuICAgIH1cbiAgICBWYWx1ZXMuaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIFZhbHVlcy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbn0pKFZhbHVlcyB8fCAoVmFsdWVzID0ge30pKTtcbi8vLy8vLy8vLy8vLy8vL1xuLy8gR3JvdXBpbmdzIC8vXG4vLy8vLy8vLy8vLy8vLy9cbnZhciBHcm91cGluZ3M7XG4oZnVuY3Rpb24gKEdyb3VwaW5ncykge1xuICAgIC8qKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBncm91cCBlbnRyeSBpcyBhIHN0YW5kYWxvbmUgdmFsdWUsIG9yIGEgZ3JvdXBpbmcgb2Ygc3ViLWVudHJpZXMuICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50R3JvdXAoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIFZhbHVlcy5pc09iamVjdChlbnRyeSkgJiYgT2JqZWN0LmtleXMoZW50cnkpLmxlbmd0aCA9PSAyICYmIFwia2V5XCIgaW4gZW50cnkgJiYgXCJyb3dzXCIgaW4gZW50cnk7XG4gICAgfVxuICAgIEdyb3VwaW5ncy5pc0VsZW1lbnRHcm91cCA9IGlzRWxlbWVudEdyb3VwO1xuICAgIC8qKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBhcnJheSBpcyBhIGdyb3VwaW5nIGFycmF5LiAqL1xuICAgIGZ1bmN0aW9uIGlzR3JvdXBpbmcoZW50cnkpIHtcbiAgICAgICAgZm9yIChsZXQgZWxlbWVudCBvZiBlbnRyeSlcbiAgICAgICAgICAgIGlmICghaXNFbGVtZW50R3JvdXAoZWxlbWVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgR3JvdXBpbmdzLmlzR3JvdXBpbmcgPSBpc0dyb3VwaW5nO1xuICAgIC8qKiBDb3VudCB0aGUgdG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGEgcmVjdXJzaXZlIGdyb3VwaW5nLiAqL1xuICAgIGZ1bmN0aW9uIGNvdW50KGVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChpc0dyb3VwaW5nKGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBzdWJncm91cCBvZiBlbGVtZW50cylcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gY291bnQoc3ViZ3JvdXAucm93cyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBHcm91cGluZ3MuY291bnQgPSBjb3VudDtcbn0pKEdyb3VwaW5ncyB8fCAoR3JvdXBpbmdzID0ge30pKTtcbi8vLy8vLy8vLy9cbi8vIExJTksgLy9cbi8vLy8vLy8vLy9cbi8qKiBUaGUgT2JzaWRpYW4gJ2xpbmsnLCB1c2VkIGZvciB1bmlxdWVseSBkZXNjcmliaW5nIGEgZmlsZSwgaGVhZGVyLCBvciBibG9jay4gKi9cbmNsYXNzIExpbmsge1xuICAgIC8qKiBUaGUgZmlsZSBwYXRoIHRoaXMgbGluayBwb2ludHMgdG8uICovXG4gICAgcGF0aDtcbiAgICAvKiogVGhlIGRpc3BsYXkgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGxpbmsuICovXG4gICAgZGlzcGxheTtcbiAgICAvKiogVGhlIGJsb2NrIElEIG9yIGhlYWRlciB0aGlzIGxpbmsgcG9pbnRzIHRvIHdpdGhpbiBhIGZpbGUsIGlmIHJlbGV2YW50LiAqL1xuICAgIHN1YnBhdGg7XG4gICAgLyoqIElzIHRoaXMgbGluayBhbiBlbWJlZGRlZCBsaW5rICghKT8gKi9cbiAgICBlbWJlZDtcbiAgICAvKiogVGhlIHR5cGUgb2YgdGhpcyBsaW5rLCB3aGljaCBkZXRlcm1pbmVzIHdoYXQgJ3N1YnBhdGgnIHJlZmVycyB0bywgaWYgYW55dGhpbmcuICovXG4gICAgdHlwZTtcbiAgICAvKiogQ3JlYXRlIGEgbGluayB0byBhIHNwZWNpZmljIGZpbGUuICovXG4gICAgc3RhdGljIGZpbGUocGF0aCwgZW1iZWQgPSBmYWxzZSwgZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gbmV3IExpbmsoe1xuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGVtYmVkLFxuICAgICAgICAgICAgZGlzcGxheSxcbiAgICAgICAgICAgIHN1YnBhdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGluZmVyKGxpbmtwYXRoLCBlbWJlZCA9IGZhbHNlLCBkaXNwbGF5KSB7XG4gICAgICAgIGlmIChsaW5rcGF0aC5pbmNsdWRlcyhcIiNeXCIpKSB7XG4gICAgICAgICAgICBsZXQgc3BsaXQgPSBsaW5rcGF0aC5zcGxpdChcIiNeXCIpO1xuICAgICAgICAgICAgcmV0dXJuIExpbmsuYmxvY2soc3BsaXRbMF0sIHNwbGl0WzFdLCBlbWJlZCwgZGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGlua3BhdGguaW5jbHVkZXMoXCIjXCIpKSB7XG4gICAgICAgICAgICBsZXQgc3BsaXQgPSBsaW5rcGF0aC5zcGxpdChcIiNcIik7XG4gICAgICAgICAgICByZXR1cm4gTGluay5oZWFkZXIoc3BsaXRbMF0sIHNwbGl0WzFdLCBlbWJlZCwgZGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIExpbmsuZmlsZShsaW5rcGF0aCwgZW1iZWQsIGRpc3BsYXkpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlIGEgbGluayB0byBhIHNwZWNpZmljIGZpbGUgYW5kIGhlYWRlciBpbiB0aGF0IGZpbGUuICovXG4gICAgc3RhdGljIGhlYWRlcihwYXRoLCBoZWFkZXIsIGVtYmVkLCBkaXNwbGF5KSB7XG4gICAgICAgIC8vIEhlYWRlcnMgbmVlZCB0byBiZSBub3JtYWxpemVkIHRvIGFscGhhLW51bWVyaWMgJiB3aXRoIGV4dHJhIHNwYWNpbmcgcmVtb3ZlZC5cbiAgICAgICAgcmV0dXJuIG5ldyBMaW5rKHtcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBlbWJlZCxcbiAgICAgICAgICAgIGRpc3BsYXksXG4gICAgICAgICAgICBzdWJwYXRoOiBub3JtYWxpemVIZWFkZXJGb3JMaW5rKGhlYWRlciksXG4gICAgICAgICAgICB0eXBlOiBcImhlYWRlclwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIGxpbmsgdG8gYSBzcGVjaWZpYyBmaWxlIGFuZCBibG9jayBpbiB0aGF0IGZpbGUuICovXG4gICAgc3RhdGljIGJsb2NrKHBhdGgsIGJsb2NrSWQsIGVtYmVkLCBkaXNwbGF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluayh7XG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZW1iZWQsXG4gICAgICAgICAgICBkaXNwbGF5LFxuICAgICAgICAgICAgc3VicGF0aDogYmxvY2tJZCxcbiAgICAgICAgICAgIHR5cGU6IFwiYmxvY2tcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdCkge1xuICAgICAgICByZXR1cm4gbmV3IExpbmsob2JqZWN0KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgZmllbGRzKTtcbiAgICB9XG4gICAgLyoqIENoZWNrcyBmb3IgbGluayBlcXVhbGl0eSAoaS5lLiwgdGhhdCB0aGUgbGlua3MgYXJlIHBvaW50aW5nIHRvIHRoZSBzYW1lIGV4YWN0IGxvY2F0aW9uKS4gKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyID09IHVuZGVmaW5lZCB8fCBvdGhlciA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoID09IG90aGVyLnBhdGggJiYgdGhpcy50eXBlID09IG90aGVyLnR5cGUgJiYgdGhpcy5zdWJwYXRoID09IG90aGVyLnN1YnBhdGg7XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0IHRoaXMgbGluayB0byBpdCdzIG1hcmtkb3duIHJlcHJlc2VudGF0aW9uLiAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZG93bigpO1xuICAgIH1cbiAgICAvKiogQ29udmVydCB0aGlzIGxpbmsgdG8gYSByYXcgb2JqZWN0IHdoaWNoIGlzIHNlcmlhbGl6YXRpb24tZnJpZW5kbHkuICovXG4gICAgdG9PYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB7IHBhdGg6IHRoaXMucGF0aCwgdHlwZTogdGhpcy50eXBlLCBzdWJwYXRoOiB0aGlzLnN1YnBhdGgsIGRpc3BsYXk6IHRoaXMuZGlzcGxheSwgZW1iZWQ6IHRoaXMuZW1iZWQgfTtcbiAgICB9XG4gICAgLyoqIFVwZGF0ZSB0aGlzIGxpbmsgd2l0aCBhIG5ldyBwYXRoLiAqL1xuICAgIC8vQHRzLWlnbm9yZTsgZXJyb3IgYXBwZWFyZWQgYWZ0ZXIgdXBkYXRpbmcgT2JzaWRpYW4gdG8gMC4xNS40OyBpdCBhbHNvIHVwZGF0ZWQgb3RoZXIgcGFja2FnZXMgYnV0IGRpZG4ndCBzYXkgd2hpY2hcbiAgICB3aXRoUGF0aChwYXRoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGluayhPYmplY3QuYXNzaWduKHt9LCB0aGlzLCB7IHBhdGggfSkpO1xuICAgIH1cbiAgICAvKiogUmV0dXJuIGEgbmV3IGxpbmsgd2hpY2ggcG9pbnRzIHRvIHRoZSBzYW1lIGxvY2F0aW9uIGJ1dCB3aXRoIGEgbmV3IGRpc3BsYXkgdmFsdWUuICovXG4gICAgd2l0aERpc3BsYXkoZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gbmV3IExpbmsoT2JqZWN0LmFzc2lnbih7fSwgdGhpcywgeyBkaXNwbGF5IH0pKTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnQgYSBmaWxlIGxpbmsgaW50byBhIGxpbmsgdG8gYSBzcGVjaWZpYyBoZWFkZXIuICovXG4gICAgd2l0aEhlYWRlcihoZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIExpbmsuaGVhZGVyKHRoaXMucGF0aCwgaGVhZGVyLCB0aGlzLmVtYmVkLCB0aGlzLmRpc3BsYXkpO1xuICAgIH1cbiAgICAvKiogQ29udmVydCBhbnkgbGluayBpbnRvIGEgbGluayB0byBpdHMgZmlsZS4gKi9cbiAgICB0b0ZpbGUoKSB7XG4gICAgICAgIHJldHVybiBMaW5rLmZpbGUodGhpcy5wYXRoLCB0aGlzLmVtYmVkLCB0aGlzLmRpc3BsYXkpO1xuICAgIH1cbiAgICAvKiogQ29udmVydCB0aGlzIGxpbmsgaW50byBhbiBlbWJlZGRlZCBsaW5rLiAqL1xuICAgIHRvRW1iZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVtYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBsaW5rID0gbmV3IExpbmsodGhpcyk7XG4gICAgICAgICAgICBsaW5rLmVtYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBsaW5rO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0IHRoaXMgbGluayBpbnRvIGEgbm9uLWVtYmVkZGVkIGxpbmsuICovXG4gICAgZnJvbUVtYmVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuZW1iZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGxpbmsgPSBuZXcgTGluayh0aGlzKTtcbiAgICAgICAgICAgIGxpbmsuZW1iZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBsaW5rO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0IHRoaXMgbGluayB0byBtYXJrZG93biBzbyBpdCBjYW4gYmUgcmVuZGVyZWQuICovXG4gICAgbWFya2Rvd24oKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAodGhpcy5lbWJlZCA/IFwiIVwiIDogXCJcIikgKyBcIltbXCIgKyB0aGlzLm9ic2lkaWFuTGluaygpO1xuICAgICAgICBpZiAodGhpcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJ8XCIgKyB0aGlzLmRpc3BsYXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJ8XCIgKyBnZXRGaWxlVGl0bGUodGhpcy5wYXRoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gXCJoZWFkZXJcIiB8fCB0aGlzLnR5cGUgPT0gXCJibG9ja1wiKVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiA+IFwiICsgdGhpcy5zdWJwYXRoO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBcIl1dXCI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0IHRoZSBpbm5lciBwYXJ0IG9mIHRoZSBsaW5rIHRvIHNvbWV0aGluZyB0aGF0IE9ic2lkaWFuIGNhbiBvcGVuIC8gdW5kZXJzdGFuZC4gKi9cbiAgICBvYnNpZGlhbkxpbmsoKSB7XG4gICAgICAgIGNvbnN0IGVzY2FwZWQgPSB0aGlzLnBhdGgucmVwbGFjZUFsbChcInxcIiwgXCJcXFxcfFwiKTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSBcImhlYWRlclwiKVxuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWQgKyBcIiNcIiArIHRoaXMuc3VicGF0aD8ucmVwbGFjZUFsbChcInxcIiwgXCJcXFxcfFwiKTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSBcImJsb2NrXCIpXG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlZCArIFwiI15cIiArIHRoaXMuc3VicGF0aD8ucmVwbGFjZUFsbChcInxcIiwgXCJcXFxcfFwiKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfVxuICAgIC8qKiBUaGUgc3RyaXBwZWQgbmFtZSBvZiB0aGUgZmlsZSB0aGlzIGxpbmsgcG9pbnRzIHRvLiAqL1xuICAgIGZpbGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gZ2V0RmlsZVRpdGxlKHRoaXMucGF0aCkucmVwbGFjZShcIi5tZFwiLCBcIlwiKTtcbiAgICB9XG59XG4vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0lER0VUIEJBU0UgLy9cbi8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEEgdHJpdmlhbCBiYXNlIGNsYXNzIHdoaWNoIGp1c3QgZGVmaW5lcyB0aGUgJyR3aWRnZXQnIGlkZW50aWZpZXIgdHlwZS4gU3VidHlwZXMgb2ZcbiAqIHdpZGdldCBhcmUgcmVzcG9uc2libGUgZm9yIGFkZGluZyB3aGF0ZXZlciBtZXRhZGF0YSBpcyByZWxldmFudC4gSWYgeW91IHdhbnQgeW91ciB3aWRnZXRcbiAqIHRvIGhhdmUgcmVuZGVyaW5nIGZ1bmN0aW9uYWxpdHkgKHdoaWNoIHlvdSBwcm9iYWJseSBkbyksIHlvdSBzaG91bGQgZXh0ZW5kIGBSZW5kZXJXaWRnZXRgLlxuICovXG5jbGFzcyBXaWRnZXQge1xuICAgICR3aWRnZXQ7XG4gICAgY29uc3RydWN0b3IoJHdpZGdldCkge1xuICAgICAgICB0aGlzLiR3aWRnZXQgPSAkd2lkZ2V0O1xuICAgIH1cbn1cbi8qKiBBIHRyaXZpYWwgd2lkZ2V0IHdoaWNoIHJlbmRlcnMgYSAoa2V5LCB2YWx1ZSkgcGFpciwgYW5kIGFsbG93cyBhY2Nlc3NpbmcgdGhlIGtleSBhbmQgdmFsdWUuICovXG5jbGFzcyBMaXN0UGFpcldpZGdldCBleHRlbmRzIFdpZGdldCB7XG4gICAga2V5O1xuICAgIHZhbHVlO1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIoXCJkYXRhdmlldzpsaXN0LXBhaXJcIik7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIG1hcmtkb3duKCkge1xuICAgICAgICByZXR1cm4gYCR7VmFsdWVzLnRvU3RyaW5nKHRoaXMua2V5KX06ICR7VmFsdWVzLnRvU3RyaW5nKHRoaXMudmFsdWUpfWA7XG4gICAgfVxufVxuLyoqIEEgc2ltcGxlIHdpZGdldCB3aGljaCByZW5kZXJzIGFuIGV4dGVybmFsIGxpbmsuICovXG5jbGFzcyBFeHRlcm5hbExpbmtXaWRnZXQgZXh0ZW5kcyBXaWRnZXQge1xuICAgIHVybDtcbiAgICBkaXNwbGF5O1xuICAgIGNvbnN0cnVjdG9yKHVybCwgZGlzcGxheSkge1xuICAgICAgICBzdXBlcihcImRhdGF2aWV3OmV4dGVybmFsLWxpbmtcIik7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5O1xuICAgIH1cbiAgICBtYXJrZG93bigpIHtcbiAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmRpc3BsYXkgPz8gdGhpcy51cmx9XSgke3RoaXMudXJsfSlgO1xuICAgIH1cbn1cbnZhciBXaWRnZXRzO1xuKGZ1bmN0aW9uIChXaWRnZXRzKSB7XG4gICAgLyoqIENyZWF0ZSBhIGxpc3QgcGFpciB3aWRnZXQgbWF0Y2hpbmcgdGhlIGdpdmVuIGtleSBhbmQgdmFsdWUuICovXG4gICAgZnVuY3Rpb24gbGlzdFBhaXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RQYWlyV2lkZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBXaWRnZXRzLmxpc3RQYWlyID0gbGlzdFBhaXI7XG4gICAgLyoqIENyZWF0ZSBhbiBleHRlcm5hbCBsaW5rIHdpZGdldCB3aGljaCByZW5kZXJzIGFuIGV4dGVybmFsIE9ic2lkaWFuIGxpbmsuICovXG4gICAgZnVuY3Rpb24gZXh0ZXJuYWxMaW5rKHVybCwgZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gbmV3IEV4dGVybmFsTGlua1dpZGdldCh1cmwsIGRpc3BsYXkpO1xuICAgIH1cbiAgICBXaWRnZXRzLmV4dGVybmFsTGluayA9IGV4dGVybmFsTGluaztcbiAgICAvKiogQ2hlY2tzIGlmIHRoZSBnaXZlbiB3aWRnZXQgaXMgYSBsaXN0IHBhaXIgd2lkZ2V0LiAqL1xuICAgIGZ1bmN0aW9uIGlzTGlzdFBhaXIod2lkZ2V0KSB7XG4gICAgICAgIHJldHVybiB3aWRnZXQuJHdpZGdldCA9PT0gXCJkYXRhdmlldzpsaXN0LXBhaXJcIjtcbiAgICB9XG4gICAgV2lkZ2V0cy5pc0xpc3RQYWlyID0gaXNMaXN0UGFpcjtcbiAgICBmdW5jdGlvbiBpc0V4dGVybmFsTGluayh3aWRnZXQpIHtcbiAgICAgICAgcmV0dXJuIHdpZGdldC4kd2lkZ2V0ID09PSBcImRhdGF2aWV3OmV4dGVybmFsLWxpbmtcIjtcbiAgICB9XG4gICAgV2lkZ2V0cy5pc0V4dGVybmFsTGluayA9IGlzRXh0ZXJuYWxMaW5rO1xuICAgIC8qKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB3aWRnZXQgaXMgYW55IGtpbmQgb2YgYnVpbHQtaW4gd2lkZ2V0IHdpdGggc3BlY2lhbCByZW5kZXJpbmcgaGFuZGxpbmcuICovXG4gICAgZnVuY3Rpb24gaXNCdWlsdGluKHdpZGdldCkge1xuICAgICAgICByZXR1cm4gaXNMaXN0UGFpcih3aWRnZXQpIHx8IGlzRXh0ZXJuYWxMaW5rKHdpZGdldCk7XG4gICAgfVxuICAgIFdpZGdldHMuaXNCdWlsdGluID0gaXNCdWlsdGluO1xufSkoV2lkZ2V0cyB8fCAoV2lkZ2V0cyA9IHt9KSk7XG5cbi8qKiBVdGlsaXR5IG1ldGhvZHMgZm9yIGNyZWF0aW5nICYgY29tcGFyaW5nIGZpZWxkcy4gKi9cbnZhciBGaWVsZHM7XG4oZnVuY3Rpb24gKEZpZWxkcykge1xuICAgIGZ1bmN0aW9uIHZhcmlhYmxlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJ2YXJpYWJsZVwiLCBuYW1lIH07XG4gICAgfVxuICAgIEZpZWxkcy52YXJpYWJsZSA9IHZhcmlhYmxlO1xuICAgIGZ1bmN0aW9uIGxpdGVyYWwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlIH07XG4gICAgfVxuICAgIEZpZWxkcy5saXRlcmFsID0gbGl0ZXJhbDtcbiAgICBmdW5jdGlvbiBiaW5hcnlPcChsZWZ0LCBvcCwgcmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJiaW5hcnlvcFwiLCBsZWZ0LCBvcCwgcmlnaHQgfTtcbiAgICB9XG4gICAgRmllbGRzLmJpbmFyeU9wID0gYmluYXJ5T3A7XG4gICAgZnVuY3Rpb24gaW5kZXgob2JqLCBpbmRleCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImluZGV4XCIsIG9iamVjdDogb2JqLCBpbmRleCB9O1xuICAgIH1cbiAgICBGaWVsZHMuaW5kZXggPSBpbmRleDtcbiAgICAvKiogQ29udmVydHMgYSBzdHJpbmcgaW4gZG90LW5vdGF0aW9uLWZvcm1hdCBpbnRvIGEgdmFyaWFibGUgd2hpY2ggaW5kZXhlcy4gKi9cbiAgICBmdW5jdGlvbiBpbmRleFZhcmlhYmxlKG5hbWUpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gbmFtZS5zcGxpdChcIi5cIik7XG4gICAgICAgIGxldCByZXN1bHQgPSBGaWVsZHMudmFyaWFibGUocGFydHNbMF0pO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgcGFydHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBGaWVsZHMuaW5kZXgocmVzdWx0LCBGaWVsZHMubGl0ZXJhbChwYXJ0c1tpbmRleF0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBGaWVsZHMuaW5kZXhWYXJpYWJsZSA9IGluZGV4VmFyaWFibGU7XG4gICAgZnVuY3Rpb24gbGFtYmRhKGFyZ3MsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwibGFtYmRhXCIsIGFyZ3VtZW50czogYXJncywgdmFsdWUgfTtcbiAgICB9XG4gICAgRmllbGRzLmxhbWJkYSA9IGxhbWJkYTtcbiAgICBmdW5jdGlvbiBmdW5jKGZ1bmMsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJmdW5jdGlvblwiLCBmdW5jLCBhcmd1bWVudHM6IGFyZ3MgfTtcbiAgICB9XG4gICAgRmllbGRzLmZ1bmMgPSBmdW5jO1xuICAgIGZ1bmN0aW9uIGxpc3QodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwibGlzdFwiLCB2YWx1ZXMgfTtcbiAgICB9XG4gICAgRmllbGRzLmxpc3QgPSBsaXN0O1xuICAgIGZ1bmN0aW9uIG9iamVjdCh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJvYmplY3RcIiwgdmFsdWVzIH07XG4gICAgfVxuICAgIEZpZWxkcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgZnVuY3Rpb24gbmVnYXRlKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwibmVnYXRlZFwiLCBjaGlsZCB9O1xuICAgIH1cbiAgICBGaWVsZHMubmVnYXRlID0gbmVnYXRlO1xuICAgIGZ1bmN0aW9uIGlzQ29tcGFyZU9wKG9wKSB7XG4gICAgICAgIHJldHVybiBvcCA9PSBcIjw9XCIgfHwgb3AgPT0gXCI8XCIgfHwgb3AgPT0gXCI+XCIgfHwgb3AgPT0gXCI+PVwiIHx8IG9wID09IFwiIT1cIiB8fCBvcCA9PSBcIj1cIjtcbiAgICB9XG4gICAgRmllbGRzLmlzQ29tcGFyZU9wID0gaXNDb21wYXJlT3A7XG4gICAgRmllbGRzLk5VTEwgPSBGaWVsZHMubGl0ZXJhbChudWxsKTtcbn0pKEZpZWxkcyB8fCAoRmllbGRzID0ge30pKTtcblxuLyoqIEFTVCBpbXBsZW1lbnRhdGlvbiBmb3IgcXVlcmllcyBvdmVyIGRhdGEgc291cmNlcy4gKi9cbi8qKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBzb3VyY2VzLiAqL1xudmFyIFNvdXJjZXM7XG4oZnVuY3Rpb24gKFNvdXJjZXMpIHtcbiAgICAvKiogQ3JlYXRlIGEgc291cmNlIHdoaWNoIHNlYXJjaGVzIGZyb20gYSB0YWcuICovXG4gICAgZnVuY3Rpb24gdGFnKHRhZykge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcInRhZ1wiLCB0YWcgfTtcbiAgICB9XG4gICAgU291cmNlcy50YWcgPSB0YWc7XG4gICAgLyoqIENyZWF0ZSBhIHNvdXJjZSB3aGljaCBmZXRjaGVzIGZyb20gYSBDU1YgZmlsZS4gKi9cbiAgICBmdW5jdGlvbiBjc3YocGF0aCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImNzdlwiLCBwYXRoIH07XG4gICAgfVxuICAgIFNvdXJjZXMuY3N2ID0gY3N2O1xuICAgIC8qKiBDcmVhdGUgYSBzb3VyY2Ugd2hpY2ggc2VhcmNoZXMgZm9yIGZpbGVzIHVuZGVyIGEgZm9sZGVyIHByZWZpeC4gKi9cbiAgICBmdW5jdGlvbiBmb2xkZXIocHJlZml4KSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwiZm9sZGVyXCIsIGZvbGRlcjogcHJlZml4IH07XG4gICAgfVxuICAgIFNvdXJjZXMuZm9sZGVyID0gZm9sZGVyO1xuICAgIC8qKiBDcmVhdGUgYSBzb3VyY2Ugd2hpY2ggc2VhcmNoZXMgZm9yIGZpbGVzIHdoaWNoIGxpbmsgdG8vZnJvbSBhIGdpdmVuIGZpbGUuICovXG4gICAgZnVuY3Rpb24gbGluayhmaWxlLCBpbmNvbWluZykge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImxpbmtcIiwgZmlsZSwgZGlyZWN0aW9uOiBpbmNvbWluZyA/IFwiaW5jb21pbmdcIiA6IFwib3V0Z29pbmdcIiB9O1xuICAgIH1cbiAgICBTb3VyY2VzLmxpbmsgPSBsaW5rO1xuICAgIC8qKiBDcmVhdGUgYSBzb3VyY2Ugd2hpY2ggam9pbnMgdHdvIHNvdXJjZXMgYnkgYSBsb2dpY2FsIG9wZXJhdG9yIChhbmQvb3IpLiAqL1xuICAgIGZ1bmN0aW9uIGJpbmFyeU9wKGxlZnQsIG9wLCByaWdodCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImJpbmFyeW9wXCIsIGxlZnQsIG9wLCByaWdodCB9O1xuICAgIH1cbiAgICBTb3VyY2VzLmJpbmFyeU9wID0gYmluYXJ5T3A7XG4gICAgLyoqIENyZWF0ZSBhIHNvdXJjZSB3aGljaCB0YWtlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHR3byBzb3VyY2VzLiAqL1xuICAgIGZ1bmN0aW9uIGFuZChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImJpbmFyeW9wXCIsIGxlZnQsIG9wOiBcIiZcIiwgcmlnaHQgfTtcbiAgICB9XG4gICAgU291cmNlcy5hbmQgPSBhbmQ7XG4gICAgLyoqIENyZWF0ZSBhIHNvdXJjZSB3aGljaCB0YWtlcyB0aGUgdW5pb24gb2YgdHdvIHNvdXJjZXMuICovXG4gICAgZnVuY3Rpb24gb3IobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJiaW5hcnlvcFwiLCBsZWZ0LCBvcDogXCJ8XCIsIHJpZ2h0IH07XG4gICAgfVxuICAgIFNvdXJjZXMub3IgPSBvcjtcbiAgICAvKiogQ3JlYXRlIGEgc291cmNlIHdoaWNoIG5lZ2F0ZXMgdGhlIHVuZGVybHlpbmcgc291cmNlLiAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShjaGlsZCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcIm5lZ2F0ZVwiLCBjaGlsZCB9O1xuICAgIH1cbiAgICBTb3VyY2VzLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJlbXB0eVwiIH07XG4gICAgfVxuICAgIFNvdXJjZXMuZW1wdHkgPSBlbXB0eTtcbn0pKFNvdXJjZXMgfHwgKFNvdXJjZXMgPSB7fSkpO1xuXG4vKiogRW1vamkgcmVnZXggd2l0aG91dCBhbnkgYWRkaXRpb25hbCBmbGFncy4gKi9cbmNvbnN0IEVNT0pJX1JFR0VYID0gbmV3IFJlZ0V4cChlbW9qaVJlZ2V4KCksIFwiXCIpO1xuLyoqIFByb3ZpZGVzIGEgbG9va3VwIHRhYmxlIGZvciB1bml0IGR1cmF0aW9ucyBvZiB0aGUgZ2l2ZW4gdHlwZS4gKi9cbmNvbnN0IERVUkFUSU9OX1RZUEVTID0ge1xuICAgIHllYXI6IER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSB9KSxcbiAgICB5ZWFyczogRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxIH0pLFxuICAgIHlyOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEgfSksXG4gICAgeXJzOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEgfSksXG4gICAgbW9udGg6IER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDEgfSksXG4gICAgbW9udGhzOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbW9udGhzOiAxIH0pLFxuICAgIG1vOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbW9udGhzOiAxIH0pLFxuICAgIG1vczogRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogMSB9KSxcbiAgICB3ZWVrOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgd2Vla3M6IDEgfSksXG4gICAgd2Vla3M6IER1cmF0aW9uLmZyb21PYmplY3QoeyB3ZWVrczogMSB9KSxcbiAgICB3azogRHVyYXRpb24uZnJvbU9iamVjdCh7IHdlZWtzOiAxIH0pLFxuICAgIHdrczogRHVyYXRpb24uZnJvbU9iamVjdCh7IHdlZWtzOiAxIH0pLFxuICAgIHc6IER1cmF0aW9uLmZyb21PYmplY3QoeyB3ZWVrczogMSB9KSxcbiAgICBkYXk6IER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxIH0pLFxuICAgIGRheXM6IER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxIH0pLFxuICAgIGQ6IER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxIH0pLFxuICAgIGhvdXI6IER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSB9KSxcbiAgICBob3VyczogRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxIH0pLFxuICAgIGhyOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEgfSksXG4gICAgaHJzOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEgfSksXG4gICAgaDogRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxIH0pLFxuICAgIG1pbnV0ZTogRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDEgfSksXG4gICAgbWludXRlczogRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDEgfSksXG4gICAgbWluOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWludXRlczogMSB9KSxcbiAgICBtaW5zOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWludXRlczogMSB9KSxcbiAgICBtOiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWludXRlczogMSB9KSxcbiAgICBzZWNvbmQ6IER1cmF0aW9uLmZyb21PYmplY3QoeyBzZWNvbmRzOiAxIH0pLFxuICAgIHNlY29uZHM6IER1cmF0aW9uLmZyb21PYmplY3QoeyBzZWNvbmRzOiAxIH0pLFxuICAgIHNlYzogRHVyYXRpb24uZnJvbU9iamVjdCh7IHNlY29uZHM6IDEgfSksXG4gICAgc2VjczogRHVyYXRpb24uZnJvbU9iamVjdCh7IHNlY29uZHM6IDEgfSksXG4gICAgczogRHVyYXRpb24uZnJvbU9iamVjdCh7IHNlY29uZHM6IDEgfSksXG59O1xuLyoqIFNob3J0aGFuZCBmb3IgY29tbW9uIGRhdGVzIChyZWxhdGl2ZSB0byByaWdodCBub3cpLiAqL1xuY29uc3QgREFURV9TSE9SVEhBTkRTID0ge1xuICAgIG5vdzogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKSxcbiAgICB0b2RheTogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKS5zdGFydE9mKFwiZGF5XCIpLFxuICAgIHllc3RlcmRheTogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKVxuICAgICAgICAuc3RhcnRPZihcImRheVwiKVxuICAgICAgICAubWludXMoRHVyYXRpb24uZnJvbU9iamVjdCh7IGRheXM6IDEgfSkpLFxuICAgIHRvbW9ycm93OiAoKSA9PiBEYXRlVGltZS5sb2NhbCgpXG4gICAgICAgIC5zdGFydE9mKFwiZGF5XCIpXG4gICAgICAgIC5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxIH0pKSxcbiAgICBzb3c6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuc3RhcnRPZihcIndlZWtcIiksXG4gICAgXCJzdGFydC1vZi13ZWVrXCI6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuc3RhcnRPZihcIndlZWtcIiksXG4gICAgZW93OiAoKSA9PiBEYXRlVGltZS5sb2NhbCgpLmVuZE9mKFwid2Vla1wiKSxcbiAgICBcImVuZC1vZi13ZWVrXCI6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuZW5kT2YoXCJ3ZWVrXCIpLFxuICAgIHNveTogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKS5zdGFydE9mKFwieWVhclwiKSxcbiAgICBcInN0YXJ0LW9mLXllYXJcIjogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKS5zdGFydE9mKFwieWVhclwiKSxcbiAgICBlb3k6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuZW5kT2YoXCJ5ZWFyXCIpLFxuICAgIFwiZW5kLW9mLXllYXJcIjogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKS5lbmRPZihcInllYXJcIiksXG4gICAgc29tOiAoKSA9PiBEYXRlVGltZS5sb2NhbCgpLnN0YXJ0T2YoXCJtb250aFwiKSxcbiAgICBcInN0YXJ0LW9mLW1vbnRoXCI6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuc3RhcnRPZihcIm1vbnRoXCIpLFxuICAgIGVvbTogKCkgPT4gRGF0ZVRpbWUubG9jYWwoKS5lbmRPZihcIm1vbnRoXCIpLFxuICAgIFwiZW5kLW9mLW1vbnRoXCI6ICgpID0+IERhdGVUaW1lLmxvY2FsKCkuZW5kT2YoXCJtb250aFwiKSxcbn07XG4vKipcbiAqIEtleXdvcmRzIHdoaWNoIGNhbm5vdCBiZSB1c2VkIGFzIHZhcmlhYmxlcyBkaXJlY3RseS4gVXNlIGByb3cuPHRoaW5nPmAgaWYgaXQgaXMgYSB2YXJpYWJsZSB5b3UgaGF2ZSBkZWZpbmVkIGFuZCB3YW50XG4gKiB0byBhY2Nlc3MuXG4gKi9cbmNvbnN0IEtFWVdPUkRTID0gW1wiRlJPTVwiLCBcIldIRVJFXCIsIFwiTElNSVRcIiwgXCJHUk9VUFwiLCBcIkZMQVRURU5cIl07XG4vLy8vLy8vLy8vLy8vLy9cbi8vIFV0aWxpdGllcyAvL1xuLy8vLy8vLy8vLy8vLy8vXG4vKiogU3BsaXQgb24gdW5lc2NhcGVkIHBpcGVzIGluIGFuIGlubmVyIGxpbmsuICovXG5mdW5jdGlvbiBzcGxpdE9uVW5lc2NhcGVkUGlwZShsaW5rKSB7XG4gICAgbGV0IHBpcGUgPSAtMTtcbiAgICB3aGlsZSAoKHBpcGUgPSBsaW5rLmluZGV4T2YoXCJ8XCIsIHBpcGUgKyAxKSkgPj0gMCkge1xuICAgICAgICBpZiAocGlwZSA+IDAgJiYgbGlua1twaXBlIC0gMV0gPT0gXCJcXFxcXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIFtsaW5rLnN1YnN0cmluZygwLCBwaXBlKS5yZXBsYWNlKC9cXFxcXFx8L2csIFwifFwiKSwgbGluay5zdWJzdHJpbmcocGlwZSArIDEpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtsaW5rLnJlcGxhY2UoL1xcXFxcXHwvZywgXCJ8XCIpLCB1bmRlZmluZWRdO1xufVxuLyoqIEF0dGVtcHQgdG8gcGFyc2UgdGhlIGluc2lkZSBvZiBhIGxpbmsgdG8gcHVsbCBvdXQgZGlzcGxheSBuYW1lLCBzdWJwYXRoLCBldGMuICovXG5mdW5jdGlvbiBwYXJzZUlubmVyTGluayhyYXdsaW5rKSB7XG4gICAgbGV0IFtsaW5rLCBkaXNwbGF5XSA9IHNwbGl0T25VbmVzY2FwZWRQaXBlKHJhd2xpbmspO1xuICAgIHJldHVybiBMaW5rLmluZmVyKGxpbmssIGZhbHNlLCBkaXNwbGF5KTtcbn1cbi8qKiBDcmVhdGUgYSBsZWZ0LWFzc29jaWF0aXZlIGJpbmFyeSBwYXJzZXIgd2hpY2ggcGFyc2VzIHRoZSBnaXZlbiBzdWItZWxlbWVudCBhbmQgc2VwYXJhdG9yLiBIYW5kbGVzIHdoaXRlc3BhY2UuICovXG5mdW5jdGlvbiBjcmVhdGVCaW5hcnlQYXJzZXIoY2hpbGQsIHNlcCwgY29tYmluZSkge1xuICAgIHJldHVybiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKGNoaWxkLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBzZXAsIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBjaGlsZCkubWFueSgpLCAoZmlyc3QsIHJlc3QpID0+IHtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gZmlyc3Q7XG4gICAgICAgIGxldCBub2RlID0gY29tYmluZShmaXJzdCwgcmVzdFswXVsxXSwgcmVzdFswXVszXSk7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCByZXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgbm9kZSA9IGNvbWJpbmUobm9kZSwgcmVzdFtpbmRleF1bMV0sIHJlc3RbaW5kZXhdWzNdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNoYWluT3B0KGJhc2UsIC4uLmZ1bmNzKSB7XG4gICAgcmV0dXJuIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5jdXN0b20oKHN1Y2Nlc3MsIGZhaWx1cmUpID0+IHtcbiAgICAgICAgcmV0dXJuIChpbnB1dCwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGJhc2UuXyhpbnB1dCwgaSk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5zdGF0dXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGZvciAobGV0IGZ1bmMgb2YgZnVuY3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGZ1bmMocmVzdWx0LnZhbHVlKS5fKGlucHV0LCByZXN1bHQuaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dC5zdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG5jb25zdCBFWFBSRVNTSU9OID0gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmNyZWF0ZUxhbmd1YWdlKHtcbiAgICAvLyBBIGZsb2F0aW5nIHBvaW50IG51bWJlcjsgdGhlIGRlY2ltYWwgcG9pbnQgaXMgb3B0aW9uYWwuXG4gICAgbnVtYmVyOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoLy0/WzAtOV0rKFxcLlswLTldKyk/LylcbiAgICAgICAgLm1hcChzdHIgPT4gTnVtYmVyLnBhcnNlRmxvYXQoc3RyKSlcbiAgICAgICAgLmRlc2MoXCJudW1iZXJcIiksXG4gICAgLy8gQSBxdW90ZS1zdXJyb3VuZGVkIHN0cmluZyB3aGljaCBzdXBwb3J0cyBlc2NhcGUgY2hhcmFjdGVycyAoJ1xcJykuXG4gICAgc3RyaW5nOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoJ1wiJylcbiAgICAgICAgLnRoZW4ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFsdChxLmVzY2FwZUNoYXJhY3RlciwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm5vbmVPZignXCJcXFxcJykpXG4gICAgICAgIC5hdExlYXN0KDApXG4gICAgICAgIC5tYXAoY2hhcnMgPT4gY2hhcnMuam9pbihcIlwiKSkpXG4gICAgICAgIC5za2lwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoJ1wiJykpXG4gICAgICAgIC5kZXNjKFwic3RyaW5nXCIpLFxuICAgIGVzY2FwZUNoYXJhY3RlcjogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiXFxcXFwiKVxuICAgICAgICAudGhlbihwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYW55KVxuICAgICAgICAubWFwKGVzY2FwZWQgPT4ge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgZXNjYXBpbmcgYSBiYWNrc2xhc2ggb3IgYSBxdW90ZSwgcGFzcyBpbiBvbiBpbiBlc2NhcGVkIGZvcm1cbiAgICAgICAgaWYgKGVzY2FwZWQgPT09ICdcIicpXG4gICAgICAgICAgICByZXR1cm4gJ1wiJztcbiAgICAgICAgaWYgKGVzY2FwZWQgPT09IFwiXFxcXFwiKVxuICAgICAgICAgICAgcmV0dXJuIFwiXFxcXFwiO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gXCJcXFxcXCIgKyBlc2NhcGVkO1xuICAgIH0pLFxuICAgIC8vIEEgYm9vbGVhbiB0cnVlL2ZhbHNlIHZhbHVlLlxuICAgIGJvb2w6IF8gPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvdHJ1ZXxmYWxzZXxUcnVlfEZhbHNlLylcbiAgICAgICAgLm1hcChzdHIgPT4gc3RyLnRvTG93ZXJDYXNlKCkgPT0gXCJ0cnVlXCIpXG4gICAgICAgIC5kZXNjKFwiYm9vbGVhbiAoJ3RydWUnIG9yICdmYWxzZScpXCIpLFxuICAgIC8vIEEgdGFnIG9mIHRoZSBmb3JtICcjc3R1ZmYvaGVsbG8tdGhlcmUnLlxuICAgIHRhZzogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIjXCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1teXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGJyFcIiMkJSYoKSorLC46Ozw9Pj9AXmB7fH1+XFxbXFxdXFxcXFxcc10vKS5kZXNjKFwidGV4dFwiKSkubWFueSgpLCAoc3RhcnQsIHJlc3QpID0+IHN0YXJ0ICsgcmVzdC5qb2luKFwiXCIpKS5kZXNjKFwidGFnICgnI2hlbGxvL3N0dWZmJylcIiksXG4gICAgLy8gQSB2YXJpYWJsZSBpZGVudGlmaWVyLCB3aGljaCBpcyBhbHBoYW51bWVyaWMgYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlciBvci4uLiBlbW9qaS5cbiAgICBpZGVudGlmaWVyOiBfID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFsdChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXHB7TGV0dGVyfS91KSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cChFTU9KSV9SRUdFWCkuZGVzYyhcInRleHRcIikpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1swLTlcXHB7TGV0dGVyfV8tXS91KSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cChFTU9KSV9SRUdFWCkuZGVzYyhcInRleHRcIikpLm1hbnkoKSwgKGZpcnN0LCByZXN0KSA9PiBmaXJzdCArIHJlc3Quam9pbihcIlwiKSkuZGVzYyhcInZhcmlhYmxlIGlkZW50aWZpZXJcIiksXG4gICAgLy8gQW4gT2JzaWRpYW4gbGluayBvZiB0aGUgZm9ybSBbWzxsaW5rPl1dLlxuICAgIGxpbms6IF8gPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvXFxbXFxbKFteXFxbXFxdXSo/KVxcXVxcXS91LCAxKVxuICAgICAgICAubWFwKGxpbmtJbm5lciA9PiBwYXJzZUlubmVyTGluayhsaW5rSW5uZXIpKVxuICAgICAgICAuZGVzYyhcImZpbGUgbGlua1wiKSxcbiAgICAvLyBBbiBlbWJlZGRhYmxlIGxpbmsgd2hpY2ggY2FuIHN0YXJ0IHdpdGggJyEnLiBUaGlzIG92ZXJsYXBzIHdpdGggdGhlIG5vcm1hbCBuZWdhdGlvbiBvcGVyYXRvciwgc28gaXQgaXMgb25seVxuICAgIC8vIHByb3ZpZGVkIGZvciBtZXRhZGF0YSBwYXJzaW5nLlxuICAgIGVtYmVkTGluazogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIhXCIpLmF0TW9zdCgxKSwgcS5saW5rLCAocCwgbCkgPT4ge1xuICAgICAgICBpZiAocC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgbC5lbWJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBsO1xuICAgIH0pLmRlc2MoXCJmaWxlIGxpbmtcIiksXG4gICAgLy8gQmluYXJ5IHBsdXMgb3IgbWludXMgb3BlcmF0b3IuXG4gICAgYmluYXJ5UGx1c01pbnVzOiBfID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1xcK3wtLylcbiAgICAgICAgLm1hcChzdHIgPT4gc3RyKVxuICAgICAgICAuZGVzYyhcIicrJyBvciAnLSdcIiksXG4gICAgLy8gQmluYXJ5IHRpbWVzIG9yIGRpdmlkZSBvcGVyYXRvci5cbiAgICBiaW5hcnlNdWxEaXY6IF8gPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvXFwqfFxcL3wlLylcbiAgICAgICAgLm1hcChzdHIgPT4gc3RyKVxuICAgICAgICAuZGVzYyhcIicqJyBvciAnLycgb3IgJyUnXCIpLFxuICAgIC8vIEJpbmFyeSBjb21wYXJpc29uIG9wZXJhdG9yLlxuICAgIGJpbmFyeUNvbXBhcmVPcDogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC8+PXw8PXwhPXw+fDx8PS8pXG4gICAgICAgIC5tYXAoc3RyID0+IHN0cilcbiAgICAgICAgLmRlc2MoXCInPj0nIG9yICc8PScgb3IgJyE9JyBvciAnPScgb3IgJz4nIG9yICc8J1wiKSxcbiAgICAvLyBCaW5hcnkgYm9vbGVhbiBjb21iaW5hdGlvbiBvcGVyYXRvci5cbiAgICBiaW5hcnlCb29sZWFuT3A6IF8gPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvYW5kfG9yfCZ8XFx8L2kpXG4gICAgICAgIC5tYXAoc3RyID0+IHtcbiAgICAgICAgaWYgKHN0ci50b0xvd2VyQ2FzZSgpID09IFwiYW5kXCIpXG4gICAgICAgICAgICByZXR1cm4gXCImXCI7XG4gICAgICAgIGVsc2UgaWYgKHN0ci50b0xvd2VyQ2FzZSgpID09IFwib3JcIilcbiAgICAgICAgICAgIHJldHVybiBcInxcIjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9KVxuICAgICAgICAuZGVzYyhcIidhbmQnIG9yICdvcidcIiksXG4gICAgLy8gQSBkYXRlIHdoaWNoIGNhbiBiZSBZWVlZLU1NWy1ERFRISDptbTpzc10uXG4gICAgcm9vdERhdGU6IF8gPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXGR7NH0vKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIi1cIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1xcZHsyfS8pLCAoeWVhciwgXywgbW9udGgpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiBOdW1iZXIucGFyc2VJbnQoeWVhciksIG1vbnRoOiBOdW1iZXIucGFyc2VJbnQobW9udGgpIH0pO1xuICAgIH0pLmRlc2MoXCJkYXRlIGluIGZvcm1hdCBZWVlZLU1NWy1ERFRISC1NTS1TUy5NU11cIiksXG4gICAgZGF0ZVNob3J0aGFuZDogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KC4uLk9iamVjdC5rZXlzKERBVEVfU0hPUlRIQU5EUylcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpXG4gICAgICAgIC5tYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZykpLFxuICAgIGRhdGU6IHEgPT4gY2hhaW5PcHQocS5yb290RGF0ZSwgKHltKSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCItXCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXGR7Mn0vKSwgKF8sIGRheSkgPT4geW0uc2V0KHsgZGF5OiBOdW1iZXIucGFyc2VJbnQoZGF5KSB9KSksICh5bWQpID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIlRcIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1xcZHsyfS8pLCAoXywgaG91cikgPT4geW1kLnNldCh7IGhvdXI6IE51bWJlci5wYXJzZUludChob3VyKSB9KSksICh5bWRoKSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCI6XCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXGR7Mn0vKSwgKF8sIG1pbnV0ZSkgPT4geW1kaC5zZXQoeyBtaW51dGU6IE51bWJlci5wYXJzZUludChtaW51dGUpIH0pKSwgKHltZGhtKSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCI6XCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXGR7Mn0vKSwgKF8sIHNlY29uZCkgPT4geW1kaG0uc2V0KHsgc2Vjb25kOiBOdW1iZXIucGFyc2VJbnQoc2Vjb25kKSB9KSksICh5bWRobXMpID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5hbHQocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiLlwiKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvXFxkezN9LyksIChfLCBtaWxsaXNlY29uZCkgPT4geW1kaG1zLnNldCh7IG1pbGxpc2Vjb25kOiBOdW1iZXIucGFyc2VJbnQobWlsbGlzZWNvbmQpIH0pKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN1Y2NlZWQoeW1kaG1zKSAvLyBwYXNzXG4gICAgKSwgKGR0KSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIitcIikub3IocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIi1cIikpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9cXGR7MSwyfSg6XFxkezJ9KT8vKSwgKHBtLCBocikgPT4gZHQuc2V0Wm9uZShcIlVUQ1wiICsgcG0gKyBociwgeyBrZWVwTG9jYWxUaW1lOiB0cnVlIH0pKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiWlwiKSwgKCkgPT4gZHQuc2V0Wm9uZShcInV0Y1wiLCB7IGtlZXBMb2NhbFRpbWU6IHRydWUgfSkpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCJbXCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9bMC05QS1aYS16Ky1cXC9dKy91KSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIl1cIiksIChfYSwgem9uZSwgX2IpID0+IGR0LnNldFpvbmUoem9uZSwgeyBrZWVwTG9jYWxUaW1lOiB0cnVlIH0pKSkpXG4gICAgICAgIC5hc3NlcnQoKGR0KSA9PiBkdC5pc1ZhbGlkLCBcInZhbGlkIGRhdGVcIilcbiAgICAgICAgLmRlc2MoXCJkYXRlIGluIGZvcm1hdCBZWVlZLU1NWy1ERFRISC1NTS1TUy5NU11cIiksXG4gICAgLy8gQSBkYXRlLCBwbHVzIHZhcmlvdXMgc2hvcnRoYW5kIHRpbWVzIG9mIGRheSBpdCBjb3VsZCBiZS5cbiAgICBkYXRlUGx1czogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHEuZGF0ZVNob3J0aGFuZC5tYXAoZCA9PiBEQVRFX1NIT1JUSEFORFNbZF0oKSksIHEuZGF0ZSkuZGVzYyhcImRhdGUgaW4gZm9ybWF0IFlZWVktTU1bLUREVEhILU1NLVNTLk1TXSBvciBpbiBzaG9ydGhhbmRcIiksXG4gICAgLy8gQSBkdXJhdGlvbiBvZiB0aW1lLlxuICAgIGR1cmF0aW9uVHlwZTogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KC4uLk9iamVjdC5rZXlzKERVUkFUSU9OX1RZUEVTKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5sZW5ndGggLSBhLmxlbmd0aClcbiAgICAgICAgLm1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKSksXG4gICAgZHVyYXRpb246IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChxLm51bWJlciwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UsIHEuZHVyYXRpb25UeXBlLCAoY291bnQsIF8sIHQpID0+IERVUkFUSU9OX1RZUEVTW3RdLm1hcFVuaXRzKHggPT4geCAqIGNvdW50KSlcbiAgICAgICAgLnNlcEJ5MShwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiLFwiKS50cmltKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKS5vcihwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSkpXG4gICAgICAgIC5tYXAoZHVyYXRpb25zID0+IGR1cmF0aW9ucy5yZWR1Y2UoKHAsIGMpID0+IHAucGx1cyhjKSkpXG4gICAgICAgIC5kZXNjKFwiZHVyYXRpb24gbGlrZSA0aHIybWluXCIpLFxuICAgIC8vIEEgcmF3IG51bGwgdmFsdWUuXG4gICAgcmF3TnVsbDogXyA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwibnVsbFwiKSxcbiAgICAvLyBTb3VyY2UgcGFyc2luZy5cbiAgICB0YWdTb3VyY2U6IHEgPT4gcS50YWcubWFwKHRhZyA9PiBTb3VyY2VzLnRhZyh0YWcpKSxcbiAgICBjc3ZTb3VyY2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiY3N2KFwiKS5za2lwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKSwgcS5zdHJpbmcsIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIpXCIpLCAoXzEsIHBhdGgsIF8yKSA9PiBTb3VyY2VzLmNzdihwYXRoKSksXG4gICAgbGlua0luY29taW5nU291cmNlOiBxID0+IHEubGluay5tYXAobGluayA9PiBTb3VyY2VzLmxpbmsobGluay5wYXRoLCB0cnVlKSksXG4gICAgbGlua091dGdvaW5nU291cmNlOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIm91dGdvaW5nKFwiKS5za2lwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKSwgcS5saW5rLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiKVwiKSwgKF8xLCBsaW5rLCBfMikgPT4gU291cmNlcy5saW5rKGxpbmsucGF0aCwgZmFsc2UpKSxcbiAgICBmb2xkZXJTb3VyY2U6IHEgPT4gcS5zdHJpbmcubWFwKHN0ciA9PiBTb3VyY2VzLmZvbGRlcihzdHIpKSxcbiAgICBwYXJlbnNTb3VyY2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiKFwiKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UsIHEuc291cmNlLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIilcIiksIChfMSwgXzIsIGZpZWxkLCBfMywgXzQpID0+IGZpZWxkKSxcbiAgICBuZWdhdGVTb3VyY2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCItXCIpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiIVwiKSksIHEuYXRvbVNvdXJjZSwgKF8sIHNvdXJjZSkgPT4gU291cmNlcy5uZWdhdGUoc291cmNlKSksXG4gICAgYXRvbVNvdXJjZTogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHEucGFyZW5zU291cmNlLCBxLm5lZ2F0ZVNvdXJjZSwgcS5saW5rT3V0Z29pbmdTb3VyY2UsIHEubGlua0luY29taW5nU291cmNlLCBxLmZvbGRlclNvdXJjZSwgcS50YWdTb3VyY2UsIHEuY3N2U291cmNlKSxcbiAgICBiaW5hcnlPcFNvdXJjZTogcSA9PiBjcmVhdGVCaW5hcnlQYXJzZXIocS5hdG9tU291cmNlLCBxLmJpbmFyeUJvb2xlYW5PcC5tYXAocyA9PiBzKSwgU291cmNlcy5iaW5hcnlPcCksXG4gICAgc291cmNlOiBxID0+IHEuYmluYXJ5T3BTb3VyY2UsXG4gICAgLy8gRmllbGQgcGFyc2luZy5cbiAgICB2YXJpYWJsZUZpZWxkOiBxID0+IHEuaWRlbnRpZmllclxuICAgICAgICAuY2hhaW4ociA9PiB7XG4gICAgICAgIGlmIChLRVlXT1JEUy5pbmNsdWRlcyhyLnRvVXBwZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmZhaWwoXCJWYXJpYWJsZSBmaWVsZHMgY2Fubm90IGJlIGEga2V5d29yZCAoXCIgKyBLRVlXT1JEUy5qb2luKFwiIG9yIFwiKSArIFwiKVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3VjY2VlZChGaWVsZHMudmFyaWFibGUocikpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmRlc2MoXCJ2YXJpYWJsZVwiKSxcbiAgICBudW1iZXJGaWVsZDogcSA9PiBxLm51bWJlci5tYXAodmFsID0+IEZpZWxkcy5saXRlcmFsKHZhbCkpLmRlc2MoXCJudW1iZXJcIiksXG4gICAgc3RyaW5nRmllbGQ6IHEgPT4gcS5zdHJpbmcubWFwKHZhbCA9PiBGaWVsZHMubGl0ZXJhbCh2YWwpKS5kZXNjKFwic3RyaW5nXCIpLFxuICAgIGJvb2xGaWVsZDogcSA9PiBxLmJvb2wubWFwKHZhbCA9PiBGaWVsZHMubGl0ZXJhbCh2YWwpKS5kZXNjKFwiYm9vbGVhblwiKSxcbiAgICBkYXRlRmllbGQ6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiZGF0ZShcIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBxLmRhdGVQbHVzLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIilcIiksIChwcmVmaXgsIF8xLCBkYXRlLCBfMiwgcG9zdGZpeCkgPT4gRmllbGRzLmxpdGVyYWwoZGF0ZSkpLmRlc2MoXCJkYXRlXCIpLFxuICAgIGR1cmF0aW9uRmllbGQ6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiZHVyKFwiKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UsIHEuZHVyYXRpb24sIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiKVwiKSwgKHByZWZpeCwgXzEsIGR1ciwgXzIsIHBvc3RmaXgpID0+IEZpZWxkcy5saXRlcmFsKGR1cikpLmRlc2MoXCJkdXJhdGlvblwiKSxcbiAgICBudWxsRmllbGQ6IHEgPT4gcS5yYXdOdWxsLm1hcChfID0+IEZpZWxkcy5OVUxMKSxcbiAgICBsaW5rRmllbGQ6IHEgPT4gcS5saW5rLm1hcChmID0+IEZpZWxkcy5saXRlcmFsKGYpKSxcbiAgICBsaXN0RmllbGQ6IHEgPT4gcS5maWVsZFxuICAgICAgICAuc2VwQnkocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIixcIikudHJpbShwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSkpXG4gICAgICAgIC53cmFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCJbXCIpLnNraXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZS50aGVuKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCJdXCIpKSlcbiAgICAgICAgLm1hcChsID0+IEZpZWxkcy5saXN0KGwpKVxuICAgICAgICAuZGVzYyhcImxpc3QgKCdbMSwgMiwgM10nKVwiKSxcbiAgICBvYmplY3RGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHEuaWRlbnRpZmllci5vcihxLnN0cmluZyksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCI6XCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpLCBxLmZpZWxkLCAobmFtZSwgX3NlcCwgdmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgbmFtZSwgdmFsdWUgfTtcbiAgICB9KVxuICAgICAgICAuc2VwQnkocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIixcIikudHJpbShwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSkpXG4gICAgICAgIC53cmFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCJ7XCIpLnNraXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZS50aGVuKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCJ9XCIpKSlcbiAgICAgICAgLm1hcCh2YWxzID0+IHtcbiAgICAgICAgbGV0IHJlcyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBlbnRyeSBvZiB2YWxzKVxuICAgICAgICAgICAgcmVzW2VudHJ5Lm5hbWVdID0gZW50cnkudmFsdWU7XG4gICAgICAgIHJldHVybiBGaWVsZHMub2JqZWN0KHJlcyk7XG4gICAgfSlcbiAgICAgICAgLmRlc2MoXCJvYmplY3QgKCd7IGE6IDEsIGI6IDIgfScpXCIpLFxuICAgIGF0b21JbmxpbmVGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHEuZGF0ZSwgcS5kdXJhdGlvbi5tYXAoZCA9PiBub3JtYWxpemVEdXJhdGlvbihkKSksIHEuc3RyaW5nLCBxLnRhZywgcS5lbWJlZExpbmssIHEuYm9vbCwgcS5udW1iZXIsIHEucmF3TnVsbCksXG4gICAgaW5saW5lRmllbGRMaXN0OiBxID0+IHEuYXRvbUlubGluZUZpZWxkLnNlcEJ5KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIsXCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpLmxvb2thaGVhZChxLmF0b21JbmxpbmVGaWVsZCkpLFxuICAgIGlubGluZUZpZWxkOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5hbHQocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChxLmF0b21JbmxpbmVGaWVsZCwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIixcIikudHJpbShwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSksIHEuaW5saW5lRmllbGRMaXN0LCAoZiwgX3MsIGwpID0+IFtmXS5jb25jYXQobCkpLCBxLmF0b21JbmxpbmVGaWVsZCksXG4gICAgYXRvbUZpZWxkOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5hbHQoXG4gICAgLy8gUGxhY2UgZW1iZWQgbGlua3MgYWJvdmUgbmVnYXRlZCBmaWVsZHMgYXMgdGhleSBhcmUgdGhlIHNwZWNpYWwgcGFyc2VyIGNhc2UgJyFbW3RoaW5nXV0nIGFuZCBhcmUgZ2VuZXJhbGx5IHVuYW1iaWdpb3VzLlxuICAgIHEuZW1iZWRMaW5rLm1hcChsID0+IEZpZWxkcy5saXRlcmFsKGwpKSwgcS5uZWdhdGVkRmllbGQsIHEubGlua0ZpZWxkLCBxLmxpc3RGaWVsZCwgcS5vYmplY3RGaWVsZCwgcS5sYW1iZGFGaWVsZCwgcS5wYXJlbnNGaWVsZCwgcS5ib29sRmllbGQsIHEubnVtYmVyRmllbGQsIHEuc3RyaW5nRmllbGQsIHEuZGF0ZUZpZWxkLCBxLmR1cmF0aW9uRmllbGQsIHEubnVsbEZpZWxkLCBxLnZhcmlhYmxlRmllbGQpLFxuICAgIGluZGV4RmllbGQ6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChxLmF0b21GaWVsZCwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFsdChxLmRvdFBvc3RmaXgsIHEuaW5kZXhQb3N0Zml4LCBxLmZ1bmN0aW9uUG9zdGZpeCkubWFueSgpLCAob2JqLCBwb3N0Zml4ZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG9iajtcbiAgICAgICAgZm9yIChsZXQgcG9zdCBvZiBwb3N0Zml4ZXMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocG9zdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRvdFwiOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBGaWVsZHMuaW5kZXgocmVzdWx0LCBGaWVsZHMubGl0ZXJhbChwb3N0LmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpbmRleFwiOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBGaWVsZHMuaW5kZXgocmVzdWx0LCBwb3N0LmZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEZpZWxkcy5mdW5jKHJlc3VsdCwgcG9zdC5maWVsZHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pLFxuICAgIG5lZ2F0ZWRGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIhXCIpLCBxLmluZGV4RmllbGQsIChfLCBmaWVsZCkgPT4gRmllbGRzLm5lZ2F0ZShmaWVsZCkpLmRlc2MoXCJuZWdhdGVkIGZpZWxkXCIpLFxuICAgIHBhcmVuc0ZpZWxkOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIihcIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBxLmZpZWxkLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIilcIiksIChfMSwgXzIsIGZpZWxkLCBfMywgXzQpID0+IGZpZWxkKSxcbiAgICBsYW1iZGFGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHEuaWRlbnRpZmllclxuICAgICAgICAuc2VwQnkocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIixcIikudHJpbShwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSkpXG4gICAgICAgIC53cmFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIoXCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiKVwiKS50cmltKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCI9PlwiKS50cmltKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKSwgcS5maWVsZCwgKGlkZW50LCBfaWdub3JlLCB2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImxhbWJkYVwiLCBhcmd1bWVudHM6IGlkZW50LCB2YWx1ZSB9O1xuICAgIH0pLFxuICAgIGRvdFBvc3RmaXg6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc3RyaW5nKFwiLlwiKSwgcS5pZGVudGlmaWVyLCAoXywgZmllbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkb3RcIiwgZmllbGQ6IGZpZWxkIH07XG4gICAgfSksXG4gICAgaW5kZXhQb3N0Zml4OiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIltcIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBxLmZpZWxkLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIl1cIiksIChfLCBfMiwgZmllbGQsIF8zLCBfNCkgPT4ge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImluZGV4XCIsIGZpZWxkIH07XG4gICAgfSksXG4gICAgZnVuY3Rpb25Qb3N0Zml4OiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN0cmluZyhcIihcIiksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlLCBxLmZpZWxkLnNlcEJ5KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIsXCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UsIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIpXCIpLCAoXywgXzEsIGZpZWxkcywgXzIsIF8zKSA9PiB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwiZnVuY3Rpb25cIiwgZmllbGRzIH07XG4gICAgfSksXG4gICAgLy8gVGhlIHByZWNlZGVuY2UgaGllcmFyY2h5IG9mIG9wZXJhdG9ycyAtIG11bHRpcGx5L2RpdmlkZSwgYWRkL3N1YnRyYWN0LCBjb21wYXJlLCBhbmQgdGhlbiBib29sZWFuIG9wZXJhdGlvbnMuXG4gICAgYmluYXJ5TXVsRGl2RmllbGQ6IHEgPT4gY3JlYXRlQmluYXJ5UGFyc2VyKHEuaW5kZXhGaWVsZCwgcS5iaW5hcnlNdWxEaXYsIEZpZWxkcy5iaW5hcnlPcCksXG4gICAgYmluYXJ5UGx1c01pbnVzRmllbGQ6IHEgPT4gY3JlYXRlQmluYXJ5UGFyc2VyKHEuYmluYXJ5TXVsRGl2RmllbGQsIHEuYmluYXJ5UGx1c01pbnVzLCBGaWVsZHMuYmluYXJ5T3ApLFxuICAgIGJpbmFyeUNvbXBhcmVGaWVsZDogcSA9PiBjcmVhdGVCaW5hcnlQYXJzZXIocS5iaW5hcnlQbHVzTWludXNGaWVsZCwgcS5iaW5hcnlDb21wYXJlT3AsIEZpZWxkcy5iaW5hcnlPcCksXG4gICAgYmluYXJ5Qm9vbGVhbkZpZWxkOiBxID0+IGNyZWF0ZUJpbmFyeVBhcnNlcihxLmJpbmFyeUNvbXBhcmVGaWVsZCwgcS5iaW5hcnlCb29sZWFuT3AsIEZpZWxkcy5iaW5hcnlPcCksXG4gICAgYmluYXJ5T3BGaWVsZDogcSA9PiBxLmJpbmFyeUJvb2xlYW5GaWVsZCxcbiAgICBmaWVsZDogcSA9PiBxLmJpbmFyeU9wRmllbGQsXG59KTtcbi8qKlxuICogQXR0ZW1wdCB0byBwYXJzZSBhIGZpZWxkIGZyb20gdGhlIGdpdmVuIHRleHQsIHJldHVybmluZyBhIHN0cmluZyBlcnJvciBpZiB0aGVcbiAqIHBhcnNlIGZhaWxlZC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VGaWVsZCh0ZXh0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5zdWNjZXNzKEVYUFJFU1NJT04uZmllbGQudHJ5UGFyc2UodGV4dCkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsdXJlKFwiXCIgKyBlcnJvcik7XG4gICAgfVxufVxuXG4vKiogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIHF1aWNrbHkgY3JlYXRpbmcgZmllbGRzLiAqL1xudmFyIFF1ZXJ5RmllbGRzO1xuKGZ1bmN0aW9uIChRdWVyeUZpZWxkcykge1xuICAgIGZ1bmN0aW9uIG5hbWVkKG5hbWUsIGZpZWxkKSB7XG4gICAgICAgIHJldHVybiB7IG5hbWUsIGZpZWxkIH07XG4gICAgfVxuICAgIFF1ZXJ5RmllbGRzLm5hbWVkID0gbmFtZWQ7XG4gICAgZnVuY3Rpb24gc29ydEJ5KGZpZWxkLCBkaXIpIHtcbiAgICAgICAgcmV0dXJuIHsgZmllbGQsIGRpcmVjdGlvbjogZGlyIH07XG4gICAgfVxuICAgIFF1ZXJ5RmllbGRzLnNvcnRCeSA9IHNvcnRCeTtcbn0pKFF1ZXJ5RmllbGRzIHx8IChRdWVyeUZpZWxkcyA9IHt9KSk7XG5cbi8qKiBSZXR1cm4gYSBuZXcgcGFyc2VyIHdoaWNoIGV4ZWN1dGVzIHRoZSB1bmRlcmx5aW5nIHBhcnNlciBhbmQgcmV0dXJucyBpdCdzIHJhdyBzdHJpbmcgcmVwcmVzZW50YXRpb24uICovXG5mdW5jdGlvbiBjYXB0dXJlUmF3KGJhc2UpIHtcbiAgICByZXR1cm4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmN1c3RvbSgoc3VjY2VzcywgZmFpbHVyZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGlucHV0LCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gYmFzZS5fKGlucHV0LCBpKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LnN0YXR1cylcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlc3VsdCwgeyB2YWx1ZTogW3Jlc3VsdC52YWx1ZSwgaW5wdXQuc3Vic3RyaW5nKGksIHJlc3VsdC5pbmRleCldIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyoqIFN0cmlwIG5ld2xpbmVzIGFuZCBleGNlc3Mgd2hpdGVzcGFjZSBvdXQgb2YgdGV4dC4gKi9cbmZ1bmN0aW9uIHN0cmlwTmV3bGluZXModGV4dCkge1xuICAgIHJldHVybiB0ZXh0XG4gICAgICAgIC5zcGxpdCgvW1xcclxcbl0rLylcbiAgICAgICAgLm1hcCh0ID0+IHQudHJpbSgpKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbi8qKiBHaXZlbiBgcGFyc2VyYCwgcmV0dXJuIHRoZSBwYXJzZXIgdGhhdCByZXR1cm5zIGBpZl9lb2YoKWAgaWYgRU9GIGlzIGZvdW5kLFxuICogb3RoZXJ3aXNlIGBwYXJzZXJgIHByZWNlZGVkIGJ5IChub24tb3B0aW9uYWwpIHdoaXRlc3BhY2UgKi9cbmZ1bmN0aW9uIHByZWNlZGVkQnlXaGl0ZXNwYWNlSWZOb3RFb2YoaWZfZW9mLCBwYXJzZXIpIHtcbiAgICByZXR1cm4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmVvZi5tYXAoaWZfZW9mKS5vcihwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMud2hpdGVzcGFjZS50aGVuKHBhcnNlcikpO1xufVxuLyoqIEEgcGFyc2ltbW9uLXBvd2VyZWQgcGFyc2VyLWNvbWJpbmF0b3IgaW1wbGVtZW50YXRpb24gb2YgdGhlIHF1ZXJ5IGxhbmd1YWdlLiAqL1xuY29uc3QgUVVFUllfTEFOR1VBR0UgPSBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuY3JlYXRlTGFuZ3VhZ2Uoe1xuICAgIC8vIFNpbXBsZSBhdG9tIHBhcnNpbmcsIGxpa2Ugd29yZHMsIGlkZW50aWZpZXJzLCBudW1iZXJzLlxuICAgIHF1ZXJ5VHlwZTogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1RBQkxFfExJU1R8VEFTS3xDQUxFTkRBUi9pKSlcbiAgICAgICAgLm1hcChzdHIgPT4gc3RyLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIC5kZXNjKFwicXVlcnkgdHlwZSAoJ1RBQkxFJywgJ0xJU1QnLCAnVEFTSycsIG9yICdDQUxFTkRBUicpXCIpLFxuICAgIGV4cGxpY2l0TmFtZWRGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKEVYUFJFU1NJT04uZmllbGQuc2tpcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMud2hpdGVzcGFjZSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL0FTL2kpLnNraXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLndoaXRlc3BhY2UpLCBFWFBSRVNTSU9OLmlkZW50aWZpZXIub3IoRVhQUkVTU0lPTi5zdHJpbmcpLCAoZmllbGQsIF9hcywgaWRlbnQpID0+IFF1ZXJ5RmllbGRzLm5hbWVkKGlkZW50LCBmaWVsZCkpLFxuICAgIGNvbW1lbnQ6ICgpID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5QYXJzZXIoKGlucHV0LCBpKSA9PiB7XG4gICAgICAgIC8vIFBhcnNlIGEgY29tbWVudCwgd2hpY2ggaXMgYSBsaW5lIHN0YXJ0aW5nIHdpdGggLy8uXG4gICAgICAgIGxldCBsaW5lID0gaW5wdXQuc3Vic3RyaW5nKGkpO1xuICAgICAgICBpZiAoIWxpbmUuc3RhcnRzV2l0aChcIi8vXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5tYWtlRmFpbHVyZShpLCBcIk5vdCBhIGNvbW1lbnRcIik7XG4gICAgICAgIC8vIFRoZSBjb21tZW50IGVuZHMgYXQgdGhlIGVuZCBvZiB0aGUgbGluZS5cbiAgICAgICAgbGluZSA9IGxpbmUuc3BsaXQoXCJcXG5cIilbMF07XG4gICAgICAgIGxldCBjb21tZW50ID0gbGluZS5zdWJzdHJpbmcoMikudHJpbSgpO1xuICAgICAgICByZXR1cm4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm1ha2VTdWNjZXNzKGkgKyBsaW5lLmxlbmd0aCwgY29tbWVudCk7XG4gICAgfSksXG4gICAgbmFtZWRGaWVsZDogcSA9PiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuYWx0KHEuZXhwbGljaXROYW1lZEZpZWxkLCBjYXB0dXJlUmF3KEVYUFJFU1NJT04uZmllbGQpLm1hcCgoW3ZhbHVlLCB0ZXh0XSkgPT4gUXVlcnlGaWVsZHMubmFtZWQoc3RyaXBOZXdsaW5lcyh0ZXh0KSwgdmFsdWUpKSksXG4gICAgc29ydEZpZWxkOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAoRVhQUkVTU0lPTi5maWVsZC5za2lwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5vcHRXaGl0ZXNwYWNlKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvQVNDRU5ESU5HfERFU0NFTkRJTkd8QVNDfERFU0MvaSkuYXRNb3N0KDEpLCAoZmllbGQsIGRpcikgPT4ge1xuICAgICAgICBsZXQgZGlyZWN0aW9uID0gZGlyLmxlbmd0aCA9PSAwID8gXCJhc2NlbmRpbmdcIiA6IGRpclswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09IFwiZGVzY1wiKVxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJkZXNjZW5kaW5nXCI7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gXCJhc2NcIilcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiYXNjZW5kaW5nXCI7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgfTtcbiAgICB9KSxcbiAgICBoZWFkZXJDbGF1c2U6IHEgPT4gcS5xdWVyeVR5cGVcbiAgICAgICAgLmNoYWluKHR5cGUgPT4ge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0YWJsZVwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWNlZGVkQnlXaGl0ZXNwYWNlSWZOb3RFb2YoKCkgPT4gKHsgdHlwZSwgZmllbGRzOiBbXSwgc2hvd0lkOiB0cnVlIH0pLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuc2VxTWFwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5yZWdleHAoL1dJVEhPVVRcXHMrSUQvaSlcbiAgICAgICAgICAgICAgICAgICAgLnNraXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIC5hdE1vc3QoMSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXBCeShxLm5hbWVkRmllbGQsIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIsXCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpKSwgKHdpdGhvdXRJZCwgZmllbGRzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGUsIGZpZWxkcywgc2hvd0lkOiB3aXRob3V0SWQubGVuZ3RoID09IDAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmVjZWRlZEJ5V2hpdGVzcGFjZUlmTm90RW9mKCgpID0+ICh7IHR5cGUsIGZvcm1hdDogdW5kZWZpbmVkLCBzaG93SWQ6IHRydWUgfSksIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvV0lUSE9VVFxccytJRC9pKVxuICAgICAgICAgICAgICAgICAgICAuc2tpcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMub3B0V2hpdGVzcGFjZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0TW9zdCgxKSwgRVhQUkVTU0lPTi5maWVsZC5hdE1vc3QoMSksICh3aXRob3V0SWQsIGZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0Lmxlbmd0aCA9PSAxID8gZm9ybWF0WzBdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0lkOiB3aXRob3V0SWQubGVuZ3RoID09IDAsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY2FzZSBcInRhc2tcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnN1Y2NlZWQoeyB0eXBlIH0pO1xuICAgICAgICAgICAgY2FzZSBcImNhbGVuZGFyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy53aGl0ZXNwYWNlLnRoZW4ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChxLm5hbWVkRmllbGQsIGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93SWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMuZmFpbChgVW5yZWNvZ25pemVkIHF1ZXJ5IHR5cGUgJyR7dHlwZX0nYCk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuZGVzYyhcIlRBQkxFIG9yIExJU1Qgb3IgVEFTSyBvciBDQUxFTkRBUlwiKSxcbiAgICBmcm9tQ2xhdXNlOiBxID0+IHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zZXFNYXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnJlZ2V4cCgvRlJPTS9pKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLndoaXRlc3BhY2UsIEVYUFJFU1NJT04uc291cmNlLCAoXzEsIF8yLCBzb3VyY2UpID0+IHNvdXJjZSksXG4gICAgd2hlcmVDbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9XSEVSRS9pKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLndoaXRlc3BhY2UsIEVYUFJFU1NJT04uZmllbGQsICh3aGVyZSwgXywgZmllbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJ3aGVyZVwiLCBjbGF1c2U6IGZpZWxkIH07XG4gICAgfSkuZGVzYyhcIldIRVJFIDxleHByZXNzaW9uPlwiKSxcbiAgICBzb3J0QnlDbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9TT1JUL2kpLCBwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMud2hpdGVzcGFjZSwgcS5zb3J0RmllbGQuc2VwQnkxKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy5zdHJpbmcoXCIsXCIpLnRyaW0ocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLm9wdFdoaXRlc3BhY2UpKSwgKHNvcnQsIF8xLCBmaWVsZHMpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJzb3J0XCIsIGZpZWxkcyB9O1xuICAgIH0pLmRlc2MoXCJTT1JUIGZpZWxkIFtBU0MvREVTQ11cIiksXG4gICAgbGltaXRDbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9MSU1JVC9pKSwgcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLndoaXRlc3BhY2UsIEVYUFJFU1NJT04uZmllbGQsIChsaW1pdCwgXzEsIGZpZWxkKSA9PiB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwibGltaXRcIiwgYW1vdW50OiBmaWVsZCB9O1xuICAgIH0pLmRlc2MoXCJMSU1JVCA8dmFsdWU+XCIpLFxuICAgIGZsYXR0ZW5DbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9GTEFUVEVOL2kpLnNraXAocGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLndoaXRlc3BhY2UpLCBxLm5hbWVkRmllbGQsIChfLCBmaWVsZCkgPT4ge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImZsYXR0ZW5cIiwgZmllbGQgfTtcbiAgICB9KS5kZXNjKFwiRkxBVFRFTiA8dmFsdWU+IFtBUyA8bmFtZT5dXCIpLFxuICAgIGdyb3VwQnlDbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMucmVnZXhwKC9HUk9VUCBCWS9pKS5za2lwKHBhcnNpbW1vbl91bWRfbWluRXhwb3J0cy53aGl0ZXNwYWNlKSwgcS5uYW1lZEZpZWxkLCAoXywgZmllbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJncm91cFwiLCBmaWVsZCB9O1xuICAgIH0pLmRlc2MoXCJHUk9VUCBCWSA8dmFsdWU+IFtBUyA8bmFtZT5dXCIpLFxuICAgIC8vIEZ1bGwgcXVlcnkgcGFyc2luZy5cbiAgICBjbGF1c2U6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFsdChxLmZyb21DbGF1c2UsIHEud2hlcmVDbGF1c2UsIHEuc29ydEJ5Q2xhdXNlLCBxLmxpbWl0Q2xhdXNlLCBxLmdyb3VwQnlDbGF1c2UsIHEuZmxhdHRlbkNsYXVzZSksXG4gICAgcXVlcnk6IHEgPT4gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLnNlcU1hcChxLmhlYWRlckNsYXVzZS50cmltKG9wdGlvbmFsV2hpdGVzcGFjZU9yQ29tbWVudCksIHEuZnJvbUNsYXVzZS50cmltKG9wdGlvbmFsV2hpdGVzcGFjZU9yQ29tbWVudCkuYXRNb3N0KDEpLCBxLmNsYXVzZS50cmltKG9wdGlvbmFsV2hpdGVzcGFjZU9yQ29tbWVudCkubWFueSgpLCAoaGVhZGVyLCBmcm9tLCBjbGF1c2VzKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkZXIsXG4gICAgICAgICAgICBzb3VyY2U6IGZyb20ubGVuZ3RoID09IDAgPyBTb3VyY2VzLmZvbGRlcihcIlwiKSA6IGZyb21bMF0sXG4gICAgICAgICAgICBvcGVyYXRpb25zOiBjbGF1c2VzLFxuICAgICAgICAgICAgc2V0dGluZ3M6IERFRkFVTFRfUVVFUllfU0VUVElOR1MsXG4gICAgICAgIH07XG4gICAgfSksXG59KTtcbi8qKlxuICogQSBwYXJzZXIgZm9yIG9wdGlvbmFsIHdoaXRlc3BhY2Ugb3IgY29tbWVudHMuIFRoaXMgaXMgdXNlZCB0byBleGNsdWRlIHdoaXRlc3BhY2UgYW5kIGNvbW1lbnRzIGZyb20gb3RoZXIgcGFyc2Vycy5cbiAqL1xuY29uc3Qgb3B0aW9uYWxXaGl0ZXNwYWNlT3JDb21tZW50ID0gcGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzLmFsdChwYXJzaW1tb25fdW1kX21pbkV4cG9ydHMud2hpdGVzcGFjZSwgUVVFUllfTEFOR1VBR0UuY29tbWVudClcbiAgICAubWFueSgpIC8vIFVzZSBtYW55KCkgc2luY2UgdGhlcmUgbWF5IGJlIHplcm8gd2hpdGVzcGFjZXMgb3IgY29tbWVudHMuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBtYW55IHRvIGEgc2luZ2xlIHJlc3VsdC5cbiAgICAubWFwKGFyciA9PiBhcnIuam9pbihcIlwiKSk7XG5cbi8vIFVzZWZ1bCB1dGlsaXRpZXMgZm9yIGRpcmVjdGx5IHVzaW5nIGRhdGF2aWV3IHBhcnNlcnMuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucy5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IERhdGF2aWV3IEFQSSBmcm9tIHRoZSBhcHAgaWYgcHJvdmlkZWQ7IGlmIG5vdCwgaXQgaXMgaW5mZXJyZWQgZnJvbSB0aGUgZ2xvYmFsIEFQSSBvYmplY3QgaW5zdGFsbGVkXG4gKiBvbiB0aGUgd2luZG93LlxuICovXG5jb25zdCBnZXRBUEkgPSAoYXBwKSA9PiB7XG4gICAgaWYgKGFwcClcbiAgICAgICAgcmV0dXJuIGFwcC5wbHVnaW5zLnBsdWdpbnMuZGF0YXZpZXc/LmFwaTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiB3aW5kb3cuRGF0YXZpZXdBUEk7XG59O1xuLyoqIERldGVybWluZSBpZiBEYXRhdmlldyBpcyBlbmFibGVkIGluIHRoZSBnaXZlbiBhcHBsaWNhdGlvbi4gKi9cbmNvbnN0IGlzUGx1Z2luRW5hYmxlZCA9IChhcHApID0+IGFwcC5wbHVnaW5zLmVuYWJsZWRQbHVnaW5zLmhhcyhcImRhdGF2aWV3XCIpO1xuXG5leHBvcnRzLkRBVEVfU0hPUlRIQU5EUyA9IERBVEVfU0hPUlRIQU5EUztcbmV4cG9ydHMuRFVSQVRJT05fVFlQRVMgPSBEVVJBVElPTl9UWVBFUztcbmV4cG9ydHMuRVhQUkVTU0lPTiA9IEVYUFJFU1NJT047XG5leHBvcnRzLktFWVdPUkRTID0gS0VZV09SRFM7XG5leHBvcnRzLlFVRVJZX0xBTkdVQUdFID0gUVVFUllfTEFOR1VBR0U7XG5leHBvcnRzLmdldEFQSSA9IGdldEFQSTtcbmV4cG9ydHMuaXNQbHVnaW5FbmFibGVkID0gaXNQbHVnaW5FbmFibGVkO1xuZXhwb3J0cy5wYXJzZUZpZWxkID0gcGFyc2VGaWVsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB0eXBlIHsgQ29kZWJsb2NrUGFyc2VyLCBDb2RlYmxvY2tTeW50YXggfSBmcm9tICcuL0Jhc2VQYXJzZXInXG5pbXBvcnQgeyBnZXRBUEksIGlzUGx1Z2luRW5hYmxlZCB9IGZyb20gJ29ic2lkaWFuLWRhdGF2aWV3J1xuXG5leHBvcnQgY2xhc3MgRGF0YXZpZXdQYXJzZXIgaW1wbGVtZW50cyBDb2RlYmxvY2tQYXJzZXIge1xuICAgIGlkOiBDb2RlYmxvY2tTeW50YXggPSAnZGF0YXZpZXcnXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge31cblxuICAgIHRlc3Qoc291cmNlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIC9eKFRBQkxFfExJU1R8VEFTS3xDQUxFTkRBUikvLnRlc3Qoc291cmNlKVxuICAgIH1cblxuICAgIGFzeW5jIHBhcnNlKHNvdXJjZTogc3RyaW5nLCBub3RlcGF0aDogc3RyaW5nKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JsYWNrc21pdGhndS9vYnNpZGlhbi1kYXRhdmlldy9ibG9iLzZkOTAzMGVmMWRmOWMzZjMxMGY0MmUzNTAyMTQ5ZGM3MTc5MmRjNGQvc3JjL2FwaS9wbHVnaW4tYXBpLnRzI0wyNjVcbiAgICAgICAgaWYgKGlzUGx1Z2luRW5hYmxlZCh0aGlzLnBsdWdpbi5hcHApKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICByZXR1cm4gYXdhaXQgZ2V0QVBJKHRoaXMucGx1Z2luLmFwcCkucXVlcnkoc291cmNlLCBub3RlcGF0aClcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgdHlwZSB7IENvZGVibG9ja0NvbnRlbnQsIENvZGVibG9ja1BhcnNlciB9IGZyb20gJy4vQmFzZVBhcnNlcidcbmltcG9ydCB7IFlhbWxQYXJzZXIgfSBmcm9tICcuL1lhbWxQYXJzZXInXG5pbXBvcnQgeyBKc29uUGFyc2VyIH0gZnJvbSAnLi9Kc29uUGFyc2VyJ1xuaW1wb3J0IHsgRGF0YXZpZXdQYXJzZXIgfSBmcm9tICcuL0RhdGF2aWV3UGFyc2VyJ1xuXG5leHBvcnQgdHlwZSB7IENvZGVibG9ja0NvbnRlbnQsIENvZGVibG9ja1N5bnRheCB9IGZyb20gJy4vQmFzZVBhcnNlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyc2VyTWFuYWdlciB7XG4gICAgI3BhcnNlcnM6IENvZGVibG9ja1BhcnNlcltdXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge1xuICAgICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgcGFyc2luZyBkYXRhIHdpdGggRGF0YXZpZXdcbiAgICAgICAgdGhpcy4jcGFyc2VycyA9IFtcbiAgICAgICAgICAgIG5ldyBEYXRhdmlld1BhcnNlcihwbHVnaW4pLFxuICAgICAgICAgICAgbmV3IEpzb25QYXJzZXIoKSxcbiAgICAgICAgICAgIG5ldyBZYW1sUGFyc2VyKCksXG4gICAgICAgIF1cbiAgICB9XG5cbiAgICAjc2VwYXJhdG9yKCk6IFJlZ0V4cCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlX3NlcGFyYXRvcnMpIHJldHVyblxuXG4gICAgICAgIC8vIHNlcGFyYXRvciBjb3VsZCBjaGFuZ2Ugb24gcnVudGltZVxuICAgICAgICAvLyBlc2NhcGUgcmVnZXggc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAgIGNvbnN0IGVzY2FwZWQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2FnZV9zZXBhcmF0b3IgLy9cbiAgICAgICAgICAgIC5yZXBsYWNlKC9bLisqP14ke30oKXxbXFxdXFxcXF0vZ2ksICdcXFxcJCYnKVxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChlc2NhcGVkLCAnZ2knKVxuICAgIH1cblxuICAgIHBhcnNlKHNvdXJjZTogc3RyaW5nLCBub3RlcGF0aDogc3RyaW5nLCBsb2c6IExvZ2dlcik6IENvZGVibG9ja0NvbnRlbnQge1xuICAgICAgICBsb2cudHJhY2UoYFBhcnNpbmcgZnJvbSAnJHtub3RlcGF0aH0nIDwke3NvdXJjZX0+YClcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gdGhpcy4jc2VwYXJhdG9yKClcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNlcGFyYXRvcj8udGVzdChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJzZXIgb2YgdGhpcy4jcGFyc2Vycykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VyLnRlc3Qoc291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBQYXJzaW5nIGFzICR7cGFyc2VyLmlkfWApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bnRheDogcGFyc2VyLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VwYXJhdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChpKSA9PiBwYXJzZXIucGFyc2UoaSwgbm90ZXBhdGgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBwYXJzZXIgb2YgdGhpcy4jcGFyc2Vycykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZXIudGVzdChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyhgUGFyc2luZyBhcyAke3BhcnNlci5pZH1gKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ludGF4OiBwYXJzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJzZXIucGFyc2Uoc291cmNlLCBub3RlcGF0aCksXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGVycilcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5kZWJ1ZyhgRmFpbGVkIHBhcnNpbmdgLCBzb3VyY2UpXG4gICAgICAgIHJldHVybiB7IHN5bnRheDogJ3Vua25vd24nLCBkYXRhOiBzb3VyY2UgfVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB7IE1hcmtkb3duUmVuZGVyZXIsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29kZWJsb2NrQ29udGV4dCB7XG4gICAgLyoqIFZhdWx0LXBhdGggb2YgdGhlIG5vdGUgY29udGFpbmluZyB0aGUgKipDb2RlYmxvY2sqKi4gKi9cbiAgICBub3RlcGF0aDogc3RyaW5nXG4gICAgLyoqIENvbXBvbmVudCBuYW1lIHVzZWQgb24gdGhlICoqQ29kZWJsb2NrKiouICovXG4gICAgdXNlZF9uYW1lOiBzdHJpbmdcbiAgICAvKiogU3ludGF4IG9mIHRoZSAqKkNvZGVibG9jayoqLiAqL1xuICAgIHN5bnRheDogc3RyaW5nXG4gICAgLyoqIEhhc2ggcmVzdWx0IG9mIHRoZSAqKkNvZGVibG9jayoqIGNvbnRlbnQuICovXG4gICAgaGFzaDogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge31cblxuICAgIC8qKiBUZXN0IGlmIHRoZSAqKlJlbmRlcmVyKiogc3VwcG9ydHMgdGhlICoqQ29tcG9uZW50KiouICovXG4gICAgcHVibGljIGFic3RyYWN0IHRlc3QoY29tcG9uZW50OiBURmlsZSk6IGJvb2xlYW5cblxuICAgIC8qKiBSZW5kZXJzIHRoZSBfZGF0YV8gaW50byB0aGUgX2VsZW1lbnRfIHVzaW5nIHRoZSAqKkNvbXBvbmVudCoqLiAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZW5kZXIoXG4gICAgICAgIGNvbXBvbmVudDogVEZpbGUsXG4gICAgICAgIGNvbnRleHQ6IENvZGVibG9ja0NvbnRleHQsXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBkYXRhOiB1bmtub3duLFxuICAgICAgICBsb2c6IExvZ2dlcixcbiAgICApOiBQcm9taXNlPHZvaWQ+XG5cbiAgICAvKiogUmVuZGVyIHRoZSAqKkhUTUwgX2NvbnRlbnRfKiogaW5zaWRlIHRoZSBfZWxlbWVudF8uICovXG4gICAgcHJvdGVjdGVkIHJlbmRlckhUTUwoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBjb250ZW50OiBzdHJpbmcsXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IHZvaWQge1xuICAgICAgICBsb2cuZGVidWcoJ1JlbmRlcmluZyBhcyBIVE1MJylcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSAqKk1hcmtkb3duIF9jb250ZW50XyoqIGluc2lkZSB0aGUgX2VsZW1lbnRfLlxuICAgICAqXG4gICAgICogQW55IGxpbmsgcHJlc2VudCB3aWxsIGJlIHJlc29sdmVkIGZyb20gdGhlIF9ub3RlcGF0aF8uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlbmRlck1hcmtkb3duKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgY29udGVudDogc3RyaW5nLFxuICAgICAgICBub3RlcGF0aDogc3RyaW5nLFxuICAgICAgICBsb2c6IExvZ2dlcixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgbG9nLmRlYnVnKCdSZW5kZXJpbmcgYXMgTWFya2Rvd24nKVxuICAgICAgICB2b2lkIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBub3RlcGF0aCxcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgdHlwZSB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBpc1JlY29yZCB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCBCYXNlUmVuZGVyZXIsIHsgQ29kZWJsb2NrQ29udGV4dCB9IGZyb20gJy4vQmFzZVJlbmRlcmVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wbGF0ZVJlbmRlcmVyIGV4dGVuZHMgQmFzZVJlbmRlcmVyIHtcbiAgICBwdWJsaWMgdGVzdChjb21wb25lbnQ6IFRGaWxlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvXFwuKG1kfGh0bWwpJC9pLnRlc3QoY29tcG9uZW50Lm5hbWUpXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlbmRlcihcbiAgICAgICAgY29tcG9uZW50OiBURmlsZSxcbiAgICAgICAgY29udGV4dDogQ29kZWJsb2NrQ29udGV4dCxcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGRhdGE6IHVua25vd24sXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsb2cuZGVidWcoJ1JlbmRlcmluZyBmcm9tIFRlbXBsYXRlJylcbiAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50IGNhY2hpbmdcblxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHRoaXMuI2dldFRlbXBsYXRlKGNvbXBvbmVudCwgbG9nKVxuICAgICAgICBjb25zdCByZXBsYWNlZCA9IHRoaXMuI3JlcGxhY2VQbGFjZWhvbGRlcnModGVtcGxhdGUsIGRhdGEsIGxvZylcblxuICAgICAgICBpZiAoY29tcG9uZW50Lm5hbWUuZW5kc1dpdGgoJ21kJykpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWFya2Rvd24oZWxlbWVudCwgcmVwbGFjZWQsIGNvbnRleHQubm90ZXBhdGgsIGxvZylcbiAgICAgICAgfSBlbHNlIHRoaXMucmVuZGVySFRNTChlbGVtZW50LCByZXBsYWNlZCwgbG9nKVxuICAgIH1cblxuICAgICNnZXRUZW1wbGF0ZShjb21wb25lbnQ6IFRGaWxlLCBsb2c6IExvZ2dlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmV0cmlldmluZyBUZW1wbGF0ZScpXG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZChjb21wb25lbnQpXG4gICAgfVxuXG4gICAgI3JlcGxhY2VQbGFjZWhvbGRlcnMoc291cmNlOiBzdHJpbmcsIGRhdGE6IHVua25vd24sIGxvZzogTG9nZ2VyKTogc3RyaW5nIHtcbiAgICAgICAgbG9nLmRlYnVnKCdSZXBsYWNpbmcgUGxhY2Vob2xkZXJzJylcbiAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gc291cmNlXG5cbiAgICAgICAgaWYgKCFpc1JlY29yZChkYXRhKSAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1iYXNlLXRvLXN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKC9cXHtcXHsgKihcXHcrKSAqXFx9XFx9L2dpLCBTdHJpbmcoZGF0YSkpXG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNlIG9ubHkgdHJ1ZXRoeSB2YWx1ZXNcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKC9cXHtcXHsgKihcXHcrKSAqXFx9XFx9L2dpLCAoXywga2V5KSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHJ1bnRpbWUgZHluYW1pYyByZXBsYWNlbWVudFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XSA/IFN0cmluZyhkYXRhW2tleV0pIDogYHt7ICR7a2V5fSB9fWBcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB0eXBlIHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBGaWxlc3lzdGVtQWRhcHRlciwgaXNSZWNvcmQgfSBmcm9tICdAL3V0aWxpdHknXG5pbXBvcnQgeyBDb21wb25lbnRFcnJvciB9IGZyb20gJy4uL0NvbXBvbmVudEVycm9yJ1xuaW1wb3J0IEJhc2VSZW5kZXJlciwgeyBDb2RlYmxvY2tDb250ZXh0IH0gZnJvbSAnLi9CYXNlUmVuZGVyZXInXG5cbnR5cGUgVGVtcGxhdGVSZW5kZXJlciA9IChcbiAgICBkYXRhOiB1bmtub3duLFxuICAgIGNvbnRleHQ6IENvZGVibG9ja0NvbnRleHQsXG4pID0+IFByb21pc2U8c3RyaW5nPlxudHlwZSBDb2RlUmVuZGVyZXIgPSAoXG4gICAgcm9vdDogSFRNTEVsZW1lbnQsXG4gICAgZGF0YTogdW5rbm93bixcbiAgICBjb250ZXh0OiBDb2RlYmxvY2tDb250ZXh0LFxuKSA9PiBQcm9taXNlPHZvaWQ+XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEphdmFzY3JpcHRSZW5kZXJlciBleHRlbmRzIEJhc2VSZW5kZXJlciB7XG4gICAgI2ZzOiBGaWxlc3lzdGVtQWRhcHRlclxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBDb21wb25lbnRzUGx1Z2luLCBmczogRmlsZXN5c3RlbUFkYXB0ZXIpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luKVxuICAgICAgICB0aGlzLiNmcyA9IGZzXG4gICAgfVxuXG4gICAgcHVibGljIHRlc3QoY29tcG9uZW50OiBURmlsZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL1xcLltjbV1qcyQvLnRlc3QoY29tcG9uZW50Lm5hbWUpXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlbmRlcihcbiAgICAgICAgY29tcG9uZW50OiBURmlsZSxcbiAgICAgICAgY29udGV4dDogQ29kZWJsb2NrQ29udGV4dCxcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGRhdGE6IHVua25vd24sXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsb2cuZGVidWcoJ1JlbmRlcmluZyBmcm9tIEphdmFzY3JpcHQnKVxuICAgICAgICAvLyBUT0RPOiBpbXBsZW1lbnQgY2FjaGluZ1xuXG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gYXdhaXQgdGhpcy4jZ2V0UmVuZGVyZXIoY29tcG9uZW50LCBsb2cpXG4gICAgICAgIGlmICgvXFwubWRcXC5bY21danMkL2kudGVzdChjb21wb25lbnQubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgKHJlbmRlcmVyIGFzIFRlbXBsYXRlUmVuZGVyZXIpKGRhdGEsIGNvbnRleHQpXG4gICAgICAgICAgICB0aGlzLnJlbmRlck1hcmtkb3duKGVsZW1lbnQsIHRlbXBsYXRlLCBjb250ZXh0Lm5vdGVwYXRoLCBsb2cpXG4gICAgICAgIH0gLy9cbiAgICAgICAgZWxzZSBpZiAoL1xcLmh0bWxcXC5bY21danMkL2kudGVzdChjb21wb25lbnQubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgKHJlbmRlcmVyIGFzIFRlbXBsYXRlUmVuZGVyZXIpKGRhdGEsIGNvbnRleHQpXG4gICAgICAgICAgICB0aGlzLnJlbmRlckhUTUwoZWxlbWVudCwgdGVtcGxhdGUsIGxvZylcbiAgICAgICAgfSAvL1xuICAgICAgICBlbHNlIGF3YWl0IChyZW5kZXJlciBhcyBDb2RlUmVuZGVyZXIpKGVsZW1lbnQsIGRhdGEsIGNvbnRleHQpXG4gICAgfVxuXG4gICAgYXN5bmMgI2dldFJlbmRlcmVyPFQgZXh0ZW5kcyBUZW1wbGF0ZVJlbmRlcmVyIHwgQ29kZVJlbmRlcmVyPihcbiAgICAgICAgY29tcG9uZW50OiBURmlsZSxcbiAgICAgICAgbG9nOiBMb2dnZXIsXG4gICAgKTogUHJvbWlzZTxUPiB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmV0cmlldmluZyBKYXZhc2NyaXB0IFJlbmRlcmVyJylcbiAgICAgICAgY29uc3QgbW9kdWxlID0gYXdhaXQgdGhpcy4jc291cmNlKGNvbXBvbmVudCwgbG9nKVxuXG4gICAgICAgIC8vIGRlZmF1bHQgZXhwb3J0IG9uIGNqc1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG1vZHVsZSBhcyBUXG4gICAgICAgIGlmICghaXNSZWNvcmQobW9kdWxlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbXBvbmVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBjb21wb25lbnQoJHtjb21wb25lbnQubmFtZX0pIHNob3VsZCBleHBvcnQgYSBmdW5jdGlvbiBvciBhICdyZW5kZXInIG1ldGhvZGAsXG4gICAgICAgICAgICAgICAgeyBjb2RlOiAnbWlzc2luZy1jb21wb25lbnQtcmVuZGVyZXInIH0sXG4gICAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWZhdWx0IGV4cG9ydCBvbiBlc21cbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG1vZHVsZS5kZWZhdWx0IGFzIFRcbiAgICAgICAgLy8gbmFtZWQgZXhwb3J0IG9uIGNqcyAmIGVzbVxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBtb2R1bGUucmVuZGVyIGFzIFRcblxuICAgICAgICB0aHJvdyBuZXcgQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICAgICBgY29tcG9uZW50KCR7Y29tcG9uZW50Lm5hbWV9KSBzaG91bGQgZXhwb3J0IGEgZnVuY3Rpb24gb3IgYSAncmVuZGVyJyBtZXRob2RgLFxuICAgICAgICAgICAgeyBjb2RlOiAnbWlzc2luZy1jb21wb25lbnQtcmVuZGVyZXInIH0sXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBhc3luYyAjc291cmNlKGZpbGU6IFRGaWxlLCBsb2c6IExvZ2dlcik6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICBsb2cuZGVidWcoJ1NvdXJjaW5nIFJlbmRlcmVyJylcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRVNNb2R1bGVzXG4gICAgICAgICAgICBpZiAoZmlsZS5leHRlbnNpb24gPT09ICdtanMnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLiNmcy5nZXRSZXNvdXJjZVBhdGgoZmlsZSlcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoYGltcG9ydCgnJHtyZXNvdXJjZX0nKWApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGltcG9ydChyZXNvdXJjZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29tbW9uSlNcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0gdGhpcy4jZnMuZ2V0QWJzb2x1dGVQYXRoKGZpbGUucGF0aClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgcmVxdWlyZSgnJHtyZXNvbHZlZH0nKWApXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUocmVzb2x2ZWQpXG4gICAgICAgIH0gY2F0Y2ggKGNhdXNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYGNvbXBvbmVudCgke2ZpbGUubmFtZX0pIGNvdWxkIG5vdCBiZSBpbXBvcnRlZC9yZXF1aXJlZGAsXG4gICAgICAgICAgICAgICAgeyBjYXVzZSwgY29kZTogJ2ludmFsaWQtY29tcG9uZW50LXN5bnRheCcgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IExvZ2dlciB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB0eXBlIHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IENvbXBvbmVudEVycm9yIH0gZnJvbSAnLi4vQ29tcG9uZW50RXJyb3InXG5pbXBvcnQgQmFzZVJlbmRlcmVyLCB7IENvZGVibG9ja0NvbnRleHQgfSBmcm9tICcuL0Jhc2VSZW5kZXJlcidcbmltcG9ydCBUZW1wbGF0ZVJlbmRlcmVyIGZyb20gJy4vVGVtcGxhdGVSZW5kZXJlcidcbmltcG9ydCBKYXZhc2NyaXB0UmVuZGVyZXIgZnJvbSAnLi9KYXZhc2NyaXB0UmVuZGVyJ1xuaW1wb3J0IHsgRmlsZXN5c3RlbUFkYXB0ZXIgfSBmcm9tICdAL3V0aWxpdHknXG5cbmV4cG9ydCB0eXBlIHsgQ29kZWJsb2NrQ29udGV4dCB9XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlck1hbmFnZXIge1xuICAgICNyZW5kZXJlcnM6IEJhc2VSZW5kZXJlcltdXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4pIHtcbiAgICAgICAgY29uc3QgZnMgPSBuZXcgRmlsZXN5c3RlbUFkYXB0ZXIocGx1Z2luKVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciByZW5kZXJlcnMgd2l0aG91dCB2aXJ0dWFsIERPTVxuICAgICAgICAvLyA/IC0gW1ZhcG9yXShodHRwczovL2dpdGh1Yi5jb20vdnVlanMvY29yZS90cmVlL3ZhcG9yKVxuICAgICAgICAvLyA/IC0gW1NvbGlkXShodHRwczovL2dpdGh1Yi5jb20vc29saWRqcy9zb2xpZClcbiAgICAgICAgLy8gPyAtIFtTdmVsdGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUpXG4gICAgICAgIHRoaXMuI3JlbmRlcmVycyA9IFtcbiAgICAgICAgICAgIG5ldyBUZW1wbGF0ZVJlbmRlcmVyKHBsdWdpbiksXG4gICAgICAgICAgICBuZXcgSmF2YXNjcmlwdFJlbmRlcmVyKHBsdWdpbiwgZnMpLFxuICAgICAgICBdXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlbmRlcihcbiAgICAgICAgY29tcG9uZW50OiBURmlsZSxcbiAgICAgICAgY29udGV4dDogQ29kZWJsb2NrQ29udGV4dCxcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGRhdGE6IHVua25vd24sXG4gICAgICAgIGxvZzogTG9nZ2VyLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBmb3IgKGNvbnN0IHJlbmRlcmVyIG9mIHRoaXMuI3JlbmRlcmVycykge1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVyLnRlc3QoY29tcG9uZW50KSkge1xuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgZWxlbWVudC5lbXB0eSgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVyLnJlbmRlcihjb21wb25lbnQsIGNvbnRleHQsIGVsZW1lbnQsIGRhdGEsIGxvZylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBDb21wb25lbnRFcnJvcihcbiAgICAgICAgICAgIGBjb21wb25lbnQoJHtjb21wb25lbnQubmFtZX0pIGlzIG5vdCBzdXBwb3J0ZWRgLFxuICAgICAgICAgICAgeyBjb2RlOiAndW5zdXBwb3J0ZWQtY29tcG9uZW50JyB9LFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDb21wb25lbnRzUGx1Z2luIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB0eXBlIHsgTG9nZ2VyIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHsgRXZlbnRSZWYsIFRBYnN0cmFjdEZpbGUsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBGaWxlc3lzdGVtQWRhcHRlciwgTWFwU3RvcmUgfSBmcm9tICdAL3V0aWxpdHknXG5cbnR5cGUgUmVmcmVzaGVyID0gKGNvbXBvbmVudFBhdGg6IHN0cmluZ1tdLCBsb2c6IExvZ2dlcikgPT4gUHJvbWlzZTx2b2lkPlxuXG4vKiogUmVnZXggdXNlZCB0byBtYXRjaCBpbXBvcnRlZC1maWxlcyBQYXRoICovXG5jb25zdCBpbXBvcnRzUmVnZXggPSAoKSA9PiAvKD88PWZyb20gKlsnXCJgXXxyZXF1aXJlICpcXCggKlsnXCJgXSkoLispKD89WydcImBdKS9naVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJzaW9uc01hbmFnZXIge1xuICAgICNsb2c6IExvZ2dlclxuICAgICNmczogRmlsZXN5c3RlbUFkYXB0ZXJcbiAgICAjcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luXG4gICAgI3JlZnJlc2hlcjogUmVmcmVzaGVyXG4gICAgI2hhbmRsZXI6IEV2ZW50UmVmXG5cbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSBtYXAgaW4gdGhlIGZvcm0gYFtzb3VyY2UtZmlsZSwgW2ZpbGVzLXdlcmUtaXMtaW1wb3J0ZWRdXWBcbiAgICAgKiBAZXhhbXBsZSB7ICdIdG1sUmVuZGVyZXIuY2pzJzogWydtdXNpYy5odG1sLmNqcycsICdjb250ZW50Lmh0bWwuY2pzJ10gfVxuICAgICAqL1xuICAgICN0cmFja2VkID0gbmV3IE1hcFN0b3JlPHN0cmluZz4oKVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIG1hcCBpbiB0aGUgZm9ybSBgW3NvdXJjZS1maWxlLCBbY2FjaGVkLXZlcnNpb25zXV1gXG4gICAgICogQGV4YW1wbGUgeyAnbXVzaWMuaHRtbC5janMnOiBbJ211c2ljLmh0bWwuMjNmMjlhLmNqcyddIH1cbiAgICAgKi9cbiAgICAjdmVyc2lvbnMgPSBuZXcgTWFwU3RvcmU8c3RyaW5nPigpXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4sIHJlZnJlc2hlcjogUmVmcmVzaGVyKSB7XG4gICAgICAgIHRoaXMuI2xvZyA9IHBsdWdpbi5sb2cubWFrZShWZXJzaW9uc01hbmFnZXIubmFtZSlcbiAgICAgICAgdGhpcy4jZnMgPSBuZXcgRmlsZXN5c3RlbUFkYXB0ZXIocGx1Z2luKVxuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgdGhpcy4jcmVmcmVzaGVyID0gcmVmcmVzaGVyXG4gICAgICAgIHRoaXMuI2hhbmRsZXIgPSB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0Lm9uKFxuICAgICAgICAgICAgJ21vZGlmeScsXG4gICAgICAgICAgICB0aGlzLiNoYW5kbGVGaWxlTW9kaWZpY2F0aW9uLmJpbmQodGhpcyksXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbm90ZSBSdW4gb25seSB3aGVuIHBsdWdpbiBpcyB1bmxvYWRlZFxuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jcGx1Z2luLmFwcC52YXVsdC5vZmZyZWYodGhpcy4jaGFuZGxlcilcbiAgICAgICAgdGhpcy4jdHJhY2tlZC5jbGVhcigpXG4gICAgICAgIHRoaXMuI3ZlcnNpb25zLmNsZWFyKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB2ZXJzaW9ucyBjYWNoZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVzZXRDYWNoZShsb2c6IExvZ2dlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBwcmV2ZW50IGNsZWFuaW5nIG9uIG5vbiBkZXNpZ25Nb2RlIHN0YXRlXG4gICAgICAgIGlmICghdGhpcy4jcGx1Z2luLmlzRGVzaWduTW9kZUVuYWJsZWQpIHJldHVyblxuICAgICAgICBhd2FpdCB0aGlzLiNmcy5yZW5ld0ZvbGRlcih0aGlzLiNmcy5nZXRDYWNoZVBhdGgoKSlcbiAgICAgICAgbG9nLmluZm8oJ0NsZWFyZWQgVmVyc2lvbnMgQ2FjaGUnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIGEgZmlsZXBhdGggaW50byBpdHMgbGF0ZXN0IGNhY2hlZCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXNvbHZlTGF0ZXN0KGZpbGVwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuI3BsdWdpbi5pc0Rlc2lnbk1vZGVFbmFibGVkKSByZXR1cm4gZmlsZXBhdGhcbiAgICAgICAgcmV0dXJuIHRoaXMuI3ZlcnNpb25zLmdldEZpcnN0KGZpbGVwYXRoKSA/PyBmaWxlcGF0aFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjYWNoZSByZWdpc3RyeSB3aGVuIGEgZmlsZSBpcyBtb2RpZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyAjaGFuZGxlRmlsZU1vZGlmaWNhdGlvbihmaWxlOiBUQWJzdHJhY3RGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy4jbG9nLmdyb3VwKClcbiAgICAgICAgZ3JvdXAuZGVidWcoYExpc3RlbmluZyBjaGFuZ2VzIG9uIDwke2ZpbGUubmFtZX0+YClcblxuICAgICAgICBncm91cC5kZWJ1ZygnTGlzdGluZyBhZmZlY3RlZCBmaWxlcycpXG4gICAgICAgIGNvbnN0IGFmZmVjdGVkID0gYXdhaXQgdGhpcy4jYWZmZWN0ZWRGaWxlcyhmaWxlLCBncm91cClcblxuICAgICAgICBncm91cC5kZWJ1ZygnUHJlcGFyZWQgYWZmZWN0ZWQgZmlsZXMnKVxuICAgICAgICBhd2FpdCB0aGlzLiNyZWZyZXNoZXIoYWZmZWN0ZWQsIGdyb3VwKVxuXG4gICAgICAgIGdyb3VwLmZsdXNoKGBMaXN0ZW5lZCBjaGFuZ2VzIG9uIDwke2ZpbGUubmFtZX0+YClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgYWxsIHRoZSBmaWxlcyBhZmZlY3RlZCB3aGVuIGEgZmlsZSBjaGFuZ2VkXG4gICAgICovXG4gICAgYXN5bmMgI2FmZmVjdGVkRmlsZXMoY2hhbmdlZEZpbGU6IFRGaWxlLCBsb2c6IExvZ2dlcik6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgY29uc3QgYWZmZWN0ZWRGaWxlcyA9IFtdIGFzIHN0cmluZ1tdXG4gICAgICAgIGNvbnN0IHBlbmRpbmdGaWxlcyA9IFtjaGFuZ2VkRmlsZV1cblxuICAgICAgICAvLyBzaGFyZWQgY29kZVxuICAgICAgICBjb25zdCBwcm9jZXNzRGVwZW5kZW5jeVRyZWUgPSBhc3luYyAoZmlsZTogVEZpbGUpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgUmVmcmVzaGluZyBkZXBlbmRlbmNpZXMgPCR7ZmlsZS5uYW1lfT5gKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy4jaW5kZXhEZXBlbmRlbmNpZXMoZmlsZSwgbG9nKVxuXG4gICAgICAgICAgICBsb2cuZGVidWcoYENoZWNraW5nIGRlcGVuZGVudHMgPCR7ZmlsZS5uYW1lfT5gKVxuICAgICAgICAgICAgZm9yIChjb25zdCBkZXBlbmRlbnQgb2YgdGhpcy4jdHJhY2tlZC5nZXQoZmlsZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlcGVuZGVudEZpbGUgPSB0aGlzLiNmcy5yZXNvbHZlRmlsZShkZXBlbmRlbnQpXG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVudEZpbGUpIHBlbmRpbmdGaWxlcy5wdXNoKGRlcGVuZGVudEZpbGUpXG4gICAgICAgICAgICAgICAgZWxzZSBsb2cud2FybignTm90IGZvdW5kJywgZGVwZW5kZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHBlbmRpbmdGaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBwZW5kaW5nRmlsZXMuc2hpZnQoKVxuICAgICAgICAgICAgLy8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICBpZiAoIWZpbGUgfHwgYWZmZWN0ZWRGaWxlcy5pbmNsdWRlcyhmaWxlLnBhdGgpKSBjb250aW51ZVxuXG4gICAgICAgICAgICAvLyBUZW1wbGF0ZSBmaWxlc1xuICAgICAgICAgICAgaWYgKFsnaHRtbCcsICdtZCddLmluY2x1ZGVzKGZpbGUuZXh0ZW5zaW9uKSkge1xuICAgICAgICAgICAgICAgIC8vIGNhbiBiZSBIb3RSZWxvYWRlZCBiZWNhdXNlIGl0IGRvZXNuJ3QgaW1wb3J0XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBBZmZlY3RlZCBUZW1wbGF0ZSA8JHtmaWxlLm5hbWV9PmApXG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRGaWxlcy5wdXNoKGZpbGUucGF0aClcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb21tb25KUyBmaWxlc1xuICAgICAgICAgICAgaWYgKGZpbGUuZXh0ZW5zaW9uID09PSAnY2pzJykge1xuICAgICAgICAgICAgICAgIC8vIGNhbiBiZSBIb3RSZWxvYWRlZCBiZWNhdXNlIHRoZSBjYWNoZSBjYW4gYmUgaW52YWxpZGF0ZWRcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoYEFmZmVjdGVkIENvbW1vbkpTIDwke2ZpbGUubmFtZX0+YClcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEZpbGVzLnB1c2goZmlsZS5wYXRoKVxuXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBEZWxldGluZyBjYWNoZSA8JHtmaWxlLm5hbWV9PmApXG4gICAgICAgICAgICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgQ29tbW9uSlMgY2FjaGUsIHRvIGFsbG93IGEgZnJlc2ggbG9hZFxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdGhpcy4jZnMuZ2V0QWJzb2x1dGVQYXRoKGZpbGUucGF0aClcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5yZXF1aXJlLmNhY2hlW3dpbmRvdy5yZXF1aXJlLnJlc29sdmUoZmlsZXBhdGgpXVxuXG4gICAgICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc0RlcGVuZGVuY3lUcmVlKGZpbGUpXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhlIG5leHQgZm9ybWF0cyByZXF1aXJlIERlc2lnbk1vZGUgdG8gYmUgSG90UmVsb2FkZWRcbiAgICAgICAgICAgIGlmICghdGhpcy4jcGx1Z2luLmlzRGVzaWduTW9kZUVuYWJsZWQpIGNvbnRpbnVlXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIXRoaXMuI3RyYWNrZWQuaGFzKGZpbGUucGF0aCkgJiZcbiAgICAgICAgICAgICAgICAhZmlsZS5wYXRoLnN0YXJ0c1dpdGgodGhpcy4jcGx1Z2luLnNldHRpbmdzLmNvbXBvbmVudHNfZm9sZGVyKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGZpbGVzIG5vdCB0cmFja2VkIG91dHNpZGUgb2YgdGhlIGBjb21wb25lbnRzX2ZvbGRlcmBcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFU01vZHVsZSBmaWxlc1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBBZmZlY3RlZCBFU01vZHVsZSA8JHtmaWxlLm5hbWV9PmApXG4gICAgICAgICAgICBhZmZlY3RlZEZpbGVzLnB1c2goZmlsZS5wYXRoKVxuXG4gICAgICAgICAgICBsb2cuZGVidWcoYENhY2hpbmcgY2xvbmUgPCR7ZmlsZS5uYW1lfT5gKVxuICAgICAgICAgICAgY29uc3QgY2FjaGVQYXRoID0gYXdhaXQgdGhpcy4jY2FjaGVGaWxlKGZpbGUsIGxvZylcbiAgICAgICAgICAgIHRoaXMuI3ZlcnNpb25zLnByZXBlbmQoZmlsZS5wYXRoLCBjYWNoZVBhdGgpXG5cbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3NEZXBlbmRlbmN5VHJlZShmaWxlKVxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLnRyYWNlKCdDdXJyZW50IGNqcyBjYWNoZScsIHsgLi4ud2luZG93LnJlcXVpcmUuY2FjaGUgfSlcbiAgICAgICAgcmV0dXJuIGFmZmVjdGVkRmlsZXMudW5pcXVlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGVtcG9yYWwgY29weSBvZiB0aGUgZmlsZSBvbiB0aGUgY2FjaGUgZm9sZGVyLlxuICAgICAqIElmIHRoZSBmaWxlIGFscmVhZHkgZXhpc3RzIGEgY2xvbmUgaXMgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRoZSBjYWNoZWQgZmlsZXBhdGguXG4gICAgICovXG4gICAgYXN5bmMgI2NhY2hlRmlsZShmaWxlOiBURmlsZSwgbG9nOiBMb2dnZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBjYWNoZUhhc2ggPSBhd2FpdCB0aGlzLiNmcy5nZXRGaWxlSGFzaChmaWxlKVxuICAgICAgICBjb25zdCBjYWNoZU5hbWUgPSBgJHtjYWNoZUhhc2h9LiR7ZmlsZS5iYXNlbmFtZX0uJHtmaWxlLmV4dGVuc2lvbn1gXG4gICAgICAgIGNvbnN0IGNhY2hlUGF0aCA9IHRoaXMuI2ZzLmdldENhY2hlUGF0aChjYWNoZU5hbWUpXG5cbiAgICAgICAgLy8gZmlyc3QgdGltZSBjYWNoZWRcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuI2ZzLm1pc3NpbmcoY2FjaGVQYXRoKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBDYWNoaW5nIDwke2ZpbGUubmFtZX0+IHRvIDwke2NhY2hlTmFtZX0+YClcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2ZzLmNvcHkoZmlsZSwgY2FjaGVQYXRoLCAoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNyZXBsYWNlSW1wb3J0cyhmaWxlLCBjb250ZW50LCBsb2cpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlUGF0aFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbisxIHRpbWUgY2FjaGVkXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCkudG9TdHJpbmcoKVxuICAgICAgICBjb25zdCBjbG9uZU5hbWUgPSBgJHtjYWNoZUhhc2h9LSR7dGltZXN0YW1wfS4ke2ZpbGUuYmFzZW5hbWV9LiR7ZmlsZS5leHRlbnNpb259YFxuICAgICAgICBjb25zdCBjbG9uZVBhdGggPSB0aGlzLiNmcy5nZXRDYWNoZVBhdGgoY2xvbmVOYW1lKVxuXG4gICAgICAgIGxvZy5kZWJ1ZyhgQ2xvbmluZyA8JHtjYWNoZU5hbWV9PiB0byA8JHtjbG9uZU5hbWV9PmApXG4gICAgICAgIGF3YWl0IHRoaXMuI2ZzLmNvcHkoZmlsZSwgY2xvbmVQYXRoLCAoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3JlcGxhY2VJbXBvcnRzKGZpbGUsIGNvbnRlbnQsIGxvZylcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGNsb25lUGF0aFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIGltcG9ydHMvcmVxdWlyZSBzdGF0ZW1lbnRzIHRvIGFsbG93IGR5bmFtaWMgcmVzb2x1dGlvbi5cbiAgICAgKi9cbiAgICAjcmVwbGFjZUltcG9ydHMoZmlsZTogVEZpbGUsIGNvbnRlbnQ6IHN0cmluZywgbG9nOiBMb2dnZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwYXJlbnRQYXRoID0gZmlsZS5wYXJlbnQ/LnBhdGggPz8gJydcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUFsbChpbXBvcnRzUmVnZXgoKSwgKCQwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLiNmcy5qb2luKHBhcmVudFBhdGgsICQwKVxuICAgICAgICAgICAgY29uc3QgbGF0ZXN0ID0gdGhpcy5yZXNvbHZlTGF0ZXN0KHNvdXJjZSlcbiAgICAgICAgICAgIGxvZy50cmFjZShgUmVwbGFjaW5nIGltcG9ydCBwYXRoIDwke2xhdGVzdH0+YClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNmcy5nZXRBYnNvbHV0ZVBhdGgobGF0ZXN0KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluZGV4IHRoZSBjb250ZW50IG9mIHRoZSB1c2VyICoqQ29tcG9uZW50c0ZvbGRlcioqXG4gICAgICogYW5kIGFsbCB0aGUgaW1wb3J0ZWQvcmVxdWVzdGVkIGZpbGVzLlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBpbmRleENvbXBvbmVudHMobG9nOiBMb2dnZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLiNwbHVnaW4uaXNEZXNpZ25Nb2RlRW5hYmxlZCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50c1BhdGggPSB0aGlzLiNwbHVnaW4uc2V0dGluZ3MuY29tcG9uZW50c19mb2xkZXJcbiAgICAgICAgY29uc3QgY29tcG9uZW50c0ZvbGRlciA9XG4gICAgICAgICAgICB0aGlzLiNwbHVnaW4uYXBwLnZhdWx0LmdldEZvbGRlckJ5UGF0aChjb21wb25lbnRzUGF0aClcbiAgICAgICAgaWYgKCFjb21wb25lbnRzRm9sZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhdGggPCR7Y29tcG9uZW50c1BhdGh9PiBpcyBub3QgYSBmb2xkZXJgKVxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLmluZm8oJ0luZGV4aW5nIGZpbGVzJylcbiAgICAgICAgY29uc3QgcGVuZGluZ0ZpbGVzID0gW2NvbXBvbmVudHNGb2xkZXJdIGFzIFRBYnN0cmFjdEZpbGVbXVxuICAgICAgICB3aGlsZSAocGVuZGluZ0ZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBlbmRpbmdGaWxlcy5zaGlmdCgpXG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoYEluZGV4aW5nIGZvbGRlciA8JHtmaWxlLm5hbWV9PmApXG4gICAgICAgICAgICAgICAgcGVuZGluZ0ZpbGVzLnB1c2goLi4uZmlsZS5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB1bmV4cGVjdGVkIGJlaGF2aW9yXG4gICAgICAgICAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSBjb250aW51ZVxuXG4gICAgICAgICAgICAvLyBxdWV1ZSBkZXBlbmRlbmN5IGZpbGVzXG4gICAgICAgICAgICBsb2cuZGVidWcoYEluZGV4aW5nIGZpbGUgPCR7ZmlsZS5uYW1lfT5gKVxuICAgICAgICAgICAgZm9yIChjb25zdCBkZXBlbmRlbmN5IG9mIGF3YWl0IHRoaXMuI2luZGV4RGVwZW5kZW5jaWVzKGZpbGUsIGxvZykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmN5RmlsZSA9IHRoaXMuI2ZzLnJlc29sdmVGaWxlKGRlcGVuZGVuY3kpXG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY3lGaWxlKSBwZW5kaW5nRmlsZXMucHVzaChkZXBlbmRlbmN5RmlsZSlcbiAgICAgICAgICAgICAgICBlbHNlIGxvZy53YXJuKCdOb3QgZm91bmQnLCBkZXBlbmRlbmN5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLnRyYWNlKCdJbmRleGVkIGZpbGVzJywge1xuICAgICAgICAgICAgdHJhY2tlZDogdGhpcy4jdHJhY2tlZCxcbiAgICAgICAgICAgIHZlcnNpb25zOiB0aGlzLiN2ZXJzaW9ucyxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCB0aGUgaW1wb3J0ZWQvcmVxdWVzdGVkIGZpbGVzIGluIGEgZmlsZS5cbiAgICAgKi9cbiAgICBhc3luYyAjaW5kZXhEZXBlbmRlbmNpZXMoZmlsZTogVEZpbGUsIGxvZzogTG9nZ2VyKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBsb2cuZGVidWcoYEluZGV4aW5nIGRlcGVuZGVuY2llcyA8JHtmaWxlLm5hbWV9PmApXG4gICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBmaWxlLnBhcmVudD8ucGF0aCA/PyAnJ1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy4jZnMucmVhZChmaWxlLnBhdGgpXG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY2llczogc3RyaW5nW10gPSBbXVxuXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgY29udGVudC5tYXRjaEFsbChpbXBvcnRzUmVnZXgoKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlcGVuZGVuY3kgPSB0aGlzLiNmcy5qb2luKHBhcmVudFBhdGgsIG1hdGNoWzBdIHx8ICcnKVxuICAgICAgICAgICAgbG9nLnRyYWNlKGBmaWxlIDwke2ZpbGUubmFtZX0+IGltcG9ydHMgPCR7ZGVwZW5kZW5jeX0+YClcbiAgICAgICAgICAgIHRoaXMuI3RyYWNrZWQucHVzaChkZXBlbmRlbmN5LCBmaWxlLnBhdGgpXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlcGVuZGVuY2llc1xuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudE1hdGNoZXIsIENvbXBvbmVudHNQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHsgTWFwU3RvcmUsIGdldEhhc2ggfSBmcm9tICdAL3V0aWxpdHknXG5pbXBvcnQgeyBDb21wb25lbnRFcnJvciwgRGlzYWJsZWRDb21wb25lbnRFcnJvciB9IGZyb20gJy4vQ29tcG9uZW50RXJyb3InXG5pbXBvcnQgUGFyc2VyTWFuYWdlciBmcm9tICcuL3BhcnNlcnMnXG5pbXBvcnQgUmVuZGVyTWFuYWdlciwgeyBDb2RlYmxvY2tDb250ZXh0IH0gZnJvbSAnLi9yZW5kZXJlcnMnXG5pbXBvcnQgVmVyc2lvbnNNYW5hZ2VyIGZyb20gJy4vVmVyc2lvbnNNYW5hZ2VyJ1xuXG5pbnRlcmZhY2UgUmVuZGVyUGFyYW1zIHtcbiAgICAvKiogKipDb2RlYmxvY2sgQ29udGV4dCoqIHNoYXJlZCB0byB0aGUgKipDb21wb25lbnQqKi4gKi9cbiAgICBjb250ZXh0OiBDb2RlYmxvY2tDb250ZXh0XG4gICAgLyoqICoqUGFyZW50RWxlbWVudCoqIHRvIHJlbmRlciB0aGUgKipDb21wb25lbnQqKiBpbi4gKi9cbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudFxuICAgIC8qKiAqKkNvZGVibG9jayoqIGNvbnRlbnQgcGFyc2VkLiAqL1xuICAgIGRhdGE6IHVua25vd25cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZWJsb2NrSGFuZGxlciB7XG4gICAgI2xvZzogTG9nZ2VyXG4gICAgI3BsdWdpbjogQ29tcG9uZW50c1BsdWdpblxuXG4gICAgI3BhcnNlcjogUGFyc2VyTWFuYWdlclxuICAgICNyZW5kZXJlcjogUmVuZGVyTWFuYWdlclxuICAgICN2ZXJzaW9uczogVmVyc2lvbnNNYW5hZ2VyXG5cbiAgICAjcmVuZGVyZWQgPSBuZXcgTWFwU3RvcmU8UmVuZGVyUGFyYW1zPigpXG4gICAgI3JlZ2lzdGVyZWQ6IHN0cmluZ1tdID0gW11cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogQ29tcG9uZW50c1BsdWdpbikge1xuICAgICAgICB0aGlzLiNsb2cgPSBwbHVnaW4ubG9nLm1ha2UoQ29kZWJsb2NrSGFuZGxlci5uYW1lKVxuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgdGhpcy4jcGFyc2VyID0gbmV3IFBhcnNlck1hbmFnZXIocGx1Z2luKVxuICAgICAgICB0aGlzLiNyZW5kZXJlciA9IG5ldyBSZW5kZXJNYW5hZ2VyKHBsdWdpbilcbiAgICAgICAgdGhpcy4jdmVyc2lvbnMgPSBuZXcgVmVyc2lvbnNNYW5hZ2VyKHBsdWdpbiwgdGhpcy5yZWZyZXNoLmJpbmQodGhpcykpXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGNsZWFyKGxvZzogTG9nZ2VyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxvZy5pbmZvKCdDbGVhcmluZyBpbi1tZW1vcnkgY2FjaGUnKVxuICAgICAgICB0aGlzLiNyZW5kZXJlZC5jbGVhcigpXG4gICAgICAgIHRoaXMuI3ZlcnNpb25zLmNsZWFyKClcblxuICAgICAgICAvLyByZW1vdmUgYWxsIHRlbXBvcmFsIGZpbGVzXG4gICAgICAgIGF3YWl0IHRoaXMuI3ZlcnNpb25zLnJlc2V0Q2FjaGUobG9nKVxuICAgICAgICAvLyB0b2RvIGNoZWNrIGEgd2F5IHRvIHVuLXJlZ2lzdGVyIHRoZSBwcm9jZXNzb3JzXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHByZXBhcmVEZXNpZ25Nb2RlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuI2xvZy5ncm91cCgnUHJlcGFyaW5nIERlc2lnbk1vZGUnKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBjbGVhciBzbyB3aGVuIGNvbXBvbmVudHMgYXJlIHJlLXJlbmRlciB0aGV5IHN0YXJ0IHRyYWNraW5nXG4gICAgICAgICAgICAvLyBhbmQgdGhlIEhvdENvbXBvbmVudFJlbG9hZCB3b3JrcyBjb3JyZWN0bHlcbiAgICAgICAgICAgIGdyb3VwLmluZm8oJ0NsZWFyaW5nIGNhY2hlJylcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI3ZlcnNpb25zLnJlc2V0Q2FjaGUoZ3JvdXApXG4gICAgICAgICAgICBhd2FpdCB0aGlzLiN2ZXJzaW9ucy5pbmRleENvbXBvbmVudHMoZ3JvdXApXG5cbiAgICAgICAgICAgIGdyb3VwLmluZm8oJ1JlZnJlc2hpbmcgQWxsIENvbXBvbmVudHMnKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoKEFycmF5LmZyb20odGhpcy4jcmVuZGVyZWQua2V5cygpKSwgZ3JvdXApXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZ3JvdXAud2FybihlcnIpXG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAuZmx1c2goJ0Rlc2lnbk1vZGUgRW5hYmxlZCcpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgYWxsIGluc3RhbmNlcyBvZiB0aGUgbGlzdGVkIGNvbXBvbmVudHMgdG8gcmUtcmVuZGVyLlxuICAgICAqIEBub3RlIGlmIG5vIGNvbXBvbmVudHMgaXMgcHJvdmlkZWQsIGFsbCBjb21wb25lbnRzIGFyZSByZWZyZXNoZWQuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHJlZnJlc2gocGF0aHM6IHN0cmluZ1tdLCBsb2c6IExvZ2dlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBjb21wb25lbnRzUGF0aHMgPSBwYXRocy5sZW5ndGggPyBwYXRocyA6IHRoaXMuI3JlbmRlcmVkLmtleXMoKVxuXG4gICAgICAgIGxvZy5kZWJ1ZygnUmVmcmVzaGluZyBDb21wb25lbnRzJywgcGF0aHMpXG4gICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50UGF0aCBvZiBjb21wb25lbnRzUGF0aHMpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgUmVmcmVzaGluZyBDb21wb25lbnRzKCR7Y29tcG9uZW50UGF0aH0pYClcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJhbXMgb2YgdGhpcy4jcmVuZGVyZWQuZ2V0KGNvbXBvbmVudFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy50cmFjZSgnUmVmcmVzaGluZyBDb2RlYmxvY2snLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3JlbmRlckNvbXBvbmVudChjb21wb25lbnRQYXRoLCBwYXJhbXMsIGxvZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihlcnIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmRlYnVnKCdSZWZyZXNoZWQgQ29tcG9uZW50cycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGhhbmRsZXIgZm9yIGB1c2VgIGNvZGVibG9ja3MuXG4gICAgICovXG4gICAgcHVibGljIHJlZ2lzdGVyQmFzZUNvZGVibG9jaygpOiB2b2lkIHtcbiAgICAgICAgLy8gZGVmYXVsdCBjb2RlYmxvY2tzXG4gICAgICAgIHRoaXMuI3BsdWdpbi5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFxuICAgICAgICAgICAgJ3VzZScsXG4gICAgICAgICAgICB0aGlzLiNoYW5kbGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICAtMTAwLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGhhbmRsZXIgZm9yIGN1c3RvbSBjb2RlYmxvY2tzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlckN1c3RvbUNvZGVibG9ja3MoKTogdm9pZCB7XG4gICAgICAgIC8vIHVzZXItZGVmaW5lZCBjb2RlYmxvY2tzXG4gICAgICAgIGZvciAoY29uc3QgW1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBuYW1lcyxcbiAgICAgICAgXSBvZiB0aGlzLiNwbHVnaW4uc3RhdGUuY29tcG9uZW50c19lbmFibGVkLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgcmUtcmVnaXN0ZXJpbmcgYSBwcm9jZXNzb3JcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jcmVnaXN0ZXJlZC5pbmNsdWRlcyhuYW1lKSkgY29udGludWVcblxuICAgICAgICAgICAgICAgIHRoaXMuI3JlZ2lzdGVyZWQucHVzaChuYW1lKVxuICAgICAgICAgICAgICAgIHRoaXMuI3BsdWdpbi5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAoc291cmNlLCBlbGVtZW50LCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuI2hhbmRsZXIoc291cmNlLCBlbGVtZW50LCBjb250ZXh0LCBpZCwgbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLTEwMCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyAjaGFuZGxlcihcbiAgICAgICAgc291cmNlOiBzdHJpbmcsXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBlbENvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG4gICAgICAgIGNvbXBvbmVudElkPzogc3RyaW5nLFxuICAgICAgICBuYW1lPzogc3RyaW5nLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuI2xvZy5ncm91cCgpXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGdyb3VwLmRlYnVnKGBQYXJzaW5nIENvZGVibG9jayBOYW1lICcke25hbWUgPz8gJ3VzZSd9J2ApXG4gICAgICAgICAgICBjb25zdCBub3RlcGF0aCA9IGVsQ29udGV4dC5zb3VyY2VQYXRoXG4gICAgICAgICAgICBjb25zdCB1c2VkX25hbWUgPSBuYW1lID8/IHRoaXMuI2dldENvbXBvbmVudE5hbWUoZWxDb250ZXh0LCBlbGVtZW50KVxuXG4gICAgICAgICAgICBncm91cC5kZWJ1ZyhgUGFyc2luZyBDb2RlYmxvY2sgQ29udGVudCAnJHt1c2VkX25hbWV9J2ApXG4gICAgICAgICAgICBjb25zdCB7IHN5bnRheCwgZGF0YSB9ID0gdGhpcy4jcGFyc2VyLnBhcnNlKHNvdXJjZSwgbm90ZXBhdGgsIGdyb3VwKVxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IHRoaXMuI2dldENvbXBvbmVudE1hdGNoZXIoY29tcG9uZW50SWQsIHVzZWRfbmFtZSlcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBnZXRIYXNoKHNvdXJjZSlcblxuICAgICAgICAgICAgZ3JvdXAuZGVidWcoYFNlcmlhbGl6aW5nIENvZGVibG9jayAnJHt1c2VkX25hbWV9J2ApXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0geyBub3RlcGF0aCwgdXNlZF9uYW1lLCBzeW50YXgsIGhhc2ggfVxuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geyBjb250ZXh0LCBlbGVtZW50LCBkYXRhIH1cbiAgICAgICAgICAgIGdyb3VwLnRyYWNlKCdTZXJpYWxpemVkIENvZGVibG9jaycsIHBhcmFtcylcblxuICAgICAgICAgICAgZ3JvdXAuZGVidWcoYFJlbmRlcmluZyBDb2RlYmxvY2sgJyR7dXNlZF9uYW1lfSdgKVxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb21wb25lbnQnLCBgJHt1c2VkX25hbWV9LWNvbXBvbmVudGApXG4gICAgICAgICAgICB0aGlzLiNyZW5kZXJlZC5wdXNoKG1hdGNoZXIucGF0aCwgcGFyYW1zKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy4jcmVuZGVyQ29tcG9uZW50KG1hdGNoZXIucGF0aCwgcGFyYW1zLCBncm91cClcblxuICAgICAgICAgICAgZ3JvdXAuZmx1c2goYFJlbmRlcmVkIENvbXBvbmVudCAnJHt1c2VkX25hbWV9J2ApXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZ3JvdXAuZXJyb3IoZXJyKVxuICAgICAgICAgICAgZ3JvdXAuZmx1c2goYEZhaWxlZCBDb21wb25lbnQgb24gJyR7ZWxDb250ZXh0LnNvdXJjZVBhdGh9J2ApXG5cbiAgICAgICAgICAgIGNvbnN0IHByZSA9IGVsZW1lbnQuY3JlYXRlRWwoJ3ByZScpXG4gICAgICAgICAgICBwcmUuY2xhc3NMaXN0LmFkZCgnY29tcG9uZW50LWVycm9yJylcblxuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIERpc2FibGVkQ29tcG9uZW50RXJyb3IpIGVyci5jYXVzZSA9IHNvdXJjZVxuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSBwcmUuYXBwZW5kKGVyci5zdGFjayA/PyBlcnIubWVzc2FnZSlcbiAgICAgICAgICAgIGVsc2UgcHJlLmFwcGVuZChKU09OLnN0cmluZ2lmeShlcnIpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgI2dldENvbXBvbmVudE5hbWUoXG4gICAgICAgIGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICk6IHN0cmluZyB7XG4gICAgICAgIC8vIHRyeSB0byBpZGVudGlmeSB0aGUgbmFtZSBmcm9tIGNvZGVibG9jayBoZWFkZXJcbiAgICAgICAgY29uc3QgaW5mbyA9IGNvbnRleHQuZ2V0U2VjdGlvbkluZm8oZWxlbWVudClcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGluZm8udGV4dC5zcGxpdCgnXFxuJykuYXQoaW5mby5saW5lU3RhcnQpID8/ICcnXG4gICAgICAgICAgICBjb25zdCB1c2VkX25hbWUgPSBoZWFkZXIucmVwbGFjZSgnYGBgdXNlJywgJycpLnRyaW0oKVxuICAgICAgICAgICAgaWYgKHVzZWRfbmFtZSkgcmV0dXJuIHVzZWRfbmFtZVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IENvbXBvbmVudEVycm9yKFxuICAgICAgICAgICAgYGNvbXBvbmVudCBuYW1lIGNvdWxkIG5vdCBiZSBmb3VuZCBvbiAnJHtjb250ZXh0LnNvdXJjZVBhdGh9J2AsXG4gICAgICAgICAgICB7IGNhdXNlOiBpbmZvLCBjb2RlOiAnbWlzc2luZy1jb21wb25lbnQtbmFtZScgfSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgICNnZXRDb21wb25lbnRNYXRjaGVyKFxuICAgICAgICBjb21wb25lbnRJZD86IHN0cmluZyxcbiAgICAgICAgdXNlZF9uYW1lPzogc3RyaW5nLFxuICAgICk6IENvbXBvbmVudE1hdGNoZXIge1xuICAgICAgICBpZiAoY29tcG9uZW50SWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWF0Y2hlciBvZiB0aGlzLiNwbHVnaW4uc3RhdGUuY29tcG9uZW50c19tYXRjaGVycykge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVyLmlkID09PSBjb21wb25lbnRJZCkgcmV0dXJuIG1hdGNoZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VkX25hbWUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWF0Y2hlciBvZiB0aGlzLiNwbHVnaW4uc3RhdGUuY29tcG9uZW50c19tYXRjaGVycykge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVyLnRlc3QodXNlZF9uYW1lKSkgcmV0dXJuIG1hdGNoZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBEaXNhYmxlZENvbXBvbmVudEVycm9yKFxuICAgICAgICAgICAgYGNvbXBvbmVudCgke3VzZWRfbmFtZX0pIHdhcyBkaXNhYmxlZCByZWNlbnRseWAsXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBhc3luYyAjcmVuZGVyQ29tcG9uZW50KFxuICAgICAgICBjb21wb25lbnRQYXRoOiBzdHJpbmcsXG4gICAgICAgIHsgY29udGV4dCwgZWxlbWVudDogZWwsIGRhdGEgfTogUmVuZGVyUGFyYW1zLFxuICAgICAgICBsb2c6IExvZ2dlcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgbGF0ZXN0UGF0aCA9IHRoaXMuI3ZlcnNpb25zLnJlc29sdmVMYXRlc3QoY29tcG9uZW50UGF0aClcbiAgICAgICAgbG9nLmRlYnVnKGBSZW5kZXJpbmcgd2l0aCBMYXRlc3RQYXRoICcke2xhdGVzdFBhdGh9J2ApXG5cbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuI3BsdWdpbi5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aChsYXRlc3RQYXRoKVxuICAgICAgICBpZiAoZmlsZSkgcmV0dXJuIHRoaXMuI3JlbmRlcmVyLnJlbmRlcihmaWxlLCBjb250ZXh0LCBlbCwgZGF0YSwgbG9nKVxuXG4gICAgICAgIHRocm93IG5ldyBDb21wb25lbnRFcnJvcihcbiAgICAgICAgICAgIGBjb21wb25lbnQoJHtsYXRlc3RQYXRofSkgY291bGQgbm90IGJlIGxvY2F0ZWQsIHRyeSByZWxvYWRpbmcgT2JzaWRpYW5gLFxuICAgICAgICAgICAgeyBjb2RlOiAnbWlzc2luZy1jb21wb25lbnQtZmlsZScgfSxcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1wcml2YXRlLWNsYXNzLW1lbWJlcnMgKi9cbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50c1BsdWdpbiB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudHNQbHVnaW5BUEkgfSBmcm9tICdAL2luZGV4J1xuaW1wb3J0IHR5cGUgeyBMb2dnZXIgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudHNBUEkgaW1wbGVtZW50cyBDb21wb25lbnRzUGx1Z2luQVBJIHtcbiAgICAjbG9nOiBMb2dnZXJcbiAgICAjcGx1Z2luOiBDb21wb25lbnRzUGx1Z2luXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENvbXBvbmVudHNQbHVnaW4pIHtcbiAgICAgICAgdGhpcy4jbG9nID0gcGx1Z2luLmxvZy5tYWtlKENvbXBvbmVudHNBUEkubmFtZSlcbiAgICAgICAgdGhpcy4jcGx1Z2luID0gcGx1Z2luXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBQbHVnaW5TZXR0aW5ncywgUGx1Z2luU3RhdGUgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpbk1hbmlmZXN0IH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHsgcHJlcGFyZVN0YXRlIH0gZnJvbSAnQC91dGlsaXR5J1xuaW1wb3J0IHsgU2V0dGluZ3NUYWIgfSBmcm9tICcuL3NldHRpbmdzL1NldHRpbmdzVGFiJ1xuaW1wb3J0IENvZGVibG9ja0hhbmRsZXIgZnJvbSAnLi9jb2RlYmxvY2tzJ1xuaW1wb3J0IENvbXBvbmVudHNBUEkgZnJvbSAnLi9Db21wb25lbnRzQVBJJ1xuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQbHVnaW5TZXR0aW5ncyA9IHtcbiAgICAvLyAqICdXQVJOJyBsZXZlbCB0byBmb3JjZSB0aGUgdXNlciB0byBjaG9vc2UgYSBsb3dlciBsZXZlbCB3aGVuIGlzIHJlcXVpcmVkXG4gICAgLy8gKiB0aGlzIGRlY2l0aW9uLCBwcmV2ZW50cyB0aGUgY29uc29sZSBmcm9tIGJlZW4gb3ZlcnBvcHVsYXRlZCBieSBkZWZhdWx0XG4gICAgcGx1Z2luX2xldmVsOiAnV0FSTicsXG4gICAgLy9cbiAgICBlbmFibGVfY29kZWJsb2NrczogZmFsc2UsXG4gICAgZW5hYmxlX3NlcGFyYXRvcnM6IGZhbHNlLFxuICAgIHVzYWdlX3NlcGFyYXRvcjogJy0tLScsXG5cbiAgICBjYWNoZV9mb2xkZXI6ICdfX3RlbXAvJyxcbiAgICBjb21wb25lbnRzX2ZvbGRlcjogJycsXG4gICAgY29tcG9uZW50c19jb25maWc6IFtdLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBwdWJsaWMgbG9nID0gTG9nZ2VyLmNvbnNvbGVMb2dnZXIoQ29tcG9uZW50c1BsdWdpbi5uYW1lKVxuXG4gICAgcHVibGljIHNldHRpbmdzID0ge30gYXMgUGx1Z2luU2V0dGluZ3NcbiAgICBwdWJsaWMgc3RhdGUgPSB7fSBhcyBQbHVnaW5TdGF0ZVxuXG4gICAgcHVibGljIGFwaTogQ29tcG9uZW50c0FQSVxuICAgICNoYW5kbGVyOiBDb2RlYmxvY2tIYW5kbGVyXG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0KSB7XG4gICAgICAgIHN1cGVyKGFwcCwgbWFuaWZlc3QpXG5cbiAgICAgICAgLy8gKiBhbHdheXMgcHJpbnRpbmcgdGhlIGZpcnN0IGxvYWRTZXR0aW5ncygpXG4gICAgICAgIC8vICogYWZ0ZXIgdGhhdCwgdGhlIHVzZXItZGVmaW5lZCBsZXZlbCBpcyB1c2VkXG4gICAgICAgIHRoaXMubG9nLnNldExldmVsKExvZ0xldmVsLkRFQlVHKVxuICAgICAgICB0aGlzLmxvZy5zZXRGb3JtYXQoJ1toaDptbTpzcy5tc10gbGV2ZWw6JylcblxuICAgICAgICB0aGlzLmFwaSA9IG5ldyBDb21wb25lbnRzQVBJKHRoaXMpXG4gICAgICAgIHRoaXMuI2hhbmRsZXIgPSBuZXcgQ29kZWJsb2NrSGFuZGxlcih0aGlzKVxuXG4gICAgICAgIC8vIHRocmlkLXBhcnR5IEFQSVxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vbi1zdGFuZGFyZCBBUElcbiAgICAgICAgd2luZG93LkNvbXBvbmVudHMgPSB0aGlzLmFwaVxuICAgIH1cblxuICAgIGFzeW5jIG9ubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKVxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNldHRpbmdzVGFiKHRoaXMpKVxuICAgICAgICB0aGlzLiNoYW5kbGVyLnJlZ2lzdGVyQmFzZUNvZGVibG9jaygpXG4gICAgfVxuXG4gICAgb251bmxvYWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5sb2cuZ3JvdXAoJ0NsZWFyaW5nIFN0YXRlJylcbiAgICAgICAgdm9pZCB0aGlzLiNoYW5kbGVyLmNsZWFyKGdyb3VwKVxuICAgICAgICBncm91cC5mbHVzaCgnQ2xlYXJlZCBTdGF0ZScpXG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMubG9nLmdyb3VwKCdMb2FkaW5nIFNldHRpbmdzJylcbiAgICAgICAgY29uc3QgcHJpbWl0aXZlcyA9ICgoYXdhaXQgdGhpcy5sb2FkRGF0YSgpKSB8fFxuICAgICAgICAgICAge30pIGFzIFBhcnRpYWw8UGx1Z2luU2V0dGluZ3M+XG5cbiAgICAgICAgLy8gZW5zdXJlIGEgZmFsbGJhY2sgdmFsdWUgaXMgcHJlc2VudFxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgcHJpbWl0aXZlcylcblxuICAgICAgICBncm91cC5kZWJ1ZygnTG9hZGVkOiAnLCB0aGlzLnNldHRpbmdzKVxuXG4gICAgICAgIHRoaXMuI3ByZXBhcmVTdGF0ZShncm91cClcbiAgICAgICAgZ3JvdXAuZmx1c2goJ0xvYWRlZCBTZXR0aW5ncycpXG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMubG9nLmdyb3VwKCdTYXZpbmcgU2V0dGluZ3MnKVxuICAgICAgICBjb25zdCBwcmltaXRpdmVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zZXR0aW5ncylcbiAgICAgICAgLy8gc2VyaWFsaXplIHNwZWNpYWwgZGF0YSB0eXBlcyAoTWFwLCBTZXQsIGV0YylcblxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHByaW1pdGl2ZXMpXG4gICAgICAgIGdyb3VwLmRlYnVnKCdTYXZlZDogJywgcHJpbWl0aXZlcylcblxuICAgICAgICB0aGlzLiNwcmVwYXJlU3RhdGUoZ3JvdXApXG4gICAgICAgIGdyb3VwLmZsdXNoKCdTYXZlZCBTZXR0aW5ncycpXG4gICAgfVxuXG4gICAgI3ByZXBhcmVTdGF0ZShsb2c6IExvZ2dlcik6IHZvaWQge1xuICAgICAgICBsb2cuaW5mbygnUHJlcGFyaW5nIHN0YXRlJylcblxuICAgICAgICB0aGlzLmxvZy5zZXRMZXZlbChMb2dMZXZlbFt0aGlzLnNldHRpbmdzLnBsdWdpbl9sZXZlbF0pXG4gICAgICAgIHRoaXMuc3RhdGUgPSBwcmVwYXJlU3RhdGUodGhpcylcbiAgICAgICAgdGhpcy4jaGFuZGxlci5yZWdpc3RlckN1c3RvbUNvZGVibG9ja3MoKVxuICAgIH1cblxuICAgIC8vIERlc2lnbiBNb2RlXG4gICAgI2Rlc2lnbk1vZGUgPSBmYWxzZVxuXG4gICAgZ2V0IGlzRGVzaWduTW9kZUVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNkZXNpZ25Nb2RlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgd2hlbiB0byBlbmFibGUgdGhlIGJsb2NrIGZpbGUgdmVyc2lvbmluZy5cbiAgICAgKiA+IGBXYXJuaW5nOmAgVGhlIHZlcnNpb25pbmcgc3RvcmVzIGVhY2ggZWRpdGlvbiBvZiBhIGZpbGVcbiAgICAgKiA+IHRvIHByb3ZpZGUgYSB3YXkgdG8gbG9hZCB0aGUgZmlsZSBjaGFuZ2VzIG9uIHJ1bnRpbWVcbiAgICAgKiA+IHRoaXMgYmVoYXZpb3Igd2lsbCBjYXVzZSBhbiBpbmNyZWFzZSBvbiBtZW1vcnkgdXNhZ2UgYW5kXG4gICAgICogPiBzdG9yYWdlIHVzYWdlLCBzbyBpdCBzaG91bGQgYmUgKipkaXNhYmxlZCBhbHdheXMqKlxuICAgICAqID4gdW50aWwgdGhlIHVzZXIgZW5hYmxlcyBpdCAqKm1hbnVhbGx5KipcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5hYmxlRGVzaWduTW9kZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuI2Rlc2lnbk1vZGUpIHJldHVyblxuICAgICAgICB0aGlzLiNkZXNpZ25Nb2RlID0gdHJ1ZVxuICAgICAgICB2b2lkIHRoaXMuI2hhbmRsZXIucHJlcGFyZURlc2lnbk1vZGUoKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJwdCIsInQiLCJuIiwiZyIsInd0IiwiViIsIiN0IiwiI3MiLCIjZSIsIiNuIiwiI2kiLCJzIiwiaSIsInIiLCJtdCIsIm8iLCJ5dCIsImR0IiwiWSIsIkEiLCJIIiwieCIsImUiLCJaIiwieHQiLCJFdCIsImJ0IiwidHQiLCJ2dCIsImV0IiwiWCIsImMiLCJhIiwibCIsInUiLCJmIiwiZCIsImgiLCJSdCIsIkwiLCJwIiwiYiIsIkkiLCJPIiwiVyIsIlAiLCJDIiwiJCIsIkQiLCJudCIsInciLCJ2IiwibSIsIkUiLCJxIiwiayIsInkiLCJMdCIsIk0iLCJ6IiwiRyIsIkN0IiwiUiIsIlMiLCJfIiwic3QiLCJpdCIsImoiLCJydCIsIm90IiwiVCIsIlR0IiwiY3QiLCJTdCIsIk4iLCJLIiwibHQiLCJEdCIsIk90IiwiQXQiLCJGdCIsIk50IiwiSiIsImF0Iiwia3QiLCJJdCIsIld0IiwiQnQiLCJVIiwiUSIsInV0IiwiVnQiLCJIdCIsIiR0IiwiTXQiLCJfdCIsIlB0IiwiVXQiLCJqdCIsInp0IiwiZnQiLCJGIiwiWXQiLCJodCIsIkIiLCJndCIsInF0IiwiRmlsZXN5c3RlbUFkYXB0ZXIiLCIjcGx1Z2luIiwiI3ZhdWx0IiwicGx1Z2luIiwiZmlsZSIsInBhdGgiLCJQYXRoIiwicGF0aHMiLCJub3JtYWxpemVQYXRoIiwiZmlsZU9yUGF0aCIsIlRGaWxlIiwiI2V4aXN0cyIsImZpbGVwYXRoIiwiI21pc3NpbmciLCJlZGl0b3IiLCJjb250ZW50IiwibmV3RmlsZVBhdGgiLCJmb2xkZXJPclBhdGgiLCJmb2xkZXJwYXRoIiwibGVuZ3RoIiwiaGFzaCIsImNyZWF0ZUhhc2giLCJNYXBTdG9yZSIsInZhbHVlT3JNYXRjaGVyIiwia2V5IiwidmFsdWVzIiwidmFsdWUiLCJyZXN1bHQiLCJpc1JlY29yZCIsInByZXBhcmVIYXNoIiwic291cmNlIiwiZ2V0SGFzaCIsImRhdGEiLCJwcmVwYXJlU3RhdGUiLCJuYW1lcyIsInByZXBhcmVDb21wb25lbnROYW1lcyIsInByZXBhcmVDb21wb25lbnRNYXRjaGVycyIsInBhcnNlU3RyaW5nTGlzdCIsImFyciIsInN0ciIsInNldHRpbmdzIiwiY29tcG9uZW50IiwibmFtZSIsImNvbXBvbmVudHNFbmFibGVkIiwibG9hZENvbXBvbmVudHNPblZhdWx0IiwidmF1bHQiLCJjb21wb25lbnRzRm9sZGVyIiwicHJldmlvdXNDb21wb25lbnRzIiwiZmlsZXMiLCJnZXRGaWxlc09uRm9sZGVyIiwicHJldiIsImVsIiwidGFnIiwiYXBwZW5kIiwicGFyZW50IiwiU2V0dGluZ3NUYWJDb21wb25lbnRzIiwiI2NvbXBvbmVudHNFbCIsIiNmaWx0ZXJlZCIsInBhcmVudEVsIiwiI2Rpc3BsYXlDb21wb25lbnRzSGVhZGVyIiwiI3NlYXJjaENvbXBvbmVudHNPblZhdWx0IiwiI3NhdmVDb21wb25lbnRzIiwiI2Rpc3BsYXlDb21wb25lbnRzTGlzdCIsIiN0b2dnbGVDb21wb25lbnRzIiwiaWRzIiwiZW5hYmxlZCIsImNvbXBvbmVudHMiLCJpdGVtIiwiI2NoYW5nZUNvbXBvbmVudCIsImlkIiwiVG9vbHMubG9hZENvbXBvbmVudHNPblZhdWx0IiwiY29tcG9uZW50c0ZpbHRlciIsIlNldHRpbmciLCJidXR0b24iLCJpbnB1dCIsImZpbHRlciIsImNoYW5nZWQiLCJmaWx0ZXJlZCIsImlzSW5jbHVkZWQiLCJ3YXNJbmNsdWRlZCIsIiNjb21wb25lbnROYW1lIiwiI2NvbXBvbmVudERlc2MiLCIjY29tcG9uZW50Rm9ybSIsInRvZ2dsZSIsInN0YXR1cyIsImRpdiIsIlRvb2xzLmVsIiwiZnJhZyIsIlRvb2xzLmFwcGVuZCIsIiNhY3RpdmVGb3JtIiwic2V0dGluZyIsImZvcm1JbnB1dCIsInRleHRhcmVhIiwiTEVWRUxfTEFCRUxTIiwiZG9jcyIsImRlc2MiLCJTZXR0aW5nc1RhYiIsIlBsdWdpblNldHRpbmdUYWIiLCIjZnMiLCIjdXBkYXRlIiwiI2Rpc3BsYXlHZW5lcmFsU2V0dGluZ3MiLCIjZGlzcGxheUNvZGVibG9ja3NTZXR0aW5ncyIsIiNkaXNwbGF5Q29tcG9uZW50c1NldHRpbmdzIiwibGV2ZWxTZXR0aW5nIiwiZHJvcGRvd24iLCJtb2RlU2V0dGluZyIsImNvZGVibG9ja1NldHRpbmdzIiwidXNhZ2VTZXBhcmF0b3JJbnB1dCIsImVuYWJsZVNlcGFyYXRvclNldHRpbmdzIiwic2VwYXJhdG9yU2V0dGluZyIsImF0dGFjaFBhdGhIYW5kbGVyIiwibG9ncyIsInNvdXJjZURlc2MiLCJzb3VyY2VMb2ciLCJjb21wb25lbnRzZm9sZGVyU2V0dGluZyIsIkZvbGRlclN1Z2dlc3RlciIsImNhY2hlRGVzYyIsImNhY2hlTG9nIiwiY2FjaGVmb2xkZXJTZXR0aW5nIiwiQ29tcG9uZW50RXJyb3IiLCJtZXNzYWdlIiwib3B0aW9ucyIsImJhc2UiLCJEaXNhYmxlZENvbXBvbmVudEVycm9yIiwiWWFtbFBhcnNlciIsIl9ub3RlcGF0aCIsInBhcnNlWWFtbCIsIkpzb25QYXJzZXIiLCJsaWIiLCJMdXhvbkVycm9yIiwiSW52YWxpZERhdGVUaW1lRXJyb3IiLCJyZWFzb24iLCJJbnZhbGlkSW50ZXJ2YWxFcnJvciIsIkludmFsaWREdXJhdGlvbkVycm9yIiwiQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IiLCJJbnZhbGlkVW5pdEVycm9yIiwidW5pdCIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiWm9uZUlzQWJzdHJhY3RFcnJvciIsIkRBVEVfU0hPUlQiLCJEQVRFX01FRCIsIkRBVEVfTUVEX1dJVEhfV0VFS0RBWSIsIkRBVEVfRlVMTCIsIkRBVEVfSFVHRSIsIlRJTUVfU0lNUExFIiwiVElNRV9XSVRIX1NFQ09ORFMiLCJUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUIiwiVElNRV9XSVRIX0xPTkdfT0ZGU0VUIiwiVElNRV8yNF9TSU1QTEUiLCJUSU1FXzI0X1dJVEhfU0VDT05EUyIsIlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQiLCJUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQiLCJEQVRFVElNRV9TSE9SVCIsIkRBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyIsIkRBVEVUSU1FX01FRCIsIkRBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9NRURfV0lUSF9XRUVLREFZIiwiREFURVRJTUVfRlVMTCIsIkRBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfSFVHRSIsIkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTIiwiWm9uZSIsInRzIiwib3B0cyIsImZvcm1hdCIsIm90aGVyWm9uZSIsInNpbmdsZXRvbiQxIiwiU3lzdGVtWm9uZSIsImxvY2FsZSIsInBhcnNlWm9uZUluZm8iLCJmb3JtYXRPZmZzZXQiLCJkdGZDYWNoZSIsIm1ha2VEVEYiLCJ6b25lIiwidHlwZVRvUG9zIiwiaGFja3lPZmZzZXQiLCJkdGYiLCJkYXRlIiwiZm9ybWF0dGVkIiwicGFyc2VkIiwiZk1vbnRoIiwiZkRheSIsImZZZWFyIiwiZmFkT3JCYyIsImZIb3VyIiwiZk1pbnV0ZSIsImZTZWNvbmQiLCJwYXJ0c09mZnNldCIsImZpbGxlZCIsInR5cGUiLCJwb3MiLCJpc1VuZGVmaW5lZCIsImlhbmFab25lQ2FjaGUiLCJJQU5BWm9uZSIsInllYXIiLCJtb250aCIsImRheSIsImFkT3JCYyIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJhc1VUQyIsIm9ialRvTG9jYWxUUyIsImFzVFMiLCJvdmVyIiwiaW50bExGQ2FjaGUiLCJnZXRDYWNoZWRMRiIsImxvY1N0cmluZyIsImludGxEVENhY2hlIiwiZ2V0Q2FjaGVkRFRGIiwiaW50bE51bUNhY2hlIiwiZ2V0Q2FjaGVkSU5GIiwiaW5mIiwiaW50bFJlbENhY2hlIiwiZ2V0Q2FjaGVkUlRGIiwiY2FjaGVLZXlPcHRzIiwic3lzTG9jYWxlQ2FjaGUiLCJzeXN0ZW1Mb2NhbGUiLCJwYXJzZUxvY2FsZVN0cmluZyIsImxvY2FsZVN0ciIsInhJbmRleCIsInVJbmRleCIsInNlbGVjdGVkU3RyIiwic21hbGxlciIsIm51bWJlcmluZ1N5c3RlbSIsImNhbGVuZGFyIiwiaW50bENvbmZpZ1N0cmluZyIsIm91dHB1dENhbGVuZGFyIiwibWFwTW9udGhzIiwibXMiLCJEYXRlVGltZSIsIm1hcFdlZWtkYXlzIiwibGlzdFN0dWZmIiwibG9jIiwiZW5nbGlzaEZuIiwiaW50bEZuIiwibW9kZSIsInN1cHBvcnRzRmFzdE51bWJlcnMiLCJQb2x5TnVtYmVyRm9ybWF0dGVyIiwiaW50bCIsImZvcmNlU2ltcGxlIiwicGFkVG8iLCJmbG9vciIsIm90aGVyT3B0cyIsImludGxPcHRzIiwiZml4ZWQiLCJyb3VuZFRvIiwicGFkU3RhcnQiLCJQb2x5RGF0ZUZvcm1hdHRlciIsImdtdE9mZnNldCIsIm9mZnNldFoiLCJwYXJ0cyIsInBhcnQiLCJvZmZzZXROYW1lIiwiUG9seVJlbEZvcm1hdHRlciIsImlzRW5nbGlzaCIsImhhc1JlbGF0aXZlIiwiY291bnQiLCJmb3JtYXRSZWxhdGl2ZVRpbWUiLCJMb2NhbGUiLCJkZWZhdWx0VG9FTiIsInNwZWNpZmllZExvY2FsZSIsIlNldHRpbmdzIiwibG9jYWxlUiIsIm51bWJlcmluZ1N5c3RlbVIiLCJvdXRwdXRDYWxlbmRhclIiLCJudW1iZXJpbmciLCJwYXJzZWRMb2NhbGUiLCJwYXJzZWROdW1iZXJpbmdTeXN0ZW0iLCJwYXJzZWRPdXRwdXRDYWxlbmRhciIsImlzQWN0dWFsbHlFbiIsImhhc05vV2VpcmRuZXNzIiwiYWx0cyIsIm1vbnRocyIsImZvcm1hdFN0ciIsIndlZWtkYXlzIiwibWVyaWRpZW1zIiwiZXJhcyIsImZpZWxkIiwiZGYiLCJyZXN1bHRzIiwibWF0Y2hpbmciLCJvdGhlciIsInNpbmdsZXRvbiIsIkZpeGVkT2Zmc2V0Wm9uZSIsIm9mZnNldCIsInNpZ25lZE9mZnNldCIsIkludmFsaWRab25lIiwiem9uZU5hbWUiLCJub3JtYWxpemVab25lIiwiZGVmYXVsdFpvbmUiLCJpc1N0cmluZyIsImxvd2VyZWQiLCJpc051bWJlciIsIm5vdyIsImRlZmF1bHRMb2NhbGUiLCJkZWZhdWx0TnVtYmVyaW5nU3lzdGVtIiwiZGVmYXVsdE91dHB1dENhbGVuZGFyIiwidHdvRGlnaXRDdXRvZmZZZWFyIiwidGhyb3dPbkludmFsaWQiLCJjdXRvZmZZZWFyIiwiaXNJbnRlZ2VyIiwiaXNEYXRlIiwibWF5YmVBcnJheSIsInRoaW5nIiwiYmVzdEJ5IiwiYnkiLCJjb21wYXJlIiwiYmVzdCIsIm5leHQiLCJwYWlyIiwicGljayIsIm9iaiIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3AiLCJpbnRlZ2VyQmV0d2VlbiIsImJvdHRvbSIsInRvcCIsImZsb29yTW9kIiwiaXNOZWciLCJwYWRkZWQiLCJwYXJzZUludGVnZXIiLCJzdHJpbmciLCJwYXJzZUZsb2F0aW5nIiwicGFyc2VNaWxsaXMiLCJmcmFjdGlvbiIsIm51bWJlciIsImRpZ2l0cyIsInRvd2FyZFplcm8iLCJmYWN0b3IiLCJpc0xlYXBZZWFyIiwiZGF5c0luWWVhciIsImRheXNJbk1vbnRoIiwibW9kTW9udGgiLCJtb2RZZWFyIiwid2Vla3NJbldlZWtZZWFyIiwid2Vla1llYXIiLCJwMSIsImxhc3QiLCJwMiIsInVudHJ1bmNhdGVZZWFyIiwib2Zmc2V0Rm9ybWF0IiwidGltZVpvbmUiLCJtb2RpZmllZCIsIm9mZkhvdXJTdHIiLCJvZmZNaW51dGVTdHIiLCJvZmZIb3VyIiwib2ZmTWluIiwib2ZmTWluU2lnbmVkIiwiYXNOdW1iZXIiLCJudW1lcmljVmFsdWUiLCJub3JtYWxpemVPYmplY3QiLCJub3JtYWxpemVyIiwibm9ybWFsaXplZCIsImhvdXJzIiwibWludXRlcyIsInNpZ24iLCJ0aW1lT2JqZWN0IiwibW9udGhzTG9uZyIsIm1vbnRoc1Nob3J0IiwibW9udGhzTmFycm93Iiwid2Vla2RheXNMb25nIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTmFycm93IiwiZXJhc0xvbmciLCJlcmFzU2hvcnQiLCJlcmFzTmFycm93IiwibWVyaWRpZW1Gb3JEYXRlVGltZSIsIndlZWtkYXlGb3JEYXRlVGltZSIsIm1vbnRoRm9yRGF0ZVRpbWUiLCJlcmFGb3JEYXRlVGltZSIsIm51bWVyaWMiLCJuYXJyb3ciLCJ1bml0cyIsImxhc3RhYmxlIiwiaXNEYXkiLCJpc0luUGFzdCIsImZtdFZhbHVlIiwic2luZ3VsYXIiLCJsaWxVbml0cyIsImZtdFVuaXQiLCJzdHJpbmdpZnlUb2tlbnMiLCJzcGxpdHMiLCJ0b2tlblRvU3RyaW5nIiwidG9rZW4iLCJtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzIiwiRm9ybWF0dGVyIiwiZm10IiwiY3VycmVudCIsImN1cnJlbnRGdWxsIiwiYnJhY2tldGVkIiwiZm9ybWF0T3B0cyIsImludGVydmFsIiwia25vd25FbmdsaXNoIiwidXNlRGF0ZVRpbWVGb3JtYXR0ZXIiLCJleHRyYWN0IiwibWVyaWRpZW0iLCJzdGFuZGFsb25lIiwid2Vla2RheSIsIm1heWJlTWFjcm8iLCJlcmEiLCJkdXIiLCJ0b2tlblRvRmllbGQiLCJsaWxkdXIiLCJtYXBwZWQiLCJ0b2tlbnMiLCJyZWFsVG9rZW5zIiwiZm91bmQiLCJsaXRlcmFsIiwidmFsIiwiY29sbGFwc2VkIiwiSW52YWxpZCIsImV4cGxhbmF0aW9uIiwiaWFuYVJlZ2V4IiwiY29tYmluZVJlZ2V4ZXMiLCJyZWdleGVzIiwiZnVsbCIsImNvbWJpbmVFeHRyYWN0b3JzIiwiZXh0cmFjdG9ycyIsIm1lcmdlZFZhbHMiLCJtZXJnZWRab25lIiwiY3Vyc29yIiwiZXgiLCJwYXJzZSIsInBhdHRlcm5zIiwicmVnZXgiLCJleHRyYWN0b3IiLCJzaW1wbGVQYXJzZSIsIm1hdGNoIiwicmV0Iiwib2Zmc2V0UmVnZXgiLCJpc29FeHRlbmRlZFpvbmUiLCJpc29UaW1lQmFzZVJlZ2V4IiwiaXNvVGltZVJlZ2V4IiwiaXNvVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvWW1kUmVnZXgiLCJpc29XZWVrUmVnZXgiLCJpc29PcmRpbmFsUmVnZXgiLCJleHRyYWN0SVNPV2Vla0RhdGEiLCJleHRyYWN0SVNPT3JkaW5hbERhdGEiLCJzcWxZbWRSZWdleCIsInNxbFRpbWVSZWdleCIsInNxbFRpbWVFeHRlbnNpb25SZWdleCIsImludCIsImZhbGxiYWNrIiwiZXh0cmFjdElTT1ltZCIsImV4dHJhY3RJU09UaW1lIiwiZXh0cmFjdElTT09mZnNldCIsImxvY2FsIiwiZnVsbE9mZnNldCIsImV4dHJhY3RJQU5BWm9uZSIsImlzb1RpbWVPbmx5IiwiaXNvRHVyYXRpb24iLCJleHRyYWN0SVNPRHVyYXRpb24iLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJ3ZWVrU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsIm1pbGxpc2Vjb25kc1N0ciIsImhhc05lZ2F0aXZlUHJlZml4IiwibmVnYXRpdmVTZWNvbmRzIiwibWF5YmVOZWdhdGUiLCJudW0iLCJmb3JjZSIsIm9ic09mZnNldHMiLCJmcm9tU3RyaW5ncyIsIndlZWtkYXlTdHIiLCJyZmMyODIyIiwiZXh0cmFjdFJGQzI4MjIiLCJvYnNPZmZzZXQiLCJtaWxPZmZzZXQiLCJwcmVwcm9jZXNzUkZDMjgyMiIsInJmYzExMjMiLCJyZmM4NTAiLCJhc2NpaSIsImV4dHJhY3RSRkMxMTIzT3I4NTAiLCJleHRyYWN0QVNDSUkiLCJpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsImlzb1RpbWVDb21iaW5lZFJlZ2V4IiwiZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXQiLCJleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXQiLCJleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lIiwiZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQiLCJwYXJzZUlTT0RhdGUiLCJwYXJzZVJGQzI4MjJEYXRlIiwicGFyc2VIVFRQRGF0ZSIsInBhcnNlSVNPRHVyYXRpb24iLCJleHRyYWN0SVNPVGltZU9ubHkiLCJwYXJzZUlTT1RpbWVPbmx5Iiwic3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsInNxbFRpbWVDb21iaW5lZFJlZ2V4IiwiZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSIsInBhcnNlU1FMIiwiSU5WQUxJRCQyIiwibG93T3JkZXJNYXRyaXgiLCJjYXN1YWxNYXRyaXgiLCJkYXlzSW5ZZWFyQWNjdXJhdGUiLCJkYXlzSW5Nb250aEFjY3VyYXRlIiwiYWNjdXJhdGVNYXRyaXgiLCJvcmRlcmVkVW5pdHMkMSIsInJldmVyc2VVbml0cyIsImNsb25lJDEiLCJjbGVhciIsImNvbmYiLCJEdXJhdGlvbiIsImR1cmF0aW9uVG9NaWxsaXMiLCJtYXRyaXgiLCJ2YWxzIiwic3VtIiwibm9ybWFsaXplVmFsdWVzIiwicHJldmlvdXMiLCJwcmV2aW91c1ZhbCIsImNvbnYiLCJyb2xsVXAiLCJyZW1vdmVaZXJvZXMiLCJuZXdWYWxzIiwiY29uZmlnIiwiYWNjdXJhdGUiLCJkdXJhdGlvbkxpa2UiLCJ0ZXh0IiwiaW52YWxpZCIsImZtdE9wdHMiLCJtaWxsaXMiLCJkdXJhdGlvbiIsImZuIiwibWl4ZWQiLCJjb252ZXJzaW9uQWNjdXJhY3kiLCJidWlsdCIsImFjY3VtdWxhdGVkIiwibGFzdFVuaXQiLCJvd24iLCJhayIsIm5lZ2F0ZWQiLCJlcSIsInYxIiwidjIiLCJJTlZBTElEJDEiLCJ2YWxpZGF0ZVN0YXJ0RW5kIiwic3RhcnQiLCJlbmQiLCJJbnRlcnZhbCIsImJ1aWx0U3RhcnQiLCJmcmllbmRseURhdGVUaW1lIiwiYnVpbHRFbmQiLCJ2YWxpZGF0ZUVycm9yIiwic3RhcnRJc1ZhbGlkIiwiZW5kSXNWYWxpZCIsImRhdGVUaW1lIiwiZGF0ZVRpbWVzIiwic29ydGVkIiwiYWRkZWQiLCJpZHgiLCJudW1iZXJPZlBhcnRzIiwiaW50ZXJ2YWxzIiwiZmluYWwiLCJzb2ZhciIsImN1cnJlbnRDb3VudCIsImVuZHMiLCJmbGF0dGVuZWQiLCJkYXRlRm9ybWF0Iiwic2VwYXJhdG9yIiwibWFwRm4iLCJJbmZvIiwicHJvdG8iLCJsb2NPYmoiLCJkYXlEaWZmIiwiZWFybGllciIsImxhdGVyIiwidXRjRGF5U3RhcnQiLCJoaWdoT3JkZXJEaWZmcyIsImRpZmZlcnMiLCJkYXlzIiwibG93ZXN0T3JkZXIiLCJoaWdoV2F0ZXIiLCJkaWZmZXIiLCJkaWZmIiwicmVtYWluaW5nTWlsbGlzIiwibG93ZXJPcmRlclVuaXRzIiwibnVtYmVyaW5nU3lzdGVtcyIsIm51bWJlcmluZ1N5c3RlbXNVVEYxNiIsImhhbmlkZWNDaGFycyIsInBhcnNlRGlnaXRzIiwiY29kZSIsIm1pbiIsIm1heCIsImRpZ2l0UmVnZXgiLCJNSVNTSU5HX0ZUUCIsImludFVuaXQiLCJwb3N0Iiwic3BhY2VPck5CU1AiLCJzcGFjZU9yTkJTUFJlZ0V4cCIsImZpeExpc3RSZWdleCIsInN0cmlwSW5zZW5zaXRpdml0aWVzIiwib25lT2YiLCJzdHJpbmdzIiwic3RhcnRJbmRleCIsImdyb3VwcyIsInNpbXBsZSIsImVzY2FwZVRva2VuIiwidW5pdEZvclRva2VuIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic2l4Iiwib25lT3JUd28iLCJvbmVUb1RocmVlIiwib25lVG9TaXgiLCJvbmVUb05pbmUiLCJ0d29Ub0ZvdXIiLCJmb3VyVG9TaXgiLCJwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCIsInRva2VuRm9yUGFydCIsInJlc29sdmVkT3B0cyIsImlzU3BhY2UiLCJzdHlsZSIsImFjdHVhbFR5cGUiLCJidWlsZFJlZ2V4IiwiaGFuZGxlcnMiLCJtYXRjaGVzIiwiYWxsIiwibWF0Y2hJbmRleCIsImRhdGVUaW1lRnJvbU1hdGNoZXMiLCJ0b0ZpZWxkIiwic3BlY2lmaWNPZmZzZXQiLCJkdW1teURhdGVUaW1lQ2FjaGUiLCJnZXREdW1teURhdGVUaW1lIiwibWF5YmVFeHBhbmRNYWNyb1Rva2VuIiwiZm9ybWF0T3B0c1RvVG9rZW5zIiwiZXhwYW5kTWFjcm9Ub2tlbnMiLCJleHBsYWluRnJvbVRva2VucyIsImRpc3F1YWxpZnlpbmdVbml0IiwicmVnZXhTdHJpbmciLCJyYXdNYXRjaGVzIiwicGFyc2VGcm9tVG9rZW5zIiwiaW52YWxpZFJlYXNvbiIsIm5vbkxlYXBMYWRkZXIiLCJsZWFwTGFkZGVyIiwidW5pdE91dE9mUmFuZ2UiLCJkYXlPZldlZWsiLCJqcyIsImNvbXB1dGVPcmRpbmFsIiwidW5jb21wdXRlT3JkaW5hbCIsIm9yZGluYWwiLCJ0YWJsZSIsIm1vbnRoMCIsImdyZWdvcmlhblRvV2VlayIsImdyZWdPYmoiLCJ3ZWVrTnVtYmVyIiwid2Vla1RvR3JlZ29yaWFuIiwid2Vla0RhdGEiLCJ3ZWVrZGF5T2ZKYW40IiwieWVhckluRGF5cyIsImdyZWdvcmlhblRvT3JkaW5hbCIsImdyZWdEYXRhIiwib3JkaW5hbFRvR3JlZ29yaWFuIiwib3JkaW5hbERhdGEiLCJoYXNJbnZhbGlkV2Vla0RhdGEiLCJ2YWxpZFllYXIiLCJ2YWxpZFdlZWsiLCJ2YWxpZFdlZWtkYXkiLCJoYXNJbnZhbGlkT3JkaW5hbERhdGEiLCJ2YWxpZE9yZGluYWwiLCJoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YSIsInZhbGlkTW9udGgiLCJ2YWxpZERheSIsImhhc0ludmFsaWRUaW1lRGF0YSIsIm1pbGxpc2Vjb25kIiwidmFsaWRIb3VyIiwidmFsaWRNaW51dGUiLCJ2YWxpZFNlY29uZCIsInZhbGlkTWlsbGlzZWNvbmQiLCJJTlZBTElEIiwiTUFYX0RBVEUiLCJ1bnN1cHBvcnRlZFpvbmUiLCJwb3NzaWJseUNhY2hlZFdlZWtEYXRhIiwiY2xvbmUiLCJpbnN0IiwiZml4T2Zmc2V0IiwibG9jYWxUUyIsInR6IiwidXRjR3Vlc3MiLCJvMiIsIm8zIiwidHNUb09iaiIsIm9ialRvVFMiLCJhZGp1c3RUaW1lIiwib1ByZSIsIm1pbGxpc1RvQWRkIiwicGFyc2VEYXRhVG9EYXRlVGltZSIsInBhcnNlZFpvbmUiLCJzZXRab25lIiwiaW50ZXJwcmV0YXRpb25ab25lIiwidG9UZWNoRm9ybWF0IiwiYWxsb3daIiwidG9JU09EYXRlIiwiZXh0ZW5kZWQiLCJsb25nRm9ybWF0IiwidG9JU09UaW1lIiwic3VwcHJlc3NTZWNvbmRzIiwic3VwcHJlc3NNaWxsaXNlY29uZHMiLCJpbmNsdWRlT2Zmc2V0IiwiZXh0ZW5kZWRab25lIiwiZGVmYXVsdFVuaXRWYWx1ZXMiLCJkZWZhdWx0V2Vla1VuaXRWYWx1ZXMiLCJkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMiLCJvcmRlcmVkVW5pdHMiLCJvcmRlcmVkV2Vla1VuaXRzIiwib3JkZXJlZE9yZGluYWxVbml0cyIsIm5vcm1hbGl6ZVVuaXQiLCJxdWlja0RUIiwidHNOb3ciLCJvZmZzZXRQcm92aXMiLCJkaWZmUmVsYXRpdmUiLCJyb3VuZCIsImxhc3RPcHRzIiwiYXJnTGlzdCIsImFyZ3MiLCJ6b25lVG9Vc2UiLCJtaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwiY29udGFpbnNPcmRpbmFsIiwiY29udGFpbnNHcmVnb3JZZWFyIiwiY29udGFpbnNHcmVnb3JNRCIsImNvbnRhaW5zR3JlZ29yIiwiZGVmaW5pdGVXZWVrRGVmIiwidXNlV2Vla0RhdGEiLCJkZWZhdWx0VmFsdWVzIiwib2JqTm93IiwiZm91bmRGaXJzdCIsImhpZ2hlck9yZGVySW52YWxpZCIsImdyZWdvcmlhbiIsInRzRmluYWwiLCJvZmZzZXRGaW5hbCIsImxvY2FsZVRvVXNlIiwibG9jYWxlT3B0cyIsInRva2VuTGlzdCIsImRheU1zIiwibWludXRlTXMiLCJvRWFybGllciIsIm9MYXRlciIsIm8xIiwidHMxIiwidHMyIiwiYzEiLCJjMiIsImtlZXBMb2NhbFRpbWUiLCJrZWVwQ2FsZW5kYXJUaW1lIiwibmV3VFMiLCJvZmZzZXRHdWVzcyIsImFzT2JqIiwic2V0dGluZ1dlZWtTdHVmZiIsIm5vcm1hbGl6ZWRVbml0IiwiZXh0IiwiaW5jbHVkZVByZWZpeCIsImluY2x1ZGVab25lIiwiaW5jbHVkZU9mZnNldFNwYWNlIiwib3RoZXJEYXRlVGltZSIsImR1ck9wdHMiLCJvdGhlcklzTGF0ZXIiLCJkaWZmZWQiLCJpbnB1dE1zIiwiYWRqdXN0ZWRUb1pvbmUiLCJwYWRkaW5nIiwiZGF0ZVRpbWVpc2giLCJERUZBVUxUX1FVRVJZX1NFVFRJTkdTIiwiU3VjY2VzcyIsInN1Y2MiLCJfZmFpbCIsIl92YWx1ZSIsIl9tZXNzYWdlIiwiRmFpbHVyZSIsImVycm9yIiwiX2YiLCJfc3VjYyIsImZhaWwiLCJSZXN1bHQiLCJzdWNjZXNzIiwiZmFpbHVyZSIsImZsYXRNYXAyIiwiZmlyc3QiLCJtYXAyIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWwiLCJwYXJzaW1tb25fdW1kX21pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJubiIsInRuIiwicm4iLCJhbiIsImVuIiwidW4iLCJvbiIsImNuIiwic24iLCJsbiIsImhuIiwicG4iLCJkbiIsInZuIiwiZ24iLCJtbiIsInluIiwicGFyc2ltbW9uX3VtZF9taW5FeHBvcnRzIiwiZW1vamlSZWdleCIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZ2V0RmlsZVRpdGxlIiwiSEVBREVSX0NBTk9OSUNBTElaRVIiLCJub3JtYWxpemVIZWFkZXJGb3JMaW5rIiwiaGVhZGVyIiwicmVuZGVyTWluaW1hbER1cmF0aW9uIiwicXVhbnRpdHkiLCJWYWx1ZXMiLCJ0b1N0cmluZyIsInJlY3Vyc2l2ZSIsIndyYXBwZWQiLCJ3cmFwVmFsdWUiLCJpc051bGwiLCJpc0Jvb2xlYW4iLCJpc0R1cmF0aW9uIiwiaXNXaWRnZXQiLCJpc0FycmF5IiwiaXNMaW5rIiwiaXNGdW5jdGlvbiIsImlzSHRtbCIsImlzT2JqZWN0IiwibWFwTGVhdmVzIiwiZnVuYyIsImNvbXBhcmVWYWx1ZSIsInZhbDEiLCJ2YWwyIiwibGlua05vcm1hbGl6ZXIiLCJ3cmFwMSIsIndyYXAyIiwibGluazEiLCJsaW5rMiIsIm5vcm1hbGl6ZSIsInBhdGhDb21wYXJlIiwidHlwZUNvbXBhcmUiLCJmMSIsImYyIiwiaW5kZXgiLCJjb21wIiwiazEiLCJrMiIsImtleUNvbXBhcmUiLCJ0eXBlT2YiLCJpc1RydXRoeSIsImRlZXBDb3B5IiwiTGluayIsIldpZGdldCIsIkdyb3VwaW5ncyIsImlzRWxlbWVudEdyb3VwIiwiZW50cnkiLCJpc0dyb3VwaW5nIiwiZWxlbWVudCIsImVsZW1lbnRzIiwic3ViZ3JvdXAiLCJlbWJlZCIsImRpc3BsYXkiLCJsaW5rcGF0aCIsInNwbGl0IiwiYmxvY2tJZCIsIm9iamVjdCIsImZpZWxkcyIsImxpbmsiLCJlc2NhcGVkIiwiJHdpZGdldCIsIkxpc3RQYWlyV2lkZ2V0IiwiRXh0ZXJuYWxMaW5rV2lkZ2V0IiwidXJsIiwiV2lkZ2V0cyIsImxpc3RQYWlyIiwiZXh0ZXJuYWxMaW5rIiwiaXNMaXN0UGFpciIsIndpZGdldCIsImlzRXh0ZXJuYWxMaW5rIiwiaXNCdWlsdGluIiwiRmllbGRzIiwidmFyaWFibGUiLCJiaW5hcnlPcCIsImxlZnQiLCJvcCIsInJpZ2h0IiwiaW5kZXhWYXJpYWJsZSIsImxhbWJkYSIsImxpc3QiLCJuZWdhdGUiLCJjaGlsZCIsImlzQ29tcGFyZU9wIiwiU291cmNlcyIsImNzdiIsImZvbGRlciIsInByZWZpeCIsImluY29taW5nIiwiYW5kIiwib3IiLCJlbXB0eSIsIkVNT0pJX1JFR0VYIiwiRFVSQVRJT05fVFlQRVMiLCJEQVRFX1NIT1JUSEFORFMiLCJLRVlXT1JEUyIsInNwbGl0T25VbmVzY2FwZWRQaXBlIiwicGlwZSIsInBhcnNlSW5uZXJMaW5rIiwicmF3bGluayIsImNyZWF0ZUJpbmFyeVBhcnNlciIsInNlcCIsImNvbWJpbmUiLCJyZXN0Iiwibm9kZSIsImNoYWluT3B0IiwiZnVuY3MiLCJFWFBSRVNTSU9OIiwiY2hhcnMiLCJsaW5rSW5uZXIiLCJ5bSIsInltZCIsInltZGgiLCJ5bWRobSIsInltZGhtcyIsInBtIiwiaHIiLCJfYSIsIl9iIiwiZHVyYXRpb25zIiwiXzEiLCJfMiIsIl8zIiwiXzQiLCJwb3N0Zml4IiwiX3NlcCIsInJlcyIsIl9zIiwicG9zdGZpeGVzIiwiaWRlbnQiLCJfaWdub3JlIiwicGFyc2VGaWVsZCIsIlF1ZXJ5RmllbGRzIiwibmFtZWQiLCJzb3J0QnkiLCJkaXIiLCJjYXB0dXJlUmF3Iiwic3RyaXBOZXdsaW5lcyIsInByZWNlZGVkQnlXaGl0ZXNwYWNlSWZOb3RFb2YiLCJpZl9lb2YiLCJwYXJzZXIiLCJRVUVSWV9MQU5HVUFHRSIsIl9hcyIsImxpbmUiLCJjb21tZW50IiwiZGlyZWN0aW9uIiwid2l0aG91dElkIiwid2hlcmUiLCJzb3J0IiwibGltaXQiLCJvcHRpb25hbFdoaXRlc3BhY2VPckNvbW1lbnQiLCJmcm9tIiwiY2xhdXNlcyIsImdldEFQSSIsImFwcCIsImlzUGx1Z2luRW5hYmxlZCIsIkRhdGF2aWV3UGFyc2VyIiwibm90ZXBhdGgiLCJQYXJzZXJNYW5hZ2VyIiwiI3BhcnNlcnMiLCIjc2VwYXJhdG9yIiwibG9nIiwiZXJyIiwiQmFzZVJlbmRlcmVyIiwiTWFya2Rvd25SZW5kZXJlciIsIlRlbXBsYXRlUmVuZGVyZXIiLCJjb250ZXh0IiwidGVtcGxhdGUiLCIjZ2V0VGVtcGxhdGUiLCJyZXBsYWNlZCIsIiNyZXBsYWNlUGxhY2Vob2xkZXJzIiwiSmF2YXNjcmlwdFJlbmRlcmVyIiwiZnMiLCJyZW5kZXJlciIsIiNnZXRSZW5kZXJlciIsIiNzb3VyY2UiLCJyZXNvdXJjZSIsInJlc29sdmVkIiwiY2F1c2UiLCJSZW5kZXJNYW5hZ2VyIiwiI3JlbmRlcmVycyIsImltcG9ydHNSZWdleCIsIlZlcnNpb25zTWFuYWdlciIsIiNsb2ciLCIjcmVmcmVzaGVyIiwiI2hhbmRsZXIiLCIjdHJhY2tlZCIsIiN2ZXJzaW9ucyIsInJlZnJlc2hlciIsIiNoYW5kbGVGaWxlTW9kaWZpY2F0aW9uIiwiZ3JvdXAiLCJhZmZlY3RlZCIsIiNhZmZlY3RlZEZpbGVzIiwiY2hhbmdlZEZpbGUiLCJhZmZlY3RlZEZpbGVzIiwicGVuZGluZ0ZpbGVzIiwicHJvY2Vzc0RlcGVuZGVuY3lUcmVlIiwiI2luZGV4RGVwZW5kZW5jaWVzIiwiZGVwZW5kZW50IiwiZGVwZW5kZW50RmlsZSIsImNhY2hlUGF0aCIsIiNjYWNoZUZpbGUiLCJjYWNoZUhhc2giLCJjYWNoZU5hbWUiLCIjcmVwbGFjZUltcG9ydHMiLCJ0aW1lc3RhbXAiLCJjbG9uZU5hbWUiLCJjbG9uZVBhdGgiLCJwYXJlbnRQYXRoIiwiJDAiLCJsYXRlc3QiLCJjb21wb25lbnRzUGF0aCIsIlRGb2xkZXIiLCJkZXBlbmRlbmN5IiwiZGVwZW5kZW5jeUZpbGUiLCJkZXBlbmRlbmNpZXMiLCJDb2RlYmxvY2tIYW5kbGVyIiwiI3BhcnNlciIsIiNyZW5kZXJlciIsIiNyZW5kZXJlZCIsIiNyZWdpc3RlcmVkIiwiY29tcG9uZW50c1BhdGhzIiwiY29tcG9uZW50UGF0aCIsInBhcmFtcyIsIiNyZW5kZXJDb21wb25lbnQiLCJlbENvbnRleHQiLCJjb21wb25lbnRJZCIsInVzZWRfbmFtZSIsIiNnZXRDb21wb25lbnROYW1lIiwic3ludGF4IiwibWF0Y2hlciIsIiNnZXRDb21wb25lbnRNYXRjaGVyIiwicHJlIiwiaW5mbyIsImxhdGVzdFBhdGgiLCJDb21wb25lbnRzQVBJIiwiREVGQVVMVF9TRVRUSU5HUyIsIkNvbXBvbmVudHNQbHVnaW4iLCJQbHVnaW4iLCJMb2dnZXIiLCJtYW5pZmVzdCIsIkxvZ0xldmVsIiwicHJpbWl0aXZlcyIsIiNwcmVwYXJlU3RhdGUiLCIj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
