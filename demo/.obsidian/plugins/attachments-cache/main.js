/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-attachments-cache@0.5.0 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-attachments-cache
 */
"use strict";const E=require("obsidian");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class $t{error(t,e){console.error(t,...e)}warn(t,e){console.warn(t,...e)}info(t,e){console.info(t,...e)}debug(t,e){console.debug(t,...e)}trace(t,e){console.trace(t,...e)}group(t,e){return console.groupCollapsed(t,...e),console.groupEnd}}const S=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),Mt=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class B{#t;#e;#r;#s=[];#i=[];get level(){return this.#e?this.#e:this.#t?.level??S.WARN}get format(){return this.#r?this.#r:this.#t?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const t=[];for(let e=0;e<this.#i.length-1;e++)t.push(this.#i[e][0]);return t.push(this.#i.at(-1)??""),t.join(".")}get drivers(){return Object.freeze(this.#s)}setLevel(t){return this.#e=t,this}setFormat(t){return this.#r=t,this}addDrivers(...t){for(const e of t)Array.isArray(e)?this.#s.push(...e):e&&this.#s.push(e);return this}addNamespaces(...t){for(const e of t)Array.isArray(e)?this.#i.push(...e):e&&this.#i.push(e);return this}static consoleLogger(t){const e=new B;return e.setLevel(S.WARN),e.addDrivers(new $t),e.addNamespaces(t),e}make(t){const e=new B;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i,t),e}prefix(t,e){return this.format.replace("hh",String(t.getHours()).padStart(2,"0")).replace("mm",String(t.getMinutes()).padStart(2,"0")).replace("ss",String(t.getSeconds()).padStart(2,"0")).replace("ms",String(t.getMilliseconds()).padStart(3,"0")).replace("level",Mt[e]).replace("namespace",this.namespace)}log(t,e,s){if(this.level>e)return;const i=this.prefix(t,e);switch(this.level){case S.ERROR:this.#s.forEach(r=>r.error(i,s));break;case S.WARN:this.#s.forEach(r=>r.warn(i,s));break;case S.INFO:this.#s.forEach(r=>r.info(i,s));break;case S.DEBUG:this.#s.forEach(r=>r.debug(i,s));break;default:this.#s.forEach(r=>r.trace(i,s))}}error(...t){this.log(new Date,S.ERROR,t)}warn(...t){this.log(new Date,S.WARN,t)}info(...t){this.log(new Date,S.INFO,t)}debug(...t){this.log(new Date,S.DEBUG,t)}trace(...t){this.log(new Date,S.TRACE,t)}group(...t){const e=new Pt;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i),t.length&&e.log(new Date,S.INFO,t),e}}class Pt extends B{#t=[];log(t,e,s){this.level>e||this.#t.push({timestamp:t,level:e,content:s})}flush(...t){if(this.#t.length===0){super.log(new Date,S.INFO,t);return}const e=this.prefix(new Date,S.INFO),s=this.drivers.map(i=>i.group(e,t));for(const{timestamp:i,level:r,content:a}of this.#t)super.log(i,r,a);s.forEach(i=>i()),this.#t=[]}}class D{static join(...t){return t.reduce((e,s)=>s?e?e.replace(/[\\/]+$/gi,"")+"/"+s.replace(/^[\\/]+/gi,""):s:e,"")}static normalize(t){return t.replaceAll(/[^\w-\\/#?&=':,. ]+/gi,"_")}static getName(t){return t.match(/[^\\/]+$/gi)?.at(0)}static getBasename(t){const e=this.getName(t);return e?this.removeExt(e):void 0}static getParent(t){return t.replace(/[\\/][^\\/]*$/gi,"")}static hasExt(t){return/\.[^\\/]*$/gi.test(t)}static getExt(t){return/(?<=\.)([^\\/#?]*)([#?].*)?$/gi.exec(t)?.at(1)}static removeExt(t){return t.replace(/(\.[^\\/]*)?([#?].*)?$/gi,"")}}class J{static isUrl(t){return/^https?:\/\//gi.test(t)}static getOrigin(t){return/^https?:\/\/[^\\/]+/gi.exec(t)?.at(0)}static getBaseurl(t){return/^https?:\/\/[^#?]*/gi.exec(t)?.at(0)}static getHash(t){return/(?<=#)[^?]*/gi.exec(t)?.at(0)}static getparams(t){return/(?<=\?).*/gi.exec(t)?.at(0)}}class L extends Error{constructor(t,e){super(),this.code=t,this.cause=e,this.name=`AttachmentError(${this.code})`,this.message=this.toStringMessage()}static assertResponse(t,e,s){if(!(e.status<400))throw new L(s,`requested url: ${t}
response status: ${e.status}
response headers:
${JSON.stringify(e.headers)}`)}toString(){return`${this.name}: ${this.toStringMessage()}`}toStringMessage(){const t=L.#t(this.code);return this.cause?this.cause instanceof Error?`${t}, context:

${this.cause}`:`${t}, context:

${JSON.stringify(this.cause)}`:t}static#t(t){switch(t){case"remote-no-url":return"remote param should be an URL";case"remote-no-ext":return"a file-extension could not be determined";case"url-request-head":return"the request to get the file-extension failed";case"url-request-get":return"the request to download the file failed";default:return"try-reloading Obsidian"}}}function Lt(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var U,at;function kt(){if(at)return U;at=1,U=n;function n(s,i,r){s instanceof RegExp&&(s=t(s,r)),i instanceof RegExp&&(i=t(i,r));var a=e(s,i,r);return a&&{start:a[0],end:a[1],pre:r.slice(0,a[0]),body:r.slice(a[0]+s.length,a[1]),post:r.slice(a[1]+i.length)}}function t(s,i){var r=i.match(s);return r?r[0]:null}n.range=e;function e(s,i,r){var a,o,h,c,l,p=r.indexOf(s),f=r.indexOf(i,p+1),u=p;if(p>=0&&f>0){if(s===i)return[p,f];for(a=[],h=r.length;u>=0&&!l;)u==p?(a.push(u),p=r.indexOf(s,u+1)):a.length==1?l=[a.pop(),f]:(o=a.pop(),o<h&&(h=o,c=f),f=r.indexOf(i,u+1)),u=p<f&&p>=0?p:f;a.length&&(l=[h,c])}return l}return U}var z,ot;function jt(){if(ot)return z;ot=1;var n=kt();z=l;var t="\0SLASH"+Math.random()+"\0",e="\0OPEN"+Math.random()+"\0",s="\0CLOSE"+Math.random()+"\0",i="\0COMMA"+Math.random()+"\0",r="\0PERIOD"+Math.random()+"\0";function a(d){return parseInt(d,10)==d?parseInt(d,10):d.charCodeAt(0)}function o(d){return d.split("\\\\").join(t).split("\\{").join(e).split("\\}").join(s).split("\\,").join(i).split("\\.").join(r)}function h(d){return d.split(t).join("\\").split(e).join("{").split(s).join("}").split(i).join(",").split(r).join(".")}function c(d){if(!d)return[""];var b=[],T=n("{","}",d);if(!T)return d.split(",");var w=T.pre,A=T.body,_=T.post,v=w.split(",");v[v.length-1]+="{"+A+"}";var $=c(_);return _.length&&(v[v.length-1]+=$.shift(),v.push.apply(v,$)),b.push.apply(b,v),b}function l(d){return d?(d.substr(0,2)==="{}"&&(d="\\{\\}"+d.substr(2)),g(o(d),!0).map(h)):[]}function p(d){return"{"+d+"}"}function f(d){return/^-?0\d/.test(d)}function u(d,b){return d<=b}function m(d,b){return d>=b}function g(d,b){var T=[],w=n("{","}",d);if(!w)return[d];var A=w.pre,_=w.post.length?g(w.post,!1):[""];if(/\$$/.test(w.pre))for(var v=0;v<_.length;v++){var $=A+"{"+w.body+"}"+_[v];T.push($)}else{var Ot=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(w.body),Q=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(w.body),F=Ot||Q,Nt=w.body.indexOf(",")>=0;if(!F&&!Nt)return w.post.match(/,.*\}/)?(d=w.pre+"{"+w.body+s+w.post,g(d)):[d];var y;if(F)y=w.body.split(/\.\./);else if(y=c(w.body),y.length===1&&(y=g(y[0],!1).map(p),y.length===1))return _.map(function(Ct){return w.pre+y[0]+Ct});var M;if(F){var tt=a(y[0]),et=a(y[1]),Dt=Math.max(y[0].length,y[1].length),st=y.length==3?Math.abs(a(y[2])):1,it=u,At=et<tt;At&&(st*=-1,it=m);var _t=y.some(f);M=[];for(var k=tt;it(k,et);k+=st){var C;if(Q)C=String.fromCharCode(k),C==="\\"&&(C="");else if(C=String(k),_t){var rt=Dt-C.length;if(rt>0){var nt=new Array(rt+1).join("0");k<0?C="-"+nt+C.slice(1):C=nt+C}}M.push(C)}}else{M=[];for(var P=0;P<y.length;P++)M.push.apply(M,g(y[P],!1))}for(var P=0;P<M.length;P++)for(var v=0;v<_.length;v++){var $=A+M[P]+_[v];(!b||F||$)&&T.push($)}}return T}return z}var Wt=jt();const Bt=Lt(Wt),Ft=1024*64,I=n=>{if(typeof n!="string")throw new TypeError("invalid pattern");if(n.length>Ft)throw new TypeError("pattern is too long")},It={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},j=n=>n.replace(/[[\]\\-]/g,"\\$&"),Gt=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),ht=n=>n.join(""),Ut=(n,t)=>{const e=t;if(n.charAt(e)!=="[")throw new Error("not in a brace expression");const s=[],i=[];let r=e+1,a=!1,o=!1,h=!1,c=!1,l=e,p="";t:for(;r<n.length;){const g=n.charAt(r);if((g==="!"||g==="^")&&r===e+1){c=!0,r++;continue}if(g==="]"&&a&&!h){l=r+1;break}if(a=!0,g==="\\"&&!h){h=!0,r++;continue}if(g==="["&&!h){for(const[d,[b,T,w]]of Object.entries(It))if(n.startsWith(d,r)){if(p)return["$.",!1,n.length-e,!0];r+=d.length,w?i.push(b):s.push(b),o=o||T;continue t}}if(h=!1,p){g>p?s.push(j(p)+"-"+j(g)):g===p&&s.push(j(g)),p="",r++;continue}if(n.startsWith("-]",r+1)){s.push(j(g+"-")),r+=2;continue}if(n.startsWith("-",r+1)){p=g,r+=2;continue}s.push(j(g)),r++}if(l<r)return["",!1,0,!1];if(!s.length&&!i.length)return["$.",!1,n.length-e,!0];if(i.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!c){const g=s[0].length===2?s[0].slice(-1):s[0];return[Gt(g),!1,l-e,!1]}const f="["+(c?"^":"")+ht(s)+"]",u="["+(c?"":"^")+ht(i)+"]";return[s.length&&i.length?"("+f+"|"+u+")":s.length?f:u,o,l-e,!0]},W=(n,{windowsPathsNoEscape:t=!1}={})=>t?n.replace(/\[([^\/\\])\]/g,"$1"):n.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1"),zt=new Set(["!","?","+","*","@"]),ct=n=>zt.has(n),qt="(?!(?:^|/)\\.\\.?(?:$|/))",q="(?!\\.)",Ht=new Set(["[","."]),Vt=new Set(["..","."]),Jt=new Set("().*{}+?[]^$\\!"),Zt=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),Z="[^/]",lt=Z+"*?",ut=Z+"+?";class x{type;#t;#e;#r=!1;#s=[];#i;#h;#n;#a=!1;#o;#c;#g=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#i=e,this.#t=this.#i?this.#i.#t:this,this.#o=this.#t===this?s:this.#t.#o,this.#n=this.#t===this?[]:this.#t.#n,t==="!"&&!this.#t.#a&&this.#n.push(this),this.#h=this.#i?this.#i.#s.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(const t of this.#s)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#c!==void 0?this.#c:this.type?this.#c=this.type+"("+this.#s.map(t=>String(t)).join("|")+")":this.#c=this.#s.map(t=>String(t)).join("")}#u(){if(this!==this.#t)throw new Error("should only call on root");if(this.#a)return this;this.toString(),this.#a=!0;let t;for(;t=this.#n.pop();){if(t.type!=="!")continue;let e=t,s=e.#i;for(;s;){for(let i=e.#h+1;!s.type&&i<s.#s.length;i++)for(const r of t.#s){if(typeof r=="string")throw new Error("string part in extglob AST??");r.copyIn(s.#s[i])}e=s,s=e.#i}}return this}push(...t){for(const e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof x&&e.#i===this))throw new Error("invalid part: "+e);this.#s.push(e)}}toJSON(){const t=this.type===null?this.#s.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#s.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#a&&this.#i?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#i?.isStart())return!1;if(this.#h===0)return!0;const t=this.#i;for(let e=0;e<this.#h;e++){const s=t.#s[e];if(!(s instanceof x&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#i?.type==="!")return!0;if(!this.#i?.isEnd())return!1;if(!this.type)return this.#i?.isEnd();const t=this.#i?this.#i.#s.length:0;return this.#h===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){const e=new x(this.type,t);for(const s of this.#s)e.copyIn(s);return e}static#l(t,e,s,i){let r=!1,a=!1,o=-1,h=!1;if(e.type===null){let u=s,m="";for(;u<t.length;){const g=t.charAt(u++);if(r||g==="\\"){r=!r,m+=g;continue}if(a){u===o+1?(g==="^"||g==="!")&&(h=!0):g==="]"&&!(u===o+2&&h)&&(a=!1),m+=g;continue}else if(g==="["){a=!0,o=u,h=!1,m+=g;continue}if(!i.noext&&ct(g)&&t.charAt(u)==="("){e.push(m),m="";const d=new x(g,e);u=x.#l(t,d,u,i),e.push(d);continue}m+=g}return e.push(m),u}let c=s+1,l=new x(null,e);const p=[];let f="";for(;c<t.length;){const u=t.charAt(c++);if(r||u==="\\"){r=!r,f+=u;continue}if(a){c===o+1?(u==="^"||u==="!")&&(h=!0):u==="]"&&!(c===o+2&&h)&&(a=!1),f+=u;continue}else if(u==="["){a=!0,o=c,h=!1,f+=u;continue}if(ct(u)&&t.charAt(c)==="("){l.push(f),f="";const m=new x(u,l);l.push(m),c=x.#l(t,m,c,i);continue}if(u==="|"){l.push(f),f="",p.push(l),l=new x(null,e);continue}if(u===")")return f===""&&e.#s.length===0&&(e.#g=!0),l.push(f),f="",e.push(...p,l),c;f+=u}return e.type=null,e.#e=void 0,e.#s=[t.substring(s-1)],c}static fromGlob(t,e={}){const s=new x(null,void 0,e);return x.#l(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();const t=this.toString(),[e,s,i,r]=this.toRegExpSource();if(!(i||this.#e||this.#o.nocase&&!this.#o.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;const o=(this.#o.nocase?"i":"")+(r?"u":"");return Object.assign(new RegExp(`^${e}$`,o),{_src:e,_glob:t})}get options(){return this.#o}toRegExpSource(t){const e=t??!!this.#o.dot;if(this.#t===this&&this.#u(),!this.type){const h=this.isStart()&&this.isEnd(),c=this.#s.map(u=>{const[m,g,d,b]=typeof u=="string"?x.#d(u,this.#e,h):u.toRegExpSource(t);return this.#e=this.#e||d,this.#r=this.#r||b,m}).join("");let l="";if(this.isStart()&&typeof this.#s[0]=="string"&&!(this.#s.length===1&&Vt.has(this.#s[0]))){const m=Ht,g=e&&m.has(c.charAt(0))||c.startsWith("\\.")&&m.has(c.charAt(2))||c.startsWith("\\.\\.")&&m.has(c.charAt(4)),d=!e&&!t&&m.has(c.charAt(0));l=g?qt:d?q:""}let p="";return this.isEnd()&&this.#t.#a&&this.#i?.type==="!"&&(p="(?:$|\\/)"),[l+c+p,W(c),this.#e=!!this.#e,this.#r]}const s=this.type==="*"||this.type==="+",i=this.type==="!"?"(?:(?!(?:":"(?:";let r=this.#p(e);if(this.isStart()&&this.isEnd()&&!r&&this.type!=="!"){const h=this.toString();return this.#s=[h],this.type=null,this.#e=void 0,[h,W(this.toString()),!1,!1]}let a=!s||t||e?"":this.#p(!0);a===r&&(a=""),a&&(r=`(?:${r})(?:${a})*?`);let o="";if(this.type==="!"&&this.#g)o=(this.isStart()&&!e?q:"")+ut;else{const h=this.type==="!"?"))"+(this.isStart()&&!e&&!t?q:"")+lt+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&a?")":this.type==="*"&&a?")?":`)${this.type}`;o=i+r+h}return[o,W(r),this.#e=!!this.#e,this.#r]}#p(t){return this.#s.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");const[s,i,r,a]=e.toRegExpSource(t);return this.#r=this.#r||a,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#d(t,e,s=!1){let i=!1,r="",a=!1;for(let o=0;o<t.length;o++){const h=t.charAt(o);if(i){i=!1,r+=(Jt.has(h)?"\\":"")+h;continue}if(h==="\\"){o===t.length-1?r+="\\\\":i=!0;continue}if(h==="["){const[c,l,p,f]=Ut(t,o);if(p){r+=c,a=a||l,o+=p-1,e=e||f;continue}}if(h==="*"){s&&t==="*"?r+=ut:r+=lt,e=!0;continue}if(h==="?"){r+=Z,e=!0;continue}r+=Zt(h)}return[r,W(t),!!e,a]}}const Xt=(n,{windowsPathsNoEscape:t=!1}={})=>t?n.replace(/[?*()[\]]/g,"[$&]"):n.replace(/[?*()[\]\\]/g,"\\$&"),R=(n,t,e={})=>(I(t),!e.nocomment&&t.charAt(0)==="#"?!1:new G(t,e).match(n)),Yt=/^\*+([^+@!?\*\[\(]*)$/,Kt=n=>t=>!t.startsWith(".")&&t.endsWith(n),Qt=n=>t=>t.endsWith(n),te=n=>(n=n.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(n)),ee=n=>(n=n.toLowerCase(),t=>t.toLowerCase().endsWith(n)),se=/^\*+\.\*+$/,ie=n=>!n.startsWith(".")&&n.includes("."),re=n=>n!=="."&&n!==".."&&n.includes("."),ne=/^\.\*+$/,ae=n=>n!=="."&&n!==".."&&n.startsWith("."),oe=/^\*+$/,he=n=>n.length!==0&&!n.startsWith("."),ce=n=>n.length!==0&&n!=="."&&n!=="..",le=/^\?+([^+@!?\*\[\(]*)?$/,ue=([n,t=""])=>{const e=St([n]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},pe=([n,t=""])=>{const e=Rt([n]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},fe=([n,t=""])=>{const e=Rt([n]);return t?s=>e(s)&&s.endsWith(t):e},ge=([n,t=""])=>{const e=St([n]);return t?s=>e(s)&&s.endsWith(t):e},St=([n])=>{const t=n.length;return e=>e.length===t&&!e.startsWith(".")},Rt=([n])=>{const t=n.length;return e=>e.length===t&&e!=="."&&e!==".."},xt=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",pt={win32:{sep:"\\"},posix:{sep:"/"}},de=xt==="win32"?pt.win32.sep:pt.posix.sep;R.sep=de;const N=Symbol("globstar **");R.GLOBSTAR=N;const me="[^/]",we=me+"*?",Ee="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",be="(?:(?!(?:\\/|^)\\.).)*?",ve=(n,t={})=>e=>R(e,n,t);R.filter=ve;const O=(n,t={})=>Object.assign({},n,t),ye=n=>{if(!n||typeof n!="object"||!Object.keys(n).length)return R;const t=R;return Object.assign((s,i,r={})=>t(s,i,O(n,r)),{Minimatch:class extends t.Minimatch{constructor(i,r={}){super(i,O(n,r))}static defaults(i){return t.defaults(O(n,i)).Minimatch}},AST:class extends t.AST{constructor(i,r,a={}){super(i,r,O(n,a))}static fromGlob(i,r={}){return t.AST.fromGlob(i,O(n,r))}},unescape:(s,i={})=>t.unescape(s,O(n,i)),escape:(s,i={})=>t.escape(s,O(n,i)),filter:(s,i={})=>t.filter(s,O(n,i)),defaults:s=>t.defaults(O(n,s)),makeRe:(s,i={})=>t.makeRe(s,O(n,i)),braceExpand:(s,i={})=>t.braceExpand(s,O(n,i)),match:(s,i,r={})=>t.match(s,i,O(n,r)),sep:t.sep,GLOBSTAR:N})};R.defaults=ye;const Tt=(n,t={})=>(I(n),t.nobrace||!/\{(?:(?!\{).)*\}/.test(n)?[n]:Bt(n));R.braceExpand=Tt;const Se=(n,t={})=>new G(n,t).makeRe();R.makeRe=Se;const Re=(n,t,e={})=>{const s=new G(t,e);return n=n.filter(i=>s.match(i)),s.options.nonull&&!n.length&&n.push(t),n};R.match=Re;const ft=/[?*]|[+@!]\(.*?\)|\[|\]/,xe=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&");class G{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){I(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||xt,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const t of this.set)for(const e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...r)=>console.error(...r)),this.debug(this.pattern,this.globSet);const s=this.globSet.map(r=>this.slashSplit(r));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let i=this.globParts.map((r,a,o)=>{if(this.isWindows&&this.windowsNoMagicRoot){const h=r[0]===""&&r[1]===""&&(r[2]==="?"||!ft.test(r[2]))&&!ft.test(r[3]),c=/^[a-z]:/i.test(r[0]);if(h)return[...r.slice(0,4),...r.slice(4).map(l=>this.parse(l))];if(c)return[r[0],...r.slice(1).map(l=>this.parse(l))]}return r.map(h=>this.parse(h))});if(this.debug(this.pattern,i),this.set=i.filter(r=>r.indexOf(!1)===-1),this.isWindows)for(let r=0;r<this.set.length;r++){const a=this.set[r];a[0]===""&&a[1]===""&&this.globParts[r][2]==="?"&&typeof a[3]=="string"&&/^[a-z]:$/i.test(a[3])&&(a[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]==="**"&&(t[s][i]="*");const{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let i=s;for(;e[i+1]==="**";)i++;i!==s&&e.splice(s,i-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,i)=>{const r=s[s.length-1];return i==="**"&&r==="**"?s:i===".."&&r&&r!==".."&&r!=="."&&r!=="**"?(s.pop(),s):(s.push(i),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let i=1;i<t.length-1;i++){const r=t[i];i===1&&r===""&&t[0]===""||(r==="."||r==="")&&(e=!0,t.splice(i,1),i--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){const i=t[s-1];i&&i!=="."&&i!==".."&&i!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let i=-1;for(;(i=s.indexOf("**",i+1))!==-1;){let a=i;for(;s[a+1]==="**";)a++;a>i&&s.splice(i+1,a-i);let o=s[i+1];const h=s[i+2],c=s[i+3];if(o!==".."||!h||h==="."||h===".."||!c||c==="."||c==="..")continue;e=!0,s.splice(i,1);const l=s.slice(0);l[i]="**",t.push(l),i--}if(!this.preserveMultipleSlashes){for(let a=1;a<s.length-1;a++){const o=s[a];a===1&&o===""&&s[0]===""||(o==="."||o==="")&&(e=!0,s.splice(a,1),a--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let r=0;for(;(r=s.indexOf("..",r+1))!==-1;){const a=s[r-1];if(a&&a!=="."&&a!==".."&&a!=="**"){e=!0;const h=r===1&&s[r+1]==="**"?["."]:[];s.splice(r-1,2,...h),s.length===0&&s.push(""),r-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){const i=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(i){t[e]=[],t[s]=i;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let i=0,r=0,a=[],o="";for(;i<t.length&&r<e.length;)if(t[i]===e[r])a.push(o==="b"?e[r]:t[i]),i++,r++;else if(s&&t[i]==="**"&&e[r]===t[i+1])a.push(t[i]),i++;else if(s&&e[r]==="**"&&t[i]===e[r+1])a.push(e[r]),r++;else if(t[i]==="*"&&e[r]&&(this.options.dot||!e[r].startsWith("."))&&e[r]!=="**"){if(o==="b")return!1;o="a",a.push(t[i]),i++,r++}else if(e[r]==="*"&&t[i]&&(this.options.dot||!t[i].startsWith("."))&&t[i]!=="**"){if(o==="a")return!1;o="b",a.push(e[r]),i++,r++}else return!1;return t.length===e.length&&a}parseNegate(){if(this.nonegate)return;const t=this.pattern;let e=!1,s=0;for(let i=0;i<t.length&&t.charAt(i)==="!";i++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){const i=this.options;if(this.isWindows){const g=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),d=!g&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),b=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),T=!b&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),w=d?3:g?0:void 0,A=T?3:b?0:void 0;if(typeof w=="number"&&typeof A=="number"){const[_,v]=[t[w],e[A]];_.toLowerCase()===v.toLowerCase()&&(e[A]=_,A>w?e=e.slice(A):w>A&&(t=t.slice(w)))}}const{optimizationLevel:r=1}=this.options;r>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var a=0,o=0,h=t.length,c=e.length;a<h&&o<c;a++,o++){this.debug("matchOne loop");var l=e[o],p=t[a];if(this.debug(e,l,p),l===!1)return!1;if(l===N){this.debug("GLOBSTAR",[e,l,p]);var f=a,u=o+1;if(u===c){for(this.debug("** at the end");a<h;a++)if(t[a]==="."||t[a]===".."||!i.dot&&t[a].charAt(0)===".")return!1;return!0}for(;f<h;){var m=t[f];if(this.debug(`
globstar while`,t,f,e,u,m),this.matchOne(t.slice(f),e.slice(u),s))return this.debug("globstar found match!",f,h,m),!0;if(m==="."||m===".."||!i.dot&&m.charAt(0)==="."){this.debug("dot detected!",t,f,e,u);break}this.debug("globstar swallow a segment, and continue"),f++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,f,e,u),f===h))}let g;if(typeof l=="string"?(g=p===l,this.debug("string match",l,p,g)):(g=l.test(p),this.debug("pattern match",l,p,g)),!g)return!1}if(a===h&&o===c)return!0;if(a===h)return s;if(o===c)return a===h-1&&t[a]==="";throw new Error("wtf?")}braceExpand(){return Tt(this.pattern,this.options)}parse(t){I(t);const e=this.options;if(t==="**")return N;if(t==="")return"";let s,i=null;(s=t.match(oe))?i=e.dot?ce:he:(s=t.match(Yt))?i=(e.nocase?e.dot?ee:te:e.dot?Qt:Kt)(s[1]):(s=t.match(le))?i=(e.nocase?e.dot?pe:ue:e.dot?fe:ge)(s):(s=t.match(se))?i=e.dot?re:ie:(s=t.match(ne))&&(i=ae);const r=x.fromGlob(t,this.options).toMMPattern();return i&&typeof r=="object"&&Reflect.defineProperty(r,"test",{value:i}),r}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,s=e.noglobstar?we:e.dot?Ee:be,i=new Set(e.nocase?["i"]:[]);let r=t.map(h=>{const c=h.map(l=>{if(l instanceof RegExp)for(const p of l.flags.split(""))i.add(p);return typeof l=="string"?xe(l):l===N?N:l._src});return c.forEach((l,p)=>{const f=c[p+1],u=c[p-1];l!==N||u===N||(u===void 0?f!==void 0&&f!==N?c[p+1]="(?:\\/|"+s+"\\/)?"+f:c[p]=s:f===void 0?c[p-1]=u+"(?:\\/|"+s+")?":f!==N&&(c[p-1]=u+"(?:\\/|\\/"+s+"\\/)"+f,c[p+1]=N))}),c.filter(l=>l!==N).join("/")}).join("|");const[a,o]=t.length>1?["(?:",")"]:["",""];r="^"+a+r+o+"$",this.negate&&(r="^(?!"+r+").+$");try{this.regexp=new RegExp(r,[...i].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;const s=this.options;this.isWindows&&(t=t.split("\\").join("/"));const i=this.slashSplit(t);this.debug(this.pattern,"split",i);const r=this.set;this.debug(this.pattern,"set",r);let a=i[i.length-1];if(!a)for(let o=i.length-2;!a&&o>=0;o--)a=i[o];for(let o=0;o<r.length;o++){const h=r[o];let c=i;if(s.matchBase&&h.length===1&&(c=[a]),this.matchOne(c,h,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return R.defaults(t).Minimatch}}R.AST=x;R.Minimatch=G;R.escape=Xt;R.unescape=W;function Te(n){return n.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}function X(n,t){return!n.startsWith("*")&&t.startsWith("*")?-1:n.startsWith("*")&&!t.startsWith("*")?1:n.startsWith(t)?-1:t.startsWith(n)?1:n.localeCompare(t,"en")}function Oe(n){switch(n){case"image/jpeg":return"jpg";case"image/tiff":return"tif";default:return n.split(/\/|\+/gi)[1]}}function Ne(n){return{cache_matchers:De(n.settings.cache_configs),url_cache_matcher:dt(n.settings.url_param_cache),url_ignore_matcher:dt(n.settings.url_param_ignore),note_cache_matcher:gt(n.app,n.settings.note_param_cache),note_ignore_matcher:gt(n.app,n.settings.note_param_ignore)}}function gt(n,t="fallback_param"){return(e,s)=>{const i=n.metadataCache.getCache(e);if(!i?.frontmatter)return!1;const r=E.parseFrontMatterEntry(i.frontmatter,t);if(!r)return!1;if(String.isString(r))return H(r,s);if(!Array.isArray(r))return!1;for(const a of r)if(String.isString(a)&&H(a,s))return!0;return!1}}function H(n,t){return n.startsWith("http")?t.startsWith(n):new RegExp("^https?://(\\w+\\.)*"+n,"g").test(t)}function dt(n="fallback_param"){const t=new RegExp("[?&]"+n+"([&=\\s]|$)","i");return e=>t.test(e)}function De(n){return n.map(t=>{let e=r=>D.getParent(r);switch(t.mode){case"NOTE-FOLDER":e=r=>D.join(D.getParent(r),t.target);break;case"TARGET-PATH":e=r=>D.join(t.target,D.removeExt(r));break;case"TARGET-NOTE":e=r=>D.join(t.target,D.getBasename(r));break;case"TARGET":e=()=>t.target;break}const s=t.pattern!=="*"?r=>R(r,t.pattern):()=>!0,i=r=>{for(const{pattern:a,whitelisted:o}of t.remotes)if(a==="*"||H(a,r))return o;return!1};return{source:Object.freeze(t),isEnabled:()=>t.enabled,testRemote:i,testPath:s,resolve:e}})}async function Ae(n,t){t.debug(`Resolving extension for ${n}`);const e=J.getOrigin(n),s=await E.requestUrl({url:n,throw:!1,method:"HEAD",headers:{Referer:e?e+"/":""}});return L.assertResponse(n,s,"url-request-head"),Oe(s.headers["content-type"])}async function _e(n,t){t.debug(`Downloading ${n}`);const e=J.getOrigin(n),s=await E.requestUrl({url:n,throw:!1,method:"GET",headers:{Referer:e?e+"/":""}});return L.assertResponse(n,s,"url-request-get"),s.arrayBuffer}function mt(n){const t=[];let e=!1;for(const s of n)t.every(i=>i.pattern!==s.pattern)&&(s.pattern==="*"&&(e=!0),t.push(s));return e||t.push({pattern:"*",whitelisted:!1}),t.sort((s,i)=>X(s.pattern,i.pattern))}function wt(n){return n.map(({whitelisted:t,pattern:e})=>`${t?"w":"b"} ${e}`).join(`
`)}function Ce(n){if(!/\s+/.test(n))return[n,void 0];const t=n.split(/\s+/g);return t[0].startsWith("w")?[t[1],!0]:t[0].startsWith("b")?[t[1],!1]:[t[1],void 0]}function $e(n,t){const e=[];let s=!1;for(const i of t.split(/\n+/g)){const[r,a]=Ce(i);if(r==="*"&&(s=!0),!e.some(o=>o.pattern===r)){if(a!==void 0){e.push({pattern:r,whitelisted:a});continue}for(const o of n){if(r===o.pattern){e.push({pattern:r,whitelisted:o.whitelisted});break}if(Math.abs(r.length-o.pattern.length)===1){if(o.pattern.startsWith(r)){e.push({pattern:r,whitelisted:o.whitelisted});break}else if(r.startsWith(o.pattern)){e.push({pattern:r,whitelisted:o.whitelisted});break}}}e.some(o=>o.pattern===r)||e.push({pattern:r,whitelisted:!1})}}return s||e.push({pattern:"*",whitelisted:!1}),e.sort((i,r)=>X(i.pattern,r.pattern))}function Me(n){const t=[];let e=!1;for(const s of n.split(/\n+/g)){const i=s.trim().replace(/^[wb]\s+/,"");if(i==="*"){e=!0;continue}/^\w+:/gi.test(i)&&t.push("remove protocols, ex: 'http://'"),/^(\w+\.)+\w+/.test(i)||t.push("should include domain, ex: 'example.org/path'")}return e||t.unshift("should include a fallback '*'"),t}function V(n){const t=[];for(const e of n){const s=t.findIndex(i=>i.pattern===e.pattern);if(s===-1){t.push({...e,remotes:mt(e.remotes)});continue}e.remotes.length>t[s].remotes.length&&(t[s]={...e,remotes:mt(e.remotes)})}return t.sort((e,s)=>X(e.pattern,s.pattern))}function Pe(n,t){if(!t)return["invalid pattern"];for(const e of n)if(e.pattern===t)return[`duplicated pattern '${t}'`];return[]}const Le={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"},Et={LOWER:0,NORMAL:1,HIGHER:Number.MAX_SAFE_INTEGER-1},ke={LOWER:"Only cache static attachments",NORMAL:"Cache majority of attachments",HIGHER:"Cache all posible attachments"},je={NOTE:"Attachments next to the Note","NOTE-FOLDER":"Attachments on Subfolder",TARGET:"Attachments on Cache Folder","TARGET-NOTE":"Attachments on Cache Note Folder","TARGET-PATH":"Attachments on Cache Note Path"},bt={NOTE:"Store in the same folder as the note","NOTE-FOLDER":"Store next to the note in subfolder",TARGET:"Store in folder","TARGET-NOTE":"Store in subfolder with the note-name under","TARGET-PATH":"Store in a replated note-path under"},We=({mode:n,target:t})=>{switch(n){case"NOTE":return"folder/img1.jpg";case"NOTE-FOLDER":return`folder/${t}/img1.jpg`;case"TARGET":return`${t}/img1.jpg`;case"TARGET-NOTE":return`${t}/note1/img1.jpg`;case"TARGET-PATH":return`${t}/folder/note1/img1.jpg`}};class Be{#t;#e;#r;#s;#i;constructor(t,e){this.#t={...e,remotes:[...e.remotes]},this.#e=new E.Setting(t),this.#r=this.#e.settingEl.createDiv("cache-details"),this.#s=this.#e.settingEl.createDiv("cache-remotes"),this.#a(),this.#c(),this.#u()}#h(){return createFragment(t=>{t.append(`${this.#t.enabled?"Enabled":"Disabled"} path: `),t.createEl("code").appendText(this.#t.pattern)})}#n(){return this.#t.mode==="NOTE"?bt.NOTE:createFragment(t=>{t.append(bt[this.#t.mode]),t.createEl("code").appendText(this.#t.target)})}#a(){this.#e.setName(this.#h()),this.#e.setDesc(this.#n()),this.#t.pattern!=="*"&&this.#e.addExtraButton(t=>{t.setIcon("trash-2").setTooltip("Remove"),t.onClick(()=>{if(this.#t.pattern==="*"){console.warn("fallback config('*') can't be removed");return}this.#e.clear(),this.#e.settingEl.remove(),this.#m()})}),this.#e.addToggle(t=>{t.setValue(this.#t.enabled),t.onChange(e=>{this.#t.enabled=e,this.#f(),this.#e.setName(this.#h())})}),this.#e.addExtraButton(t=>{let e=!1;t.setIcon("chevron-down").setTooltip("Details"),t.onClick(()=>{e=!e,e?(t.setIcon("chevron-up"),this.#e.settingEl.addClass("show-details")):(t.setIcon("chevron-down"),this.#e.settingEl.removeClass("show-details"))})})}#o(){return createFragment(t=>{t.append("Attachments storage path, ex:");const e=t.createEl("ul"),s=e.createEl("li");s.append("Note: '"),s.createEl("b").appendText("folder/note1.md"),s.append("'");const i=e.createEl("li");i.append("Attachment: '"),i.createEl("b").appendText(We(this.#t)),i.append("'")})}#c(){let t;const e=new E.Setting(this.#r);e.setName("Attachments Storage"),e.setDesc(this.#o()),e.addDropdown(a=>{a.addOptions(je),a.setValue(this.#t.mode),a.onChange(o=>{this.#t.mode=o,this.#f(),e.setDesc(this.#o()),this.#t.mode==="NOTE"?(t?.setDisabled(!0),t?.setValue("")):(t?.setDisabled(!1),t?.setValue(this.#t.target))})}),e.addText(a=>{t=a,this.#t.mode==="NOTE"?a.setDisabled(!0):a.setValue(this.#t.target),a.onChange(o=>{this.#t.target=o,this.#f(),e.setDesc(this.#o())})});const s=createFragment(),i=s.createEl("ul"),r=new E.Setting(this.#r);r.setClass("remotes-input"),r.setName("Remotes List"),r.setDesc(s),r.addTextArea(a=>{this.#i=a,a.setValue(wt(this.#t.remotes)),a.onChange(o=>{i.empty();const h=Me(o);if(h.length>0){h.forEach(c=>i.createEl("li").appendText(c));return}this.#t.remotes=$e(this.#t.remotes,o),this.#f(),this.#u()})})}#g(t){return createFragment(e=>{e.append(`${t.whitelisted?"Whitelisted":"Blacklisted"} remote: `),e.createEl("code").appendText(t.pattern)})}#u(){this.#s.empty();for(const t of this.#t.remotes){const e=new E.Setting(this.#s);e.setName(this.#g(t)),t.pattern!=="*"&&e.addExtraButton(s=>{s.setIcon("trash-2").setTooltip("Remove"),s.onClick(()=>{const i=this.#t.remotes.filter(r=>r.pattern!==t.pattern);this.#l(i)})}),e.addButton(s=>{s.setButtonText(t.whitelisted?"Blacklist":"Whitelist"),s.onClick(()=>{const i=this.#t.remotes.map(r=>r.pattern!==t.pattern?r:{...r,whitelisted:!r.whitelisted});this.#l(i)})})}}#l(t){this.#t.remotes=t,this.#f(),this.#i?.setValue(wt(t)),this.#u()}#p=[];#d=[];#f(){for(const t of this.#p)t(this.#t)}#m(){for(const t of this.#d)t(this.#t)}onChange(t){return this.#p.push(t),this}onRemove(t){return this.#d.push(t),this}}function vt(n,t){return createFragment(e=>{e.appendText(t+". Check the "),e.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-attachments-cache/blob/main/docs/settings.md#${Te(n)}`}),e.appendText(".")})}class Fe extends E.PluginSettingTab{#t;#e;#r;constructor(t){super(t.app,t),this.#t=t,this.#e=t.settings}display(){this.containerEl.empty(),this.containerEl.addClass("attachments-cache-settings"),this.#s(),new E.Setting(this.containerEl).setName("Paths Settings").setHeading(),this.#i(),this.#r=this.containerEl.createDiv("configs-list"),this.#h()}#s(){const t=new E.Setting(this.containerEl);t.setName("Plugging LogLevel"),t.setDesc(vt("Plugging LogLevel","To check the plugin logs")),t.addDropdown(h=>{h.addOptions(Le),h.setValue(this.#e.plugin_level),h.onChange(this.#n.bind(this,"plugin_level"))});const e=new E.Setting(this.containerEl);e.setName("Plugin Priority"),e.setDesc(vt("Plugin Priority","Affects the attachments been cached")),e.addDropdown(h=>{h.addOptions(ke),h.setValue(this.#e.plugin_priority),h.onChange(this.#n.bind(this,"plugin_priority"))});const s=new E.Setting(this.containerEl);s.setName("Keep Special Characters"),s.setDesc("If you are having problems with special characters on paths, disable this setting."),s.addToggle(h=>{h.setValue(this.#e.allow_characters),h.onChange(this.#n.bind(this,"allow_characters"))});const i=new E.Setting(this.containerEl);i.setName("URL Param Ignore"),i.setDesc("Overrides rules and ignores the attachment."),i.addText(h=>{h.setValue(this.#e.url_param_ignore),h.onChange(this.#n.bind(this,"url_param_ignore"))});const r=new E.Setting(this.containerEl);r.setName("URL Param Cache"),r.setDesc("Overrides rules and caches the attachment."),r.addText(h=>{h.setValue(this.#e.url_param_cache),h.onChange(this.#n.bind(this,"url_param_cache"))});const a=new E.Setting(this.containerEl);a.setName("Note Frontmatter Param Ignore"),a.setDesc("Overrides rules and ignores the Note attachments."),a.addText(h=>{h.setValue(this.#e.note_param_ignore),h.onChange(this.#n.bind(this,"note_param_ignore"))});const o=new E.Setting(this.containerEl);o.setName("Note Frontmatter Param Cache"),o.setDesc("Overrides rules and caches the Note attachments."),o.addText(h=>{h.setValue(this.#e.note_param_cache),h.onChange(this.#n.bind(this,"note_param_cache"))})}#i(){let t=null,e=null,s=null;const i=createFragment(),r=i.createEl("ul"),a=new E.Setting(this.containerEl);a.setClass("configs-header"),a.setName("Duplicate Vault Path"),a.setDesc(i),a.addText(o=>{t=o,o.setPlaceholder("glob: **/*.md"),o.onChange(h=>{if(r.empty(),!h){s?.setDisabled(!0);return}const c=Pe(this.#e.cache_configs,h);if(c.length>0){c.forEach(l=>r.createEl("li").appendText(l));return}s?.setDisabled(c.length>0)})}),a.addDropdown(o=>{e=o,o.setValue("*");for(const h of this.#e.cache_configs)o.addOption(h.pattern,h.pattern)}),a.addButton(o=>{s=o,o.setButtonText("Duplicate"),o.setDisabled(!0),o.onClick(()=>{const h=t?.getValue(),c=e?.getValue()??"*",l=this.#e.cache_configs.find(f=>f.pattern===c);if(!h||!l){console.warn("unexpected state");return}const p=this.#e.cache_configs;p.push({pattern:h,remotes:l.remotes,enabled:l.enabled,target:l.target,mode:l.mode}),this.#a(p)})})}#h(){if(this.#r){this.#r.empty();for(const t of this.#e.cache_configs){const e=new Be(this.#r,t);e.onChange(s=>{const i=this.#e.cache_configs.map(r=>r.pattern===s.pattern?s:r);this.#a(i)}),e.onRemove(s=>{const i=this.#e.cache_configs.filter(r=>r.pattern!==s.pattern);this.#a(i)})}}}#n(t,e){this.#e[t]=e,this.#t.saveSettings()}#a(t){this.#e.cache_configs=V(t),this.#t.saveSettings()}}class Ie{constructor(t){this.plugin=t}#t;syncPriority(){this.#t&&(this.#t.sortOrder=Et[this.plugin.settings.plugin_priority])}registerMarkdownProcessor(){this.#t=this.plugin.registerMarkdownPostProcessor(this.#e.bind(this),Et[this.plugin.settings.plugin_priority])}async#e(t,{sourcePath:e}){for(const s of Array.from(t.querySelectorAll("img"))){const i=await this.plugin.api.cache(e,s.src);i&&(s.src=i)}}}class Y{log;#t;#e;#r=new Map;constructor(t){this.log=t.log.make(Y.name),this.#t=t.app.vault,this.#e=t}mayCache(t,e){return!!this.#s({notepath:t,remote:e},this.log)}async isCached(t,e){const s=await this.resolve(t,e);return s?await this.#t.adapter.exists(s):!1}async resource(t,e){const s=await this.resolve(t,e);if(!s)return;const i=this.#t.getFileByPath(s);return i?this.#t.getResourcePath(i):void 0}async resolve(t,e){const s=this.log.group();try{s.debug("Resolving",{notepath:t,remote:e});const i=await this.#i({notepath:t,remote:e},s);if(i)return s.flush("remote resolved",e),i}catch(i){s.error(i)}s.flush("remote could not be resolved",e)}async cache(t,e){const s=this.log.group();try{s.debug("Caching",{notepath:t,remote:e});const i=await this.#i({notepath:t,remote:e},s);if(!i){s.debug("remote could not be resolved"),s.flush("remote was not cached",e);return}const r=this.#t.getFileByPath(i);if(r)return s.flush("remote is already in cache",e),this.#t.getResourcePath(r);const a=await _e(e,s);await this.#t.adapter.mkdir(D.getParent(i)),await this.#t.adapter.writeBinary(i,a);const o=this.#t.getFileByPath(i);if(o)return s.flush("remote was cached",e),this.#t.getResourcePath(o)}catch(i){s.error(i)}s.flush("remote could not be cached",e)}#s(t,e){e.debug("searching an active cache rule");const s=this.#e.state.cache_matchers.find(i=>i.testPath(t.notepath));if(!s?.isEnabled()){e.debug("notepath does not match and active rule");return}if(this.#e.state.url_ignore_matcher(t.remote)){e.debug("remote has to be ignored (URL param)");return}if(this.#e.state.url_cache_matcher(t.remote))return e.debug("remote has to be cached (URL param)"),s;if(this.#e.state.note_ignore_matcher(t.notepath,t.remote)){e.debug("remote has to be ignored (Frontmatter param)");return}if(this.#e.state.note_cache_matcher(t.notepath,t.remote))return e.debug("remote has to be cached (Frontmatter param)"),s;if(s.testRemote(t.remote))return e.debug("remote matches an active rule"),s;e.debug("remote does not match and active rule")}async#i(t,e){const s=J.getBaseurl(t.remote);if(!s)throw e.debug("remote is not a valid URL"),new L("remote-no-url",`remote(${t.remote})`);const i=this.#r.get(s);if(i)return e.debug("remote resolved from cache",i),i;const r=this.#s(t,e);if(!r){e.debug("a cache rule could not be matched");return}const a=D.getBasename(s),o=D.getExt(s)??await Ae(t.remote,e);if(!a||!o)throw e.debug(`name(${a}) or ext(${o}) could not be resolved`),new L("remote-no-ext");const h=D.join(r.resolve(t.notepath),a+"."+o),c=this.#e.settings.allow_characters?E.normalizePath(h):E.normalizePath(D.normalize(h));return this.#r.set(s,c),e.debug("remote resolved",c),c}}const yt={plugin_level:"WARN",plugin_priority:"NORMAL",allow_characters:!1,url_param_cache:"cache_file",url_param_ignore:"ignore_file",note_param_cache:"cache_from",note_param_ignore:"cache_unless",cache_configs:[{pattern:"*",remotes:[{whitelisted:!1,pattern:"*"}],enabled:!1,target:"",mode:"NOTE"}]};class K extends E.Plugin{log=B.consoleLogger(K.name);settings={};state={};api;markdown;constructor(t,e){super(t,e),this.log.setLevel(S.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new Y(this),this.markdown=new Ie(this),window.AttachmentsCache=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new Fe(this)),this.markdown.registerMarkdownProcessor()}async loadSettings(){const t=this.log.group("Loading Settings"),{cache_configs:e,...s}=await this.loadData()||{};this.settings=Object.assign({},yt,s),this.settings.cache_configs=V([...e??[],...yt.cache_configs]),t.debug("Loaded: ",this.settings),this.#t(t),t.flush("Loaded Settings")}async saveSettings(){const t=this.log.group("Saving Settings"),e=Object.assign({},this.settings);e.cache_configs=V(e.cache_configs),await this.saveData(e),t.debug("Saved: ",e),this.#t(t),t.flush("Saved Settings")}#t(t){t.info("Preparing state"),this.log.setLevel(S[this.settings.plugin_level]),this.markdown.syncPriority(),this.state=Ne(this)}}module.exports=K;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsdWlzLmJzK29ic2lkaWFuLWZuY0AxLjQuMi9ub2RlX21vZHVsZXMvQGx1aXMuYnMvb2JzaWRpYW4tZm5jL2xpYi9vYnNpZGlhbi1mbmMuZXNtLmpzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxpdHkvQXR0YWNobWVudEVycm9yLnRzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JhbGFuY2VkLW1hdGNoQDEuMC4yL25vZGVfbW9kdWxlcy9iYWxhbmNlZC1tYXRjaC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9icmFjZS1leHBhbnNpb25AMi4wLjEvbm9kZV9tb2R1bGVzL2JyYWNlLWV4cGFuc2lvbi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taW5pbWF0Y2hAMTAuMC4xL25vZGVfbW9kdWxlcy9taW5pbWF0Y2gvZGlzdC9lc20vYXNzZXJ0LXZhbGlkLXBhdHRlcm4uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWluaW1hdGNoQDEwLjAuMS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvZXNtL2JyYWNlLWV4cHJlc3Npb25zLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pbmltYXRjaEAxMC4wLjEvbm9kZV9tb2R1bGVzL21pbmltYXRjaC9kaXN0L2VzbS91bmVzY2FwZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taW5pbWF0Y2hAMTAuMC4xL25vZGVfbW9kdWxlcy9taW5pbWF0Y2gvZGlzdC9lc20vYXN0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pbmltYXRjaEAxMC4wLjEvbm9kZV9tb2R1bGVzL21pbmltYXRjaC9kaXN0L2VzbS9lc2NhcGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWluaW1hdGNoQDEwLjAuMS9ub2RlX21vZHVsZXMvbWluaW1hdGNoL2Rpc3QvZXNtL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxpdHkvc3RyaW5ncy50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L3N0YXRlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxpdHkvcmVtb3Rlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsaXR5L2NvbmZpZ3MudHMiLCIuLi8uLi8uLi8uLi9zcmMvc2V0dGluZ3MvdmFsdWVzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL0NhY2hlU2V0dGluZ3MudHMiLCIuLi8uLi8uLi8uLi9zcmMvc2V0dGluZ3MvU2V0dGluZ3NUYWIudHMiLCIuLi8uLi8uLi8uLi9zcmMvZmlsZXN5c3RlbS9NYXJrZG93bkhhbmRsZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvQXR0YWNobWVudHNDYWNoZUFQSS50cyIsIi4uLy4uLy4uLy4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIyLXByZXNlbnQgTHVpcyBCcmF5YW5cbiAqIEBsdWlzLmJzL29ic2lkaWFuLWZuY0AxLjQuMiBpcyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIEBzb3VyY2UgaHR0cHM6Ly9naXRodWIuY29tL2x1aXNicy9vYnNpZGlhbi1mbmNcbiAqL1xuaW1wb3J0IHsgU2NvcGUgYXMgZHQsIG5vcm1hbGl6ZVBhdGggYXMgZ3QsIFRGb2xkZXIgYXMgRiwgVEZpbGUgYXMgQiB9IGZyb20gXCJvYnNpZGlhblwiO1xuY2xhc3MgcHQge1xuICBlcnJvcih0LCBuKSB7XG4gICAgY29uc29sZS5lcnJvcih0LCAuLi5uKTtcbiAgfVxuICB3YXJuKHQsIG4pIHtcbiAgICBjb25zb2xlLndhcm4odCwgLi4ubik7XG4gIH1cbiAgaW5mbyh0LCBuKSB7XG4gICAgY29uc29sZS5pbmZvKHQsIC4uLm4pO1xuICB9XG4gIGRlYnVnKHQsIG4pIHtcbiAgICBjb25zb2xlLmRlYnVnKHQsIC4uLm4pO1xuICB9XG4gIHRyYWNlKHQsIG4pIHtcbiAgICBjb25zb2xlLnRyYWNlKHQsIC4uLm4pO1xuICB9XG4gIGdyb3VwKHQsIG4pIHtcbiAgICByZXR1cm4gY29uc29sZS5ncm91cENvbGxhcHNlZCh0LCAuLi5uKSwgY29uc29sZS5ncm91cEVuZDtcbiAgfVxufVxuY29uc3QgZyA9IE9iamVjdC5mcmVlemUoe1xuICBUUkFDRTogMSxcbiAgREVCVUc6IDIsXG4gIElORk86IDMsXG4gIFdBUk46IDQsXG4gIEVSUk9SOiA1XG59KSwgd3QgPSBPYmplY3QuZnJlZXplKHtcbiAgMTogXCJUUkFDRVwiLFxuICAyOiBcIkRFQlVHXCIsXG4gIDM6IFwiIElORk9cIixcbiAgNDogXCIgV0FSTlwiLFxuICA1OiBcIkVSUk9SXCJcbn0pO1xuY2xhc3MgViB7XG4gICN0O1xuICAjcztcbiAgI2U7XG4gICNuID0gW107XG4gICNpID0gW107XG4gIC8qKiBPdmVycmlkZXMgY2hhaW4gaW5oZXJpdGVkIHZhbHVlLiAqL1xuICBnZXQgbGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3MgPyB0aGlzLiNzIDogdGhpcy4jdD8ubGV2ZWwgPz8gZy5XQVJOO1xuICB9XG4gIGdldCBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2UgPyB0aGlzLiNlIDogdGhpcy4jdD8uZm9ybWF0ID8/IFwiW2hoOm1tOnNzLm1zXSBsZXZlbCAobmFtZXNwYWNlKTpcIjtcbiAgfVxuICBnZXQgbmFtZXNwYWNlKCkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRoaXMuI2kubGVuZ3RoIC0gMTsgbisrKVxuICAgICAgdC5wdXNoKHRoaXMuI2lbbl1bMF0pO1xuICAgIHJldHVybiB0LnB1c2godGhpcy4jaS5hdCgtMSkgPz8gXCJcIiksIHQuam9pbihcIi5cIik7XG4gIH1cbiAgZ2V0IGRyaXZlcnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUodGhpcy4jbik7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBsZXZlbCBpcyBwcm9wYWdhdGVkLiAqL1xuICBzZXRMZXZlbCh0KSB7XG4gICAgcmV0dXJuIHRoaXMuI3MgPSB0LCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2Ugb24gZm9ybWF0IGlzIHByb3BhZ2V0ZWQuXG4gICAqIFRoZSB2YWxpZCBwbGFjZWhvbGRlcnMgYXJlOlxuICAgKiAtIGBoaGAgKGhvdXIpXG4gICAqIC0gYG1tYCAobWludXRlKVxuICAgKiAtIGBzc2AgKHNlY29uZClcbiAgICogLSBgbXNgIChtaWxsaXNlY29uZClcbiAgICogLSBgbGV2ZWxgXG4gICAqIC0gYG5hbWVzcGFjZWBcbiAgICogQGV4YW1wbGUgJ1toaDptbTpzcy5tc10gbGV2ZWwgKG5hbWVzcGFjZSk6J1xuICAgKi9cbiAgc2V0Rm9ybWF0KHQpIHtcbiAgICByZXR1cm4gdGhpcy4jZSA9IHQsIHRoaXM7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBkcml2ZXJzIGlzIG5vdCBwcm9wYWdhdGVkIGFmdGVyIGNvbnN0cnVjdGlvbi4gKi9cbiAgYWRkRHJpdmVycyguLi50KSB7XG4gICAgZm9yIChjb25zdCBuIG9mIHQpXG4gICAgICBBcnJheS5pc0FycmF5KG4pID8gdGhpcy4jbi5wdXNoKC4uLm4pIDogbiAmJiB0aGlzLiNuLnB1c2gobik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIENoYW5nZSBvbiBuYW1lc3BhY2VzIGlzIG5vdCBwcm9wYWdhdGVkIGFmdGVyIGNvbnN0cnVjdGlvbi4gKi9cbiAgYWRkTmFtZXNwYWNlcyguLi50KSB7XG4gICAgZm9yIChjb25zdCBuIG9mIHQpXG4gICAgICBBcnJheS5pc0FycmF5KG4pID8gdGhpcy4jaS5wdXNoKC4uLm4pIDogbiAmJiB0aGlzLiNpLnB1c2gobik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIFN0YXJ0cyBhIExvZ2dlcnMgY2hhaW4uICovXG4gIHN0YXRpYyBjb25zb2xlTG9nZ2VyKHQpIHtcbiAgICBjb25zdCBuID0gbmV3IFYoKTtcbiAgICByZXR1cm4gbi5zZXRMZXZlbChnLldBUk4pLCBuLmFkZERyaXZlcnMobmV3IHB0KCkpLCBuLmFkZE5hbWVzcGFjZXModCksIG47XG4gIH1cbiAgLyoqIFNwYXducyBhIFN1Yi1Mb2dnZXIuICovXG4gIG1ha2UodCkge1xuICAgIGNvbnN0IG4gPSBuZXcgVigpO1xuICAgIHJldHVybiBuLiN0ID0gdGhpcywgbi5hZGREcml2ZXJzKHRoaXMuI24pLCBuLmFkZE5hbWVzcGFjZXModGhpcy4jaSwgdCksIG47XG4gIH1cbiAgLyoqIFByZXBhcmUgdGhlIGxvZyBwcmVmaXggYmFzZWQgb24gYHRoaXMuZm9ybWF0YCAqL1xuICBwcmVmaXgodCwgbikge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdC5yZXBsYWNlKFwiaGhcIiwgU3RyaW5nKHQuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgXCIwXCIpKS5yZXBsYWNlKFwibW1cIiwgU3RyaW5nKHQuZ2V0TWludXRlcygpKS5wYWRTdGFydCgyLCBcIjBcIikpLnJlcGxhY2UoXCJzc1wiLCBTdHJpbmcodC5nZXRTZWNvbmRzKCkpLnBhZFN0YXJ0KDIsIFwiMFwiKSkucmVwbGFjZShcIm1zXCIsIFN0cmluZyh0LmdldE1pbGxpc2Vjb25kcygpKS5wYWRTdGFydCgzLCBcIjBcIikpLnJlcGxhY2UoXCJsZXZlbFwiLCB3dFtuXSkucmVwbGFjZShcIm5hbWVzcGFjZVwiLCB0aGlzLm5hbWVzcGFjZSk7XG4gIH1cbiAgbG9nKHQsIG4sIHMpIHtcbiAgICBpZiAodGhpcy5sZXZlbCA+IG4pIHJldHVybjtcbiAgICBjb25zdCBpID0gdGhpcy5wcmVmaXgodCwgbik7XG4gICAgc3dpdGNoICh0aGlzLmxldmVsKSB7XG4gICAgICBjYXNlIGcuRVJST1I6XG4gICAgICAgIHRoaXMuI24uZm9yRWFjaCgocikgPT4gci5lcnJvcihpLCBzKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnLldBUk46XG4gICAgICAgIHRoaXMuI24uZm9yRWFjaCgocikgPT4gci53YXJuKGksIHMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGcuSU5GTzpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLmluZm8oaSwgcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZy5ERUJVRzpcbiAgICAgICAgdGhpcy4jbi5mb3JFYWNoKChyKSA9PiByLmRlYnVnKGksIHMpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLiNuLmZvckVhY2goKHIpID0+IHIudHJhY2UoaSwgcykpO1xuICAgIH1cbiAgfVxuICBlcnJvciguLi50KSB7XG4gICAgdGhpcy5sb2coLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuRVJST1IsIHQpO1xuICB9XG4gIHdhcm4oLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLldBUk4sIHQpO1xuICB9XG4gIGluZm8oLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpO1xuICB9XG4gIGRlYnVnKC4uLnQpIHtcbiAgICB0aGlzLmxvZygvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgZy5ERUJVRywgdCk7XG4gIH1cbiAgdHJhY2UoLi4udCkge1xuICAgIHRoaXMubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLlRSQUNFLCB0KTtcbiAgfVxuICAvLyBvbihsb2dnZXI6IHVua25vd24pOiBMb2dnZXIge1xuICAvLyAgIHJldHVybiBsb2dnZXIgJiYgbG9nZ2VyIGluc3RhbmNlb2YgTG9nZ2VyID8gbmV3IExvZ2dlcldyYXBwZXIodGhpcy5uYW1lc3BhY2UsIGxvZ2dlcikgOiB0aGlzXG4gIC8vIH1cbiAgLy8gLyoqIFNwYXducyBhIFN1Yi1Mb2dnZXIsIHRoYXQgZ3JvdXBzIHRoZSBsb2dzLiAqL1xuICBncm91cCguLi50KSB7XG4gICAgY29uc3QgbiA9IG5ldyBtdCgpO1xuICAgIHJldHVybiBuLiN0ID0gdGhpcywgbi5hZGREcml2ZXJzKHRoaXMuI24pLCBuLmFkZE5hbWVzcGFjZXModGhpcy4jaSksIHQubGVuZ3RoICYmIG4ubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpLCBuO1xuICB9XG59XG5jbGFzcyBtdCBleHRlbmRzIFYge1xuICAjdCA9IFtdO1xuICBsb2codCwgbiwgcykge1xuICAgIHRoaXMubGV2ZWwgPiBuIHx8IHRoaXMuI3QucHVzaCh7IHRpbWVzdGFtcDogdCwgbGV2ZWw6IG4sIGNvbnRlbnQ6IHMgfSk7XG4gIH1cbiAgZmx1c2goLi4udCkge1xuICAgIGlmICh0aGlzLiN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgc3VwZXIubG9nKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBnLklORk8sIHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuID0gdGhpcy5wcmVmaXgoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGcuSU5GTyksIHMgPSB0aGlzLmRyaXZlcnMubWFwKFxuICAgICAgKGkpID0+IGkuZ3JvdXAobiwgdClcbiAgICApO1xuICAgIGZvciAoY29uc3QgeyB0aW1lc3RhbXA6IGksIGxldmVsOiByLCBjb250ZW50OiBvIH0gb2YgdGhpcy4jdClcbiAgICAgIHN1cGVyLmxvZyhpLCByLCBvKTtcbiAgICBzLmZvckVhY2goKGkpID0+IGkoKSksIHRoaXMuI3QgPSBbXTtcbiAgfVxufVxuY2xhc3MgeXQge1xuICBjb25zdHJ1Y3Rvcih0LCBuKSB7XG4gICAgdGhpcy5hcHAgPSB0LCB0aGlzLmNvbnRhaW5lckVsID0gbiwgdGhpcy5zY29wZSA9IG5ldyBkdCgpLCB0aGlzLndyYXBwZXJFbCA9IGNyZWF0ZURpdihcInN1Z2dlc3Rpb25zLXRvb2x0aXBcIik7XG4gIH1cbiAgc2NvcGU7XG4gIHdyYXBwZXJFbDtcbiAgcmVnaXN0ZXJMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJFc2NhcGVcIiwgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIHRoaXMuYXBwLmtleW1hcC5wdXNoU2NvcGUodGhpcy5zY29wZSksIHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy53cmFwcGVyRWwpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuYXBwLmtleW1hcC5wb3BTY29wZSh0aGlzLnNjb3BlKSwgdGhpcy53cmFwcGVyRWwuZW1wdHkoKSwgdGhpcy53cmFwcGVyRWwuZGV0YWNoKCk7XG4gIH1cbn1cbmNvbnN0IFkgPSBNYXRoLm1pbiwgQSA9IE1hdGgubWF4LCBIID0gTWF0aC5yb3VuZCwgeCA9IChlKSA9PiAoe1xuICB4OiBlLFxuICB5OiBlXG59KTtcbmZ1bmN0aW9uIFooZSkge1xuICByZXR1cm4gZS5zcGxpdChcIi1cIilbMF07XG59XG5mdW5jdGlvbiB4dChlKSB7XG4gIHJldHVybiBlLnNwbGl0KFwiLVwiKVsxXTtcbn1cbmZ1bmN0aW9uIEV0KGUpIHtcbiAgcmV0dXJuIGUgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIjtcbn1cbmZ1bmN0aW9uIGJ0KGUpIHtcbiAgcmV0dXJuIGUgPT09IFwieVwiID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcbn1cbmZ1bmN0aW9uIHR0KGUpIHtcbiAgcmV0dXJuIFtcInRvcFwiLCBcImJvdHRvbVwiXS5pbmNsdWRlcyhaKGUpKSA/IFwieVwiIDogXCJ4XCI7XG59XG5mdW5jdGlvbiB2dChlKSB7XG4gIHJldHVybiBFdCh0dChlKSk7XG59XG5mdW5jdGlvbiBldChlKSB7XG4gIGNvbnN0IHtcbiAgICB4OiB0LFxuICAgIHk6IG4sXG4gICAgd2lkdGg6IHMsXG4gICAgaGVpZ2h0OiBpXG4gIH0gPSBlO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBzLFxuICAgIGhlaWdodDogaSxcbiAgICB0b3A6IG4sXG4gICAgbGVmdDogdCxcbiAgICByaWdodDogdCArIHMsXG4gICAgYm90dG9tOiBuICsgaSxcbiAgICB4OiB0LFxuICAgIHk6IG5cbiAgfTtcbn1cbmZ1bmN0aW9uIFgoZSwgdCwgbikge1xuICBsZXQge1xuICAgIHJlZmVyZW5jZTogcyxcbiAgICBmbG9hdGluZzogaVxuICB9ID0gZTtcbiAgY29uc3QgciA9IHR0KHQpLCBvID0gdnQodCksIGMgPSBidChvKSwgYSA9IFoodCksIGwgPSByID09PSBcInlcIiwgdSA9IHMueCArIHMud2lkdGggLyAyIC0gaS53aWR0aCAvIDIsIGYgPSBzLnkgKyBzLmhlaWdodCAvIDIgLSBpLmhlaWdodCAvIDIsIGQgPSBzW2NdIC8gMiAtIGlbY10gLyAyO1xuICBsZXQgaDtcbiAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSBcInRvcFwiOlxuICAgICAgaCA9IHtcbiAgICAgICAgeDogdSxcbiAgICAgICAgeTogcy55IC0gaS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiB1LFxuICAgICAgICB5OiBzLnkgKyBzLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgaCA9IHtcbiAgICAgICAgeDogcy54ICsgcy53aWR0aCxcbiAgICAgICAgeTogZlxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBoID0ge1xuICAgICAgICB4OiBzLnggLSBpLndpZHRoLFxuICAgICAgICB5OiBmXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGggPSB7XG4gICAgICAgIHg6IHMueCxcbiAgICAgICAgeTogcy55XG4gICAgICB9O1xuICB9XG4gIHN3aXRjaCAoeHQodCkpIHtcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIGhbb10gLT0gZCAqIChuICYmIGwgPyAtMSA6IDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVuZFwiOlxuICAgICAgaFtvXSArPSBkICogKG4gJiYgbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gaDtcbn1cbmNvbnN0IFJ0ID0gYXN5bmMgKGUsIHQsIG4pID0+IHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudDogcyA9IFwiYm90dG9tXCIsXG4gICAgc3RyYXRlZ3k6IGkgPSBcImFic29sdXRlXCIsXG4gICAgbWlkZGxld2FyZTogciA9IFtdLFxuICAgIHBsYXRmb3JtOiBvXG4gIH0gPSBuLCBjID0gci5maWx0ZXIoQm9vbGVhbiksIGEgPSBhd2FpdCAoby5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogby5pc1JUTCh0KSk7XG4gIGxldCBsID0gYXdhaXQgby5nZXRFbGVtZW50UmVjdHMoe1xuICAgIHJlZmVyZW5jZTogZSxcbiAgICBmbG9hdGluZzogdCxcbiAgICBzdHJhdGVneTogaVxuICB9KSwge1xuICAgIHg6IHUsXG4gICAgeTogZlxuICB9ID0gWChsLCBzLCBhKSwgZCA9IHMsIGggPSB7fSwgTCA9IDA7XG4gIGZvciAobGV0IHAgPSAwOyBwIDwgYy5sZW5ndGg7IHArKykge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWU6IGIsXG4gICAgICBmbjogSVxuICAgIH0gPSBjW3BdLCB7XG4gICAgICB4OiBPLFxuICAgICAgeTogVyxcbiAgICAgIGRhdGE6IFAsXG4gICAgICByZXNldDogQ1xuICAgIH0gPSBhd2FpdCBJKHtcbiAgICAgIHg6IHUsXG4gICAgICB5OiBmLFxuICAgICAgaW5pdGlhbFBsYWNlbWVudDogcyxcbiAgICAgIHBsYWNlbWVudDogZCxcbiAgICAgIHN0cmF0ZWd5OiBpLFxuICAgICAgbWlkZGxld2FyZURhdGE6IGgsXG4gICAgICByZWN0czogbCxcbiAgICAgIHBsYXRmb3JtOiBvLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiBlLFxuICAgICAgICBmbG9hdGluZzogdFxuICAgICAgfVxuICAgIH0pO1xuICAgIHUgPSBPID8/IHUsIGYgPSBXID8/IGYsIGggPSB7XG4gICAgICAuLi5oLFxuICAgICAgW2JdOiB7XG4gICAgICAgIC4uLmhbYl0sXG4gICAgICAgIC4uLlBcbiAgICAgIH1cbiAgICB9LCBDICYmIEwgPD0gNTAgJiYgKEwrKywgdHlwZW9mIEMgPT0gXCJvYmplY3RcIiAmJiAoQy5wbGFjZW1lbnQgJiYgKGQgPSBDLnBsYWNlbWVudCksIEMucmVjdHMgJiYgKGwgPSBDLnJlY3RzID09PSAhMCA/IGF3YWl0IG8uZ2V0RWxlbWVudFJlY3RzKHtcbiAgICAgIHJlZmVyZW5jZTogZSxcbiAgICAgIGZsb2F0aW5nOiB0LFxuICAgICAgc3RyYXRlZ3k6IGlcbiAgICB9KSA6IEMucmVjdHMpLCB7XG4gICAgICB4OiB1LFxuICAgICAgeTogZlxuICAgIH0gPSBYKGwsIGQsIGEpKSwgcCA9IC0xKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHUsXG4gICAgeTogZixcbiAgICBwbGFjZW1lbnQ6IGQsXG4gICAgc3RyYXRlZ3k6IGksXG4gICAgbWlkZGxld2FyZURhdGE6IGhcbiAgfTtcbn07XG5mdW5jdGlvbiAkKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyA8IFwidVwiO1xufVxuZnVuY3Rpb24gRChlKSB7XG4gIHJldHVybiBudChlKSA/IChlLm5vZGVOYW1lIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkgOiBcIiNkb2N1bWVudFwiO1xufVxuZnVuY3Rpb24gdyhlKSB7XG4gIHZhciB0O1xuICByZXR1cm4gKGUgPT0gbnVsbCB8fCAodCA9IGUub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IHQuZGVmYXVsdFZpZXcpIHx8IHdpbmRvdztcbn1cbmZ1bmN0aW9uIHYoZSkge1xuICB2YXIgdDtcbiAgcmV0dXJuICh0ID0gKG50KGUpID8gZS5vd25lckRvY3VtZW50IDogZS5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogdC5kb2N1bWVudEVsZW1lbnQ7XG59XG5mdW5jdGlvbiBudChlKSB7XG4gIHJldHVybiAkKCkgPyBlIGluc3RhbmNlb2YgTm9kZSB8fCBlIGluc3RhbmNlb2YgdyhlKS5Ob2RlIDogITE7XG59XG5mdW5jdGlvbiBtKGUpIHtcbiAgcmV0dXJuICQoKSA/IGUgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGUgaW5zdGFuY2VvZiB3KGUpLkVsZW1lbnQgOiAhMTtcbn1cbmZ1bmN0aW9uIEUoZSkge1xuICByZXR1cm4gJCgpID8gZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGUgaW5zdGFuY2VvZiB3KGUpLkhUTUxFbGVtZW50IDogITE7XG59XG5mdW5jdGlvbiBxKGUpIHtcbiAgcmV0dXJuICEkKCkgfHwgdHlwZW9mIFNoYWRvd1Jvb3QgPiBcInVcIiA/ICExIDogZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgfHwgZSBpbnN0YW5jZW9mIHcoZSkuU2hhZG93Um9vdDtcbn1cbmZ1bmN0aW9uIGsoZSkge1xuICBjb25zdCB7XG4gICAgb3ZlcmZsb3c6IHQsXG4gICAgb3ZlcmZsb3dYOiBuLFxuICAgIG92ZXJmbG93WTogcyxcbiAgICBkaXNwbGF5OiBpXG4gIH0gPSB5KGUpO1xuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVufGNsaXAvLnRlc3QodCArIHMgKyBuKSAmJiAhW1wiaW5saW5lXCIsIFwiY29udGVudHNcIl0uaW5jbHVkZXMoaSk7XG59XG5mdW5jdGlvbiBMdChlKSB7XG4gIHJldHVybiBbXCJ0YWJsZVwiLCBcInRkXCIsIFwidGhcIl0uaW5jbHVkZXMoRChlKSk7XG59XG5mdW5jdGlvbiBNKGUpIHtcbiAgcmV0dXJuIFtcIjpwb3BvdmVyLW9wZW5cIiwgXCI6bW9kYWxcIl0uc29tZSgodCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZS5tYXRjaGVzKHQpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiB6KGUpIHtcbiAgY29uc3QgdCA9IEcoKSwgbiA9IG0oZSkgPyB5KGUpIDogZTtcbiAgcmV0dXJuIFtcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVwiLCBcInNjYWxlXCIsIFwicm90YXRlXCIsIFwicGVyc3BlY3RpdmVcIl0uc29tZSgocykgPT4gbltzXSA/IG5bc10gIT09IFwibm9uZVwiIDogITEpIHx8IChuLmNvbnRhaW5lclR5cGUgPyBuLmNvbnRhaW5lclR5cGUgIT09IFwibm9ybWFsXCIgOiAhMSkgfHwgIXQgJiYgKG4uYmFja2Ryb3BGaWx0ZXIgPyBuLmJhY2tkcm9wRmlsdGVyICE9PSBcIm5vbmVcIiA6ICExKSB8fCAhdCAmJiAobi5maWx0ZXIgPyBuLmZpbHRlciAhPT0gXCJub25lXCIgOiAhMSkgfHwgW1widHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlXCIsIFwic2NhbGVcIiwgXCJyb3RhdGVcIiwgXCJwZXJzcGVjdGl2ZVwiLCBcImZpbHRlclwiXS5zb21lKChzKSA9PiAobi53aWxsQ2hhbmdlIHx8IFwiXCIpLmluY2x1ZGVzKHMpKSB8fCBbXCJwYWludFwiLCBcImxheW91dFwiLCBcInN0cmljdFwiLCBcImNvbnRlbnRcIl0uc29tZSgocykgPT4gKG4uY29udGFpbiB8fCBcIlwiKS5pbmNsdWRlcyhzKSk7XG59XG5mdW5jdGlvbiBDdChlKSB7XG4gIGxldCB0ID0gUihlKTtcbiAgZm9yICg7IEUodCkgJiYgIVModCk7ICkge1xuICAgIGlmICh6KHQpKVxuICAgICAgcmV0dXJuIHQ7XG4gICAgaWYgKE0odCkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB0ID0gUih0KTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIEcoKSB7XG4gIHJldHVybiB0eXBlb2YgQ1NTID4gXCJ1XCIgfHwgIUNTUy5zdXBwb3J0cyA/ICExIDogQ1NTLnN1cHBvcnRzKFwiLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXJcIiwgXCJub25lXCIpO1xufVxuZnVuY3Rpb24gUyhlKSB7XG4gIHJldHVybiBbXCJodG1sXCIsIFwiYm9keVwiLCBcIiNkb2N1bWVudFwiXS5pbmNsdWRlcyhEKGUpKTtcbn1cbmZ1bmN0aW9uIHkoZSkge1xuICByZXR1cm4gdyhlKS5nZXRDb21wdXRlZFN0eWxlKGUpO1xufVxuZnVuY3Rpb24gXyhlKSB7XG4gIHJldHVybiBtKGUpID8ge1xuICAgIHNjcm9sbExlZnQ6IGUuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGUuc2Nyb2xsVG9wXG4gIH0gOiB7XG4gICAgc2Nyb2xsTGVmdDogZS5zY3JvbGxYLFxuICAgIHNjcm9sbFRvcDogZS5zY3JvbGxZXG4gIH07XG59XG5mdW5jdGlvbiBSKGUpIHtcbiAgaWYgKEQoZSkgPT09IFwiaHRtbFwiKVxuICAgIHJldHVybiBlO1xuICBjb25zdCB0ID0gKFxuICAgIC8vIFN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlLlxuICAgIGUuYXNzaWduZWRTbG90IHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkLlxuICAgIGUucGFyZW50Tm9kZSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkLlxuICAgIHEoZSkgJiYgZS5ob3N0IHx8IC8vIEZhbGxiYWNrLlxuICAgIHYoZSlcbiAgKTtcbiAgcmV0dXJuIHEodCkgPyB0Lmhvc3QgOiB0O1xufVxuZnVuY3Rpb24gc3QoZSkge1xuICBjb25zdCB0ID0gUihlKTtcbiAgcmV0dXJuIFModCkgPyBlLm93bmVyRG9jdW1lbnQgPyBlLm93bmVyRG9jdW1lbnQuYm9keSA6IGUuYm9keSA6IEUodCkgJiYgayh0KSA/IHQgOiBzdCh0KTtcbn1cbmZ1bmN0aW9uIGl0KGUsIHQsIG4pIHtcbiAgdmFyIHM7XG4gIHQgPT09IHZvaWQgMCAmJiAodCA9IFtdKTtcbiAgY29uc3QgaSA9IHN0KGUpLCByID0gaSA9PT0gKChzID0gZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogcy5ib2R5KSwgbyA9IHcoaSk7XG4gIHJldHVybiByID8gKGoobyksIHQuY29uY2F0KG8sIG8udmlzdWFsVmlld3BvcnQgfHwgW10sIGsoaSkgPyBpIDogW10sIFtdKSkgOiB0LmNvbmNhdChpLCBpdChpLCBbXSkpO1xufVxuZnVuY3Rpb24gaihlKSB7XG4gIHJldHVybiBlLnBhcmVudCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wYXJlbnQpID8gZS5mcmFtZUVsZW1lbnQgOiBudWxsO1xufVxuZnVuY3Rpb24gcnQoZSkge1xuICBjb25zdCB0ID0geShlKTtcbiAgbGV0IG4gPSBwYXJzZUZsb2F0KHQud2lkdGgpIHx8IDAsIHMgPSBwYXJzZUZsb2F0KHQuaGVpZ2h0KSB8fCAwO1xuICBjb25zdCBpID0gRShlKSwgciA9IGkgPyBlLm9mZnNldFdpZHRoIDogbiwgbyA9IGkgPyBlLm9mZnNldEhlaWdodCA6IHMsIGMgPSBIKG4pICE9PSByIHx8IEgocykgIT09IG87XG4gIHJldHVybiBjICYmIChuID0gciwgcyA9IG8pLCB7XG4gICAgd2lkdGg6IG4sXG4gICAgaGVpZ2h0OiBzLFxuICAgICQ6IGNcbiAgfTtcbn1cbmZ1bmN0aW9uIG90KGUpIHtcbiAgcmV0dXJuIG0oZSkgPyBlIDogZS5jb250ZXh0RWxlbWVudDtcbn1cbmZ1bmN0aW9uIFQoZSkge1xuICBjb25zdCB0ID0gb3QoZSk7XG4gIGlmICghRSh0KSlcbiAgICByZXR1cm4geCgxKTtcbiAgY29uc3QgbiA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHtcbiAgICB3aWR0aDogcyxcbiAgICBoZWlnaHQ6IGksXG4gICAgJDogclxuICB9ID0gcnQodCk7XG4gIGxldCBvID0gKHIgPyBIKG4ud2lkdGgpIDogbi53aWR0aCkgLyBzLCBjID0gKHIgPyBIKG4uaGVpZ2h0KSA6IG4uaGVpZ2h0KSAvIGk7XG4gIHJldHVybiAoIW8gfHwgIU51bWJlci5pc0Zpbml0ZShvKSkgJiYgKG8gPSAxKSwgKCFjIHx8ICFOdW1iZXIuaXNGaW5pdGUoYykpICYmIChjID0gMSksIHtcbiAgICB4OiBvLFxuICAgIHk6IGNcbiAgfTtcbn1cbmNvbnN0IFR0ID0gLyogQF9fUFVSRV9fICovIHgoMCk7XG5mdW5jdGlvbiBjdChlKSB7XG4gIGNvbnN0IHQgPSB3KGUpO1xuICByZXR1cm4gIUcoKSB8fCAhdC52aXN1YWxWaWV3cG9ydCA/IFR0IDoge1xuICAgIHg6IHQudmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCxcbiAgICB5OiB0LnZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcFxuICB9O1xufVxuZnVuY3Rpb24gU3QoZSwgdCwgbikge1xuICByZXR1cm4gdCA9PT0gdm9pZCAwICYmICh0ID0gITEpLCAhbiB8fCB0ICYmIG4gIT09IHcoZSkgPyAhMSA6IHQ7XG59XG5mdW5jdGlvbiBOKGUsIHQsIG4sIHMpIHtcbiAgdCA9PT0gdm9pZCAwICYmICh0ID0gITEpLCBuID09PSB2b2lkIDAgJiYgKG4gPSAhMSk7XG4gIGNvbnN0IGkgPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCByID0gb3QoZSk7XG4gIGxldCBvID0geCgxKTtcbiAgdCAmJiAocyA/IG0ocykgJiYgKG8gPSBUKHMpKSA6IG8gPSBUKGUpKTtcbiAgY29uc3QgYyA9IFN0KHIsIG4sIHMpID8gY3QocikgOiB4KDApO1xuICBsZXQgYSA9IChpLmxlZnQgKyBjLngpIC8gby54LCBsID0gKGkudG9wICsgYy55KSAvIG8ueSwgdSA9IGkud2lkdGggLyBvLngsIGYgPSBpLmhlaWdodCAvIG8ueTtcbiAgaWYgKHIpIHtcbiAgICBjb25zdCBkID0gdyhyKSwgaCA9IHMgJiYgbShzKSA/IHcocykgOiBzO1xuICAgIGxldCBMID0gZCwgcCA9IGooTCk7XG4gICAgZm9yICg7IHAgJiYgcyAmJiBoICE9PSBMOyApIHtcbiAgICAgIGNvbnN0IGIgPSBUKHApLCBJID0gcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgTyA9IHkocCksIFcgPSBJLmxlZnQgKyAocC5jbGllbnRMZWZ0ICsgcGFyc2VGbG9hdChPLnBhZGRpbmdMZWZ0KSkgKiBiLngsIFAgPSBJLnRvcCArIChwLmNsaWVudFRvcCArIHBhcnNlRmxvYXQoTy5wYWRkaW5nVG9wKSkgKiBiLnk7XG4gICAgICBhICo9IGIueCwgbCAqPSBiLnksIHUgKj0gYi54LCBmICo9IGIueSwgYSArPSBXLCBsICs9IFAsIEwgPSB3KHApLCBwID0gaihMKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV0KHtcbiAgICB3aWR0aDogdSxcbiAgICBoZWlnaHQ6IGYsXG4gICAgeDogYSxcbiAgICB5OiBsXG4gIH0pO1xufVxuZnVuY3Rpb24gSyhlLCB0KSB7XG4gIGNvbnN0IG4gPSBfKGUpLnNjcm9sbExlZnQ7XG4gIHJldHVybiB0ID8gdC5sZWZ0ICsgbiA6IE4odihlKSkubGVmdCArIG47XG59XG5mdW5jdGlvbiBsdChlLCB0LCBuKSB7XG4gIG4gPT09IHZvaWQgMCAmJiAobiA9ICExKTtcbiAgY29uc3QgcyA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGkgPSBzLmxlZnQgKyB0LnNjcm9sbExlZnQgLSAobiA/IDAgOiAoXG4gICAgLy8gUlRMIDxib2R5PiBzY3JvbGxiYXIuXG4gICAgSyhlLCBzKVxuICApKSwgciA9IHMudG9wICsgdC5zY3JvbGxUb3A7XG4gIHJldHVybiB7XG4gICAgeDogaSxcbiAgICB5OiByXG4gIH07XG59XG5mdW5jdGlvbiBEdChlKSB7XG4gIGxldCB7XG4gICAgZWxlbWVudHM6IHQsXG4gICAgcmVjdDogbixcbiAgICBvZmZzZXRQYXJlbnQ6IHMsXG4gICAgc3RyYXRlZ3k6IGlcbiAgfSA9IGU7XG4gIGNvbnN0IHIgPSBpID09PSBcImZpeGVkXCIsIG8gPSB2KHMpLCBjID0gdCA/IE0odC5mbG9hdGluZykgOiAhMTtcbiAgaWYgKHMgPT09IG8gfHwgYyAmJiByKVxuICAgIHJldHVybiBuO1xuICBsZXQgYSA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9LCBsID0geCgxKTtcbiAgY29uc3QgdSA9IHgoMCksIGYgPSBFKHMpO1xuICBpZiAoKGYgfHwgIWYgJiYgIXIpICYmICgoRChzKSAhPT0gXCJib2R5XCIgfHwgayhvKSkgJiYgKGEgPSBfKHMpKSwgRShzKSkpIHtcbiAgICBjb25zdCBoID0gTihzKTtcbiAgICBsID0gVChzKSwgdS54ID0gaC54ICsgcy5jbGllbnRMZWZ0LCB1LnkgPSBoLnkgKyBzLmNsaWVudFRvcDtcbiAgfVxuICBjb25zdCBkID0gbyAmJiAhZiAmJiAhciA/IGx0KG8sIGEsICEwKSA6IHgoMCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IG4ud2lkdGggKiBsLngsXG4gICAgaGVpZ2h0OiBuLmhlaWdodCAqIGwueSxcbiAgICB4OiBuLnggKiBsLnggLSBhLnNjcm9sbExlZnQgKiBsLnggKyB1LnggKyBkLngsXG4gICAgeTogbi55ICogbC55IC0gYS5zY3JvbGxUb3AgKiBsLnkgKyB1LnkgKyBkLnlcbiAgfTtcbn1cbmZ1bmN0aW9uIE90KGUpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZS5nZXRDbGllbnRSZWN0cygpKTtcbn1cbmZ1bmN0aW9uIEF0KGUpIHtcbiAgY29uc3QgdCA9IHYoZSksIG4gPSBfKGUpLCBzID0gZS5vd25lckRvY3VtZW50LmJvZHksIGkgPSBBKHQuc2Nyb2xsV2lkdGgsIHQuY2xpZW50V2lkdGgsIHMuc2Nyb2xsV2lkdGgsIHMuY2xpZW50V2lkdGgpLCByID0gQSh0LnNjcm9sbEhlaWdodCwgdC5jbGllbnRIZWlnaHQsIHMuc2Nyb2xsSGVpZ2h0LCBzLmNsaWVudEhlaWdodCk7XG4gIGxldCBvID0gLW4uc2Nyb2xsTGVmdCArIEsoZSk7XG4gIGNvbnN0IGMgPSAtbi5zY3JvbGxUb3A7XG4gIHJldHVybiB5KHMpLmRpcmVjdGlvbiA9PT0gXCJydGxcIiAmJiAobyArPSBBKHQuY2xpZW50V2lkdGgsIHMuY2xpZW50V2lkdGgpIC0gaSksIHtcbiAgICB3aWR0aDogaSxcbiAgICBoZWlnaHQ6IHIsXG4gICAgeDogbyxcbiAgICB5OiBjXG4gIH07XG59XG5mdW5jdGlvbiBGdChlLCB0KSB7XG4gIGNvbnN0IG4gPSB3KGUpLCBzID0gdihlKSwgaSA9IG4udmlzdWFsVmlld3BvcnQ7XG4gIGxldCByID0gcy5jbGllbnRXaWR0aCwgbyA9IHMuY2xpZW50SGVpZ2h0LCBjID0gMCwgYSA9IDA7XG4gIGlmIChpKSB7XG4gICAgciA9IGkud2lkdGgsIG8gPSBpLmhlaWdodDtcbiAgICBjb25zdCBsID0gRygpO1xuICAgICghbCB8fCBsICYmIHQgPT09IFwiZml4ZWRcIikgJiYgKGMgPSBpLm9mZnNldExlZnQsIGEgPSBpLm9mZnNldFRvcCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcixcbiAgICBoZWlnaHQ6IG8sXG4gICAgeDogYyxcbiAgICB5OiBhXG4gIH07XG59XG5mdW5jdGlvbiBOdChlLCB0KSB7XG4gIGNvbnN0IG4gPSBOKGUsICEwLCB0ID09PSBcImZpeGVkXCIpLCBzID0gbi50b3AgKyBlLmNsaWVudFRvcCwgaSA9IG4ubGVmdCArIGUuY2xpZW50TGVmdCwgciA9IEUoZSkgPyBUKGUpIDogeCgxKSwgbyA9IGUuY2xpZW50V2lkdGggKiByLngsIGMgPSBlLmNsaWVudEhlaWdodCAqIHIueSwgYSA9IGkgKiByLngsIGwgPSBzICogci55O1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBvLFxuICAgIGhlaWdodDogYyxcbiAgICB4OiBhLFxuICAgIHk6IGxcbiAgfTtcbn1cbmZ1bmN0aW9uIEooZSwgdCwgbikge1xuICBsZXQgcztcbiAgaWYgKHQgPT09IFwidmlld3BvcnRcIilcbiAgICBzID0gRnQoZSwgbik7XG4gIGVsc2UgaWYgKHQgPT09IFwiZG9jdW1lbnRcIilcbiAgICBzID0gQXQodihlKSk7XG4gIGVsc2UgaWYgKG0odCkpXG4gICAgcyA9IE50KHQsIG4pO1xuICBlbHNlIHtcbiAgICBjb25zdCBpID0gY3QoZSk7XG4gICAgcyA9IHtcbiAgICAgIHg6IHQueCAtIGkueCxcbiAgICAgIHk6IHQueSAtIGkueSxcbiAgICAgIHdpZHRoOiB0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0LmhlaWdodFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGV0KHMpO1xufVxuZnVuY3Rpb24gYXQoZSwgdCkge1xuICBjb25zdCBuID0gUihlKTtcbiAgcmV0dXJuIG4gPT09IHQgfHwgIW0obikgfHwgUyhuKSA/ICExIDogeShuKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiIHx8IGF0KG4sIHQpO1xufVxuZnVuY3Rpb24ga3QoZSwgdCkge1xuICBjb25zdCBuID0gdC5nZXQoZSk7XG4gIGlmIChuKVxuICAgIHJldHVybiBuO1xuICBsZXQgcyA9IGl0KGUsIFtdKS5maWx0ZXIoKGMpID0+IG0oYykgJiYgRChjKSAhPT0gXCJib2R5XCIpLCBpID0gbnVsbDtcbiAgY29uc3QgciA9IHkoZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIjtcbiAgbGV0IG8gPSByID8gUihlKSA6IGU7XG4gIGZvciAoOyBtKG8pICYmICFTKG8pOyApIHtcbiAgICBjb25zdCBjID0geShvKSwgYSA9IHoobyk7XG4gICAgIWEgJiYgYy5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiICYmIChpID0gbnVsbCksIChyID8gIWEgJiYgIWkgOiAhYSAmJiBjLnBvc2l0aW9uID09PSBcInN0YXRpY1wiICYmICEhaSAmJiBbXCJhYnNvbHV0ZVwiLCBcImZpeGVkXCJdLmluY2x1ZGVzKGkucG9zaXRpb24pIHx8IGsobykgJiYgIWEgJiYgYXQoZSwgbykpID8gcyA9IHMuZmlsdGVyKCh1KSA9PiB1ICE9PSBvKSA6IGkgPSBjLCBvID0gUihvKTtcbiAgfVxuICByZXR1cm4gdC5zZXQoZSwgcyksIHM7XG59XG5mdW5jdGlvbiBJdChlKSB7XG4gIGxldCB7XG4gICAgZWxlbWVudDogdCxcbiAgICBib3VuZGFyeTogbixcbiAgICByb290Qm91bmRhcnk6IHMsXG4gICAgc3RyYXRlZ3k6IGlcbiAgfSA9IGU7XG4gIGNvbnN0IG8gPSBbLi4ubiA9PT0gXCJjbGlwcGluZ0FuY2VzdG9yc1wiID8gTSh0KSA/IFtdIDoga3QodCwgdGhpcy5fYykgOiBbXS5jb25jYXQobiksIHNdLCBjID0gb1swXSwgYSA9IG8ucmVkdWNlKChsLCB1KSA9PiB7XG4gICAgY29uc3QgZiA9IEoodCwgdSwgaSk7XG4gICAgcmV0dXJuIGwudG9wID0gQShmLnRvcCwgbC50b3ApLCBsLnJpZ2h0ID0gWShmLnJpZ2h0LCBsLnJpZ2h0KSwgbC5ib3R0b20gPSBZKGYuYm90dG9tLCBsLmJvdHRvbSksIGwubGVmdCA9IEEoZi5sZWZ0LCBsLmxlZnQpLCBsO1xuICB9LCBKKHQsIGMsIGkpKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogYS5yaWdodCAtIGEubGVmdCxcbiAgICBoZWlnaHQ6IGEuYm90dG9tIC0gYS50b3AsXG4gICAgeDogYS5sZWZ0LFxuICAgIHk6IGEudG9wXG4gIH07XG59XG5mdW5jdGlvbiBXdChlKSB7XG4gIGNvbnN0IHtcbiAgICB3aWR0aDogdCxcbiAgICBoZWlnaHQ6IG5cbiAgfSA9IHJ0KGUpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB0LFxuICAgIGhlaWdodDogblxuICB9O1xufVxuZnVuY3Rpb24gQnQoZSwgdCwgbikge1xuICBjb25zdCBzID0gRSh0KSwgaSA9IHYodCksIHIgPSBuID09PSBcImZpeGVkXCIsIG8gPSBOKGUsICEwLCByLCB0KTtcbiAgbGV0IGMgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgY29uc3QgYSA9IHgoMCk7XG4gIGlmIChzIHx8ICFzICYmICFyKVxuICAgIGlmICgoRCh0KSAhPT0gXCJib2R5XCIgfHwgayhpKSkgJiYgKGMgPSBfKHQpKSwgcykge1xuICAgICAgY29uc3QgZCA9IE4odCwgITAsIHIsIHQpO1xuICAgICAgYS54ID0gZC54ICsgdC5jbGllbnRMZWZ0LCBhLnkgPSBkLnkgKyB0LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaSAmJiAoYS54ID0gSyhpKSk7XG4gIGNvbnN0IGwgPSBpICYmICFzICYmICFyID8gbHQoaSwgYykgOiB4KDApLCB1ID0gby5sZWZ0ICsgYy5zY3JvbGxMZWZ0IC0gYS54IC0gbC54LCBmID0gby50b3AgKyBjLnNjcm9sbFRvcCAtIGEueSAtIGwueTtcbiAgcmV0dXJuIHtcbiAgICB4OiB1LFxuICAgIHk6IGYsXG4gICAgd2lkdGg6IG8ud2lkdGgsXG4gICAgaGVpZ2h0OiBvLmhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gVShlKSB7XG4gIHJldHVybiB5KGUpLnBvc2l0aW9uID09PSBcInN0YXRpY1wiO1xufVxuZnVuY3Rpb24gUShlLCB0KSB7XG4gIGlmICghRShlKSB8fCB5KGUpLnBvc2l0aW9uID09PSBcImZpeGVkXCIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0KVxuICAgIHJldHVybiB0KGUpO1xuICBsZXQgbiA9IGUub2Zmc2V0UGFyZW50O1xuICByZXR1cm4gdihlKSA9PT0gbiAmJiAobiA9IG4ub3duZXJEb2N1bWVudC5ib2R5KSwgbjtcbn1cbmZ1bmN0aW9uIHV0KGUsIHQpIHtcbiAgY29uc3QgbiA9IHcoZSk7XG4gIGlmIChNKGUpKVxuICAgIHJldHVybiBuO1xuICBpZiAoIUUoZSkpIHtcbiAgICBsZXQgaSA9IFIoZSk7XG4gICAgZm9yICg7IGkgJiYgIVMoaSk7ICkge1xuICAgICAgaWYgKG0oaSkgJiYgIVUoaSkpXG4gICAgICAgIHJldHVybiBpO1xuICAgICAgaSA9IFIoaSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9XG4gIGxldCBzID0gUShlLCB0KTtcbiAgZm9yICg7IHMgJiYgTHQocykgJiYgVShzKTsgKVxuICAgIHMgPSBRKHMsIHQpO1xuICByZXR1cm4gcyAmJiBTKHMpICYmIFUocykgJiYgIXoocykgPyBuIDogcyB8fCBDdChlKSB8fCBuO1xufVxuY29uc3QgVnQgPSBhc3luYyBmdW5jdGlvbihlKSB7XG4gIGNvbnN0IHQgPSB0aGlzLmdldE9mZnNldFBhcmVudCB8fCB1dCwgbiA9IHRoaXMuZ2V0RGltZW5zaW9ucywgcyA9IGF3YWl0IG4oZS5mbG9hdGluZyk7XG4gIHJldHVybiB7XG4gICAgcmVmZXJlbmNlOiBCdChlLnJlZmVyZW5jZSwgYXdhaXQgdChlLmZsb2F0aW5nKSwgZS5zdHJhdGVneSksXG4gICAgZmxvYXRpbmc6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgd2lkdGg6IHMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHMuaGVpZ2h0XG4gICAgfVxuICB9O1xufTtcbmZ1bmN0aW9uIEh0KGUpIHtcbiAgcmV0dXJuIHkoZSkuZGlyZWN0aW9uID09PSBcInJ0bFwiO1xufVxuY29uc3QgJHQgPSB7XG4gIGNvbnZlcnRPZmZzZXRQYXJlbnRSZWxhdGl2ZVJlY3RUb1ZpZXdwb3J0UmVsYXRpdmVSZWN0OiBEdCxcbiAgZ2V0RG9jdW1lbnRFbGVtZW50OiB2LFxuICBnZXRDbGlwcGluZ1JlY3Q6IEl0LFxuICBnZXRPZmZzZXRQYXJlbnQ6IHV0LFxuICBnZXRFbGVtZW50UmVjdHM6IFZ0LFxuICBnZXRDbGllbnRSZWN0czogT3QsXG4gIGdldERpbWVuc2lvbnM6IFd0LFxuICBnZXRTY2FsZTogVCxcbiAgaXNFbGVtZW50OiBtLFxuICBpc1JUTDogSHRcbn0sIE10ID0gKGUsIHQsIG4pID0+IHtcbiAgY29uc3QgcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIGkgPSB7XG4gICAgcGxhdGZvcm06ICR0LFxuICAgIC4uLm5cbiAgfSwgciA9IHtcbiAgICAuLi5pLnBsYXRmb3JtLFxuICAgIF9jOiBzXG4gIH07XG4gIHJldHVybiBSdChlLCB0LCB7XG4gICAgLi4uaSxcbiAgICBwbGF0Zm9ybTogclxuICB9KTtcbn07XG5mdW5jdGlvbiBfdCgpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIm1hdGNoV2lkdGhcIixcbiAgICBmbih7IGVsZW1lbnRzOiBlLCByZWN0czogdCB9KSB7XG4gICAgICByZXR1cm4gZS5mbG9hdGluZy5zdHlsZS53aWR0aCA9IGAke3QucmVmZXJlbmNlLndpZHRofXB4YCwgeyByZXNldDogeyByZWN0czogITAgfSB9O1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIFB0KCkge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwibWFrZUl0RmxvYXRcIixcbiAgICBmbih7IGVsZW1lbnRzOiBlLCB4OiB0LCB5OiBuIH0pIHtcbiAgICAgIHJldHVybiBlLmZsb2F0aW5nLnN0eWxlLnRvcCA9IGAke259cHhgLCBlLmZsb2F0aW5nLnN0eWxlLmxlZnQgPSBgJHt0fXB4YCwge307XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gVXQoZSwgdCkge1xuICByZXR1cm4gKGUgJSB0ICsgdCkgJSB0O1xufVxuY2xhc3MganQgZXh0ZW5kcyB5dCB7XG4gIGNvbnN0cnVjdG9yKHQsIG4sIHMpIHtcbiAgICBzdXBlcih0LCBzID8/IG4ucGFyZW50RWxlbWVudCA/PyBkb2N1bWVudC5ib2R5KSwgdGhpcy5pbnB1dEVsID0gbiwgdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICB9XG4gICN0ID0gW107XG4gICNzID0gW107XG4gICNlID0gLTE7XG4gIG9wZW4oKSB7XG4gICAgc3VwZXIub3BlbigpLCBNdCh0aGlzLmlucHV0RWwsIHRoaXMud3JhcHBlckVsLCB7XG4gICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgICBtaWRkbGV3YXJlOiBbX3QoKSwgUHQoKV1cbiAgICB9KTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpLCB0aGlzLiNlID0gLTEsIHRoaXMuI3QgPSBbXSwgdGhpcy4jcyA9IFtdO1xuICB9XG4gIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnJlZ2lzdGVyTGlzdGVuZXJzKCksIHRoaXMuc2NvcGUucmVnaXN0ZXIoW10sIFwiRW50ZXJcIiwgKHQpID0+IHRoaXMub25LZXlwcmVzcyh0LCBcImVudGVyXCIpKSwgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJBcnJvd1VwXCIsICh0KSA9PiB0aGlzLm9uS2V5cHJlc3ModCwgXCJ1cFwiKSksIHRoaXMuc2NvcGUucmVnaXN0ZXIoXG4gICAgICBbXSxcbiAgICAgIFwiQXJyb3dEb3duXCIsXG4gICAgICAodCkgPT4gdGhpcy5vbktleXByZXNzKHQsIFwiZG93blwiKVxuICAgICksIHRoaXMud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKCkgPT4gITEpLCB0aGlzLndyYXBwZXJFbC5vbihcImNsaWNrXCIsIFwiLnN1Z2dlc3Rpb24taXRlbVwiLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSksIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpKSwgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImZvY3VzXCIsXG4gICAgICB0aGlzLm9uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKVxuICAgICksIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJpbnB1dFwiLFxuICAgICAgdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQodGhpcylcbiAgICApO1xuICB9XG4gIG9uQmx1cigpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xvc2UoKSwgMTAwKTtcbiAgfVxuICBvbklucHV0Q2hhbmdlKHQpIHtcbiAgICBpZiAoISh0LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSAmJiAhKHQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG4gPSB0aGlzLmdldFN1Z2dlc3Rpb25zKHQuY3VycmVudFRhcmdldC52YWx1ZSk7XG4gICAgaWYgKG4ubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy53cmFwcGVyRWwuZW1wdHkoKSwgdGhpcy4jdCA9IG4sIHRoaXMuI3MgPSBuLm1hcCgocykgPT4ge1xuICAgICAgICBjb25zdCBpID0gdGhpcy53cmFwcGVyRWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJTdWdnZXN0aW9uKHMsIGkpLCBpO1xuICAgICAgfSksIHRoaXMub3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cbiAgb25LZXlwcmVzcyh0LCBuKSB7XG4gICAgaWYgKCF0LmlzQ29tcG9zaW5nKVxuICAgICAgc3dpdGNoICh0LnByZXZlbnREZWZhdWx0KCksIG4pIHtcbiAgICAgICAgY2FzZSBcImVudGVyXCI6XG4gICAgICAgICAgdGhpcy5zZWxlY3RTdWdnZXN0aW9uKHRoaXMuI3RbdGhpcy4jZV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgICB0aGlzLmZvY3VzU3VnZ2VzdGlvbih0aGlzLiNlIC0gMSwgITApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICAgIHRoaXMuZm9jdXNTdWdnZXN0aW9uKHRoaXMuI2UgKyAxLCAhMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbiAgb25DbGljayh0LCBuKSB7XG4gICAgdC5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmZvY3VzU3VnZ2VzdGlvbih0aGlzLiNzLmluZGV4T2YobiksICExKSwgdGhpcy5zZWxlY3RTdWdnZXN0aW9uKHRoaXMuI3RbdGhpcy4jZV0pO1xuICB9XG4gIGZvY3VzU3VnZ2VzdGlvbih0LCBuKSB7XG4gICAgY29uc3QgcyA9IFV0KHQsIHRoaXMuI3QubGVuZ3RoKSwgaSA9IHRoaXMuI3NbdGhpcy4jZV0sIHIgPSB0aGlzLiNzW3NdO1xuICAgIGkucmVtb3ZlQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKSwgci5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpLCB0aGlzLiNlID0gcywgbiAmJiByLnNjcm9sbEludG9WaWV3KCExKTtcbiAgfVxufVxuZnVuY3Rpb24gS3QoZSwgdCkge1xuICByZXR1cm4gZnQoZSwgdCA/IChzKSA9PiBzIGluc3RhbmNlb2YgQiAmJiB0KHMpIDogKHMpID0+IHMgaW5zdGFuY2VvZiBCKTtcbn1cbmZ1bmN0aW9uIHp0KGUsIHQpIHtcbiAgcmV0dXJuIGZ0KGUsIHQgPyAocykgPT4gcyBpbnN0YW5jZW9mIEYgJiYgdChzKSA6IChzKSA9PiBzIGluc3RhbmNlb2YgRik7XG59XG5mdW5jdGlvbiBmdChlLCB0KSB7XG4gIGxldCBuID0gZS5nZXRBbGxMb2FkZWRGaWxlcygpO1xuICByZXR1cm4gdCAmJiAobiA9IG4uZmlsdGVyKHQpKSwgbi5zb3J0KChzLCBpKSA9PiBzLnBhdGgubG9jYWxlQ29tcGFyZShpLnBhdGgpKTtcbn1cbmZ1bmN0aW9uIFl0KGUsIHQsIG4pIHtcbiAgY29uc3QgcyA9IGh0KGUsIHQpLCBpID0gbiA/IChyKSA9PiByIGluc3RhbmNlb2YgQiAmJiBuKHIpIDogKHIpID0+IHIgaW5zdGFuY2VvZiBCO1xuICByZXR1cm4gcy5jaGlsZHJlbi5maWx0ZXIoaSk7XG59XG5mdW5jdGlvbiBYdChlLCB0LCBuKSB7XG4gIGNvbnN0IHMgPSBodChlLCB0KSwgaSA9IG4gPyAocikgPT4gciBpbnN0YW5jZW9mIEYgJiYgbihyKSA6IChyKSA9PiByIGluc3RhbmNlb2YgRjtcbiAgcmV0dXJuIHMuY2hpbGRyZW4uZmlsdGVyKGkpO1xufVxuZnVuY3Rpb24gaHQoZSwgdCkge1xuICBjb25zdCBuID0gZS5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZ3QodCkpO1xuICBpZiAoIW4pXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGb2xkZXIgXCIke3R9XCIgZG9lc24ndCBleGlzdC5gKTtcbiAgaWYgKCEobiBpbnN0YW5jZW9mIEYpKVxuICAgIHRocm93IG5ldyBFcnJvcihgJHt0fSBpcyBhIGZpbGUsIG5vdCBhIGZvbGRlci5gKTtcbiAgcmV0dXJuIG47XG59XG5jbGFzcyBxdCBleHRlbmRzIGp0IHtcbiAgZ2V0U3VnZ2VzdGlvbnModCkge1xuICAgIGNvbnN0IG4gPSB0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB6dChcbiAgICAgIHRoaXMuYXBwLnZhdWx0LFxuICAgICAgLy9cbiAgICAgIChzKSA9PiBzLnBhdGgudG9Mb3dlckNhc2UoKS5jb250YWlucyhuKVxuICAgICk7XG4gIH1cbiAgcmVuZGVyU3VnZ2VzdGlvbih0LCBuKSB7XG4gICAgbi5zZXRUZXh0KHQucGF0aCk7XG4gIH1cbiAgc2VsZWN0U3VnZ2VzdGlvbih0KSB7XG4gICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gdC5wYXRoLCB0aGlzLmlucHV0RWwudHJpZ2dlcihcImlucHV0XCIpLCB0aGlzLmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEp0IHtcbiAgc3RhdGljIGpvaW4oLi4udCkge1xuICAgIHJldHVybiB0LnJlZHVjZSgobiwgcykgPT4gcyA/IG4gPyBuLnJlcGxhY2UoL1tcXFxcL10rJC9naSwgXCJcIikgKyAvL1xuICAgIFwiL1wiICsgcy5yZXBsYWNlKC9eW1xcXFwvXSsvZ2ksIFwiXCIpIDogcyA6IG4sIFwiXCIpO1xuICB9XG4gIHN0YXRpYyBub3JtYWxpemUodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2VBbGwoL1teXFx3LVxcXFwvIz8mPSc6LC4gXSsvZ2ksIFwiX1wiKTtcbiAgfVxuICBzdGF0aWMgZ2V0TmFtZSh0KSB7XG4gICAgcmV0dXJuIHQubWF0Y2goL1teXFxcXC9dKyQvZ2kpPy5hdCgwKTtcbiAgfVxuICBzdGF0aWMgZ2V0QmFzZW5hbWUodCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmdldE5hbWUodCk7XG4gICAgcmV0dXJuIG4gPyB0aGlzLnJlbW92ZUV4dChuKSA6IHZvaWQgMDtcbiAgfVxuICBzdGF0aWMgZ2V0UGFyZW50KHQpIHtcbiAgICByZXR1cm4gdC5yZXBsYWNlKC9bXFxcXC9dW15cXFxcL10qJC9naSwgXCJcIik7XG4gIH1cbiAgc3RhdGljIGhhc0V4dCh0KSB7XG4gICAgcmV0dXJuIC9cXC5bXlxcXFwvXSokL2dpLnRlc3QodCk7XG4gIH1cbiAgLyoqIFNob3VsZCB1c2UgYGhhc0V4dCgpYCBiZWZvcmUgKi9cbiAgc3RhdGljIGdldEV4dCh0KSB7XG4gICAgcmV0dXJuIC8oPzw9XFwuKShbXlxcXFwvIz9dKikoWyM/XS4qKT8kL2dpLmV4ZWModCk/LmF0KDEpO1xuICB9XG4gIHN0YXRpYyByZW1vdmVFeHQodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2UoLyhcXC5bXlxcXFwvXSopPyhbIz9dLiopPyQvZ2ksIFwiXCIpO1xuICB9XG59XG5jbGFzcyBRdCB7XG4gIHN0YXRpYyBpc1VybCh0KSB7XG4gICAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcLy9naS50ZXN0KHQpO1xuICB9XG4gIC8qKiBTaG91bGQgdXNlIGBpc1VybCgpYCBiZWZvcmUgKi9cbiAgc3RhdGljIGdldE9yaWdpbih0KSB7XG4gICAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcL1teXFxcXC9dKy9naS5leGVjKHQpPy5hdCgwKTtcbiAgfVxuICAvKiogU2hvdWxkIHVzZSBgaXNVcmwoKWAgYmVmb3JlICovXG4gIHN0YXRpYyBnZXRCYXNldXJsKHQpIHtcbiAgICByZXR1cm4gL15odHRwcz86XFwvXFwvW14jP10qL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG4gIHN0YXRpYyBnZXRIYXNoKHQpIHtcbiAgICByZXR1cm4gLyg/PD0jKVteP10qL2dpLmV4ZWModCk/LmF0KDApO1xuICB9XG4gIHN0YXRpYyBnZXRwYXJhbXModCkge1xuICAgIHJldHVybiAvKD88PVxcPykuKi9naS5leGVjKHQpPy5hdCgwKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgcXQgYXMgRm9sZGVyU3VnZ2VzdGVyLFxuICBqdCBhcyBJbnB1dFN1Z2dlc3RlcixcbiAgZyBhcyBMb2dMZXZlbCxcbiAgd3QgYXMgTG9nTGV2ZWxSZXZlcnNlLFxuICBWIGFzIExvZ2dlcixcbiAgbXQgYXMgTG9nZ2luZ0dyb3VwLFxuICB5dCBhcyBTdWdnZXN0ZXIsXG4gIEp0IGFzIFVSSSxcbiAgUXQgYXMgVVJMLFxuICBmdCBhcyBnZXRBbGxBYnN0cmFjdEZpbGVzSW5WYXVsdCxcbiAgS3QgYXMgZ2V0QWxsRmlsZXNJblZhdWx0LFxuICB6dCBhcyBnZXRBbGxGb2xkZXJzSW5WYXVsdCxcbiAgWXQgYXMgZ2V0RmlsZXNPbkZvbGRlcixcbiAgaHQgYXMgZ2V0Rm9sZGVySW5WYXVsdCxcbiAgWHQgYXMgZ2V0Rm9sZGVyc09uRm9sZGVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzaWRpYW4tZm5jLmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IFJlcXVlc3RVcmxSZXNwb25zZSB9IGZyb20gJ29ic2lkaWFuJ1xuXG50eXBlIEVycm9yQ29kZSA9XG4gICAgfCAncmVtb3RlLW5vLXVybCdcbiAgICB8ICdyZW1vdGUtbm8tZXh0J1xuICAgIHwgJ3VybC1yZXF1ZXN0LWhlYWQnXG4gICAgfCAndXJsLXJlcXVlc3QtZ2V0J1xuXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSByZXNwb25zZSBoYXMgYSBfKipzdGF0dXNDb2RlKipfXG4gICAgICogQHRocm93cyB7QXR0YWNobWVudEVycm9yfVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3NlcnRSZXNwb25zZShcbiAgICAgICAgdXJsOiBzdHJpbmcsXG4gICAgICAgIHJlc3BvbnNlOiBSZXF1ZXN0VXJsUmVzcG9uc2UsXG4gICAgICAgIGNvZGU6IEVycm9yQ29kZSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA8IDQwMCkgcmV0dXJuXG5cbiAgICAgICAgdGhyb3cgbmV3IEF0dGFjaG1lbnRFcnJvcihcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICBgcmVxdWVzdGVkIHVybDogJHt1cmx9YCArXG4gICAgICAgICAgICAgICAgYFxcbnJlc3BvbnNlIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCArXG4gICAgICAgICAgICAgICAgYFxcbnJlc3BvbnNlIGhlYWRlcnM6XFxuJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5oZWFkZXJzKX1gLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBjb2RlOiBFcnJvckNvZGUsXG4gICAgICAgIHB1YmxpYyBjYXVzZT86IHVua25vd24sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy5uYW1lID0gYEF0dGFjaG1lbnRFcnJvcigke3RoaXMuY29kZX0pYFxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnRvU3RyaW5nTWVzc2FnZSgpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubmFtZX06ICR7dGhpcy50b1N0cmluZ01lc3NhZ2UoKX1gXG4gICAgfVxuXG4gICAgdG9TdHJpbmdNZXNzYWdlKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBBdHRhY2htZW50RXJyb3IuI2Rlc2NyaXB0aW9uKHRoaXMuY29kZSlcbiAgICAgICAgaWYgKCF0aGlzLmNhdXNlKSByZXR1cm4gbWVzc2FnZVxuXG4gICAgICAgIGlmICh0aGlzLmNhdXNlIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gYCR7bWVzc2FnZX0sIGNvbnRleHQ6XFxuXFxuJHt0aGlzLmNhdXNlfWBcbiAgICAgICAgcmV0dXJuIGAke21lc3NhZ2V9LCBjb250ZXh0OlxcblxcbiR7SlNPTi5zdHJpbmdpZnkodGhpcy5jYXVzZSl9YFxuICAgIH1cblxuICAgIHN0YXRpYyAjZGVzY3JpcHRpb24oY29kZTogRXJyb3JDb2RlKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdyZW1vdGUtbm8tdXJsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JlbW90ZSBwYXJhbSBzaG91bGQgYmUgYW4gVVJMJ1xuICAgICAgICAgICAgY2FzZSAncmVtb3RlLW5vLWV4dCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdhIGZpbGUtZXh0ZW5zaW9uIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkJ1xuXG4gICAgICAgICAgICBjYXNlICd1cmwtcmVxdWVzdC1oZWFkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RoZSByZXF1ZXN0IHRvIGdldCB0aGUgZmlsZS1leHRlbnNpb24gZmFpbGVkJ1xuICAgICAgICAgICAgY2FzZSAndXJsLXJlcXVlc3QtZ2V0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RoZSByZXF1ZXN0IHRvIGRvd25sb2FkIHRoZSBmaWxlIGZhaWxlZCdcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RyeS1yZWxvYWRpbmcgT2JzaWRpYW4nXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGJhbGFuY2VkO1xuZnVuY3Rpb24gYmFsYW5jZWQoYSwgYiwgc3RyKSB7XG4gIGlmIChhIGluc3RhbmNlb2YgUmVnRXhwKSBhID0gbWF5YmVNYXRjaChhLCBzdHIpO1xuICBpZiAoYiBpbnN0YW5jZW9mIFJlZ0V4cCkgYiA9IG1heWJlTWF0Y2goYiwgc3RyKTtcblxuICB2YXIgciA9IHJhbmdlKGEsIGIsIHN0cik7XG5cbiAgcmV0dXJuIHIgJiYge1xuICAgIHN0YXJ0OiByWzBdLFxuICAgIGVuZDogclsxXSxcbiAgICBwcmU6IHN0ci5zbGljZSgwLCByWzBdKSxcbiAgICBib2R5OiBzdHIuc2xpY2UoclswXSArIGEubGVuZ3RoLCByWzFdKSxcbiAgICBwb3N0OiBzdHIuc2xpY2UoclsxXSArIGIubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXliZU1hdGNoKHJlZywgc3RyKSB7XG4gIHZhciBtID0gc3RyLm1hdGNoKHJlZyk7XG4gIHJldHVybiBtID8gbVswXSA6IG51bGw7XG59XG5cbmJhbGFuY2VkLnJhbmdlID0gcmFuZ2U7XG5mdW5jdGlvbiByYW5nZShhLCBiLCBzdHIpIHtcbiAgdmFyIGJlZ3MsIGJlZywgbGVmdCwgcmlnaHQsIHJlc3VsdDtcbiAgdmFyIGFpID0gc3RyLmluZGV4T2YoYSk7XG4gIHZhciBiaSA9IHN0ci5pbmRleE9mKGIsIGFpICsgMSk7XG4gIHZhciBpID0gYWk7XG5cbiAgaWYgKGFpID49IDAgJiYgYmkgPiAwKSB7XG4gICAgaWYoYT09PWIpIHtcbiAgICAgIHJldHVybiBbYWksIGJpXTtcbiAgICB9XG4gICAgYmVncyA9IFtdO1xuICAgIGxlZnQgPSBzdHIubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPj0gMCAmJiAhcmVzdWx0KSB7XG4gICAgICBpZiAoaSA9PSBhaSkge1xuICAgICAgICBiZWdzLnB1c2goaSk7XG4gICAgICAgIGFpID0gc3RyLmluZGV4T2YoYSwgaSArIDEpO1xuICAgICAgfSBlbHNlIGlmIChiZWdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJlc3VsdCA9IFsgYmVncy5wb3AoKSwgYmkgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZyA9IGJlZ3MucG9wKCk7XG4gICAgICAgIGlmIChiZWcgPCBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IGJlZztcbiAgICAgICAgICByaWdodCA9IGJpO1xuICAgICAgICB9XG5cbiAgICAgICAgYmkgPSBzdHIuaW5kZXhPZihiLCBpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGkgPSBhaSA8IGJpICYmIGFpID49IDAgPyBhaSA6IGJpO1xuICAgIH1cblxuICAgIGlmIChiZWdzLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gWyBsZWZ0LCByaWdodCBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJ2YXIgYmFsYW5jZWQgPSByZXF1aXJlKCdiYWxhbmNlZC1tYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cGFuZFRvcDtcblxudmFyIGVzY1NsYXNoID0gJ1xcMFNMQVNIJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY09wZW4gPSAnXFwwT1BFTicrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NDbG9zZSA9ICdcXDBDTE9TRScrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NDb21tYSA9ICdcXDBDT01NQScrTWF0aC5yYW5kb20oKSsnXFwwJztcbnZhciBlc2NQZXJpb2QgPSAnXFwwUEVSSU9EJytNYXRoLnJhbmRvbSgpKydcXDAnO1xuXG5mdW5jdGlvbiBudW1lcmljKHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCkgPT0gc3RyXG4gICAgPyBwYXJzZUludChzdHIsIDEwKVxuICAgIDogc3RyLmNoYXJDb2RlQXQoMCk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUJyYWNlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnXFxcXFxcXFwnKS5qb2luKGVzY1NsYXNoKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxceycpLmpvaW4oZXNjT3BlbilcbiAgICAgICAgICAgIC5zcGxpdCgnXFxcXH0nKS5qb2luKGVzY0Nsb3NlKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxcLCcpLmpvaW4oZXNjQ29tbWEpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFwuJykuam9pbihlc2NQZXJpb2QpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZUJyYWNlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdChlc2NTbGFzaCkuam9pbignXFxcXCcpXG4gICAgICAgICAgICAuc3BsaXQoZXNjT3Blbikuam9pbigneycpXG4gICAgICAgICAgICAuc3BsaXQoZXNjQ2xvc2UpLmpvaW4oJ30nKVxuICAgICAgICAgICAgLnNwbGl0KGVzY0NvbW1hKS5qb2luKCcsJylcbiAgICAgICAgICAgIC5zcGxpdChlc2NQZXJpb2QpLmpvaW4oJy4nKTtcbn1cblxuXG4vLyBCYXNpY2FsbHkganVzdCBzdHIuc3BsaXQoXCIsXCIpLCBidXQgaGFuZGxpbmcgY2FzZXNcbi8vIHdoZXJlIHdlIGhhdmUgbmVzdGVkIGJyYWNlZCBzZWN0aW9ucywgd2hpY2ggc2hvdWxkIGJlXG4vLyB0cmVhdGVkIGFzIGluZGl2aWR1YWwgbWVtYmVycywgbGlrZSB7YSx7YixjfSxkfVxuZnVuY3Rpb24gcGFyc2VDb21tYVBhcnRzKHN0cikge1xuICBpZiAoIXN0cilcbiAgICByZXR1cm4gWycnXTtcblxuICB2YXIgcGFydHMgPSBbXTtcbiAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcblxuICBpZiAoIW0pXG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnLCcpO1xuXG4gIHZhciBwcmUgPSBtLnByZTtcbiAgdmFyIGJvZHkgPSBtLmJvZHk7XG4gIHZhciBwb3N0ID0gbS5wb3N0O1xuICB2YXIgcCA9IHByZS5zcGxpdCgnLCcpO1xuXG4gIHBbcC5sZW5ndGgtMV0gKz0gJ3snICsgYm9keSArICd9JztcbiAgdmFyIHBvc3RQYXJ0cyA9IHBhcnNlQ29tbWFQYXJ0cyhwb3N0KTtcbiAgaWYgKHBvc3QubGVuZ3RoKSB7XG4gICAgcFtwLmxlbmd0aC0xXSArPSBwb3N0UGFydHMuc2hpZnQoKTtcbiAgICBwLnB1c2guYXBwbHkocCwgcG9zdFBhcnRzKTtcbiAgfVxuXG4gIHBhcnRzLnB1c2guYXBwbHkocGFydHMsIHApO1xuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZnVuY3Rpb24gZXhwYW5kVG9wKHN0cikge1xuICBpZiAoIXN0cilcbiAgICByZXR1cm4gW107XG5cbiAgLy8gSSBkb24ndCBrbm93IHdoeSBCYXNoIDQuMyBkb2VzIHRoaXMsIGJ1dCBpdCBkb2VzLlxuICAvLyBBbnl0aGluZyBzdGFydGluZyB3aXRoIHt9IHdpbGwgaGF2ZSB0aGUgZmlyc3QgdHdvIGJ5dGVzIHByZXNlcnZlZFxuICAvLyBidXQgKm9ubHkqIGF0IHRoZSB0b3AgbGV2ZWwsIHNvIHt9LGF9YiB3aWxsIG5vdCBleHBhbmQgdG8gYW55dGhpbmcsXG4gIC8vIGJ1dCBhe30sYn1jIHdpbGwgYmUgZXhwYW5kZWQgdG8gW2F9YyxhYmNdLlxuICAvLyBPbmUgY291bGQgYXJndWUgdGhhdCB0aGlzIGlzIGEgYnVnIGluIEJhc2gsIGJ1dCBzaW5jZSB0aGUgZ29hbCBvZlxuICAvLyB0aGlzIG1vZHVsZSBpcyB0byBtYXRjaCBCYXNoJ3MgcnVsZXMsIHdlIGVzY2FwZSBhIGxlYWRpbmcge31cbiAgaWYgKHN0ci5zdWJzdHIoMCwgMikgPT09ICd7fScpIHtcbiAgICBzdHIgPSAnXFxcXHtcXFxcfScgKyBzdHIuc3Vic3RyKDIpO1xuICB9XG5cbiAgcmV0dXJuIGV4cGFuZChlc2NhcGVCcmFjZXMoc3RyKSwgdHJ1ZSkubWFwKHVuZXNjYXBlQnJhY2VzKTtcbn1cblxuZnVuY3Rpb24gZW1icmFjZShzdHIpIHtcbiAgcmV0dXJuICd7JyArIHN0ciArICd9Jztcbn1cbmZ1bmN0aW9uIGlzUGFkZGVkKGVsKSB7XG4gIHJldHVybiAvXi0/MFxcZC8udGVzdChlbCk7XG59XG5cbmZ1bmN0aW9uIGx0ZShpLCB5KSB7XG4gIHJldHVybiBpIDw9IHk7XG59XG5mdW5jdGlvbiBndGUoaSwgeSkge1xuICByZXR1cm4gaSA+PSB5O1xufVxuXG5mdW5jdGlvbiBleHBhbmQoc3RyLCBpc1RvcCkge1xuICB2YXIgZXhwYW5zaW9ucyA9IFtdO1xuXG4gIHZhciBtID0gYmFsYW5jZWQoJ3snLCAnfScsIHN0cik7XG4gIGlmICghbSkgcmV0dXJuIFtzdHJdO1xuXG4gIC8vIG5vIG5lZWQgdG8gZXhwYW5kIHByZSwgc2luY2UgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSBmcmVlIG9mIGJyYWNlLXNldHNcbiAgdmFyIHByZSA9IG0ucHJlO1xuICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICA/IGV4cGFuZChtLnBvc3QsIGZhbHNlKVxuICAgIDogWycnXTtcblxuICBpZiAoL1xcJCQvLnRlc3QobS5wcmUpKSB7ICAgIFxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcG9zdC5sZW5ndGg7IGsrKykge1xuICAgICAgdmFyIGV4cGFuc2lvbiA9IHByZSsgJ3snICsgbS5ib2R5ICsgJ30nICsgcG9zdFtrXTtcbiAgICAgIGV4cGFuc2lvbnMucHVzaChleHBhbnNpb24pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXNOdW1lcmljU2VxdWVuY2UgPSAvXi0/XFxkK1xcLlxcLi0/XFxkKyg/OlxcLlxcLi0/XFxkKyk/JC8udGVzdChtLmJvZHkpO1xuICAgIHZhciBpc0FscGhhU2VxdWVuY2UgPSAvXlthLXpBLVpdXFwuXFwuW2EtekEtWl0oPzpcXC5cXC4tP1xcZCspPyQvLnRlc3QobS5ib2R5KTtcbiAgICB2YXIgaXNTZXF1ZW5jZSA9IGlzTnVtZXJpY1NlcXVlbmNlIHx8IGlzQWxwaGFTZXF1ZW5jZTtcbiAgICB2YXIgaXNPcHRpb25zID0gbS5ib2R5LmluZGV4T2YoJywnKSA+PSAwO1xuICAgIGlmICghaXNTZXF1ZW5jZSAmJiAhaXNPcHRpb25zKSB7XG4gICAgICAvLyB7YX0sYn1cbiAgICAgIGlmIChtLnBvc3QubWF0Y2goLywuKlxcfS8pKSB7XG4gICAgICAgIHN0ciA9IG0ucHJlICsgJ3snICsgbS5ib2R5ICsgZXNjQ2xvc2UgKyBtLnBvc3Q7XG4gICAgICAgIHJldHVybiBleHBhbmQoc3RyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbc3RyXTtcbiAgICB9XG5cbiAgICB2YXIgbjtcbiAgICBpZiAoaXNTZXF1ZW5jZSkge1xuICAgICAgbiA9IG0uYm9keS5zcGxpdCgvXFwuXFwuLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4gPSBwYXJzZUNvbW1hUGFydHMobS5ib2R5KTtcbiAgICAgIGlmIChuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyB4e3thLGJ9fXkgPT0+IHh7YX15IHh7Yn15XG4gICAgICAgIG4gPSBleHBhbmQoblswXSwgZmFsc2UpLm1hcChlbWJyYWNlKTtcbiAgICAgICAgaWYgKG4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHBvc3QubWFwKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHJldHVybiBtLnByZSArIG5bMF0gKyBwO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgbiBpcyB0aGUgcGFydHMsIGFuZCB3ZSBrbm93IGl0J3Mgbm90IGEgY29tbWEgc2V0XG4gICAgLy8gd2l0aCBhIHNpbmdsZSBlbnRyeS5cbiAgICB2YXIgTjtcblxuICAgIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgICB2YXIgeCA9IG51bWVyaWMoblswXSk7XG4gICAgICB2YXIgeSA9IG51bWVyaWMoblsxXSk7XG4gICAgICB2YXIgd2lkdGggPSBNYXRoLm1heChuWzBdLmxlbmd0aCwgblsxXS5sZW5ndGgpXG4gICAgICB2YXIgaW5jciA9IG4ubGVuZ3RoID09IDNcbiAgICAgICAgPyBNYXRoLmFicyhudW1lcmljKG5bMl0pKVxuICAgICAgICA6IDE7XG4gICAgICB2YXIgdGVzdCA9IGx0ZTtcbiAgICAgIHZhciByZXZlcnNlID0geSA8IHg7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpbmNyICo9IC0xO1xuICAgICAgICB0ZXN0ID0gZ3RlO1xuICAgICAgfVxuICAgICAgdmFyIHBhZCA9IG4uc29tZShpc1BhZGRlZCk7XG5cbiAgICAgIE4gPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IHg7IHRlc3QoaSwgeSk7IGkgKz0gaW5jcikge1xuICAgICAgICB2YXIgYztcbiAgICAgICAgaWYgKGlzQWxwaGFTZXF1ZW5jZSkge1xuICAgICAgICAgIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpO1xuICAgICAgICAgIGlmIChjID09PSAnXFxcXCcpXG4gICAgICAgICAgICBjID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYyA9IFN0cmluZyhpKTtcbiAgICAgICAgICBpZiAocGFkKSB7XG4gICAgICAgICAgICB2YXIgbmVlZCA9IHdpZHRoIC0gYy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobmVlZCA+IDApIHtcbiAgICAgICAgICAgICAgdmFyIHogPSBuZXcgQXJyYXkobmVlZCArIDEpLmpvaW4oJzAnKTtcbiAgICAgICAgICAgICAgaWYgKGkgPCAwKVxuICAgICAgICAgICAgICAgIGMgPSAnLScgKyB6ICsgYy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGMgPSB6ICsgYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgTi5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBOID0gW107XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbi5sZW5ndGg7IGorKykge1xuICAgICAgICBOLnB1c2guYXBwbHkoTiwgZXhwYW5kKG5bal0sIGZhbHNlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBOLmxlbmd0aDsgaisrKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBvc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGV4cGFuc2lvbiA9IHByZSArIE5bal0gKyBwb3N0W2tdO1xuICAgICAgICBpZiAoIWlzVG9wIHx8IGlzU2VxdWVuY2UgfHwgZXhwYW5zaW9uKVxuICAgICAgICAgIGV4cGFuc2lvbnMucHVzaChleHBhbnNpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHBhbnNpb25zO1xufVxuXG4iLCJjb25zdCBNQVhfUEFUVEVSTl9MRU5HVEggPSAxMDI0ICogNjQ7XG5leHBvcnQgY29uc3QgYXNzZXJ0VmFsaWRQYXR0ZXJuID0gKHBhdHRlcm4pID0+IHtcbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGF0dGVybicpO1xuICAgIH1cbiAgICBpZiAocGF0dGVybi5sZW5ndGggPiBNQVhfUEFUVEVSTl9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0dGVybiBpcyB0b28gbG9uZycpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQtdmFsaWQtcGF0dGVybi5qcy5tYXAiLCIvLyB0cmFuc2xhdGUgdGhlIHZhcmlvdXMgcG9zaXggY2hhcmFjdGVyIGNsYXNzZXMgaW50byB1bmljb2RlIHByb3BlcnRpZXNcbi8vIHRoaXMgd29ya3MgYWNyb3NzIGFsbCB1bmljb2RlIGxvY2FsZXNcbi8vIHsgPHBvc2l4IGNsYXNzPjogWzx0cmFuc2xhdGlvbj4sIC91IGZsYWcgcmVxdWlyZWQsIG5lZ2F0ZWRdXG5jb25zdCBwb3NpeENsYXNzZXMgPSB7XG4gICAgJ1s6YWxudW06XSc6IFsnXFxcXHB7TH1cXFxccHtObH1cXFxccHtOZH0nLCB0cnVlXSxcbiAgICAnWzphbHBoYTpdJzogWydcXFxccHtMfVxcXFxwe05sfScsIHRydWVdLFxuICAgICdbOmFzY2lpOl0nOiBbJ1xcXFx4JyArICcwMC1cXFxceCcgKyAnN2YnLCBmYWxzZV0sXG4gICAgJ1s6Ymxhbms6XSc6IFsnXFxcXHB7WnN9XFxcXHQnLCB0cnVlXSxcbiAgICAnWzpjbnRybDpdJzogWydcXFxccHtDY30nLCB0cnVlXSxcbiAgICAnWzpkaWdpdDpdJzogWydcXFxccHtOZH0nLCB0cnVlXSxcbiAgICAnWzpncmFwaDpdJzogWydcXFxccHtafVxcXFxwe0N9JywgdHJ1ZSwgdHJ1ZV0sXG4gICAgJ1s6bG93ZXI6XSc6IFsnXFxcXHB7TGx9JywgdHJ1ZV0sXG4gICAgJ1s6cHJpbnQ6XSc6IFsnXFxcXHB7Q30nLCB0cnVlXSxcbiAgICAnWzpwdW5jdDpdJzogWydcXFxccHtQfScsIHRydWVdLFxuICAgICdbOnNwYWNlOl0nOiBbJ1xcXFxwe1p9XFxcXHRcXFxcclxcXFxuXFxcXHZcXFxcZicsIHRydWVdLFxuICAgICdbOnVwcGVyOl0nOiBbJ1xcXFxwe0x1fScsIHRydWVdLFxuICAgICdbOndvcmQ6XSc6IFsnXFxcXHB7TH1cXFxccHtObH1cXFxccHtOZH1cXFxccHtQY30nLCB0cnVlXSxcbiAgICAnWzp4ZGlnaXQ6XSc6IFsnQS1GYS1mMC05JywgZmFsc2VdLFxufTtcbi8vIG9ubHkgbmVlZCB0byBlc2NhcGUgYSBmZXcgdGhpbmdzIGluc2lkZSBvZiBicmFjZSBleHByZXNzaW9uc1xuLy8gZXNjYXBlczogWyBcXCBdIC1cbmNvbnN0IGJyYWNlRXNjYXBlID0gKHMpID0+IHMucmVwbGFjZSgvW1tcXF1cXFxcLV0vZywgJ1xcXFwkJicpO1xuLy8gZXNjYXBlIGFsbCByZWdleHAgbWFnaWMgY2hhcmFjdGVyc1xuY29uc3QgcmVnZXhwRXNjYXBlID0gKHMpID0+IHMucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbi8vIGV2ZXJ5dGhpbmcgaGFzIGFscmVhZHkgYmVlbiBlc2NhcGVkLCB3ZSBqdXN0IGhhdmUgdG8gam9pblxuY29uc3QgcmFuZ2VzVG9TdHJpbmcgPSAocmFuZ2VzKSA9PiByYW5nZXMuam9pbignJyk7XG4vLyB0YWtlcyBhIGdsb2Igc3RyaW5nIGF0IGEgcG9zaXggYnJhY2UgZXhwcmVzc2lvbiwgYW5kIHJldHVybnNcbi8vIGFuIGVxdWl2YWxlbnQgcmVndWxhciBleHByZXNzaW9uIHNvdXJjZSwgYW5kIGJvb2xlYW4gaW5kaWNhdGluZ1xuLy8gd2hldGhlciB0aGUgL3UgZmxhZyBuZWVkcyB0byBiZSBhcHBsaWVkLCBhbmQgdGhlIG51bWJlciBvZiBjaGFyc1xuLy8gY29uc3VtZWQgdG8gcGFyc2UgdGhlIGNoYXJhY3RlciBjbGFzcy5cbi8vIFRoaXMgYWxzbyByZW1vdmVzIG91dCBvZiBvcmRlciByYW5nZXMsIGFuZCByZXR1cm5zICgkLikgaWYgdGhlXG4vLyBlbnRpcmUgY2xhc3MganVzdCBubyBnb29kLlxuZXhwb3J0IGNvbnN0IHBhcnNlQ2xhc3MgPSAoZ2xvYiwgcG9zaXRpb24pID0+IHtcbiAgICBjb25zdCBwb3MgPSBwb3NpdGlvbjtcbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICBpZiAoZ2xvYi5jaGFyQXQocG9zKSAhPT0gJ1snKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGluIGEgYnJhY2UgZXhwcmVzc2lvbicpO1xuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIGNvbnN0IHJhbmdlcyA9IFtdO1xuICAgIGNvbnN0IG5lZ3MgPSBbXTtcbiAgICBsZXQgaSA9IHBvcyArIDE7XG4gICAgbGV0IHNhd1N0YXJ0ID0gZmFsc2U7XG4gICAgbGV0IHVmbGFnID0gZmFsc2U7XG4gICAgbGV0IGVzY2FwaW5nID0gZmFsc2U7XG4gICAgbGV0IG5lZ2F0ZSA9IGZhbHNlO1xuICAgIGxldCBlbmRQb3MgPSBwb3M7XG4gICAgbGV0IHJhbmdlU3RhcnQgPSAnJztcbiAgICBXSElMRTogd2hpbGUgKGkgPCBnbG9iLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjID0gZ2xvYi5jaGFyQXQoaSk7XG4gICAgICAgIGlmICgoYyA9PT0gJyEnIHx8IGMgPT09ICdeJykgJiYgaSA9PT0gcG9zICsgMSkge1xuICAgICAgICAgICAgbmVnYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID09PSAnXScgJiYgc2F3U3RhcnQgJiYgIWVzY2FwaW5nKSB7XG4gICAgICAgICAgICBlbmRQb3MgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNhd1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGMgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgaWYgKCFlc2NhcGluZykge1xuICAgICAgICAgICAgICAgIGVzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2NhcGVkIFxcIGNoYXIsIGZhbGwgdGhyb3VnaCBhbmQgdHJlYXQgbGlrZSBub3JtYWwgY2hhclxuICAgICAgICB9XG4gICAgICAgIGlmIChjID09PSAnWycgJiYgIWVzY2FwaW5nKSB7XG4gICAgICAgICAgICAvLyBlaXRoZXIgYSBwb3NpeCBjbGFzcywgYSBjb2xsYXRpb24gZXF1aXZhbGVudCwgb3IganVzdCBhIFtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2NscywgW3VuaXAsIHUsIG5lZ11dIG9mIE9iamVjdC5lbnRyaWVzKHBvc2l4Q2xhc3NlcykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYi5zdGFydHNXaXRoKGNscywgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YWxpZCwgW2EtW10gaXMgZmluZSwgYnV0IG5vdCBbYS1bOmFscGhhXV1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJyQuJywgZmFsc2UsIGdsb2IubGVuZ3RoIC0gcG9zLCB0cnVlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpICs9IGNscy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZWcpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdzLnB1c2godW5pcCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHVuaXApO1xuICAgICAgICAgICAgICAgICAgICB1ZmxhZyA9IHVmbGFnIHx8IHU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIFdISUxFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBub3cgaXQncyBqdXN0IGEgbm9ybWFsIGNoYXJhY3RlciwgZWZmZWN0aXZlbHlcbiAgICAgICAgZXNjYXBpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHJhbmdlU3RhcnQpIHtcbiAgICAgICAgICAgIC8vIHRocm93IHRoaXMgcmFuZ2UgYXdheSBpZiBpdCdzIG5vdCB2YWxpZCwgYnV0IG90aGVyc1xuICAgICAgICAgICAgLy8gY2FuIHN0aWxsIG1hdGNoLlxuICAgICAgICAgICAgaWYgKGMgPiByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goYnJhY2VFc2NhcGUocmFuZ2VTdGFydCkgKyAnLScgKyBicmFjZUVzY2FwZShjKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjID09PSByYW5nZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goYnJhY2VFc2NhcGUoYykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFuZ2VTdGFydCA9ICcnO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IG1pZ2h0IGJlIHRoZSBzdGFydCBvZiBhIHJhbmdlLlxuICAgICAgICAvLyBjYW4gYmUgZWl0aGVyIGMtZCBvciBjLV0gb3IgYzxtb3JlLi4uPl0gb3IgY10gYXQgdGhpcyBwb2ludFxuICAgICAgICBpZiAoZ2xvYi5zdGFydHNXaXRoKCctXScsIGkgKyAxKSkge1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2goYnJhY2VFc2NhcGUoYyArICctJykpO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2Iuc3RhcnRzV2l0aCgnLScsIGkgKyAxKSkge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IGM7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3QgdGhlIHN0YXJ0IG9mIGEgcmFuZ2UsIGp1c3QgYSBzaW5nbGUgY2hhcmFjdGVyXG4gICAgICAgIHJhbmdlcy5wdXNoKGJyYWNlRXNjYXBlKGMpKTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoZW5kUG9zIDwgaSkge1xuICAgICAgICAvLyBkaWRuJ3Qgc2VlIHRoZSBlbmQgb2YgdGhlIGNsYXNzLCBub3QgYSB2YWxpZCBjbGFzcyxcbiAgICAgICAgLy8gYnV0IG1pZ2h0IHN0aWxsIGJlIHZhbGlkIGFzIGEgbGl0ZXJhbCBtYXRjaC5cbiAgICAgICAgcmV0dXJuIFsnJywgZmFsc2UsIDAsIGZhbHNlXTtcbiAgICB9XG4gICAgLy8gaWYgd2UgZ290IG5vIHJhbmdlcyBhbmQgbm8gbmVnYXRlcywgdGhlbiB3ZSBoYXZlIGEgcmFuZ2UgdGhhdFxuICAgIC8vIGNhbm5vdCBwb3NzaWJseSBtYXRjaCBhbnl0aGluZywgYW5kIHRoYXQgcG9pc29ucyB0aGUgd2hvbGUgZ2xvYlxuICAgIGlmICghcmFuZ2VzLmxlbmd0aCAmJiAhbmVncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFsnJC4nLCBmYWxzZSwgZ2xvYi5sZW5ndGggLSBwb3MsIHRydWVdO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBnb3Qgb25lIHBvc2l0aXZlIHJhbmdlLCBhbmQgaXQncyBhIHNpbmdsZSBjaGFyYWN0ZXIsIHRoZW4gdGhhdCdzXG4gICAgLy8gbm90IGFjdHVhbGx5IGEgbWFnaWMgcGF0dGVybiwgaXQncyBqdXN0IHRoYXQgb25lIGxpdGVyYWwgY2hhcmFjdGVyLlxuICAgIC8vIHdlIHNob3VsZCBub3QgdHJlYXQgdGhhdCBhcyBcIm1hZ2ljXCIsIHdlIHNob3VsZCBqdXN0IHJldHVybiB0aGUgbGl0ZXJhbFxuICAgIC8vIGNoYXJhY3Rlci4gW19dIGlzIGEgcGVyZmVjdGx5IHZhbGlkIHdheSB0byBlc2NhcGUgZ2xvYiBtYWdpYyBjaGFycy5cbiAgICBpZiAobmVncy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgcmFuZ2VzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAvXlxcXFw/LiQvLnRlc3QocmFuZ2VzWzBdKSAmJlxuICAgICAgICAhbmVnYXRlKSB7XG4gICAgICAgIGNvbnN0IHIgPSByYW5nZXNbMF0ubGVuZ3RoID09PSAyID8gcmFuZ2VzWzBdLnNsaWNlKC0xKSA6IHJhbmdlc1swXTtcbiAgICAgICAgcmV0dXJuIFtyZWdleHBFc2NhcGUociksIGZhbHNlLCBlbmRQb3MgLSBwb3MsIGZhbHNlXTtcbiAgICB9XG4gICAgY29uc3Qgc3JhbmdlcyA9ICdbJyArIChuZWdhdGUgPyAnXicgOiAnJykgKyByYW5nZXNUb1N0cmluZyhyYW5nZXMpICsgJ10nO1xuICAgIGNvbnN0IHNuZWdzID0gJ1snICsgKG5lZ2F0ZSA/ICcnIDogJ14nKSArIHJhbmdlc1RvU3RyaW5nKG5lZ3MpICsgJ10nO1xuICAgIGNvbnN0IGNvbWIgPSByYW5nZXMubGVuZ3RoICYmIG5lZ3MubGVuZ3RoXG4gICAgICAgID8gJygnICsgc3JhbmdlcyArICd8JyArIHNuZWdzICsgJyknXG4gICAgICAgIDogcmFuZ2VzLmxlbmd0aFxuICAgICAgICAgICAgPyBzcmFuZ2VzXG4gICAgICAgICAgICA6IHNuZWdzO1xuICAgIHJldHVybiBbY29tYiwgdWZsYWcsIGVuZFBvcyAtIHBvcywgdHJ1ZV07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJhY2UtZXhwcmVzc2lvbnMuanMubWFwIiwiLyoqXG4gKiBVbi1lc2NhcGUgYSBzdHJpbmcgdGhhdCBoYXMgYmVlbiBlc2NhcGVkIHdpdGgge0BsaW5rIGVzY2FwZX0uXG4gKlxuICogSWYgdGhlIHtAbGluayB3aW5kb3dzUGF0aHNOb0VzY2FwZX0gb3B0aW9uIGlzIHVzZWQsIHRoZW4gc3F1YXJlLWJyYWNlXG4gKiBlc2NhcGVzIGFyZSByZW1vdmVkLCBidXQgbm90IGJhY2tzbGFzaCBlc2NhcGVzLiAgRm9yIGV4YW1wbGUsIGl0IHdpbGwgdHVyblxuICogdGhlIHN0cmluZyBgJ1sqXSdgIGludG8gYCpgLCBidXQgaXQgd2lsbCBub3QgdHVybiBgJ1xcXFwqJ2AgaW50byBgJyonYCxcbiAqIGJlY3Vhc2UgYFxcYCBpcyBhIHBhdGggc2VwYXJhdG9yIGluIGB3aW5kb3dzUGF0aHNOb0VzY2FwZWAgbW9kZS5cbiAqXG4gKiBXaGVuIGB3aW5kb3dzUGF0aHNOb0VzY2FwZWAgaXMgbm90IHNldCwgdGhlbiBib3RoIGJyYWNlIGVzY2FwZXMgYW5kXG4gKiBiYWNrc2xhc2ggZXNjYXBlcyBhcmUgcmVtb3ZlZC5cbiAqXG4gKiBTbGFzaGVzIChhbmQgYmFja3NsYXNoZXMgaW4gYHdpbmRvd3NQYXRoc05vRXNjYXBlYCBtb2RlKSBjYW5ub3QgYmUgZXNjYXBlZFxuICogb3IgdW5lc2NhcGVkLlxuICovXG5leHBvcnQgY29uc3QgdW5lc2NhcGUgPSAocywgeyB3aW5kb3dzUGF0aHNOb0VzY2FwZSA9IGZhbHNlLCB9ID0ge30pID0+IHtcbiAgICByZXR1cm4gd2luZG93c1BhdGhzTm9Fc2NhcGVcbiAgICAgICAgPyBzLnJlcGxhY2UoL1xcWyhbXlxcL1xcXFxdKVxcXS9nLCAnJDEnKVxuICAgICAgICA6IHMucmVwbGFjZSgvKCg/IVxcXFwpLnxeKVxcWyhbXlxcL1xcXFxdKVxcXS9nLCAnJDEkMicpLnJlcGxhY2UoL1xcXFwoW15cXC9dKS9nLCAnJDEnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmVzY2FwZS5qcy5tYXAiLCIvLyBwYXJzZSBhIHNpbmdsZSBwYXRoIHBvcnRpb25cbmltcG9ydCB7IHBhcnNlQ2xhc3MgfSBmcm9tICcuL2JyYWNlLWV4cHJlc3Npb25zLmpzJztcbmltcG9ydCB7IHVuZXNjYXBlIH0gZnJvbSAnLi91bmVzY2FwZS5qcyc7XG5jb25zdCB0eXBlcyA9IG5ldyBTZXQoWychJywgJz8nLCAnKycsICcqJywgJ0AnXSk7XG5jb25zdCBpc0V4dGdsb2JUeXBlID0gKGMpID0+IHR5cGVzLmhhcyhjKTtcbi8vIFBhdHRlcm5zIHRoYXQgZ2V0IHByZXBlbmRlZCB0byBiaW5kIHRvIHRoZSBzdGFydCBvZiBlaXRoZXIgdGhlXG4vLyBlbnRpcmUgc3RyaW5nLCBvciBqdXN0IGEgc2luZ2xlIHBhdGggcG9ydGlvbiwgdG8gcHJldmVudCBkb3RzXG4vLyBhbmQvb3IgdHJhdmVyc2FsIHBhdHRlcm5zLCB3aGVuIG5lZWRlZC5cbi8vIEV4dHMgZG9uJ3QgbmVlZCB0aGUgXiBvciAvIGJpdCwgYmVjYXVzZSB0aGUgcm9vdCBiaW5kcyB0aGF0IGFscmVhZHkuXG5jb25zdCBzdGFydE5vVHJhdmVyc2FsID0gJyg/ISg/Ol58LylcXFxcLlxcXFwuPyg/OiR8LykpJztcbmNvbnN0IHN0YXJ0Tm9Eb3QgPSAnKD8hXFxcXC4pJztcbi8vIGNoYXJhY3RlcnMgdGhhdCBpbmRpY2F0ZSBhIHN0YXJ0IG9mIHBhdHRlcm4gbmVlZHMgdGhlIFwibm8gZG90c1wiIGJpdCxcbi8vIGJlY2F1c2UgYSBkb3QgKm1pZ2h0KiBiZSBtYXRjaGVkLiAoIGlzIG5vdCBpbiB0aGUgbGlzdCwgYmVjYXVzZSBpblxuLy8gdGhlIGNhc2Ugb2YgYSBjaGlsZCBleHRnbG9iLCBpdCB3aWxsIGhhbmRsZSB0aGUgcHJldmVudGlvbiBpdHNlbGYuXG5jb25zdCBhZGRQYXR0ZXJuU3RhcnQgPSBuZXcgU2V0KFsnWycsICcuJ10pO1xuLy8gY2FzZXMgd2hlcmUgdHJhdmVyc2FsIGlzIEEtT0ssIG5vIGRvdCBwcmV2ZW50aW9uIG5lZWRlZFxuY29uc3QganVzdERvdHMgPSBuZXcgU2V0KFsnLi4nLCAnLiddKTtcbmNvbnN0IHJlU3BlY2lhbHMgPSBuZXcgU2V0KCcoKS4qe30rP1tdXiRcXFxcIScpO1xuY29uc3QgcmVnRXhwRXNjYXBlID0gKHMpID0+IHMucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbi8vIGFueSBzaW5nbGUgdGhpbmcgb3RoZXIgdGhhbiAvXG5jb25zdCBxbWFyayA9ICdbXi9dJztcbi8vICogPT4gYW55IG51bWJlciBvZiBjaGFyYWN0ZXJzXG5jb25zdCBzdGFyID0gcW1hcmsgKyAnKj8nO1xuLy8gdXNlICsgd2hlbiB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0ICpzb21ldGhpbmcqIG1hdGNoZXMsIGJlY2F1c2UgdGhlICogaXNcbi8vIHRoZSBvbmx5IHRoaW5nIGluIHRoZSBwYXRoIHBvcnRpb24uXG5jb25zdCBzdGFyTm9FbXB0eSA9IHFtYXJrICsgJys/Jztcbi8vIHJlbW92ZSB0aGUgXFwgY2hhcnMgdGhhdCB3ZSBhZGRlZCBpZiB3ZSBlbmQgdXAgZG9pbmcgYSBub25tYWdpYyBjb21wYXJlXG4vLyBjb25zdCBkZXNsYXNoID0gKHM6IHN0cmluZykgPT4gcy5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpXG5leHBvcnQgY2xhc3MgQVNUIHtcbiAgICB0eXBlO1xuICAgICNyb290O1xuICAgICNoYXNNYWdpYztcbiAgICAjdWZsYWcgPSBmYWxzZTtcbiAgICAjcGFydHMgPSBbXTtcbiAgICAjcGFyZW50O1xuICAgICNwYXJlbnRJbmRleDtcbiAgICAjbmVncztcbiAgICAjZmlsbGVkTmVncyA9IGZhbHNlO1xuICAgICNvcHRpb25zO1xuICAgICN0b1N0cmluZztcbiAgICAvLyBzZXQgdG8gdHJ1ZSBpZiBpdCdzIGFuIGV4dGdsb2Igd2l0aCBubyBjaGlsZHJlblxuICAgIC8vICh3aGljaCByZWFsbHkgbWVhbnMgb25lIGNoaWxkIG9mICcnKVxuICAgICNlbXB0eUV4dCA9IGZhbHNlO1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHBhcmVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIC8vIGV4dGdsb2JzIGFyZSBpbmhlcmVudGx5IG1hZ2ljYWxcbiAgICAgICAgaWYgKHR5cGUpXG4gICAgICAgICAgICB0aGlzLiNoYXNNYWdpYyA9IHRydWU7XG4gICAgICAgIHRoaXMuI3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy4jcm9vdCA9IHRoaXMuI3BhcmVudCA/IHRoaXMuI3BhcmVudC4jcm9vdCA6IHRoaXM7XG4gICAgICAgIHRoaXMuI29wdGlvbnMgPSB0aGlzLiNyb290ID09PSB0aGlzID8gb3B0aW9ucyA6IHRoaXMuI3Jvb3QuI29wdGlvbnM7XG4gICAgICAgIHRoaXMuI25lZ3MgPSB0aGlzLiNyb290ID09PSB0aGlzID8gW10gOiB0aGlzLiNyb290LiNuZWdzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJyEnICYmICF0aGlzLiNyb290LiNmaWxsZWROZWdzKVxuICAgICAgICAgICAgdGhpcy4jbmVncy5wdXNoKHRoaXMpO1xuICAgICAgICB0aGlzLiNwYXJlbnRJbmRleCA9IHRoaXMuI3BhcmVudCA/IHRoaXMuI3BhcmVudC4jcGFydHMubGVuZ3RoIDogMDtcbiAgICB9XG4gICAgZ2V0IGhhc01hZ2ljKCkge1xuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgaWYgKHRoaXMuI2hhc01hZ2ljICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jaGFzTWFnaWM7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLiNwYXJ0cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChwLnR5cGUgfHwgcC5oYXNNYWdpYylcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuI2hhc01hZ2ljID0gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm90ZTogd2lsbCBiZSB1bmRlZmluZWQgdW50aWwgd2UgZ2VuZXJhdGUgdGhlIHJlZ2V4cCBzcmMgYW5kIGZpbmQgb3V0XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNYWdpYztcbiAgICB9XG4gICAgLy8gcmVjb25zdHJ1Y3RzIHRoZSBwYXR0ZXJuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLiN0b1N0cmluZyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3RvU3RyaW5nO1xuICAgICAgICBpZiAoIXRoaXMudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLiN0b1N0cmluZyA9IHRoaXMuI3BhcnRzLm1hcChwID0+IFN0cmluZyhwKSkuam9pbignJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLiN0b1N0cmluZyA9XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlICsgJygnICsgdGhpcy4jcGFydHMubWFwKHAgPT4gU3RyaW5nKHApKS5qb2luKCd8JykgKyAnKScpO1xuICAgICAgICB9XG4gICAgfVxuICAgICNmaWxsTmVncygpIHtcbiAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgIGlmICh0aGlzICE9PSB0aGlzLiNyb290KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaG91bGQgb25seSBjYWxsIG9uIHJvb3QnKTtcbiAgICAgICAgaWYgKHRoaXMuI2ZpbGxlZE5lZ3MpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgLy8gY2FsbCB0b1N0cmluZygpIG9uY2UgdG8gZmlsbCB0aGlzIG91dFxuICAgICAgICB0aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuI2ZpbGxlZE5lZ3MgPSB0cnVlO1xuICAgICAgICBsZXQgbjtcbiAgICAgICAgd2hpbGUgKChuID0gdGhpcy4jbmVncy5wb3AoKSkpIHtcbiAgICAgICAgICAgIGlmIChuLnR5cGUgIT09ICchJylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIHdhbGsgdXAgdGhlIHRyZWUsIGFwcGVuZGluZyBldmVydGhpbmcgdGhhdCBjb21lcyBBRlRFUiBwYXJlbnRJbmRleFxuICAgICAgICAgICAgbGV0IHAgPSBuO1xuICAgICAgICAgICAgbGV0IHBwID0gcC4jcGFyZW50O1xuICAgICAgICAgICAgd2hpbGUgKHBwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHAuI3BhcmVudEluZGV4ICsgMTsgIXBwLnR5cGUgJiYgaSA8IHBwLiNwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2Ygbi4jcGFydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RyaW5nIHBhcnQgaW4gZXh0Z2xvYiBBU1Q/PycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQuY29weUluKHBwLiNwYXJ0c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcCA9IHBwO1xuICAgICAgICAgICAgICAgIHBwID0gcC4jcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwdXNoKC4uLnBhcnRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBwYXJ0cykge1xuICAgICAgICAgICAgaWYgKHAgPT09ICcnKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnICYmICEocCBpbnN0YW5jZW9mIEFTVCAmJiBwLiNwYXJlbnQgPT09IHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBhcnQ6ICcgKyBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgICAgICB0aGlzLiNwYXJ0cy5wdXNoKHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gdGhpcy50eXBlID09PSBudWxsXG4gICAgICAgICAgICA/IHRoaXMuI3BhcnRzLnNsaWNlKCkubWFwKHAgPT4gKHR5cGVvZiBwID09PSAnc3RyaW5nJyA/IHAgOiBwLnRvSlNPTigpKSlcbiAgICAgICAgICAgIDogW3RoaXMudHlwZSwgLi4udGhpcy4jcGFydHMubWFwKHAgPT4gcC50b0pTT04oKSldO1xuICAgICAgICBpZiAodGhpcy5pc1N0YXJ0KCkgJiYgIXRoaXMudHlwZSlcbiAgICAgICAgICAgIHJldC51bnNoaWZ0KFtdKTtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmQoKSAmJlxuICAgICAgICAgICAgKHRoaXMgPT09IHRoaXMuI3Jvb3QgfHxcbiAgICAgICAgICAgICAgICAodGhpcy4jcm9vdC4jZmlsbGVkTmVncyAmJiB0aGlzLiNwYXJlbnQ/LnR5cGUgPT09ICchJykpKSB7XG4gICAgICAgICAgICByZXQucHVzaCh7fSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgaXNTdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3Jvb3QgPT09IHRoaXMpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gaWYgKHRoaXMudHlwZSkgcmV0dXJuICEhdGhpcy4jcGFyZW50Py5pc1N0YXJ0KClcbiAgICAgICAgaWYgKCF0aGlzLiNwYXJlbnQ/LmlzU3RhcnQoKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuI3BhcmVudEluZGV4ID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vIGlmIGV2ZXJ5dGhpbmcgQUhFQUQgb2YgdGhpcyBpcyBhIG5lZ2F0aW9uLCB0aGVuIGl0J3Mgc3RpbGwgdGhlIFwic3RhcnRcIlxuICAgICAgICBjb25zdCBwID0gdGhpcy4jcGFyZW50O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3BhcmVudEluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBwID0gcC4jcGFydHNbaV07XG4gICAgICAgICAgICBpZiAoIShwcCBpbnN0YW5jZW9mIEFTVCAmJiBwcC50eXBlID09PSAnIScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpc0VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3Jvb3QgPT09IHRoaXMpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuI3BhcmVudD8udHlwZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICghdGhpcy4jcGFyZW50Py5pc0VuZCgpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMudHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNwYXJlbnQ/LmlzRW5kKCk7XG4gICAgICAgIC8vIGlmIG5vdCByb290LCBpdCdsbCBhbHdheXMgaGF2ZSBhIHBhcmVudFxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgY29uc3QgcGwgPSB0aGlzLiNwYXJlbnQgPyB0aGlzLiNwYXJlbnQuI3BhcnRzLmxlbmd0aCA6IDA7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgIHJldHVybiB0aGlzLiNwYXJlbnRJbmRleCA9PT0gcGwgLSAxO1xuICAgIH1cbiAgICBjb3B5SW4ocGFydCkge1xuICAgICAgICBpZiAodHlwZW9mIHBhcnQgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhpcy5wdXNoKHBhcnQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnB1c2gocGFydC5jbG9uZSh0aGlzKSk7XG4gICAgfVxuICAgIGNsb25lKHBhcmVudCkge1xuICAgICAgICBjb25zdCBjID0gbmV3IEFTVCh0aGlzLnR5cGUsIHBhcmVudCk7XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLiNwYXJ0cykge1xuICAgICAgICAgICAgYy5jb3B5SW4ocCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHN0YXRpYyAjcGFyc2VBU1Qoc3RyLCBhc3QsIHBvcywgb3B0KSB7XG4gICAgICAgIGxldCBlc2NhcGluZyA9IGZhbHNlO1xuICAgICAgICBsZXQgaW5CcmFjZSA9IGZhbHNlO1xuICAgICAgICBsZXQgYnJhY2VTdGFydCA9IC0xO1xuICAgICAgICBsZXQgYnJhY2VOZWcgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFzdC50eXBlID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBvdXRzaWRlIG9mIGEgZXh0Z2xvYiwgYXBwZW5kIHVudGlsIHdlIGZpbmQgYSBzdGFydFxuICAgICAgICAgICAgbGV0IGkgPSBwb3M7XG4gICAgICAgICAgICBsZXQgYWNjID0gJyc7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gc3RyLmNoYXJBdChpKyspO1xuICAgICAgICAgICAgICAgIC8vIHN0aWxsIGFjY3VtdWxhdGUgZXNjYXBlcyBhdCB0aGlzIHBvaW50LCBidXQgd2UgZG8gaWdub3JlXG4gICAgICAgICAgICAgICAgLy8gc3RhcnRzIHRoYXQgYXJlIGVzY2FwZWRcbiAgICAgICAgICAgICAgICBpZiAoZXNjYXBpbmcgfHwgYyA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwaW5nID0gIWVzY2FwaW5nO1xuICAgICAgICAgICAgICAgICAgICBhY2MgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbkJyYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBicmFjZVN0YXJ0ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09ICdeJyB8fCBjID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFjZU5lZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYyA9PT0gJ10nICYmICEoaSA9PT0gYnJhY2VTdGFydCArIDIgJiYgYnJhY2VOZWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbkJyYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWNjICs9IGM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjID09PSAnWycpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5CcmFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyYWNlU3RhcnQgPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmFjZU5lZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhY2MgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghb3B0Lm5vZXh0ICYmIGlzRXh0Z2xvYlR5cGUoYykgJiYgc3RyLmNoYXJBdChpKSA9PT0gJygnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzdC5wdXNoKGFjYyk7XG4gICAgICAgICAgICAgICAgICAgIGFjYyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHQgPSBuZXcgQVNUKGMsIGFzdCk7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBBU1QuI3BhcnNlQVNUKHN0ciwgZXh0LCBpLCBvcHQpO1xuICAgICAgICAgICAgICAgICAgICBhc3QucHVzaChleHQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjICs9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3QucHVzaChhY2MpO1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc29tZSBraW5kIG9mIGV4dGdsb2IsIHBvcyBpcyBhdCB0aGUgKFxuICAgICAgICAvLyBmaW5kIHRoZSBuZXh0IHwgb3IgKVxuICAgICAgICBsZXQgaSA9IHBvcyArIDE7XG4gICAgICAgIGxldCBwYXJ0ID0gbmV3IEFTVChudWxsLCBhc3QpO1xuICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgICAgICBsZXQgYWNjID0gJyc7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSsrKTtcbiAgICAgICAgICAgIC8vIHN0aWxsIGFjY3VtdWxhdGUgZXNjYXBlcyBhdCB0aGlzIHBvaW50LCBidXQgd2UgZG8gaWdub3JlXG4gICAgICAgICAgICAvLyBzdGFydHMgdGhhdCBhcmUgZXNjYXBlZFxuICAgICAgICAgICAgaWYgKGVzY2FwaW5nIHx8IGMgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgIGVzY2FwaW5nID0gIWVzY2FwaW5nO1xuICAgICAgICAgICAgICAgIGFjYyArPSBjO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluQnJhY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gYnJhY2VTdGFydCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09ICdeJyB8fCBjID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYWNlTmVnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjID09PSAnXScgJiYgIShpID09PSBicmFjZVN0YXJ0ICsgMiAmJiBicmFjZU5lZykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5CcmFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2MgKz0gYztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGMgPT09ICdbJykge1xuICAgICAgICAgICAgICAgIGluQnJhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyYWNlU3RhcnQgPSBpO1xuICAgICAgICAgICAgICAgIGJyYWNlTmVnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYWNjICs9IGM7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNFeHRnbG9iVHlwZShjKSAmJiBzdHIuY2hhckF0KGkpID09PSAnKCcpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnB1c2goYWNjKTtcbiAgICAgICAgICAgICAgICBhY2MgPSAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBleHQgPSBuZXcgQVNUKGMsIHBhcnQpO1xuICAgICAgICAgICAgICAgIHBhcnQucHVzaChleHQpO1xuICAgICAgICAgICAgICAgIGkgPSBBU1QuI3BhcnNlQVNUKHN0ciwgZXh0LCBpLCBvcHQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICd8Jykge1xuICAgICAgICAgICAgICAgIHBhcnQucHVzaChhY2MpO1xuICAgICAgICAgICAgICAgIGFjYyA9ICcnO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgICAgICAgICAgcGFydCA9IG5ldyBBU1QobnVsbCwgYXN0KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnKScpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWNjID09PSAnJyAmJiBhc3QuI3BhcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhc3QuI2VtcHR5RXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFydC5wdXNoKGFjYyk7XG4gICAgICAgICAgICAgICAgYWNjID0gJyc7XG4gICAgICAgICAgICAgICAgYXN0LnB1c2goLi4ucGFydHMsIHBhcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjICs9IGM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdW5maW5pc2hlZCBleHRnbG9iXG4gICAgICAgIC8vIGlmIHdlIGdvdCBoZXJlLCBpdCB3YXMgYSBtYWxmb3JtZWQgZXh0Z2xvYiEgbm90IGFuIGV4dGdsb2IsIGJ1dFxuICAgICAgICAvLyBtYXliZSBzb21ldGhpbmcgZWxzZSBpbiB0aGVyZS5cbiAgICAgICAgYXN0LnR5cGUgPSBudWxsO1xuICAgICAgICBhc3QuI2hhc01hZ2ljID0gdW5kZWZpbmVkO1xuICAgICAgICBhc3QuI3BhcnRzID0gW3N0ci5zdWJzdHJpbmcocG9zIC0gMSldO1xuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21HbG9iKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBhc3QgPSBuZXcgQVNUKG51bGwsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgICAgIEFTVC4jcGFyc2VBU1QocGF0dGVybiwgYXN0LCAwLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGFzdDtcbiAgICB9XG4gICAgLy8gcmV0dXJucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGlmIHRoZXJlJ3MgbWFnaWMsIG9yIHRoZSB1bmVzY2FwZWRcbiAgICAvLyBzdHJpbmcgaWYgbm90LlxuICAgIHRvTU1QYXR0ZXJuKCkge1xuICAgICAgICAvLyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gcm9vdFxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgaWYgKHRoaXMgIT09IHRoaXMuI3Jvb3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jcm9vdC50b01NUGF0dGVybigpO1xuICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICBjb25zdCBnbG9iID0gdGhpcy50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBbcmUsIGJvZHksIGhhc01hZ2ljLCB1ZmxhZ10gPSB0aGlzLnRvUmVnRXhwU291cmNlKCk7XG4gICAgICAgIC8vIGlmIHdlJ3JlIGluIG5vY2FzZSBtb2RlLCBhbmQgbm90IG5vY2FzZU1hZ2ljT25seSwgdGhlbiB3ZSBkb1xuICAgICAgICAvLyBzdGlsbCBuZWVkIGEgcmVndWxhciBleHByZXNzaW9uIGlmIHdlIGhhdmUgdG8gY2FzZS1pbnNlbnNpdGl2ZWx5XG4gICAgICAgIC8vIG1hdGNoIGNhcGl0YWwvbG93ZXJjYXNlIGNoYXJhY3RlcnMuXG4gICAgICAgIGNvbnN0IGFueU1hZ2ljID0gaGFzTWFnaWMgfHxcbiAgICAgICAgICAgIHRoaXMuI2hhc01hZ2ljIHx8XG4gICAgICAgICAgICAodGhpcy4jb3B0aW9ucy5ub2Nhc2UgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy4jb3B0aW9ucy5ub2Nhc2VNYWdpY09ubHkgJiZcbiAgICAgICAgICAgICAgICBnbG9iLnRvVXBwZXJDYXNlKCkgIT09IGdsb2IudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmICghYW55TWFnaWMpIHtcbiAgICAgICAgICAgIHJldHVybiBib2R5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZsYWdzID0gKHRoaXMuI29wdGlvbnMubm9jYXNlID8gJ2knIDogJycpICsgKHVmbGFnID8gJ3UnIDogJycpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUmVnRXhwKGBeJHtyZX0kYCwgZmxhZ3MpLCB7XG4gICAgICAgICAgICBfc3JjOiByZSxcbiAgICAgICAgICAgIF9nbG9iOiBnbG9iLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNvcHRpb25zO1xuICAgIH1cbiAgICAvLyByZXR1cm5zIHRoZSBzdHJpbmcgbWF0Y2gsIHRoZSByZWdleHAgc291cmNlLCB3aGV0aGVyIHRoZXJlJ3MgbWFnaWNcbiAgICAvLyBpbiB0aGUgcmVnZXhwIChzbyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyByZXF1aXJlZCkgYW5kIHdoZXRoZXIgb3JcbiAgICAvLyBub3QgdGhlIHVmbGFnIGlzIG5lZWRlZCBmb3IgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiAoZm9yIHBvc2l4IGNsYXNzZXMpXG4gICAgLy8gVE9ETzogaW5zdGVhZCBvZiBpbmplY3RpbmcgdGhlIHN0YXJ0L2VuZCBhdCB0aGlzIHBvaW50LCBqdXN0IHJldHVyblxuICAgIC8vIHRoZSBCT0RZIG9mIHRoZSByZWdleHAsIGFsb25nIHdpdGggdGhlIHN0YXJ0L2VuZCBwb3J0aW9ucyBzdWl0YWJsZVxuICAgIC8vIGZvciBiaW5kaW5nIHRoZSBzdGFydC9lbmQgaW4gZWl0aGVyIGEgam9pbmVkIGZ1bGwtcGF0aCBtYWtlUmUgY29udGV4dFxuICAgIC8vICh3aGVyZSB3ZSBiaW5kIHRvIChefC8pLCBvciBhIHN0YW5kYWxvbmUgbWF0Y2hQYXJ0IGNvbnRleHQgKHdoZXJlXG4gICAgLy8gd2UgYmluZCB0byBeLCBhbmQgbm90IC8pLiAgT3RoZXJ3aXNlIHNsYXNoZXMgZ2V0IGR1cGVkIVxuICAgIC8vXG4gICAgLy8gSW4gcGFydC1tYXRjaGluZyBtb2RlLCB0aGUgc3RhcnQgaXM6XG4gICAgLy8gLSBpZiBub3QgaXNTdGFydDogbm90aGluZ1xuICAgIC8vIC0gaWYgdHJhdmVyc2FsIHBvc3NpYmxlLCBidXQgbm90IGFsbG93ZWQ6IF4oPyFcXC5cXC4/JClcbiAgICAvLyAtIGlmIGRvdHMgYWxsb3dlZCBvciBub3QgcG9zc2libGU6IF5cbiAgICAvLyAtIGlmIGRvdHMgcG9zc2libGUgYW5kIG5vdCBhbGxvd2VkOiBeKD8hXFwuKVxuICAgIC8vIGVuZCBpczpcbiAgICAvLyAtIGlmIG5vdCBpc0VuZCgpOiBub3RoaW5nXG4gICAgLy8gLSBlbHNlOiAkXG4gICAgLy9cbiAgICAvLyBJbiBmdWxsLXBhdGggbWF0Y2hpbmcgbW9kZSwgd2UgcHV0IHRoZSBzbGFzaCBhdCB0aGUgU1RBUlQgb2YgdGhlXG4gICAgLy8gcGF0dGVybiwgc28gc3RhcnQgaXM6XG4gICAgLy8gLSBpZiBmaXJzdCBwYXR0ZXJuOiBzYW1lIGFzIHBhcnQtbWF0Y2hpbmcgbW9kZVxuICAgIC8vIC0gaWYgbm90IGlzU3RhcnQoKTogbm90aGluZ1xuICAgIC8vIC0gaWYgdHJhdmVyc2FsIHBvc3NpYmxlLCBidXQgbm90IGFsbG93ZWQ6IC8oPyFcXC5cXC4/KD86JHwvKSlcbiAgICAvLyAtIGlmIGRvdHMgYWxsb3dlZCBvciBub3QgcG9zc2libGU6IC9cbiAgICAvLyAtIGlmIGRvdHMgcG9zc2libGUgYW5kIG5vdCBhbGxvd2VkOiAvKD8hXFwuKVxuICAgIC8vIGVuZCBpczpcbiAgICAvLyAtIGlmIGxhc3QgcGF0dGVybiwgc2FtZSBhcyBwYXJ0LW1hdGNoaW5nIG1vZGVcbiAgICAvLyAtIGVsc2Ugbm90aGluZ1xuICAgIC8vXG4gICAgLy8gQWx3YXlzIHB1dCB0aGUgKD86JHwvKSBvbiBuZWdhdGVkIHRhaWxzLCB0aG91Z2gsIGJlY2F1c2UgdGhhdCBoYXMgdG8gYmVcbiAgICAvLyB0aGVyZSB0byBiaW5kIHRoZSBlbmQgb2YgdGhlIG5lZ2F0ZWQgcGF0dGVybiBwb3J0aW9uLCBhbmQgaXQncyBlYXNpZXIgdG9cbiAgICAvLyBqdXN0IHN0aWNrIGl0IGluIG5vdyByYXRoZXIgdGhhbiB0cnkgdG8gaW5qZWN0IGl0IGxhdGVyIGluIHRoZSBtaWRkbGUgb2ZcbiAgICAvLyB0aGUgcGF0dGVybi5cbiAgICAvL1xuICAgIC8vIFdlIGNhbiBqdXN0IGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgZW5kLCBhbmQgbGVhdmUgaXQgdXAgdG8gdGhlIGNhbGxlclxuICAgIC8vIHRvIGtub3cgd2hldGhlciBpdCdzIGdvaW5nIHRvIGJlIHVzZWQgam9pbmVkIG9yIGluIHBhcnRzLlxuICAgIC8vIEFuZCwgaWYgdGhlIHN0YXJ0IGlzIGFkanVzdGVkIHNsaWdodGx5LCBjYW4gZG8gdGhlIHNhbWUgdGhlcmU6XG4gICAgLy8gLSBpZiBub3QgaXNTdGFydDogbm90aGluZ1xuICAgIC8vIC0gaWYgdHJhdmVyc2FsIHBvc3NpYmxlLCBidXQgbm90IGFsbG93ZWQ6ICg/Oi98XikoPyFcXC5cXC4/JClcbiAgICAvLyAtIGlmIGRvdHMgYWxsb3dlZCBvciBub3QgcG9zc2libGU6ICg/Oi98XilcbiAgICAvLyAtIGlmIGRvdHMgcG9zc2libGUgYW5kIG5vdCBhbGxvd2VkOiAoPzovfF4pKD8hXFwuKVxuICAgIC8vXG4gICAgLy8gQnV0IGl0J3MgYmV0dGVyIHRvIGhhdmUgYSBzaW1wbGVyIGJpbmRpbmcgd2l0aG91dCBhIGNvbmRpdGlvbmFsLCBmb3JcbiAgICAvLyBwZXJmb3JtYW5jZSwgc28gcHJvYmFibHkgYmV0dGVyIHRvIHJldHVybiBib3RoIHN0YXJ0IG9wdGlvbnMuXG4gICAgLy9cbiAgICAvLyBUaGVuIHRoZSBjYWxsZXIganVzdCBpZ25vcmVzIHRoZSBlbmQgaWYgaXQncyBub3QgdGhlIGZpcnN0IHBhdHRlcm4sXG4gICAgLy8gYW5kIHRoZSBzdGFydCBhbHdheXMgZ2V0cyBhcHBsaWVkLlxuICAgIC8vXG4gICAgLy8gQnV0IHRoYXQncyBhbHdheXMgZ29pbmcgdG8gYmUgJCBpZiBpdCdzIHRoZSBlbmRpbmcgcGF0dGVybiwgb3Igbm90aGluZyxcbiAgICAvLyBzbyB0aGUgY2FsbGVyIGNhbiBqdXN0IGF0dGFjaCAkIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4gd2hlbiBidWlsZGluZy5cbiAgICAvL1xuICAgIC8vIFNvIHRoZSB0b2RvIGlzOlxuICAgIC8vIC0gYmV0dGVyIGRldGVjdCB3aGF0IGtpbmQgb2Ygc3RhcnQgaXMgbmVlZGVkXG4gICAgLy8gLSByZXR1cm4gYm90aCBmbGF2b3JzIG9mIHN0YXJ0aW5nIHBhdHRlcm5cbiAgICAvLyAtIGF0dGFjaCAkIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4gd2hlbiBjcmVhdGluZyB0aGUgYWN0dWFsIFJlZ0V4cFxuICAgIC8vXG4gICAgLy8gQWgsIGJ1dCB3YWl0LCBubywgdGhhdCBhbGwgb25seSBhcHBsaWVzIHRvIHRoZSByb290IHdoZW4gdGhlIGZpcnN0IHBhdHRlcm5cbiAgICAvLyBpcyBub3QgYW4gZXh0Z2xvYi4gSWYgdGhlIGZpcnN0IHBhdHRlcm4gSVMgYW4gZXh0Z2xvYiwgdGhlbiB3ZSBuZWVkIGFsbFxuICAgIC8vIHRoYXQgZG90IHByZXZlbnRpb24gYml6IHRvIGxpdmUgaW4gdGhlIGV4dGdsb2IgcG9ydGlvbnMsIGJlY2F1c2UgZWdcbiAgICAvLyArKCp8LngqKSBjYW4gbWF0Y2ggLnh5IGJ1dCBub3QgLnl4LlxuICAgIC8vXG4gICAgLy8gU28sIHJldHVybiB0aGUgdHdvIGZsYXZvcnMgaWYgaXQncyAjcm9vdCBhbmQgdGhlIGZpcnN0IGNoaWxkIGlzIG5vdCBhblxuICAgIC8vIEFTVCwgb3RoZXJ3aXNlIGxlYXZlIGl0IHRvIHRoZSBjaGlsZCBBU1QgdG8gaGFuZGxlIGl0LCBhbmQgdGhlcmUsXG4gICAgLy8gdXNlIHRoZSAoPzpefC8pIHN0eWxlIG9mIHN0YXJ0IGJpbmRpbmcuXG4gICAgLy9cbiAgICAvLyBFdmVuIHNpbXBsaWZpZWQgZnVydGhlcjpcbiAgICAvLyAtIFNpbmNlIHRoZSBzdGFydCBmb3IgYSBqb2luIGlzIGVnIC8oPyFcXC4pIGFuZCB0aGUgc3RhcnQgZm9yIGEgcGFydFxuICAgIC8vIGlzIF4oPyFcXC4pLCB3ZSBjYW4ganVzdCBwcmVwZW5kICg/IVxcLikgdG8gdGhlIHBhdHRlcm4gKGVpdGhlciByb290XG4gICAgLy8gb3Igc3RhcnQgb3Igd2hhdGV2ZXIpIGFuZCBwcmVwZW5kIF4gb3IgLyBhdCB0aGUgUmVnZXhwIGNvbnN0cnVjdGlvbi5cbiAgICB0b1JlZ0V4cFNvdXJjZShhbGxvd0RvdCkge1xuICAgICAgICBjb25zdCBkb3QgPSBhbGxvd0RvdCA/PyAhIXRoaXMuI29wdGlvbnMuZG90O1xuICAgICAgICBpZiAodGhpcy4jcm9vdCA9PT0gdGhpcylcbiAgICAgICAgICAgIHRoaXMuI2ZpbGxOZWdzKCk7XG4gICAgICAgIGlmICghdGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBub0VtcHR5ID0gdGhpcy5pc1N0YXJ0KCkgJiYgdGhpcy5pc0VuZCgpO1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gdGhpcy4jcGFydHNcbiAgICAgICAgICAgICAgICAubWFwKHAgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtyZSwgXywgaGFzTWFnaWMsIHVmbGFnXSA9IHR5cGVvZiBwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IEFTVC4jcGFyc2VHbG9iKHAsIHRoaXMuI2hhc01hZ2ljLCBub0VtcHR5KVxuICAgICAgICAgICAgICAgICAgICA6IHAudG9SZWdFeHBTb3VyY2UoYWxsb3dEb3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuI2hhc01hZ2ljID0gdGhpcy4jaGFzTWFnaWMgfHwgaGFzTWFnaWM7XG4gICAgICAgICAgICAgICAgdGhpcy4jdWZsYWcgPSB0aGlzLiN1ZmxhZyB8fCB1ZmxhZztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgICAgIGxldCBzdGFydCA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTdGFydCgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiNwYXJ0c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc3RyaW5nIHRoYXQgd2lsbCBtYXRjaCB0aGUgc3RhcnQgb2YgdGhlIHBhdHRlcm4sXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gcHJvdGVjdCBhZ2FpbnN0IGRvdHMgYW5kIHN1Y2guXG4gICAgICAgICAgICAgICAgICAgIC8vICcuJyBhbmQgJy4uJyBjYW5ub3QgbWF0Y2ggdW5sZXNzIHRoZSBwYXR0ZXJuIGlzIHRoYXQgZXhhY3RseSxcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbiBpZiBpdCBzdGFydHMgd2l0aCAuIG9yIGRvdDp0cnVlIGlzIHNldC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG90VHJhdkFsbG93ZWQgPSB0aGlzLiNwYXJ0cy5sZW5ndGggPT09IDEgJiYganVzdERvdHMuaGFzKHRoaXMuI3BhcnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb3RUcmF2QWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXBzID0gYWRkUGF0dGVyblN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhIHBvc3NpYmlsaXR5IG9mIG1hdGNoaW5nIC4gb3IgLi4sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJldmVudCB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZE5vVHJhdiA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG90cyBhcmUgYWxsb3dlZCwgYW5kIHRoZSBwYXR0ZXJuIHN0YXJ0cyB3aXRoIFsgb3IgLlxuICAgICAgICAgICAgICAgICAgICAgICAgKGRvdCAmJiBhcHMuaGFzKHNyYy5jaGFyQXQoMCkpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwYXR0ZXJuIHN0YXJ0cyB3aXRoIFxcLiwgYW5kIHRoZW4gWyBvciAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNyYy5zdGFydHNXaXRoKCdcXFxcLicpICYmIGFwcy5oYXMoc3JjLmNoYXJBdCgyKSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHBhdHRlcm4gc3RhcnRzIHdpdGggXFwuXFwuLCBhbmQgdGhlbiBbIG9yIC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3JjLnN0YXJ0c1dpdGgoJ1xcXFwuXFxcXC4nKSAmJiBhcHMuaGFzKHNyYy5jaGFyQXQoNCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcHJldmVudCBkb3RzIGlmIGl0IGNhbid0IG1hdGNoIGEgZG90LCBvciBpZiBhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWItcGF0dGVybiB3aWxsIGJlIHByZXZlbnRpbmcgaXQgYW55d2F5LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZE5vRG90ID0gIWRvdCAmJiAhYWxsb3dEb3QgJiYgYXBzLmhhcyhzcmMuY2hhckF0KDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbmVlZE5vVHJhdiA/IHN0YXJ0Tm9UcmF2ZXJzYWwgOiBuZWVkTm9Eb3QgPyBzdGFydE5vRG90IDogJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIFwiZW5kIG9mIHBhdGggcG9ydGlvblwiIHBhdHRlcm4gdG8gbmVnYXRpb24gdGFpbHNcbiAgICAgICAgICAgIGxldCBlbmQgPSAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRW5kKCkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiNyb290LiNmaWxsZWROZWdzICYmXG4gICAgICAgICAgICAgICAgdGhpcy4jcGFyZW50Py50eXBlID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSAnKD86JHxcXFxcLyknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmluYWwgPSBzdGFydCArIHNyYyArIGVuZDtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgZmluYWwsXG4gICAgICAgICAgICAgICAgdW5lc2NhcGUoc3JjKSxcbiAgICAgICAgICAgICAgICAodGhpcy4jaGFzTWFnaWMgPSAhIXRoaXMuI2hhc01hZ2ljKSxcbiAgICAgICAgICAgICAgICB0aGlzLiN1ZmxhZyxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIGJvZHkgKnR3aWNlKiBpZiBpdCdzIGEgcmVwZWF0IHBhdHRlcm5cbiAgICAgICAgLy8gYXQgdGhlIHN0YXJ0LCBvbmNlIGluIG5vZG90IG1vZGUsIHRoZW4gYWdhaW4gaW4gZG90IG1vZGUsIHNvIGFcbiAgICAgICAgLy8gcGF0dGVybiBsaWtlICooPykgY2FuIG1hdGNoICd4LnknXG4gICAgICAgIGNvbnN0IHJlcGVhdGVkID0gdGhpcy50eXBlID09PSAnKicgfHwgdGhpcy50eXBlID09PSAnKyc7XG4gICAgICAgIC8vIHNvbWUga2luZCBvZiBleHRnbG9iXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50eXBlID09PSAnIScgPyAnKD86KD8hKD86JyA6ICcoPzonO1xuICAgICAgICBsZXQgYm9keSA9IHRoaXMuI3BhcnRzVG9SZWdFeHAoZG90KTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdGFydCgpICYmIHRoaXMuaXNFbmQoKSAmJiAhYm9keSAmJiB0aGlzLnR5cGUgIT09ICchJykge1xuICAgICAgICAgICAgLy8gaW52YWxpZCBleHRnbG9iLCBoYXMgdG8gYXQgbGVhc3QgYmUgKnNvbWV0aGluZyogcHJlc2VudCwgaWYgaXQnc1xuICAgICAgICAgICAgLy8gdGhlIGVudGlyZSBwYXRoIHBvcnRpb24uXG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy50b1N0cmluZygpO1xuICAgICAgICAgICAgdGhpcy4jcGFydHMgPSBbc107XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4jaGFzTWFnaWMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gW3MsIHVuZXNjYXBlKHRoaXMudG9TdHJpbmcoKSksIGZhbHNlLCBmYWxzZV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gWFhYIGFic3RyYWN0IG91dCB0aGlzIG1hcCBtZXRob2RcbiAgICAgICAgbGV0IGJvZHlEb3RBbGxvd2VkID0gIXJlcGVhdGVkIHx8IGFsbG93RG90IHx8IGRvdCB8fCAhc3RhcnROb0RvdFxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiB0aGlzLiNwYXJ0c1RvUmVnRXhwKHRydWUpO1xuICAgICAgICBpZiAoYm9keURvdEFsbG93ZWQgPT09IGJvZHkpIHtcbiAgICAgICAgICAgIGJvZHlEb3RBbGxvd2VkID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlEb3RBbGxvd2VkKSB7XG4gICAgICAgICAgICBib2R5ID0gYCg/OiR7Ym9keX0pKD86JHtib2R5RG90QWxsb3dlZH0pKj9gO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFuIGVtcHR5ICEoKSBpcyBleGFjdGx5IGVxdWl2YWxlbnQgdG8gYSBzdGFyTm9FbXB0eVxuICAgICAgICBsZXQgZmluYWwgPSAnJztcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJyEnICYmIHRoaXMuI2VtcHR5RXh0KSB7XG4gICAgICAgICAgICBmaW5hbCA9ICh0aGlzLmlzU3RhcnQoKSAmJiAhZG90ID8gc3RhcnROb0RvdCA6ICcnKSArIHN0YXJOb0VtcHR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2xvc2UgPSB0aGlzLnR5cGUgPT09ICchJ1xuICAgICAgICAgICAgICAgID8gLy8gISgpIG11c3QgbWF0Y2ggc29tZXRoaW5nLGJ1dCAhKHgpIGNhbiBtYXRjaCAnJ1xuICAgICAgICAgICAgICAgICAgICAnKSknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmlzU3RhcnQoKSAmJiAhZG90ICYmICFhbGxvd0RvdCA/IHN0YXJ0Tm9Eb3QgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhciArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKSdcbiAgICAgICAgICAgICAgICA6IHRoaXMudHlwZSA9PT0gJ0AnXG4gICAgICAgICAgICAgICAgICAgID8gJyknXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy50eXBlID09PSAnPydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJyk/J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnR5cGUgPT09ICcrJyAmJiBib2R5RG90QWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnR5cGUgPT09ICcqJyAmJiBib2R5RG90QWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGApP2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBgKSR7dGhpcy50eXBlfWA7XG4gICAgICAgICAgICBmaW5hbCA9IHN0YXJ0ICsgYm9keSArIGNsb3NlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmaW5hbCxcbiAgICAgICAgICAgIHVuZXNjYXBlKGJvZHkpLFxuICAgICAgICAgICAgKHRoaXMuI2hhc01hZ2ljID0gISF0aGlzLiNoYXNNYWdpYyksXG4gICAgICAgICAgICB0aGlzLiN1ZmxhZyxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgI3BhcnRzVG9SZWdFeHAoZG90KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwYXJ0c1xuICAgICAgICAgICAgLm1hcChwID0+IHtcbiAgICAgICAgICAgIC8vIGV4dGdsb2IgQVNUcyBzaG91bGQgb25seSBjb250YWluIHBhcmVudCBBU1RzXG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0cmluZyB0eXBlIGluIGV4dGdsb2IgYXN0Pz8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgICAgICAvLyBjYW4gaWdub3JlIGhhc01hZ2ljLCBiZWNhdXNlIGV4dGdsb2JzIGFyZSBhbHJlYWR5IGFsd2F5cyBtYWdpY1xuICAgICAgICAgICAgY29uc3QgW3JlLCBfLCBfaGFzTWFnaWMsIHVmbGFnXSA9IHAudG9SZWdFeHBTb3VyY2UoZG90KTtcbiAgICAgICAgICAgIHRoaXMuI3VmbGFnID0gdGhpcy4jdWZsYWcgfHwgdWZsYWc7XG4gICAgICAgICAgICByZXR1cm4gcmU7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmlsdGVyKHAgPT4gISh0aGlzLmlzU3RhcnQoKSAmJiB0aGlzLmlzRW5kKCkpIHx8ICEhcClcbiAgICAgICAgICAgIC5qb2luKCd8Jyk7XG4gICAgfVxuICAgIHN0YXRpYyAjcGFyc2VHbG9iKGdsb2IsIGhhc01hZ2ljLCBub0VtcHR5ID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGVzY2FwaW5nID0gZmFsc2U7XG4gICAgICAgIGxldCByZSA9ICcnO1xuICAgICAgICBsZXQgdWZsYWcgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnbG9iLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gZ2xvYi5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpZiAoZXNjYXBpbmcpIHtcbiAgICAgICAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlICs9IChyZVNwZWNpYWxzLmhhcyhjKSA/ICdcXFxcJyA6ICcnKSArIGM7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGdsb2IubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZSArPSAnXFxcXFxcXFwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnWycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbc3JjLCBuZWVkVWZsYWcsIGNvbnN1bWVkLCBtYWdpY10gPSBwYXJzZUNsYXNzKGdsb2IsIGkpO1xuICAgICAgICAgICAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICAgICAgICAgICAgICByZSArPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgIHVmbGFnID0gdWZsYWcgfHwgbmVlZFVmbGFnO1xuICAgICAgICAgICAgICAgICAgICBpICs9IGNvbnN1bWVkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgaGFzTWFnaWMgPSBoYXNNYWdpYyB8fCBtYWdpYztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICcqJykge1xuICAgICAgICAgICAgICAgIGlmIChub0VtcHR5ICYmIGdsb2IgPT09ICcqJylcbiAgICAgICAgICAgICAgICAgICAgcmUgKz0gc3Rhck5vRW1wdHk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZSArPSBzdGFyO1xuICAgICAgICAgICAgICAgIGhhc01hZ2ljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICAgICAgICByZSArPSBxbWFyaztcbiAgICAgICAgICAgICAgICBoYXNNYWdpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZSArPSByZWdFeHBFc2NhcGUoYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtyZSwgdW5lc2NhcGUoZ2xvYiksICEhaGFzTWFnaWMsIHVmbGFnXTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3QuanMubWFwIiwiLyoqXG4gKiBFc2NhcGUgYWxsIG1hZ2ljIGNoYXJhY3RlcnMgaW4gYSBnbG9iIHBhdHRlcm4uXG4gKlxuICogSWYgdGhlIHtAbGluayB3aW5kb3dzUGF0aHNOb0VzY2FwZSB8IEdsb2JPcHRpb25zLndpbmRvd3NQYXRoc05vRXNjYXBlfVxuICogb3B0aW9uIGlzIHVzZWQsIHRoZW4gY2hhcmFjdGVycyBhcmUgZXNjYXBlZCBieSB3cmFwcGluZyBpbiBgW11gLCBiZWNhdXNlXG4gKiBhIG1hZ2ljIGNoYXJhY3RlciB3cmFwcGVkIGluIGEgY2hhcmFjdGVyIGNsYXNzIGNhbiBvbmx5IGJlIHNhdGlzZmllZCBieVxuICogdGhhdCBleGFjdCBjaGFyYWN0ZXIuICBJbiB0aGlzIG1vZGUsIGBcXGAgaXMgX25vdF8gZXNjYXBlZCwgYmVjYXVzZSBpdCBpc1xuICogbm90IGludGVycHJldGVkIGFzIGEgbWFnaWMgY2hhcmFjdGVyLCBidXQgaW5zdGVhZCBhcyBhIHBhdGggc2VwYXJhdG9yLlxuICovXG5leHBvcnQgY29uc3QgZXNjYXBlID0gKHMsIHsgd2luZG93c1BhdGhzTm9Fc2NhcGUgPSBmYWxzZSwgfSA9IHt9KSA9PiB7XG4gICAgLy8gZG9uJ3QgbmVlZCB0byBlc2NhcGUgK0AhIGJlY2F1c2Ugd2UgZXNjYXBlIHRoZSBwYXJlbnNcbiAgICAvLyB0aGF0IG1ha2UgdGhvc2UgbWFnaWMsIGFuZCBlc2NhcGluZyAhIGFzIFshXSBpc24ndCB2YWxpZCxcbiAgICAvLyBiZWNhdXNlIFshXV0gaXMgYSB2YWxpZCBnbG9iIGNsYXNzIG1lYW5pbmcgbm90ICddJy5cbiAgICByZXR1cm4gd2luZG93c1BhdGhzTm9Fc2NhcGVcbiAgICAgICAgPyBzLnJlcGxhY2UoL1s/KigpW1xcXV0vZywgJ1skJl0nKVxuICAgICAgICA6IHMucmVwbGFjZSgvWz8qKClbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZS5qcy5tYXAiLCJpbXBvcnQgZXhwYW5kIGZyb20gJ2JyYWNlLWV4cGFuc2lvbic7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFBhdHRlcm4gfSBmcm9tICcuL2Fzc2VydC12YWxpZC1wYXR0ZXJuLmpzJztcbmltcG9ydCB7IEFTVCB9IGZyb20gJy4vYXN0LmpzJztcbmltcG9ydCB7IGVzY2FwZSB9IGZyb20gJy4vZXNjYXBlLmpzJztcbmltcG9ydCB7IHVuZXNjYXBlIH0gZnJvbSAnLi91bmVzY2FwZS5qcyc7XG5leHBvcnQgY29uc3QgbWluaW1hdGNoID0gKHAsIHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGFzc2VydFZhbGlkUGF0dGVybihwYXR0ZXJuKTtcbiAgICAvLyBzaG9ydGN1dDogY29tbWVudHMgbWF0Y2ggbm90aGluZy5cbiAgICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKS5tYXRjaChwKTtcbn07XG4vLyBPcHRpbWl6ZWQgY2hlY2tpbmcgZm9yIHRoZSBtb3N0IGNvbW1vbiBnbG9iIHBhdHRlcm5zLlxuY29uc3Qgc3RhckRvdEV4dFJFID0gL15cXCorKFteK0AhP1xcKlxcW1xcKF0qKSQvO1xuY29uc3Qgc3RhckRvdEV4dFRlc3QgPSAoZXh0KSA9PiAoZikgPT4gIWYuc3RhcnRzV2l0aCgnLicpICYmIGYuZW5kc1dpdGgoZXh0KTtcbmNvbnN0IHN0YXJEb3RFeHRUZXN0RG90ID0gKGV4dCkgPT4gKGYpID0+IGYuZW5kc1dpdGgoZXh0KTtcbmNvbnN0IHN0YXJEb3RFeHRUZXN0Tm9jYXNlID0gKGV4dCkgPT4ge1xuICAgIGV4dCA9IGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAoZikgPT4gIWYuc3RhcnRzV2l0aCgnLicpICYmIGYudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChleHQpO1xufTtcbmNvbnN0IHN0YXJEb3RFeHRUZXN0Tm9jYXNlRG90ID0gKGV4dCkgPT4ge1xuICAgIGV4dCA9IGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAoZikgPT4gZi50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKGV4dCk7XG59O1xuY29uc3Qgc3RhckRvdFN0YXJSRSA9IC9eXFwqK1xcLlxcKiskLztcbmNvbnN0IHN0YXJEb3RTdGFyVGVzdCA9IChmKSA9PiAhZi5zdGFydHNXaXRoKCcuJykgJiYgZi5pbmNsdWRlcygnLicpO1xuY29uc3Qgc3RhckRvdFN0YXJUZXN0RG90ID0gKGYpID0+IGYgIT09ICcuJyAmJiBmICE9PSAnLi4nICYmIGYuaW5jbHVkZXMoJy4nKTtcbmNvbnN0IGRvdFN0YXJSRSA9IC9eXFwuXFwqKyQvO1xuY29uc3QgZG90U3RhclRlc3QgPSAoZikgPT4gZiAhPT0gJy4nICYmIGYgIT09ICcuLicgJiYgZi5zdGFydHNXaXRoKCcuJyk7XG5jb25zdCBzdGFyUkUgPSAvXlxcKiskLztcbmNvbnN0IHN0YXJUZXN0ID0gKGYpID0+IGYubGVuZ3RoICE9PSAwICYmICFmLnN0YXJ0c1dpdGgoJy4nKTtcbmNvbnN0IHN0YXJUZXN0RG90ID0gKGYpID0+IGYubGVuZ3RoICE9PSAwICYmIGYgIT09ICcuJyAmJiBmICE9PSAnLi4nO1xuY29uc3QgcW1hcmtzUkUgPSAvXlxcPysoW14rQCE/XFwqXFxbXFwoXSopPyQvO1xuY29uc3QgcW1hcmtzVGVzdE5vY2FzZSA9IChbJDAsIGV4dCA9ICcnXSkgPT4ge1xuICAgIGNvbnN0IG5vZXh0ID0gcW1hcmtzVGVzdE5vRXh0KFskMF0pO1xuICAgIGlmICghZXh0KVxuICAgICAgICByZXR1cm4gbm9leHQ7XG4gICAgZXh0ID0gZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIChmKSA9PiBub2V4dChmKSAmJiBmLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoZXh0KTtcbn07XG5jb25zdCBxbWFya3NUZXN0Tm9jYXNlRG90ID0gKFskMCwgZXh0ID0gJyddKSA9PiB7XG4gICAgY29uc3Qgbm9leHQgPSBxbWFya3NUZXN0Tm9FeHREb3QoWyQwXSk7XG4gICAgaWYgKCFleHQpXG4gICAgICAgIHJldHVybiBub2V4dDtcbiAgICBleHQgPSBleHQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKGYpID0+IG5vZXh0KGYpICYmIGYudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChleHQpO1xufTtcbmNvbnN0IHFtYXJrc1Rlc3REb3QgPSAoWyQwLCBleHQgPSAnJ10pID0+IHtcbiAgICBjb25zdCBub2V4dCA9IHFtYXJrc1Rlc3ROb0V4dERvdChbJDBdKTtcbiAgICByZXR1cm4gIWV4dCA/IG5vZXh0IDogKGYpID0+IG5vZXh0KGYpICYmIGYuZW5kc1dpdGgoZXh0KTtcbn07XG5jb25zdCBxbWFya3NUZXN0ID0gKFskMCwgZXh0ID0gJyddKSA9PiB7XG4gICAgY29uc3Qgbm9leHQgPSBxbWFya3NUZXN0Tm9FeHQoWyQwXSk7XG4gICAgcmV0dXJuICFleHQgPyBub2V4dCA6IChmKSA9PiBub2V4dChmKSAmJiBmLmVuZHNXaXRoKGV4dCk7XG59O1xuY29uc3QgcW1hcmtzVGVzdE5vRXh0ID0gKFskMF0pID0+IHtcbiAgICBjb25zdCBsZW4gPSAkMC5sZW5ndGg7XG4gICAgcmV0dXJuIChmKSA9PiBmLmxlbmd0aCA9PT0gbGVuICYmICFmLnN0YXJ0c1dpdGgoJy4nKTtcbn07XG5jb25zdCBxbWFya3NUZXN0Tm9FeHREb3QgPSAoWyQwXSkgPT4ge1xuICAgIGNvbnN0IGxlbiA9ICQwLmxlbmd0aDtcbiAgICByZXR1cm4gKGYpID0+IGYubGVuZ3RoID09PSBsZW4gJiYgZiAhPT0gJy4nICYmIGYgIT09ICcuLic7XG59O1xuLyogYzggaWdub3JlIHN0YXJ0ICovXG5jb25zdCBkZWZhdWx0UGxhdGZvcm0gPSAodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHByb2Nlc3NcbiAgICA/ICh0eXBlb2YgcHJvY2Vzcy5lbnYgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHByb2Nlc3MuZW52ICYmXG4gICAgICAgIHByb2Nlc3MuZW52Ll9fTUlOSU1BVENIX1RFU1RJTkdfUExBVEZPUk1fXykgfHxcbiAgICAgICAgcHJvY2Vzcy5wbGF0Zm9ybVxuICAgIDogJ3Bvc2l4Jyk7XG5jb25zdCBwYXRoID0ge1xuICAgIHdpbjMyOiB7IHNlcDogJ1xcXFwnIH0sXG4gICAgcG9zaXg6IHsgc2VwOiAnLycgfSxcbn07XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuZXhwb3J0IGNvbnN0IHNlcCA9IGRlZmF1bHRQbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHBhdGgud2luMzIuc2VwIDogcGF0aC5wb3NpeC5zZXA7XG5taW5pbWF0Y2guc2VwID0gc2VwO1xuZXhwb3J0IGNvbnN0IEdMT0JTVEFSID0gU3ltYm9sKCdnbG9ic3RhciAqKicpO1xubWluaW1hdGNoLkdMT0JTVEFSID0gR0xPQlNUQVI7XG4vLyBhbnkgc2luZ2xlIHRoaW5nIG90aGVyIHRoYW4gL1xuLy8gZG9uJ3QgbmVlZCB0byBlc2NhcGUgLyB3aGVuIHVzaW5nIG5ldyBSZWdFeHAoKVxuY29uc3QgcW1hcmsgPSAnW14vXSc7XG4vLyAqID0+IGFueSBudW1iZXIgb2YgY2hhcmFjdGVyc1xuY29uc3Qgc3RhciA9IHFtYXJrICsgJyo/Jztcbi8vICoqIHdoZW4gZG90cyBhcmUgYWxsb3dlZC4gIEFueXRoaW5nIGdvZXMsIGV4Y2VwdCAuLiBhbmQgLlxuLy8gbm90ICheIG9yIC8gZm9sbG93ZWQgYnkgb25lIG9yIHR3byBkb3RzIGZvbGxvd2VkIGJ5ICQgb3IgLyksXG4vLyBmb2xsb3dlZCBieSBhbnl0aGluZywgYW55IG51bWJlciBvZiB0aW1lcy5cbmNvbnN0IHR3b1N0YXJEb3QgPSAnKD86KD8hKD86XFxcXC98XikoPzpcXFxcLnsxLDJ9KSgkfFxcXFwvKSkuKSo/Jztcbi8vIG5vdCBhIF4gb3IgLyBmb2xsb3dlZCBieSBhIGRvdCxcbi8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxuY29uc3QgdHdvU3Rhck5vRG90ID0gJyg/Oig/ISg/OlxcXFwvfF4pXFxcXC4pLikqPyc7XG5leHBvcnQgY29uc3QgZmlsdGVyID0gKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4gKHApID0+IG1pbmltYXRjaChwLCBwYXR0ZXJuLCBvcHRpb25zKTtcbm1pbmltYXRjaC5maWx0ZXIgPSBmaWx0ZXI7XG5jb25zdCBleHQgPSAoYSwgYiA9IHt9KSA9PiBPYmplY3QuYXNzaWduKHt9LCBhLCBiKTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0cyA9IChkZWYpID0+IHtcbiAgICBpZiAoIWRlZiB8fCB0eXBlb2YgZGVmICE9PSAnb2JqZWN0JyB8fCAhT2JqZWN0LmtleXMoZGVmKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG1pbmltYXRjaDtcbiAgICB9XG4gICAgY29uc3Qgb3JpZyA9IG1pbmltYXRjaDtcbiAgICBjb25zdCBtID0gKHAsIHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4gb3JpZyhwLCBwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obSwge1xuICAgICAgICBNaW5pbWF0Y2g6IGNsYXNzIE1pbmltYXRjaCBleHRlbmRzIG9yaWcuTWluaW1hdGNoIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgICAgIHN1cGVyKHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRpYyBkZWZhdWx0cyhvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWcuZGVmYXVsdHMoZXh0KGRlZiwgb3B0aW9ucykpLk1pbmltYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgQVNUOiBjbGFzcyBBU1QgZXh0ZW5kcyBvcmlnLkFTVCB7XG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHR5cGUsIHBhcmVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICAgICAgc3VwZXIodHlwZSwgcGFyZW50LCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICAgICAgc3RhdGljIGZyb21HbG9iKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnLkFTVC5mcm9tR2xvYihwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVuZXNjYXBlOiAocywgb3B0aW9ucyA9IHt9KSA9PiBvcmlnLnVuZXNjYXBlKHMsIGV4dChkZWYsIG9wdGlvbnMpKSxcbiAgICAgICAgZXNjYXBlOiAocywgb3B0aW9ucyA9IHt9KSA9PiBvcmlnLmVzY2FwZShzLCBleHQoZGVmLCBvcHRpb25zKSksXG4gICAgICAgIGZpbHRlcjogKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4gb3JpZy5maWx0ZXIocGF0dGVybiwgZXh0KGRlZiwgb3B0aW9ucykpLFxuICAgICAgICBkZWZhdWx0czogKG9wdGlvbnMpID0+IG9yaWcuZGVmYXVsdHMoZXh0KGRlZiwgb3B0aW9ucykpLFxuICAgICAgICBtYWtlUmU6IChwYXR0ZXJuLCBvcHRpb25zID0ge30pID0+IG9yaWcubWFrZVJlKHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKSxcbiAgICAgICAgYnJhY2VFeHBhbmQ6IChwYXR0ZXJuLCBvcHRpb25zID0ge30pID0+IG9yaWcuYnJhY2VFeHBhbmQocGF0dGVybiwgZXh0KGRlZiwgb3B0aW9ucykpLFxuICAgICAgICBtYXRjaDogKGxpc3QsIHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4gb3JpZy5tYXRjaChsaXN0LCBwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSksXG4gICAgICAgIHNlcDogb3JpZy5zZXAsXG4gICAgICAgIEdMT0JTVEFSOiBHTE9CU1RBUixcbiAgICB9KTtcbn07XG5taW5pbWF0Y2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbi8vIEJyYWNlIGV4cGFuc2lvbjpcbi8vIGF7YixjfWQgLT4gYWJkIGFjZFxuLy8gYXtiLH1jIC0+IGFiYyBhY1xuLy8gYXswLi4zfWQgLT4gYTBkIGExZCBhMmQgYTNkXG4vLyBhe2IsY3tkLGV9Zn1nIC0+IGFiZyBhY2RmZyBhY2VmZ1xuLy8gYXtiLGN9ZHtlLGZ9ZyAtPiBhYmRlZyBhY2RlZyBhYmRlZyBhYmRmZ1xuLy9cbi8vIEludmFsaWQgc2V0cyBhcmUgbm90IGV4cGFuZGVkLlxuLy8gYXsyLi59YiAtPiBhezIuLn1iXG4vLyBhe2J9YyAtPiBhe2J9Y1xuZXhwb3J0IGNvbnN0IGJyYWNlRXhwYW5kID0gKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGFzc2VydFZhbGlkUGF0dGVybihwYXR0ZXJuKTtcbiAgICAvLyBUaGFua3MgdG8gWWV0aW5nIExpIDxodHRwczovL2dpdGh1Yi5jb20veWV0aW5nbGk+IGZvclxuICAgIC8vIGltcHJvdmluZyB0aGlzIHJlZ2V4cCB0byBhdm9pZCBhIFJlRE9TIHZ1bG5lcmFiaWxpdHkuXG4gICAgaWYgKG9wdGlvbnMubm9icmFjZSB8fCAhL1xceyg/Oig/IVxceykuKSpcXH0vLnRlc3QocGF0dGVybikpIHtcbiAgICAgICAgLy8gc2hvcnRjdXQuIG5vIG5lZWQgdG8gZXhwYW5kLlxuICAgICAgICByZXR1cm4gW3BhdHRlcm5dO1xuICAgIH1cbiAgICByZXR1cm4gZXhwYW5kKHBhdHRlcm4pO1xufTtcbm1pbmltYXRjaC5icmFjZUV4cGFuZCA9IGJyYWNlRXhwYW5kO1xuLy8gcGFyc2UgYSBjb21wb25lbnQgb2YgdGhlIGV4cGFuZGVkIHNldC5cbi8vIEF0IHRoaXMgcG9pbnQsIG5vIHBhdHRlcm4gbWF5IGNvbnRhaW4gXCIvXCIgaW4gaXRcbi8vIHNvIHdlJ3JlIGdvaW5nIHRvIHJldHVybiBhIDJkIGFycmF5LCB3aGVyZSBlYWNoIGVudHJ5IGlzIHRoZSBmdWxsXG4vLyBwYXR0ZXJuLCBzcGxpdCBvbiAnLycsIGFuZCB0aGVuIHR1cm5lZCBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLlxuLy8gQSByZWdleHAgaXMgbWFkZSBhdCB0aGUgZW5kIHdoaWNoIGpvaW5zIGVhY2ggYXJyYXkgd2l0aCBhblxuLy8gZXNjYXBlZCAvLCBhbmQgYW5vdGhlciBmdWxsIG9uZSB3aGljaCBqb2lucyBlYWNoIHJlZ2V4cCB3aXRoIHwuXG4vL1xuLy8gRm9sbG93aW5nIHRoZSBsZWFkIG9mIEJhc2ggNC4xLCBub3RlIHRoYXQgXCIqKlwiIG9ubHkgaGFzIHNwZWNpYWwgbWVhbmluZ1xuLy8gd2hlbiBpdCBpcyB0aGUgKm9ubHkqIHRoaW5nIGluIGEgcGF0aCBwb3J0aW9uLiAgT3RoZXJ3aXNlLCBhbnkgc2VyaWVzXG4vLyBvZiAqIGlzIGVxdWl2YWxlbnQgdG8gYSBzaW5nbGUgKi4gIEdsb2JzdGFyIGJlaGF2aW9yIGlzIGVuYWJsZWQgYnlcbi8vIGRlZmF1bHQsIGFuZCBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyBvcHRpb25zLm5vZ2xvYnN0YXIuXG5leHBvcnQgY29uc3QgbWFrZVJlID0gKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkgPT4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKS5tYWtlUmUoKTtcbm1pbmltYXRjaC5tYWtlUmUgPSBtYWtlUmU7XG5leHBvcnQgY29uc3QgbWF0Y2ggPSAobGlzdCwgcGF0dGVybiwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgbW0gPSBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpO1xuICAgIGxpc3QgPSBsaXN0LmZpbHRlcihmID0+IG1tLm1hdGNoKGYpKTtcbiAgICBpZiAobW0ub3B0aW9ucy5ub251bGwgJiYgIWxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGxpc3QucHVzaChwYXR0ZXJuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xubWluaW1hdGNoLm1hdGNoID0gbWF0Y2g7XG4vLyByZXBsYWNlIHN0dWZmIGxpa2UgXFwqIHdpdGggKlxuY29uc3QgZ2xvYk1hZ2ljID0gL1s/Kl18WytAIV1cXCguKj9cXCl8XFxbfFxcXS87XG5jb25zdCByZWdFeHBFc2NhcGUgPSAocykgPT4gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuZXhwb3J0IGNsYXNzIE1pbmltYXRjaCB7XG4gICAgb3B0aW9ucztcbiAgICBzZXQ7XG4gICAgcGF0dGVybjtcbiAgICB3aW5kb3dzUGF0aHNOb0VzY2FwZTtcbiAgICBub25lZ2F0ZTtcbiAgICBuZWdhdGU7XG4gICAgY29tbWVudDtcbiAgICBlbXB0eTtcbiAgICBwcmVzZXJ2ZU11bHRpcGxlU2xhc2hlcztcbiAgICBwYXJ0aWFsO1xuICAgIGdsb2JTZXQ7XG4gICAgZ2xvYlBhcnRzO1xuICAgIG5vY2FzZTtcbiAgICBpc1dpbmRvd3M7XG4gICAgcGxhdGZvcm07XG4gICAgd2luZG93c05vTWFnaWNSb290O1xuICAgIHJlZ2V4cDtcbiAgICBjb25zdHJ1Y3RvcihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgYXNzZXJ0VmFsaWRQYXR0ZXJuKHBhdHRlcm4pO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IG9wdGlvbnMucGxhdGZvcm0gfHwgZGVmYXVsdFBsYXRmb3JtO1xuICAgICAgICB0aGlzLmlzV2luZG93cyA9IHRoaXMucGxhdGZvcm0gPT09ICd3aW4zMic7XG4gICAgICAgIHRoaXMud2luZG93c1BhdGhzTm9Fc2NhcGUgPVxuICAgICAgICAgICAgISFvcHRpb25zLndpbmRvd3NQYXRoc05vRXNjYXBlIHx8IG9wdGlvbnMuYWxsb3dXaW5kb3dzRXNjYXBlID09PSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMud2luZG93c1BhdGhzTm9Fc2NhcGUpIHtcbiAgICAgICAgICAgIHRoaXMucGF0dGVybiA9IHRoaXMucGF0dGVybi5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVzZXJ2ZU11bHRpcGxlU2xhc2hlcyA9ICEhb3B0aW9ucy5wcmVzZXJ2ZU11bHRpcGxlU2xhc2hlcztcbiAgICAgICAgdGhpcy5yZWdleHAgPSBudWxsO1xuICAgICAgICB0aGlzLm5lZ2F0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vbmVnYXRlID0gISFvcHRpb25zLm5vbmVnYXRlO1xuICAgICAgICB0aGlzLmNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbXB0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhcnRpYWwgPSAhIW9wdGlvbnMucGFydGlhbDtcbiAgICAgICAgdGhpcy5ub2Nhc2UgPSAhIXRoaXMub3B0aW9ucy5ub2Nhc2U7XG4gICAgICAgIHRoaXMud2luZG93c05vTWFnaWNSb290ID1cbiAgICAgICAgICAgIG9wdGlvbnMud2luZG93c05vTWFnaWNSb290ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMud2luZG93c05vTWFnaWNSb290XG4gICAgICAgICAgICAgICAgOiAhISh0aGlzLmlzV2luZG93cyAmJiB0aGlzLm5vY2FzZSk7XG4gICAgICAgIHRoaXMuZ2xvYlNldCA9IFtdO1xuICAgICAgICB0aGlzLmdsb2JQYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLnNldCA9IFtdO1xuICAgICAgICAvLyBtYWtlIHRoZSBzZXQgb2YgcmVnZXhwcyBldGMuXG4gICAgICAgIHRoaXMubWFrZSgpO1xuICAgIH1cbiAgICBoYXNNYWdpYygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYWdpY2FsQnJhY2VzICYmIHRoaXMuc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiB0aGlzLnNldCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcnQgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlYnVnKC4uLl8pIHsgfVxuICAgIG1ha2UoKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm47XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIC8vIGVtcHR5IHBhdHRlcm5zIGFuZCBjb21tZW50cyBtYXRjaCBub3RoaW5nLlxuICAgICAgICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICAgIHRoaXMuY29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgICAgICAgICB0aGlzLmVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdGVwIDE6IGZpZ3VyZSBvdXQgbmVnYXRpb24sIGV0Yy5cbiAgICAgICAgdGhpcy5wYXJzZU5lZ2F0ZSgpO1xuICAgICAgICAvLyBzdGVwIDI6IGV4cGFuZCBicmFjZXNcbiAgICAgICAgdGhpcy5nbG9iU2V0ID0gWy4uLm5ldyBTZXQodGhpcy5icmFjZUV4cGFuZCgpKV07XG4gICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnID0gKC4uLmFyZ3MpID0+IGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sIHRoaXMuZ2xvYlNldCk7XG4gICAgICAgIC8vIHN0ZXAgMzogbm93IHdlIGhhdmUgYSBzZXQsIHNvIHR1cm4gZWFjaCBvbmUgaW50byBhIHNlcmllcyBvZlxuICAgICAgICAvLyBwYXRoLXBvcnRpb24gbWF0Y2hpbmcgcGF0dGVybnMuXG4gICAgICAgIC8vIFRoZXNlIHdpbGwgYmUgcmVnZXhwcywgZXhjZXB0IGluIHRoZSBjYXNlIG9mIFwiKipcIiwgd2hpY2ggaXNcbiAgICAgICAgLy8gc2V0IHRvIHRoZSBHTE9CU1RBUiBvYmplY3QgZm9yIGdsb2JzdGFyIGJlaGF2aW9yLFxuICAgICAgICAvLyBhbmQgd2lsbCBub3QgY29udGFpbiBhbnkgLyBjaGFyYWN0ZXJzXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEZpcnN0LCB3ZSBwcmVwcm9jZXNzIHRvIG1ha2UgdGhlIGdsb2IgcGF0dGVybiBzZXRzIGEgYml0IHNpbXBsZXJcbiAgICAgICAgLy8gYW5kIGRlZHVwZWQuICBUaGVyZSBhcmUgc29tZSBwZXJmLWtpbGxpbmcgcGF0dGVybnMgdGhhdCBjYW4gY2F1c2VcbiAgICAgICAgLy8gcHJvYmxlbXMgd2l0aCBhIGdsb2Igd2FsaywgYnV0IHdlIGNhbiBzaW1wbGlmeSB0aGVtIGRvd24gYSBiaXQuXG4gICAgICAgIGNvbnN0IHJhd0dsb2JQYXJ0cyA9IHRoaXMuZ2xvYlNldC5tYXAocyA9PiB0aGlzLnNsYXNoU3BsaXQocykpO1xuICAgICAgICB0aGlzLmdsb2JQYXJ0cyA9IHRoaXMucHJlcHJvY2VzcyhyYXdHbG9iUGFydHMpO1xuICAgICAgICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgdGhpcy5nbG9iUGFydHMpO1xuICAgICAgICAvLyBnbG9iIC0tPiByZWdleHBzXG4gICAgICAgIGxldCBzZXQgPSB0aGlzLmdsb2JQYXJ0cy5tYXAoKHMsIF8sIF9fKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1dpbmRvd3MgJiYgdGhpcy53aW5kb3dzTm9NYWdpY1Jvb3QpIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBpdCdzIGEgZHJpdmUgb3IgdW5jIHBhdGguXG4gICAgICAgICAgICAgICAgY29uc3QgaXNVTkMgPSBzWzBdID09PSAnJyAmJlxuICAgICAgICAgICAgICAgICAgICBzWzFdID09PSAnJyAmJlxuICAgICAgICAgICAgICAgICAgICAoc1syXSA9PT0gJz8nIHx8ICFnbG9iTWFnaWMudGVzdChzWzJdKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWdsb2JNYWdpYy50ZXN0KHNbM10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRHJpdmUgPSAvXlthLXpdOi9pLnRlc3Qoc1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVU5DKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4ucy5zbGljZSgwLCA0KSwgLi4ucy5zbGljZSg0KS5tYXAoc3MgPT4gdGhpcy5wYXJzZShzcykpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNEcml2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3NbMF0sIC4uLnMuc2xpY2UoMSkubWFwKHNzID0+IHRoaXMucGFyc2Uoc3MpKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHMubWFwKHNzID0+IHRoaXMucGFyc2Uoc3MpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpO1xuICAgICAgICAvLyBmaWx0ZXIgb3V0IGV2ZXJ5dGhpbmcgdGhhdCBkaWRuJ3QgY29tcGlsZSBwcm9wZXJseS5cbiAgICAgICAgdGhpcy5zZXQgPSBzZXQuZmlsdGVyKHMgPT4gcy5pbmRleE9mKGZhbHNlKSA9PT0gLTEpO1xuICAgICAgICAvLyBkbyBub3QgdHJlYXQgdGhlID8gaW4gVU5DIHBhdGhzIGFzIG1hZ2ljXG4gICAgICAgIGlmICh0aGlzLmlzV2luZG93cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLnNldFtpXTtcbiAgICAgICAgICAgICAgICBpZiAocFswXSA9PT0gJycgJiZcbiAgICAgICAgICAgICAgICAgICAgcFsxXSA9PT0gJycgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iUGFydHNbaV1bMl0gPT09ICc/JyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcFszXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgL15bYS16XTokL2kudGVzdChwWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICBwWzJdID0gJz8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgdGhpcy5zZXQpO1xuICAgIH1cbiAgICAvLyB2YXJpb3VzIHRyYW5zZm9ybXMgdG8gZXF1aXZhbGVudCBwYXR0ZXJuIHNldHMgdGhhdCBhcmVcbiAgICAvLyBmYXN0ZXIgdG8gcHJvY2VzcyBpbiBhIGZpbGVzeXN0ZW0gd2Fsay4gIFRoZSBnb2FsIGlzIHRvXG4gICAgLy8gZWxpbWluYXRlIHdoYXQgd2UgY2FuLCBhbmQgcHVzaCBhbGwgKiogcGF0dGVybnMgYXMgZmFyXG4gICAgLy8gdG8gdGhlIHJpZ2h0IGFzIHBvc3NpYmxlLCBldmVuIGlmIGl0IGluY3JlYXNlcyB0aGUgbnVtYmVyXG4gICAgLy8gb2YgcGF0dGVybnMgdGhhdCB3ZSBoYXZlIHRvIHByb2Nlc3MuXG4gICAgcHJlcHJvY2VzcyhnbG9iUGFydHMpIHtcbiAgICAgICAgLy8gaWYgd2UncmUgbm90IGluIGdsb2JzdGFyIG1vZGUsIHRoZW4gdHVybiBhbGwgKiogaW50byAqXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9nbG9ic3Rhcikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnbG9iUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdsb2JQYXJ0c1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYlBhcnRzW2ldW2pdID09PSAnKionKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iUGFydHNbaV1bal0gPSAnKic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBvcHRpbWl6YXRpb25MZXZlbCA9IDEgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGltaXphdGlvbkxldmVsID49IDIpIHtcbiAgICAgICAgICAgIC8vIGFnZ3Jlc3NpdmUgb3B0aW1pemF0aW9uIGZvciB0aGUgcHVycG9zZSBvZiBmcyB3YWxraW5nXG4gICAgICAgICAgICBnbG9iUGFydHMgPSB0aGlzLmZpcnN0UGhhc2VQcmVQcm9jZXNzKGdsb2JQYXJ0cyk7XG4gICAgICAgICAgICBnbG9iUGFydHMgPSB0aGlzLnNlY29uZFBoYXNlUHJlUHJvY2VzcyhnbG9iUGFydHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGltaXphdGlvbkxldmVsID49IDEpIHtcbiAgICAgICAgICAgIC8vIGp1c3QgYmFzaWMgb3B0aW1pemF0aW9ucyB0byByZW1vdmUgc29tZSAuLiBwYXJ0c1xuICAgICAgICAgICAgZ2xvYlBhcnRzID0gdGhpcy5sZXZlbE9uZU9wdGltaXplKGdsb2JQYXJ0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBqdXN0IGNvbGxhcHNlIG11bHRpcGxlICoqIHBvcnRpb25zIGludG8gb25lXG4gICAgICAgICAgICBnbG9iUGFydHMgPSB0aGlzLmFkamFzY2VudEdsb2JzdGFyT3B0aW1pemUoZ2xvYlBhcnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYlBhcnRzO1xuICAgIH1cbiAgICAvLyBqdXN0IGdldCByaWQgb2YgYWRqYXNjZW50ICoqIHBvcnRpb25zXG4gICAgYWRqYXNjZW50R2xvYnN0YXJPcHRpbWl6ZShnbG9iUGFydHMpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JQYXJ0cy5tYXAocGFydHMgPT4ge1xuICAgICAgICAgICAgbGV0IGdzID0gLTE7XG4gICAgICAgICAgICB3aGlsZSAoLTEgIT09IChncyA9IHBhcnRzLmluZGV4T2YoJyoqJywgZ3MgKyAxKSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgaSA9IGdzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwYXJ0c1tpICsgMV0gPT09ICcqKicpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKGdzLCBpIC0gZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJ0cztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGdldCByaWQgb2YgYWRqYXNjZW50ICoqIGFuZCByZXNvbHZlIC4uIHBvcnRpb25zXG4gICAgbGV2ZWxPbmVPcHRpbWl6ZShnbG9iUGFydHMpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JQYXJ0cy5tYXAocGFydHMgPT4ge1xuICAgICAgICAgICAgcGFydHMgPSBwYXJ0cy5yZWR1Y2UoKHNldCwgcGFydCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBzZXRbc2V0Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSAnKionICYmIHByZXYgPT09ICcqKicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgJiYgcHJldiAhPT0gJy4uJyAmJiBwcmV2ICE9PSAnLicgJiYgcHJldiAhPT0gJyoqJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0LnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXQucHVzaChwYXJ0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0O1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRzLmxlbmd0aCA9PT0gMCA/IFsnJ10gOiBwYXJ0cztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldmVsVHdvRmlsZU9wdGltaXplKHBhcnRzKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJ0cykpIHtcbiAgICAgICAgICAgIHBhcnRzID0gdGhpcy5zbGFzaFNwbGl0KHBhcnRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGlkU29tZXRoaW5nID0gZmFsc2U7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGRpZFNvbWV0aGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gPHByZT4vPGU+LzxyZXN0PiAtPiA8cHJlPi88cmVzdD5cbiAgICAgICAgICAgIGlmICghdGhpcy5wcmVzZXJ2ZU11bHRpcGxlU2xhc2hlcykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3Qgc3F1ZWV6ZSBvdXQgVU5DIHBhdHRlcm5zXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAxICYmIHAgPT09ICcnICYmIHBhcnRzWzBdID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocCA9PT0gJy4nIHx8IHAgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1swXSA9PT0gJy4nICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgICAgICAgICAgICAocGFydHNbMV0gPT09ICcuJyB8fCBwYXJ0c1sxXSA9PT0gJycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZFNvbWV0aGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDxwcmU+LzxwPi8uLi88cmVzdD4gLT4gPHByZT4vPHJlc3Q+XG4gICAgICAgICAgICBsZXQgZGQgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKC0xICE9PSAoZGQgPSBwYXJ0cy5pbmRleE9mKCcuLicsIGRkICsgMSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IHBhcnRzW2RkIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHAgJiYgcCAhPT0gJy4nICYmIHAgIT09ICcuLicgJiYgcCAhPT0gJyoqJykge1xuICAgICAgICAgICAgICAgICAgICBkaWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoZGQgLSAxLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgZGQgLT0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGRpZFNvbWV0aGluZyk7XG4gICAgICAgIHJldHVybiBwYXJ0cy5sZW5ndGggPT09IDAgPyBbJyddIDogcGFydHM7XG4gICAgfVxuICAgIC8vIEZpcnN0IHBoYXNlOiBzaW5nbGUtcGF0dGVybiBwcm9jZXNzaW5nXG4gICAgLy8gPHByZT4gaXMgMSBvciBtb3JlIHBvcnRpb25zXG4gICAgLy8gPHJlc3Q+IGlzIDEgb3IgbW9yZSBwb3J0aW9uc1xuICAgIC8vIDxwPiBpcyBhbnkgcG9ydGlvbiBvdGhlciB0aGFuIC4sIC4uLCAnJywgb3IgKipcbiAgICAvLyA8ZT4gaXMgLiBvciAnJ1xuICAgIC8vXG4gICAgLy8gKiovLi4gaXMgKmJydXRhbCogZm9yIGZpbGVzeXN0ZW0gd2Fsa2luZyBwZXJmb3JtYW5jZSwgYmVjYXVzZVxuICAgIC8vIGl0IGVmZmVjdGl2ZWx5IHJlc2V0cyB0aGUgcmVjdXJzaXZlIHdhbGsgZWFjaCB0aW1lIGl0IG9jY3VycyxcbiAgICAvLyBhbmQgKiogY2Fubm90IGJlIHJlZHVjZWQgb3V0IGJ5IGEgLi4gcGF0dGVybiBwYXJ0IGxpa2UgYSByZWdleHBcbiAgICAvLyBvciBtb3N0IHN0cmluZ3MgKG90aGVyIHRoYW4gLi4sIC4sIGFuZCAnJykgY2FuIGJlLlxuICAgIC8vXG4gICAgLy8gPHByZT4vKiovLi4vPHA+LzxwPi88cmVzdD4gLT4gezxwcmU+Ly4uLzxwPi88cD4vPHJlc3Q+LDxwcmU+LyoqLzxwPi88cD4vPHJlc3Q+fVxuICAgIC8vIDxwcmU+LzxlPi88cmVzdD4gLT4gPHByZT4vPHJlc3Q+XG4gICAgLy8gPHByZT4vPHA+Ly4uLzxyZXN0PiAtPiA8cHJlPi88cmVzdD5cbiAgICAvLyAqKi8qKi88cmVzdD4gLT4gKiovPHJlc3Q+XG4gICAgLy9cbiAgICAvLyAqKi8qLzxyZXN0PiAtPiAqLyoqLzxyZXN0PiA8PT0gbm90IHZhbGlkIGJlY2F1c2UgKiogZG9lc24ndCBmb2xsb3dcbiAgICAvLyB0aGlzIFdPVUxEIGJlIGFsbG93ZWQgaWYgKiogZGlkIGZvbGxvdyBzeW1saW5rcywgb3IgKiBkaWRuJ3RcbiAgICBmaXJzdFBoYXNlUHJlUHJvY2VzcyhnbG9iUGFydHMpIHtcbiAgICAgICAgbGV0IGRpZFNvbWV0aGluZyA9IGZhbHNlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBkaWRTb21ldGhpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIDxwcmU+LyoqLy4uLzxwPi88cD4vPHJlc3Q+IC0+IHs8cHJlPi8uLi88cD4vPHA+LzxyZXN0Piw8cHJlPi8qKi88cD4vPHA+LzxyZXN0Pn1cbiAgICAgICAgICAgIGZvciAobGV0IHBhcnRzIG9mIGdsb2JQYXJ0cykge1xuICAgICAgICAgICAgICAgIGxldCBncyA9IC0xO1xuICAgICAgICAgICAgICAgIHdoaWxlICgtMSAhPT0gKGdzID0gcGFydHMuaW5kZXhPZignKionLCBncyArIDEpKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZ3NzID0gZ3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXJ0c1tnc3MgKyAxXSA9PT0gJyoqJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gPHByZT4vKiovKiovPHJlc3Q+IC0+IDxwcmU+LyoqLzxyZXN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgZ3NzKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZWcsIGlmIGdzIGlzIDIgYW5kIGdzcyBpcyA0LCB0aGF0IG1lYW5zIHdlIGhhdmUgMyAqKlxuICAgICAgICAgICAgICAgICAgICAvLyBwYXJ0cywgYW5kIGNhbiByZW1vdmUgMiBvZiB0aGVtLlxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3NzID4gZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLnNwbGljZShncyArIDEsIGdzcyAtIGdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHBhcnRzW2dzICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBwYXJ0c1tncyArIDJdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwMiA9IHBhcnRzW2dzICsgM107XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSAnLi4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9PT0gJy4nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwID09PSAnLi4nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhcDIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID09PSAnLicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkaWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBlZGl0IHBhcnRzIGluIHBsYWNlLCBhbmQgcHVzaCB0aGUgbmV3IG9uZVxuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoZ3MsIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlciA9IHBhcnRzLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgICAgICBvdGhlcltnc10gPSAnKionO1xuICAgICAgICAgICAgICAgICAgICBnbG9iUGFydHMucHVzaChvdGhlcik7XG4gICAgICAgICAgICAgICAgICAgIGdzLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDxwcmU+LzxlPi88cmVzdD4gLT4gPHByZT4vPHJlc3Q+XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByZXNlcnZlTXVsdGlwbGVTbGFzaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBzcXVlZXplIG91dCBVTkMgcGF0dGVybnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAxICYmIHAgPT09ICcnICYmIHBhcnRzWzBdID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID09PSAnLicgfHwgcCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzWzBdID09PSAnLicgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnRzWzFdID09PSAnLicgfHwgcGFydHNbMV0gPT09ICcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlkU29tZXRoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDxwcmU+LzxwPi8uLi88cmVzdD4gLT4gPHByZT4vPHJlc3Q+XG4gICAgICAgICAgICAgICAgbGV0IGRkID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoLTEgIT09IChkZCA9IHBhcnRzLmluZGV4T2YoJy4uJywgZGQgKyAxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHBhcnRzW2RkIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwICYmIHAgIT09ICcuJyAmJiBwICE9PSAnLi4nICYmIHAgIT09ICcqKicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZFNvbWV0aGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkRG90ID0gZGQgPT09IDEgJiYgcGFydHNbZGQgKyAxXSA9PT0gJyoqJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGluID0gbmVlZERvdCA/IFsnLiddIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoZGQgLSAxLCAyLCAuLi5zcGxpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGQgLT0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZGlkU29tZXRoaW5nKTtcbiAgICAgICAgcmV0dXJuIGdsb2JQYXJ0cztcbiAgICB9XG4gICAgLy8gc2Vjb25kIHBoYXNlOiBtdWx0aS1wYXR0ZXJuIGRlZHVwZXNcbiAgICAvLyB7PHByZT4vKi88cmVzdD4sPHByZT4vPHA+LzxyZXN0Pn0gLT4gPHByZT4vKi88cmVzdD5cbiAgICAvLyB7PHByZT4vPHJlc3Q+LDxwcmU+LzxyZXN0Pn0gLT4gPHByZT4vPHJlc3Q+XG4gICAgLy8gezxwcmU+LyoqLzxyZXN0Piw8cHJlPi88cmVzdD59IC0+IDxwcmU+LyoqLzxyZXN0PlxuICAgIC8vXG4gICAgLy8gezxwcmU+LyoqLzxyZXN0Piw8cHJlPi8qKi88cD4vPHJlc3Q+fSAtPiA8cHJlPi8qKi88cmVzdD5cbiAgICAvLyBeLS0gbm90IHZhbGlkIGJlY2F1c2UgKiogZG9lbnMndCBmb2xsb3cgc3ltbGlua3NcbiAgICBzZWNvbmRQaGFzZVByZVByb2Nlc3MoZ2xvYlBhcnRzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2xvYlBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgZ2xvYlBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9IHRoaXMucGFydHNNYXRjaChnbG9iUGFydHNbaV0sIGdsb2JQYXJ0c1tqXSwgIXRoaXMucHJlc2VydmVNdWx0aXBsZVNsYXNoZXMpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JQYXJ0c1tpXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBnbG9iUGFydHNbal0gPSBtYXRjaGVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JQYXJ0cy5maWx0ZXIoZ3MgPT4gZ3MubGVuZ3RoKTtcbiAgICB9XG4gICAgcGFydHNNYXRjaChhLCBiLCBlbXB0eUdTTWF0Y2ggPSBmYWxzZSkge1xuICAgICAgICBsZXQgYWkgPSAwO1xuICAgICAgICBsZXQgYmkgPSAwO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCB3aGljaCA9ICcnO1xuICAgICAgICB3aGlsZSAoYWkgPCBhLmxlbmd0aCAmJiBiaSA8IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoYVthaV0gPT09IGJbYmldKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2god2hpY2ggPT09ICdiJyA/IGJbYmldIDogYVthaV0pO1xuICAgICAgICAgICAgICAgIGFpKys7XG4gICAgICAgICAgICAgICAgYmkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVtcHR5R1NNYXRjaCAmJiBhW2FpXSA9PT0gJyoqJyAmJiBiW2JpXSA9PT0gYVthaSArIDFdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYVthaV0pO1xuICAgICAgICAgICAgICAgIGFpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbXB0eUdTTWF0Y2ggJiYgYltiaV0gPT09ICcqKicgJiYgYVthaV0gPT09IGJbYmkgKyAxXSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJbYmldKTtcbiAgICAgICAgICAgICAgICBiaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYVthaV0gPT09ICcqJyAmJlxuICAgICAgICAgICAgICAgIGJbYmldICYmXG4gICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5kb3QgfHwgIWJbYmldLnN0YXJ0c1dpdGgoJy4nKSkgJiZcbiAgICAgICAgICAgICAgICBiW2JpXSAhPT0gJyoqJykge1xuICAgICAgICAgICAgICAgIGlmICh3aGljaCA9PT0gJ2InKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2hpY2ggPSAnYSc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYVthaV0pO1xuICAgICAgICAgICAgICAgIGFpKys7XG4gICAgICAgICAgICAgICAgYmkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJbYmldID09PSAnKicgJiZcbiAgICAgICAgICAgICAgICBhW2FpXSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMuZG90IHx8ICFhW2FpXS5zdGFydHNXaXRoKCcuJykpICYmXG4gICAgICAgICAgICAgICAgYVthaV0gIT09ICcqKicpIHtcbiAgICAgICAgICAgICAgICBpZiAod2hpY2ggPT09ICdhJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIHdoaWNoID0gJ2InO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJbYmldKTtcbiAgICAgICAgICAgICAgICBhaSsrO1xuICAgICAgICAgICAgICAgIGJpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgd2UgZmFsbCBvdXQgb2YgdGhlIGxvb3AsIGl0IG1lYW5zIHRoZXkgdHdvIGFyZSBpZGVudGljYWxcbiAgICAgICAgLy8gYXMgbG9uZyBhcyB0aGVpciBsZW5ndGhzIG1hdGNoXG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgcmVzdWx0O1xuICAgIH1cbiAgICBwYXJzZU5lZ2F0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubm9uZWdhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm47XG4gICAgICAgIGxldCBuZWdhdGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IG5lZ2F0ZU9mZnNldCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGggJiYgcGF0dGVybi5jaGFyQXQoaSkgPT09ICchJzsgaSsrKSB7XG4gICAgICAgICAgICBuZWdhdGUgPSAhbmVnYXRlO1xuICAgICAgICAgICAgbmVnYXRlT2Zmc2V0Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZ2F0ZU9mZnNldClcbiAgICAgICAgICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm4uc2xpY2UobmVnYXRlT2Zmc2V0KTtcbiAgICAgICAgdGhpcy5uZWdhdGUgPSBuZWdhdGU7XG4gICAgfVxuICAgIC8vIHNldCBwYXJ0aWFsIHRvIHRydWUgdG8gdGVzdCBpZiwgZm9yIGV4YW1wbGUsXG4gICAgLy8gXCIvYS9iXCIgbWF0Y2hlcyB0aGUgc3RhcnQgb2YgXCIvKi9iLyovZFwiXG4gICAgLy8gUGFydGlhbCBtZWFucywgaWYgeW91IHJ1biBvdXQgb2YgZmlsZSBiZWZvcmUgeW91IHJ1blxuICAgIC8vIG91dCBvZiBwYXR0ZXJuLCB0aGVuIHRoYXQncyBmaW5lLCBhcyBsb25nIGFzIGFsbFxuICAgIC8vIHRoZSBwYXJ0cyBtYXRjaC5cbiAgICBtYXRjaE9uZShmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgLy8gVU5DIHBhdGhzIGxpa2UgLy8/L1g6Ly4uLiBjYW4gbWF0Y2ggWDovLi4uIGFuZCB2aWNlIHZlcnNhXG4gICAgICAgIC8vIERyaXZlIGxldHRlcnMgaW4gYWJzb2x1dGUgZHJpdmUgb3IgdW5jIHBhdGhzIGFyZSBhbHdheXMgY29tcGFyZWRcbiAgICAgICAgLy8gY2FzZS1pbnNlbnNpdGl2ZWx5LlxuICAgICAgICBpZiAodGhpcy5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVEcml2ZSA9IHR5cGVvZiBmaWxlWzBdID09PSAnc3RyaW5nJyAmJiAvXlthLXpdOiQvaS50ZXN0KGZpbGVbMF0pO1xuICAgICAgICAgICAgY29uc3QgZmlsZVVOQyA9ICFmaWxlRHJpdmUgJiZcbiAgICAgICAgICAgICAgICBmaWxlWzBdID09PSAnJyAmJlxuICAgICAgICAgICAgICAgIGZpbGVbMV0gPT09ICcnICYmXG4gICAgICAgICAgICAgICAgZmlsZVsyXSA9PT0gJz8nICYmXG4gICAgICAgICAgICAgICAgL15bYS16XTokL2kudGVzdChmaWxlWzNdKTtcbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm5Ecml2ZSA9IHR5cGVvZiBwYXR0ZXJuWzBdID09PSAnc3RyaW5nJyAmJiAvXlthLXpdOiQvaS50ZXN0KHBhdHRlcm5bMF0pO1xuICAgICAgICAgICAgY29uc3QgcGF0dGVyblVOQyA9ICFwYXR0ZXJuRHJpdmUgJiZcbiAgICAgICAgICAgICAgICBwYXR0ZXJuWzBdID09PSAnJyAmJlxuICAgICAgICAgICAgICAgIHBhdHRlcm5bMV0gPT09ICcnICYmXG4gICAgICAgICAgICAgICAgcGF0dGVyblsyXSA9PT0gJz8nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHBhdHRlcm5bM10gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgL15bYS16XTokL2kudGVzdChwYXR0ZXJuWzNdKTtcbiAgICAgICAgICAgIGNvbnN0IGZkaSA9IGZpbGVVTkMgPyAzIDogZmlsZURyaXZlID8gMCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHBkaSA9IHBhdHRlcm5VTkMgPyAzIDogcGF0dGVybkRyaXZlID8gMCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmRpID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgcGRpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtmZCwgcGRdID0gW2ZpbGVbZmRpXSwgcGF0dGVybltwZGldXTtcbiAgICAgICAgICAgICAgICBpZiAoZmQudG9Mb3dlckNhc2UoKSA9PT0gcGQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuW3BkaV0gPSBmZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBkaSA+IGZkaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc2xpY2UocGRpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmZGkgPiBwZGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlLnNsaWNlKGZkaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzb2x2ZSBhbmQgcmVkdWNlIC4gYW5kIC4uIHBvcnRpb25zIGluIHRoZSBmaWxlIGFzIHdlbGwuXG4gICAgICAgIC8vIGRvbnQnIG5lZWQgdG8gZG8gdGhlIHNlY29uZCBwaGFzZSwgYmVjYXVzZSBpdCdzIG9ubHkgb25lIHN0cmluZ1tdXG4gICAgICAgIGNvbnN0IHsgb3B0aW1pemF0aW9uTGV2ZWwgPSAxIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRpbWl6YXRpb25MZXZlbCA+PSAyKSB7XG4gICAgICAgICAgICBmaWxlID0gdGhpcy5sZXZlbFR3b0ZpbGVPcHRpbWl6ZShmaWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsIHRoaXMsIHsgZmlsZSwgcGF0dGVybiB9KTtcbiAgICAgICAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLCBmaWxlLmxlbmd0aCwgcGF0dGVybi5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBmaSA9IDAsIHBpID0gMCwgZmwgPSBmaWxlLmxlbmd0aCwgcGwgPSBwYXR0ZXJuLmxlbmd0aDsgZmkgPCBmbCAmJiBwaSA8IHBsOyBmaSsrLCBwaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKCdtYXRjaE9uZSBsb29wJyk7XG4gICAgICAgICAgICB2YXIgcCA9IHBhdHRlcm5bcGldO1xuICAgICAgICAgICAgdmFyIGYgPSBmaWxlW2ZpXTtcbiAgICAgICAgICAgIHRoaXMuZGVidWcocGF0dGVybiwgcCwgZik7XG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgaW1wb3NzaWJsZS5cbiAgICAgICAgICAgIC8vIHNvbWUgaW52YWxpZCByZWdleHAgc3R1ZmYgaW4gdGhlIHNldC5cbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICAgICAgaWYgKHAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgICAgIGlmIChwID09PSBHTE9CU1RBUikge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJ0dMT0JTVEFSJywgW3BhdHRlcm4sIHAsIGZdKTtcbiAgICAgICAgICAgICAgICAvLyBcIioqXCJcbiAgICAgICAgICAgICAgICAvLyBhLyoqL2IvKiovYyB3b3VsZCBtYXRjaCB0aGUgZm9sbG93aW5nOlxuICAgICAgICAgICAgICAgIC8vIGEvYi94L3kvei9jXG4gICAgICAgICAgICAgICAgLy8gYS94L3kvei9iL2NcbiAgICAgICAgICAgICAgICAvLyBhL2IveC9iL3gvY1xuICAgICAgICAgICAgICAgIC8vIGEvYi9jXG4gICAgICAgICAgICAgICAgLy8gVG8gZG8gdGhpcywgdGFrZSB0aGUgcmVzdCBvZiB0aGUgcGF0dGVybiBhZnRlclxuICAgICAgICAgICAgICAgIC8vIHRoZSAqKiwgYW5kIHNlZSBpZiBpdCB3b3VsZCBtYXRjaCB0aGUgZmlsZSByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgLy8gSWYgc28sIHJldHVybiBzdWNjZXNzLlxuICAgICAgICAgICAgICAgIC8vIElmIG5vdCwgdGhlICoqIFwic3dhbGxvd3NcIiBhIHNlZ21lbnQsIGFuZCB0cnkgYWdhaW4uXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyByZWN1cnNpdmVseSBhd2Z1bC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIGEvKiovYi8qKi9jIG1hdGNoaW5nIGEvYi94L3kvei9jXG4gICAgICAgICAgICAgICAgLy8gLSBhIG1hdGNoZXMgYVxuICAgICAgICAgICAgICAgIC8vIC0gZG91Ymxlc3RhclxuICAgICAgICAgICAgICAgIC8vICAgLSBtYXRjaE9uZShiL3gveS96L2MsIGIvKiovYylcbiAgICAgICAgICAgICAgICAvLyAgICAgLSBiIG1hdGNoZXMgYlxuICAgICAgICAgICAgICAgIC8vICAgICAtIGRvdWJsZXN0YXJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAtIG1hdGNoT25lKHgveS96L2MsIGMpIC0+IG5vXG4gICAgICAgICAgICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh5L3ovYywgYykgLT4gbm9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAtIG1hdGNoT25lKHovYywgYykgLT4gbm9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAtIG1hdGNoT25lKGMsIGMpIHllcywgaGl0XG4gICAgICAgICAgICAgICAgdmFyIGZyID0gZmk7XG4gICAgICAgICAgICAgICAgdmFyIHByID0gcGkgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChwciA9PT0gcGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnKiogYXQgdGhlIGVuZCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBhICoqIGF0IHRoZSBlbmQgd2lsbCBqdXN0IHN3YWxsb3cgdGhlIHJlc3QuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgZm91bmQgYSBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgLy8gaG93ZXZlciwgaXQgd2lsbCBub3Qgc3dhbGxvdyAvLngsIHVubGVzc1xuICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb25zLmRvdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgICAgIC8vIC4gYW5kIC4uIGFyZSAqbmV2ZXIqIG1hdGNoZWQgYnkgKiosIGZvciBleHBsb3NpdmVseVxuICAgICAgICAgICAgICAgICAgICAvLyBleHBvbmVudGlhbCByZWFzb25zLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZmkgPCBmbDsgZmkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVbZmldID09PSAnLicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlW2ZpXSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghb3B0aW9ucy5kb3QgJiYgZmlsZVtmaV0uY2hhckF0KDApID09PSAnLicpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb2ssIGxldCdzIHNlZSBpZiB3ZSBjYW4gc3dhbGxvdyB3aGF0ZXZlciB3ZSBjYW4uXG4gICAgICAgICAgICAgICAgd2hpbGUgKGZyIDwgZmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN3YWxsb3dlZSA9IGZpbGVbZnJdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdcXG5nbG9ic3RhciB3aGlsZScsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwciwgc3dhbGxvd2VlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gWFhYIHJlbW92ZSB0aGlzIHNsaWNlLiAgSnVzdCBwYXNzIHRoZSBzdGFydCBpbmRleC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hPbmUoZmlsZS5zbGljZShmciksIHBhdHRlcm4uc2xpY2UocHIpLCBwYXJ0aWFsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnZ2xvYnN0YXIgZm91bmQgbWF0Y2ghJywgZnIsIGZsLCBzd2FsbG93ZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm91bmQgYSBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuJ3Qgc3dhbGxvdyBcIi5cIiBvciBcIi4uXCIgZXZlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbiBvbmx5IHN3YWxsb3cgXCIuZm9vXCIgd2hlbiBleHBsaWNpdGx5IGFza2VkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN3YWxsb3dlZSA9PT0gJy4nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dhbGxvd2VlID09PSAnLi4nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBzd2FsbG93ZWUuY2hhckF0KDApID09PSAnLicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnZG90IGRldGVjdGVkIScsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAqKiBzd2FsbG93cyBhIHNlZ21lbnQsIGFuZCBjb250aW51ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJ2dsb2JzdGFyIHN3YWxsb3cgYSBzZWdtZW50LCBhbmQgY29udGludWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbm8gbWF0Y2ggd2FzIGZvdW5kLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIGluIHBhcnRpYWwgbW9kZSwgd2UgY2FuJ3Qgc2F5IHRoaXMgaXMgbmVjZXNzYXJpbHkgb3Zlci5cbiAgICAgICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgICAgICAgICBpZiAocGFydGlhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByYW4gb3V0IG9mIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnXFxuPj4+IG5vIG1hdGNoLCBwYXJ0aWFsPycsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmciA9PT0gZmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc29tZXRoaW5nIG90aGVyIHRoYW4gKipcbiAgICAgICAgICAgIC8vIG5vbi1tYWdpYyBwYXR0ZXJucyBqdXN0IGhhdmUgdG8gbWF0Y2ggZXhhY3RseVxuICAgICAgICAgICAgLy8gcGF0dGVybnMgd2l0aCBtYWdpYyBoYXZlIGJlZW4gdHVybmVkIGludG8gcmVnZXhwcy5cbiAgICAgICAgICAgIGxldCBoaXQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaGl0ID0gZiA9PT0gcDtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKCdzdHJpbmcgbWF0Y2gnLCBwLCBmLCBoaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGl0ID0gcC50ZXN0KGYpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJ3BhdHRlcm4gbWF0Y2gnLCBwLCBmLCBoaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFoaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGU6IGVuZGluZyBpbiAvIG1lYW5zIHRoYXQgd2UnbGwgZ2V0IGEgZmluYWwgXCJcIlxuICAgICAgICAvLyBhdCB0aGUgZW5kIG9mIHRoZSBwYXR0ZXJuLiAgVGhpcyBjYW4gb25seSBtYXRjaCBhXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgXCJcIiBhdCB0aGUgZW5kIG9mIHRoZSBmaWxlLlxuICAgICAgICAvLyBJZiB0aGUgZmlsZSBlbmRzIGluIC8sIHRoZW4gaXQgY2FuIG9ubHkgbWF0Y2ggYVxuICAgICAgICAvLyBhIHBhdHRlcm4gdGhhdCBlbmRzIGluIC8sIHVubGVzcyB0aGUgcGF0dGVybiBqdXN0XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSBhbnkgbW9yZSBmb3IgaXQuIEJ1dCwgYS9iLyBzaG91bGQgKm5vdCpcbiAgICAgICAgLy8gbWF0Y2ggXCJhL2IvKlwiLCBldmVuIHRob3VnaCBcIlwiIG1hdGNoZXMgYWdhaW5zdCB0aGVcbiAgICAgICAgLy8gW14vXSo/IHBhdHRlcm4sIGV4Y2VwdCBpbiBwYXJ0aWFsIG1vZGUsIHdoZXJlIGl0IG1pZ2h0XG4gICAgICAgIC8vIHNpbXBseSBub3QgYmUgcmVhY2hlZCB5ZXQuXG4gICAgICAgIC8vIEhvd2V2ZXIsIGEvYi8gc2hvdWxkIHN0aWxsIHNhdGlzZnkgYS8qXG4gICAgICAgIC8vIG5vdyBlaXRoZXIgd2UgZmVsbCBvZmYgdGhlIGVuZCBvZiB0aGUgcGF0dGVybiwgb3Igd2UncmUgZG9uZS5cbiAgICAgICAgaWYgKGZpID09PSBmbCAmJiBwaSA9PT0gcGwpIHtcbiAgICAgICAgICAgIC8vIHJhbiBvdXQgb2YgcGF0dGVybiBhbmQgZmlsZW5hbWUgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgICAgICAgIC8vIGFuIGV4YWN0IGhpdCFcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZpID09PSBmbCkge1xuICAgICAgICAgICAgLy8gcmFuIG91dCBvZiBmaWxlLCBidXQgc3RpbGwgaGFkIHBhdHRlcm4gbGVmdC5cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgb2sgaWYgd2UncmUgZG9pbmcgdGhlIG1hdGNoIGFzIHBhcnQgb2ZcbiAgICAgICAgICAgIC8vIGEgZ2xvYiBmcyB0cmF2ZXJzYWwuXG4gICAgICAgICAgICByZXR1cm4gcGFydGlhbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaSA9PT0gcGwpIHtcbiAgICAgICAgICAgIC8vIHJhbiBvdXQgb2YgcGF0dGVybiwgc3RpbGwgaGF2ZSBmaWxlIGxlZnQuXG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgYWNjZXB0YWJsZSBpZiB3ZSdyZSBvbiB0aGUgdmVyeSBsYXN0XG4gICAgICAgICAgICAvLyBlbXB0eSBzZWdtZW50IG9mIGEgZmlsZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2guXG4gICAgICAgICAgICAvLyBhLyogc2hvdWxkIG1hdGNoIGEvYi9cbiAgICAgICAgICAgIHJldHVybiBmaSA9PT0gZmwgLSAxICYmIGZpbGVbZmldID09PSAnJztcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gc2hvdWxkIGJlIHVucmVhY2hhYmxlLlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3dGY/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICB9XG4gICAgYnJhY2VFeHBhbmQoKSB7XG4gICAgICAgIHJldHVybiBicmFjZUV4cGFuZCh0aGlzLnBhdHRlcm4sIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICAgIHBhcnNlKHBhdHRlcm4pIHtcbiAgICAgICAgYXNzZXJ0VmFsaWRQYXR0ZXJuKHBhdHRlcm4pO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAvLyBzaG9ydGN1dHNcbiAgICAgICAgaWYgKHBhdHRlcm4gPT09ICcqKicpXG4gICAgICAgICAgICByZXR1cm4gR0xPQlNUQVI7XG4gICAgICAgIGlmIChwYXR0ZXJuID09PSAnJylcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgLy8gZmFyIGFuZCBhd2F5LCB0aGUgbW9zdCBjb21tb24gZ2xvYiBwYXR0ZXJuIHBhcnRzIGFyZVxuICAgICAgICAvLyAqLCAqLiosIGFuZCAqLjxleHQ+ICBBZGQgYSBmYXN0IGNoZWNrIG1ldGhvZCBmb3IgdGhvc2UuXG4gICAgICAgIGxldCBtO1xuICAgICAgICBsZXQgZmFzdFRlc3QgPSBudWxsO1xuICAgICAgICBpZiAoKG0gPSBwYXR0ZXJuLm1hdGNoKHN0YXJSRSkpKSB7XG4gICAgICAgICAgICBmYXN0VGVzdCA9IG9wdGlvbnMuZG90ID8gc3RhclRlc3REb3QgOiBzdGFyVGVzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobSA9IHBhdHRlcm4ubWF0Y2goc3RhckRvdEV4dFJFKSkpIHtcbiAgICAgICAgICAgIGZhc3RUZXN0ID0gKG9wdGlvbnMubm9jYXNlXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmRvdFxuICAgICAgICAgICAgICAgICAgICA/IHN0YXJEb3RFeHRUZXN0Tm9jYXNlRG90XG4gICAgICAgICAgICAgICAgICAgIDogc3RhckRvdEV4dFRlc3ROb2Nhc2VcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMuZG90XG4gICAgICAgICAgICAgICAgICAgID8gc3RhckRvdEV4dFRlc3REb3RcbiAgICAgICAgICAgICAgICAgICAgOiBzdGFyRG90RXh0VGVzdCkobVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKG0gPSBwYXR0ZXJuLm1hdGNoKHFtYXJrc1JFKSkpIHtcbiAgICAgICAgICAgIGZhc3RUZXN0ID0gKG9wdGlvbnMubm9jYXNlXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmRvdFxuICAgICAgICAgICAgICAgICAgICA/IHFtYXJrc1Rlc3ROb2Nhc2VEb3RcbiAgICAgICAgICAgICAgICAgICAgOiBxbWFya3NUZXN0Tm9jYXNlXG4gICAgICAgICAgICAgICAgOiBvcHRpb25zLmRvdFxuICAgICAgICAgICAgICAgICAgICA/IHFtYXJrc1Rlc3REb3RcbiAgICAgICAgICAgICAgICAgICAgOiBxbWFya3NUZXN0KShtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobSA9IHBhdHRlcm4ubWF0Y2goc3RhckRvdFN0YXJSRSkpKSB7XG4gICAgICAgICAgICBmYXN0VGVzdCA9IG9wdGlvbnMuZG90ID8gc3RhckRvdFN0YXJUZXN0RG90IDogc3RhckRvdFN0YXJUZXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChtID0gcGF0dGVybi5tYXRjaChkb3RTdGFyUkUpKSkge1xuICAgICAgICAgICAgZmFzdFRlc3QgPSBkb3RTdGFyVGVzdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZSA9IEFTVC5mcm9tR2xvYihwYXR0ZXJuLCB0aGlzLm9wdGlvbnMpLnRvTU1QYXR0ZXJuKCk7XG4gICAgICAgIGlmIChmYXN0VGVzdCAmJiB0eXBlb2YgcmUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAvLyBBdm9pZHMgb3ZlcnJpZGluZyBpbiBmcm96ZW4gZW52aXJvbm1lbnRzXG4gICAgICAgICAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHJlLCAndGVzdCcsIHsgdmFsdWU6IGZhc3RUZXN0IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZTtcbiAgICB9XG4gICAgbWFrZVJlKCkge1xuICAgICAgICBpZiAodGhpcy5yZWdleHAgfHwgdGhpcy5yZWdleHAgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnZXhwO1xuICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB0aGlzLnNldCBpcyBhIDJkIGFycmF5IG9mIHBhcnRpYWxcbiAgICAgICAgLy8gcGF0dGVybiBzdHJpbmdzLCBvciBcIioqXCIuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEl0J3MgYmV0dGVyIHRvIHVzZSAubWF0Y2goKS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkbid0XG4gICAgICAgIC8vIGJlIHVzZWQsIHJlYWxseSwgYnV0IGl0J3MgcHJldHR5IGNvbnZlbmllbnQgc29tZXRpbWVzLFxuICAgICAgICAvLyB3aGVuIHlvdSBqdXN0IHdhbnQgdG8gd29yayB3aXRoIGEgcmVnZXguXG4gICAgICAgIGNvbnN0IHNldCA9IHRoaXMuc2V0O1xuICAgICAgICBpZiAoIXNldC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVnZXhwID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdleHA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdHdvU3RhciA9IG9wdGlvbnMubm9nbG9ic3RhclxuICAgICAgICAgICAgPyBzdGFyXG4gICAgICAgICAgICA6IG9wdGlvbnMuZG90XG4gICAgICAgICAgICAgICAgPyB0d29TdGFyRG90XG4gICAgICAgICAgICAgICAgOiB0d29TdGFyTm9Eb3Q7XG4gICAgICAgIGNvbnN0IGZsYWdzID0gbmV3IFNldChvcHRpb25zLm5vY2FzZSA/IFsnaSddIDogW10pO1xuICAgICAgICAvLyByZWdleHBpZnkgbm9uLWdsb2JzdGFyIHBhdHRlcm5zXG4gICAgICAgIC8vIGlmICoqIGlzIG9ubHkgaXRlbSwgdGhlbiB3ZSBqdXN0IGRvIG9uZSB0d29TdGFyXG4gICAgICAgIC8vIGlmICoqIGlzIGZpcnN0LCBhbmQgdGhlcmUgYXJlIG1vcmUsIHByZXBlbmQgKFxcL3x0d29TdGFyXFwvKT8gdG8gbmV4dFxuICAgICAgICAvLyBpZiAqKiBpcyBsYXN0LCBhcHBlbmQgKFxcL3R3b1N0YXJ8KSB0byBwcmV2aW91c1xuICAgICAgICAvLyBpZiAqKiBpcyBpbiB0aGUgbWlkZGxlLCBhcHBlbmQgKFxcL3xcXC90d29TdGFyXFwvKSB0byBwcmV2aW91c1xuICAgICAgICAvLyB0aGVuIGZpbHRlciBvdXQgR0xPQlNUQVIgc3ltYm9sc1xuICAgICAgICBsZXQgcmUgPSBzZXRcbiAgICAgICAgICAgIC5tYXAocGF0dGVybiA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcCA9IHBhdHRlcm4ubWFwKHAgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiBwLmZsYWdzLnNwbGl0KCcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLmFkZChmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IHJlZ0V4cEVzY2FwZShwKVxuICAgICAgICAgICAgICAgICAgICA6IHAgPT09IEdMT0JTVEFSXG4gICAgICAgICAgICAgICAgICAgICAgICA/IEdMT0JTVEFSXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHAuX3NyYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHAuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBwcFtpICsgMV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHBwW2kgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAocCAhPT0gR0xPQlNUQVIgfHwgcHJldiA9PT0gR0xPQlNUQVIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQgJiYgbmV4dCAhPT0gR0xPQlNUQVIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBwW2kgKyAxXSA9ICcoPzpcXFxcL3wnICsgdHdvU3RhciArICdcXFxcLyk/JyArIG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcFtpXSA9IHR3b1N0YXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBwW2kgLSAxXSA9IHByZXYgKyAnKD86XFxcXC98JyArIHR3b1N0YXIgKyAnKT8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSBHTE9CU1RBUikge1xuICAgICAgICAgICAgICAgICAgICBwcFtpIC0gMV0gPSBwcmV2ICsgJyg/OlxcXFwvfFxcXFwvJyArIHR3b1N0YXIgKyAnXFxcXC8pJyArIG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHBwW2kgKyAxXSA9IEdMT0JTVEFSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHBwLmZpbHRlcihwID0+IHAgIT09IEdMT0JTVEFSKS5qb2luKCcvJyk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignfCcpO1xuICAgICAgICAvLyBuZWVkIHRvIHdyYXAgaW4gcGFyZW5zIGlmIHdlIGhhZCBtb3JlIHRoYW4gb25lIHRoaW5nIHdpdGggfCxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIG9ubHkgdGhlIGZpcnN0IHdpbGwgYmUgYW5jaG9yZWQgdG8gXiBhbmQgdGhlIGxhc3QgdG8gJFxuICAgICAgICBjb25zdCBbb3BlbiwgY2xvc2VdID0gc2V0Lmxlbmd0aCA+IDEgPyBbJyg/OicsICcpJ10gOiBbJycsICcnXTtcbiAgICAgICAgLy8gbXVzdCBtYXRjaCBlbnRpcmUgcGF0dGVyblxuICAgICAgICAvLyBlbmRpbmcgaW4gYSAqIG9yICoqIHdpbGwgbWFrZSBpdCBsZXNzIHN0cmljdC5cbiAgICAgICAgcmUgPSAnXicgKyBvcGVuICsgcmUgKyBjbG9zZSArICckJztcbiAgICAgICAgLy8gY2FuIG1hdGNoIGFueXRoaW5nLCBhcyBsb25nIGFzIGl0J3Mgbm90IHRoaXMuXG4gICAgICAgIGlmICh0aGlzLm5lZ2F0ZSlcbiAgICAgICAgICAgIHJlID0gJ14oPyEnICsgcmUgKyAnKS4rJCc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2V4cCA9IG5ldyBSZWdFeHAocmUsIFsuLi5mbGFnc10uam9pbignJykpO1xuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgaW1wb3NzaWJsZVxuICAgICAgICAgICAgdGhpcy5yZWdleHAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdleHA7XG4gICAgfVxuICAgIHNsYXNoU3BsaXQocCkge1xuICAgICAgICAvLyBpZiBwIHN0YXJ0cyB3aXRoIC8vIG9uIHdpbmRvd3MsIHdlIHByZXNlcnZlIHRoYXRcbiAgICAgICAgLy8gc28gdGhhdCBVTkMgcGF0aHMgYXJlbid0IGJyb2tlbi4gIE90aGVyd2lzZSwgYW55IG51bWJlciBvZlxuICAgICAgICAvLyAvIGNoYXJhY3RlcnMgYXJlIGNvYWxlc2NlZCBpbnRvIG9uZSwgdW5sZXNzXG4gICAgICAgIC8vIHByZXNlcnZlTXVsdGlwbGVTbGFzaGVzIGlzIHNldCB0byB0cnVlLlxuICAgICAgICBpZiAodGhpcy5wcmVzZXJ2ZU11bHRpcGxlU2xhc2hlcykge1xuICAgICAgICAgICAgcmV0dXJuIHAuc3BsaXQoJy8nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzV2luZG93cyAmJiAvXlxcL1xcL1teXFwvXSsvLnRlc3QocCkpIHtcbiAgICAgICAgICAgIC8vIGFkZCBhbiBleHRyYSAnJyBmb3IgdGhlIG9uZSB3ZSBsb3NlXG4gICAgICAgICAgICByZXR1cm4gWycnLCAuLi5wLnNwbGl0KC9cXC8rLyldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHAuc3BsaXQoL1xcLysvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXRjaChmLCBwYXJ0aWFsID0gdGhpcy5wYXJ0aWFsKSB7XG4gICAgICAgIHRoaXMuZGVidWcoJ21hdGNoJywgZiwgdGhpcy5wYXR0ZXJuKTtcbiAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCBpbiB0aGUgY2FzZSBvZiBidXN0ZWQgdGhpbmdzLlxuICAgICAgICAvLyBjb21tZW50cywgZXRjLlxuICAgICAgICBpZiAodGhpcy5jb21tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW1wdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmID09PSAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZiA9PT0gJy8nICYmIHBhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIC8vIHdpbmRvd3M6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICAgICAgICBpZiAodGhpcy5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgIGYgPSBmLnNwbGl0KCdcXFxcJykuam9pbignLycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRyZWF0IHRoZSB0ZXN0IHBhdGggYXMgYSBzZXQgb2YgcGF0aHBhcnRzLlxuICAgICAgICBjb25zdCBmZiA9IHRoaXMuc2xhc2hTcGxpdChmKTtcbiAgICAgICAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sICdzcGxpdCcsIGZmKTtcbiAgICAgICAgLy8ganVzdCBPTkUgb2YgdGhlIHBhdHRlcm4gc2V0cyBpbiB0aGlzLnNldCBuZWVkcyB0byBtYXRjaFxuICAgICAgICAvLyBpbiBvcmRlciBmb3IgaXQgdG8gYmUgdmFsaWQuICBJZiBuZWdhdGluZywgdGhlbiBqdXN0IG9uZVxuICAgICAgICAvLyBtYXRjaCBtZWFucyB0aGF0IHdlIGhhdmUgZmFpbGVkLlxuICAgICAgICAvLyBFaXRoZXIgd2F5LCByZXR1cm4gb24gdGhlIGZpcnN0IGhpdC5cbiAgICAgICAgY29uc3Qgc2V0ID0gdGhpcy5zZXQ7XG4gICAgICAgIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCAnc2V0Jywgc2V0KTtcbiAgICAgICAgLy8gRmluZCB0aGUgYmFzZW5hbWUgb2YgdGhlIHBhdGggYnkgbG9va2luZyBmb3IgdGhlIGxhc3Qgbm9uLWVtcHR5IHNlZ21lbnRcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gZmZbZmYubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBmZi5sZW5ndGggLSAyOyAhZmlsZW5hbWUgJiYgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZmW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gc2V0W2ldO1xuICAgICAgICAgICAgbGV0IGZpbGUgPSBmZjtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1hdGNoQmFzZSAmJiBwYXR0ZXJuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGZpbGUgPSBbZmlsZW5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGl0ID0gdGhpcy5tYXRjaE9uZShmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsKTtcbiAgICAgICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMubmVnYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGhpdHMuICB0aGlzIGlzIHN1Y2Nlc3MgaWYgaXQncyBhIG5lZ2F0aXZlXG4gICAgICAgIC8vIHBhdHRlcm4sIGZhaWx1cmUgb3RoZXJ3aXNlLlxuICAgICAgICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubmVnYXRlO1xuICAgIH1cbiAgICBzdGF0aWMgZGVmYXVsdHMoZGVmKSB7XG4gICAgICAgIHJldHVybiBtaW5pbWF0Y2guZGVmYXVsdHMoZGVmKS5NaW5pbWF0Y2g7XG4gICAgfVxufVxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5leHBvcnQgeyBBU1QgfSBmcm9tICcuL2FzdC5qcyc7XG5leHBvcnQgeyBlc2NhcGUgfSBmcm9tICcuL2VzY2FwZS5qcyc7XG5leHBvcnQgeyB1bmVzY2FwZSB9IGZyb20gJy4vdW5lc2NhcGUuanMnO1xuLyogYzggaWdub3JlIHN0b3AgKi9cbm1pbmltYXRjaC5BU1QgPSBBU1Q7XG5taW5pbWF0Y2guTWluaW1hdGNoID0gTWluaW1hdGNoO1xubWluaW1hdGNoLmVzY2FwZSA9IGVzY2FwZTtcbm1pbmltYXRjaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVIYXNoKHNvdXJjZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc291cmNlXG4gICAgICAgIC5yZXBsYWNlQWxsKCcgJywgJy0nKVxuICAgICAgICAucmVwbGFjZUFsbCgvW15cXHctXS9naSwgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlQnlTcGVjaWZpY2l0eShhOiBzdHJpbmcsIGI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgLy9bXG4gICAgLy8gICcqJyxcbiAgICAvLyAgJ2V4YW1wbGUuY29tJyxcbiAgICAvLyAgJ2V4YW1wbGUuY29tL2ltYWdlcycsXG4gICAgLy8gICcqL2FsbCcsXG4gICAgLy8gICdleGFtcGxlLmNvbS9ibG9nJyxcbiAgICAvLyAgJ2ltYWdlcy5vcmcnLFxuICAgIC8vICAnZXhhbXBsZS5jb20vYmxvZy9hc2QnLFxuICAgIC8vXVxuICAgIC8vIGJlY29tZXMg4qyH77iPXG4gICAgLy9bXG4gICAgLy8gICdleGFtcGxlLmNvbS9ibG9nL2FzZCcsXG4gICAgLy8gICdleGFtcGxlLmNvbS9ibG9nJyxcbiAgICAvLyAgJ2V4YW1wbGUuY29tL2ltYWdlcycsXG4gICAgLy8gICdleGFtcGxlLmNvbScsXG4gICAgLy8gICdpbWFnZXMub3JnJyxcbiAgICAvLyAgJyovYWxsJyxcbiAgICAvLyAgJyonLFxuICAgIC8vXVxuXG4gICAgLy9cbiAgICAvLyBgKmAgbWVhbnMgYWxsLCBpdCBzaG91bGQgY29tZSBsYXN0XG4gICAgaWYgKCFhLnN0YXJ0c1dpdGgoJyonKSAmJiBiLnN0YXJ0c1dpdGgoJyonKSkgcmV0dXJuIC0xXG4gICAgaWYgKGEuc3RhcnRzV2l0aCgnKicpICYmICFiLnN0YXJ0c1dpdGgoJyonKSkgcmV0dXJuIDFcblxuICAgIC8vIHByaW9yaXRpemUgc3BlY2lmaWNpdHlcbiAgICBpZiAoYS5zdGFydHNXaXRoKGIpKSByZXR1cm4gLTFcbiAgICBpZiAoYi5zdGFydHNXaXRoKGEpKSByZXR1cm4gMVxuXG4gICAgLy8gb3JkZXIgYWxmYWJldGljYWxseVxuICAgIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYiwgJ2VuJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbWVFeHQobWltZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBAU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9NZWRpYS9Gb3JtYXRzL0ltYWdlX3R5cGVzXG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc3dpdGNoIChtaW1lKSB7XG4gICAgICAgIC8vIE1JTUUgbWFwcyB0byBtYW55IEVYVFxuICAgICAgICAvLyAtICdpbWFnZS9qcGVnJzoganBnLGpwZWcsIC4uLmV0Y1xuICAgICAgICAvLyAtICdpbWFnZS90aWZmJzogdGlmLHRpZmZcbiAgICAgICAgY2FzZSAnaW1hZ2UvanBlZyc6IHJldHVybiAnanBnJ1xuICAgICAgICBjYXNlICdpbWFnZS90aWZmJzogcmV0dXJuICd0aWYnXG5cbiAgICAgICAgLy8gTUlNRSBjb21wb3NlZCBvZiBFWFRcbiAgICAgICAgLy8gLSAnaW1hZ2Uve2FwbmcsYXZpZixnaWYscG5nLHdlYnAsYm1wfSdcbiAgICAgICAgLy8gLSAnaW1hZ2Uvc3ZnK3htbCc6IHN2Z1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gbWltZS5zcGxpdCgvXFwvfFxcKy9naSlbMV1cbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7XG4gICAgQXR0YWNobWVudHNDYWNoZVBsdWdpbixcbiAgICBDYWNoZUNvbmZpZyxcbiAgICBDYWNoZU1hdGNoZXIsXG4gICAgRnJvbnRtYXR0ZXJNYXRjaGVyLFxuICAgIFBsdWdpblN0YXRlLFxuICAgIFJlbW90ZU1hdGNoZXIsXG59IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBMb2dnZXIsIFVSSSwgVVJMIH0gZnJvbSAnQGx1aXMuYnMvb2JzaWRpYW4tZm5jJ1xuaW1wb3J0IHsgQXBwLCBwYXJzZUZyb250TWF0dGVyRW50cnksIHJlcXVlc3RVcmwgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IG1pbmltYXRjaCB9IGZyb20gJ21pbmltYXRjaCdcbmltcG9ydCB7IEF0dGFjaG1lbnRFcnJvciB9IGZyb20gJy4vQXR0YWNobWVudEVycm9yJ1xuaW1wb3J0IHsgZ2V0TWltZUV4dCB9IGZyb20gJy4vc3RyaW5ncydcblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVTdGF0ZShwbHVnaW46IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4pOiBQbHVnaW5TdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FjaGVfbWF0Y2hlcnM6IGNvbmZpZ01hdGNoZXJzKHBsdWdpbi5zZXR0aW5ncy5jYWNoZV9jb25maWdzKSxcbiAgICAgICAgdXJsX2NhY2hlX21hdGNoZXI6IHJlbW90ZU1hdGNoZXIocGx1Z2luLnNldHRpbmdzLnVybF9wYXJhbV9jYWNoZSksXG4gICAgICAgIHVybF9pZ25vcmVfbWF0Y2hlcjogcmVtb3RlTWF0Y2hlcihwbHVnaW4uc2V0dGluZ3MudXJsX3BhcmFtX2lnbm9yZSksXG4gICAgICAgIG5vdGVfY2FjaGVfbWF0Y2hlcjogZnJvbnRtYXR0ZXJNYXRjaGVyKFxuICAgICAgICAgICAgcGx1Z2luLmFwcCxcbiAgICAgICAgICAgIHBsdWdpbi5zZXR0aW5ncy5ub3RlX3BhcmFtX2NhY2hlLFxuICAgICAgICApLFxuICAgICAgICBub3RlX2lnbm9yZV9tYXRjaGVyOiBmcm9udG1hdHRlck1hdGNoZXIoXG4gICAgICAgICAgICBwbHVnaW4uYXBwLFxuICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLm5vdGVfcGFyYW1faWdub3JlLFxuICAgICAgICApLFxuICAgIH1cbn1cblxuLyoqIEdlbmVyYXRlcyBhIG1hdGNoZXIsIHRoYXQgdXNlcnMgRnJvbnRtYXR0ZXIgcGFyYW1zLiAqL1xuZnVuY3Rpb24gZnJvbnRtYXR0ZXJNYXRjaGVyKFxuICAgIGFwcDogQXBwLFxuICAgIG5vdGVfcGFyYW0gPSAnZmFsbGJhY2tfcGFyYW0nLFxuKTogRnJvbnRtYXR0ZXJNYXRjaGVyIHtcbiAgICByZXR1cm4gKG5vdGVwYXRoOiBzdHJpbmcsIHJlbW90ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUobm90ZXBhdGgpXG4gICAgICAgIGlmICghbWV0YWRhdGE/LmZyb250bWF0dGVyKSByZXR1cm4gZmFsc2VcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGcm9udE1hdHRlckVudHJ5KG1ldGFkYXRhLmZyb250bWF0dGVyLCBub3RlX3BhcmFtKVxuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2VcbiAgICAgICAgLy8gc3VwcG9ydCBzdHJpbmdzIGxpa2UgJ2RvbWFpbi5jb20vaW1hZ2VzJ1xuICAgICAgICBpZiAoU3RyaW5nLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuIHRlc3RVcmwodmFsdWUsIHJlbW90ZSlcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIC8vIHN1cHBvcnQgc3RyaW5nLWFycmF5cyBsaWtlIFsnZG9tYWluLmNvbS9pbWFnZXMnXVxuICAgICAgICBmb3IgKGNvbnN0IHZhbCBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFTdHJpbmcuaXNTdHJpbmcodmFsKSkgY29udGludWVcbiAgICAgICAgICAgIGlmICh0ZXN0VXJsKHZhbCwgcmVtb3RlKSkgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRlc3RVcmwocGF0dGVybjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgLy8gaWYgdGhlIHVzZXIgYWRkcyAnaHR0cCcsIHRyeSBhbiBleGFjdCBwcmVmaXggbWF0Y2hcbiAgICBpZiAocGF0dGVybi5zdGFydHNXaXRoKCdodHRwJykpIHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKHBhdHRlcm4pXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ15odHRwcz86Ly8oXFxcXHcrXFxcXC4pKicgKyBwYXR0ZXJuLCAnZycpLnRlc3QodmFsdWUpXG59XG5cbi8qKiBHZW5lcmF0ZXMgYSBtYXRjaGVyLCB0aGF0IGRldGVjdHMgdGhlIHByZXNlbmNlIG9mIGFuIFVSTCBwYXJhbS4gKi9cbmZ1bmN0aW9uIHJlbW90ZU1hdGNoZXIodXJsX3BhcmFtID0gJ2ZhbGxiYWNrX3BhcmFtJyk6IFJlbW90ZU1hdGNoZXIge1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnWz8mXScgKyB1cmxfcGFyYW0gKyAnKFsmPVxcXFxzXXwkKScsICdpJylcbiAgICByZXR1cm4gKHJlbW90ZTogc3RyaW5nKSA9PiByZWdleC50ZXN0KHJlbW90ZSlcbn1cblxuZnVuY3Rpb24gY29uZmlnTWF0Y2hlcnMoY29uZmlnczogQ2FjaGVDb25maWdbXSk6IENhY2hlTWF0Y2hlcltdIHtcbiAgICByZXR1cm4gY29uZmlncy5tYXAoKGNvbmZpZykgPT4ge1xuICAgICAgICAvLyBkZWZhdWx0OiBhbG9uZ3NpZGUgdGhlIG5vdGVcbiAgICAgICAgbGV0IHJlc29sdmUgPSAoX3BhdGg6IHN0cmluZykgPT4gVVJJLmdldFBhcmVudChfcGF0aClcbiAgICAgICAgc3dpdGNoIChjb25maWcubW9kZSkge1xuICAgICAgICAgICAgY2FzZSAnTk9URS1GT0xERVInOiAvLyBhbG9uZ3NpZGUgdGhlIG5vdGUgaW4gYSBzdWJmb2xkZXIgd2l0aCB0aGUgdGFyZ2V0UGF0aCBhcyBuYW1lXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9IChfcGF0aDogc3RyaW5nKSA9PlxuICAgICAgICAgICAgICAgICAgICBVUkkuam9pbihVUkkuZ2V0UGFyZW50KF9wYXRoKSwgY29uZmlnLnRhcmdldClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnVEFSR0VULVBBVEgnOiAvLyBpbnNpZGUgdGhlIHRhcmdldFBhdGggcmVwbGF0aW5nIHRoZSBub3RlLXBhdGgsIHdpdGhvdXQgYC5tZGBcbiAgICAgICAgICAgICAgICByZXNvbHZlID0gKF9wYXRoOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgIFVSSS5qb2luKGNvbmZpZy50YXJnZXQsIFVSSS5yZW1vdmVFeHQoX3BhdGgpKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdUQVJHRVQtTk9URSc6IC8vIGluc2lkZSB0aGUgdGFyZ2V0UGF0aCBpbiBhIGZvbGRlciBuYW1lZCBhcyB0aGUgbm90ZSwgd2l0aG91dCBgLm1kYFxuICAgICAgICAgICAgICAgIHJlc29sdmUgPSAoX3BhdGg6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgVVJJLmpvaW4oY29uZmlnLnRhcmdldCwgVVJJLmdldEJhc2VuYW1lKF9wYXRoKSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnVEFSR0VUJzogLy8gZGlyZWN0bHkgaW5zaWRlIHRoZSB0YXJnZXRQYXRoXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9ICgpID0+IGNvbmZpZy50YXJnZXRcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGVzdFBhdGggPVxuICAgICAgICAgICAgY29uZmlnLnBhdHRlcm4gIT09ICcqJ1xuICAgICAgICAgICAgICAgID8gKF9ub3RlcGF0aDogc3RyaW5nKSA9PiBtaW5pbWF0Y2goX25vdGVwYXRoLCBjb25maWcucGF0dGVybilcbiAgICAgICAgICAgICAgICA6ICgpID0+IHRydWVcbiAgICAgICAgY29uc3QgdGVzdFJlbW90ZSA9IChfcmVtb3RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBwYXR0ZXJuLCB3aGl0ZWxpc3RlZCB9IG9mIGNvbmZpZy5yZW1vdGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4gPT09ICcqJykgcmV0dXJuIHdoaXRlbGlzdGVkXG4gICAgICAgICAgICAgICAgaWYgKHRlc3RVcmwocGF0dGVybiwgX3JlbW90ZSkpIHJldHVybiB3aGl0ZWxpc3RlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBPYmplY3QuZnJlZXplKGNvbmZpZyksXG4gICAgICAgICAgICBpc0VuYWJsZWQ6ICgpID0+IGNvbmZpZy5lbmFibGVkLFxuICAgICAgICAgICAgdGVzdFJlbW90ZSxcbiAgICAgICAgICAgIHRlc3RQYXRoLFxuICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbi8qKlxuICogUmVxdWVzdCB0aGUgbWV0YWRhdGEgb2YgYSBmaWxlLCB0byBkZXRlcm1pbmUgdGhlIGZpbGUgZXh0ZW5zaW9uLlxuICogQHRocm93cyB7QXR0YWNobWVudEVycm9yfVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVtb3RlRXh0KHVybDogc3RyaW5nLCBsb2c6IExvZ2dlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbG9nLmRlYnVnKGBSZXNvbHZpbmcgZXh0ZW5zaW9uIGZvciAke3VybH1gKVxuXG4gICAgY29uc3QgcmVmZXJlciA9IFVSTC5nZXRPcmlnaW4odXJsKVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICB0aHJvdzogZmFsc2UsXG4gICAgICAgIG1ldGhvZDogJ0hFQUQnLFxuICAgICAgICBoZWFkZXJzOiB7IFJlZmVyZXI6IHJlZmVyZXIgPyByZWZlcmVyICsgJy8nIDogJycgfSxcbiAgICB9KVxuXG4gICAgQXR0YWNobWVudEVycm9yLmFzc2VydFJlc3BvbnNlKHVybCwgcmVzcG9uc2UsICd1cmwtcmVxdWVzdC1oZWFkJylcbiAgICByZXR1cm4gZ2V0TWltZUV4dChyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSlcbn1cblxuLyoqXG4gKiBEb3dubG9hZHMgdGhlIGNvbnRlbnQgb2YgYSBmaWxlLlxuICogQHRocm93cyB7QXR0YWNobWVudEVycm9yfVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVtb3RlQ29udGVudChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBsb2c6IExvZ2dlcixcbik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICBsb2cuZGVidWcoYERvd25sb2FkaW5nICR7dXJsfWApXG5cbiAgICBjb25zdCByZWZlcmVyID0gVVJMLmdldE9yaWdpbih1cmwpXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIHRocm93OiBmYWxzZSxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczogeyBSZWZlcmVyOiByZWZlcmVyID8gcmVmZXJlciArICcvJyA6ICcnIH0sXG4gICAgfSlcblxuICAgIEF0dGFjaG1lbnRFcnJvci5hc3NlcnRSZXNwb25zZSh1cmwsIHJlc3BvbnNlLCAndXJsLXJlcXVlc3QtZ2V0JylcbiAgICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXJcbn1cbiIsImltcG9ydCB0eXBlIHsgQ2FjaGVSZW1vdGUgfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHsgY29tcGFyZUJ5U3BlY2lmaWNpdHkgfSBmcm9tICcuL3N0cmluZ3MnXG5cbi8qKiBFbnN1cmVzIHVuaXF1ZW5lc3MgYW5kIG9yZGVyIG9mIGEgbGlzdCBvZiByZW1vdGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVSZW1vdGVzKHJlbW90ZXM6IENhY2hlUmVtb3RlW10pOiBDYWNoZVJlbW90ZVtdIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXSBhcyBDYWNoZVJlbW90ZVtdXG4gICAgbGV0IGhhc0ZhbGxiYWNrID0gZmFsc2VcblxuICAgIC8vIGtlZXAgb25seSBmaXJzdCBhcHBlcmVuY2VzXG4gICAgZm9yIChjb25zdCBhIG9mIHJlbW90ZXMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ldmVyeSgoYikgPT4gYi5wYXR0ZXJuICE9PSBhLnBhdHRlcm4pKSB7XG4gICAgICAgICAgICBpZiAoYS5wYXR0ZXJuID09PSAnKicpIGhhc0ZhbGxiYWNrID0gdHJ1ZVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaGFzRmFsbGJhY2spIHJlc3VsdC5wdXNoKHsgcGF0dGVybjogJyonLCB3aGl0ZWxpc3RlZDogZmFsc2UgfSlcbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVCeVNwZWNpZmljaXR5KGEucGF0dGVybiwgYi5wYXR0ZXJuKSlcbn1cblxuLyoqIFNlcmlhbGl6ZSByZW1vdGVzIGFzIGFuIHN0cmluZy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVSZW1vdGVzKHJlbW90ZXM6IENhY2hlUmVtb3RlW10pOiBzdHJpbmcge1xuICAgIHJldHVybiByZW1vdGVzXG4gICAgICAgIC5tYXAoKHsgd2hpdGVsaXN0ZWQsIHBhdHRlcm4gfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGAke3doaXRlbGlzdGVkID8gJ3cnIDogJ2InfSAke3BhdHRlcm59YFxuICAgICAgICB9KVxuICAgICAgICAuam9pbignXFxuJylcbn1cblxuLyoqXG4gKiBQYXJzZXMgYSByZW1vdGUgc3RyaW5nLCBrZWVwaW5nIHdoaXRlbGlzdGVkIHN0YXR1cyBpZiBwcmVzZW50LlxuICogLSBgJ3cgZXhhbXBsZS5jb20nYCDihpIgYFsnZXhhbXBsZS5jb20nLCB0cnVlXWBcbiAqIC0gYCdiIGV4YW1wbGUuY29tJ2Ag4oaSIGBbJ2V4YW1wbGUuY29tJywgZmFsc2VdYFxuICogLSBgJ2V4YW1wbGUuY29tJ2Ag4oaSIGBbJ2V4YW1wbGUuY29tJywgdW5kZWZpbmVkXWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVtb3RlKHNvdXJjZTogc3RyaW5nKTogW3N0cmluZywgYm9vbGVhbiB8IHVuZGVmaW5lZF0ge1xuICAgIGlmICghL1xccysvLnRlc3Qoc291cmNlKSkgcmV0dXJuIFtzb3VyY2UsIHVuZGVmaW5lZF1cblxuICAgIGNvbnN0IHBhcnRzID0gc291cmNlLnNwbGl0KC9cXHMrL2cpXG4gICAgaWYgKHBhcnRzWzBdLnN0YXJ0c1dpdGgoJ3cnKSkgcmV0dXJuIFtwYXJ0c1sxXSwgdHJ1ZV1cbiAgICBpZiAocGFydHNbMF0uc3RhcnRzV2l0aCgnYicpKSByZXR1cm4gW3BhcnRzWzFdLCBmYWxzZV1cbiAgICByZXR1cm4gW3BhcnRzWzFdLCB1bmRlZmluZWRdXG59XG5cbi8qKiBTcGxpdHMgYSByZW1vdGVzIHN0cmluZywga2VlcGluZyBwcmV2aW91cyBzdGF0ZXMgd2hlbiBwb3NpYmxlLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVtb3RlcyhcbiAgICByZW1vdGVzOiBDYWNoZVJlbW90ZVtdLFxuICAgIHNvdXJjZXM6IHN0cmluZyxcbik6IENhY2hlUmVtb3RlW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdIGFzIENhY2hlUmVtb3RlW11cbiAgICBsZXQgaGFzRmFsbGJhY2sgPSBmYWxzZVxuXG4gICAgLy8gb25lIHJlbW90ZSBwZXItbGluZVxuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMuc3BsaXQoL1xcbisvZykpIHtcbiAgICAgICAgY29uc3QgW3BhdHRlcm4sIHddID0gcGFyc2VSZW1vdGUoc291cmNlKVxuICAgICAgICBpZiAocGF0dGVybiA9PT0gJyonKSBoYXNGYWxsYmFjayA9IHRydWVcblxuICAgICAgICAvLyBpZ25vcmUgZHVwbGljYXRlZCBlbnRyaWVzXG4gICAgICAgIGlmIChyZXN1bHQuc29tZSgoYikgPT4gYi5wYXR0ZXJuID09PSBwYXR0ZXJuKSkgY29udGludWVcblxuICAgICAgICAvLyBpZiBoYXMgd2hpdGVsaXN0ZWQgZGVmaW5pdGlvbiwgdXNlIGl0XG4gICAgICAgIGlmICh3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgcGF0dGVybiwgd2hpdGVsaXN0ZWQ6IHcgfSlcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZWFyY2ggcHJldmlvdXMgZGVmaW5pdGlvblxuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgcmVtb3Rlcykge1xuICAgICAgICAgICAgLy8gdHJ5IHRvIG1hdGNoIHNhbWUgcGF0dGVybnNcbiAgICAgICAgICAgIGlmIChwYXR0ZXJuID09PSBzLnBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHBhdHRlcm4sIHdoaXRlbGlzdGVkOiBzLndoaXRlbGlzdGVkIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJ5IHRvIG1hdGNoIG9ubHkgd2l0aCBhIGRpZmVyZW5jZSBvZiBvbmUgY2hhcmFjdGVyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocGF0dGVybi5sZW5ndGggLSBzLnBhdHRlcm4ubGVuZ3RoKSAhPT0gMSkgY29udGludWVcblxuICAgICAgICAgICAgLy8gdHJ5IHRvIG1hdGNoIHRoZSBwYXR0ZXJuc1xuICAgICAgICAgICAgaWYgKHMucGF0dGVybi5zdGFydHNXaXRoKHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhhbXBsZS5jb20vcGF0aCA9PiBleGFtcGxlLmNvbS9wYXRcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHBhdHRlcm4sIHdoaXRlbGlzdGVkOiBzLndoaXRlbGlzdGVkIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0dGVybi5zdGFydHNXaXRoKHMucGF0dGVybikpIHtcbiAgICAgICAgICAgICAgICAvLyBleGFtcGxlLmNvbS9wYXRoID0+IGV4YW1wbGUuY29tL3BhdGhzXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBwYXR0ZXJuLCB3aGl0ZWxpc3RlZDogcy53aGl0ZWxpc3RlZCB9KVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmYWxsYmFjayBiZWhhdmlvclxuICAgICAgICBpZiAoIXJlc3VsdC5zb21lKChiKSA9PiBiLnBhdHRlcm4gPT09IHBhdHRlcm4pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IHBhdHRlcm4sIHdoaXRlbGlzdGVkOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFoYXNGYWxsYmFjaykgcmVzdWx0LnB1c2goeyBwYXR0ZXJuOiAnKicsIHdoaXRlbGlzdGVkOiBmYWxzZSB9KVxuXG4gICAgLy8gc29ydGluZ1xuICAgIHJldHVybiByZXN1bHQuc29ydCgoYSwgYikgPT4gY29tcGFyZUJ5U3BlY2lmaWNpdHkoYS5wYXR0ZXJuLCBiLnBhdHRlcm4pKVxufVxuXG4vKiogRGV0ZWN0cyBwb3NpYmxlIHByb2JsZW1zIHdpdGggdGhlIHVzZXIgZGVmaW5lZCByZW1vdGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVtb3Rlcyhzb3VyY2VzOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcHJvYmxlbXM6IHN0cmluZ1tdID0gW11cbiAgICBsZXQgaGFzRmFsbGJhY2sgPSBmYWxzZVxuXG4gICAgLy8gb25lIHJlbW90ZSBwZXItbGluZVxuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMuc3BsaXQoL1xcbisvZykpIHtcbiAgICAgICAgY29uc3QgdHJpbW1lZCA9IHNvdXJjZS50cmltKCkucmVwbGFjZSgvXlt3Yl1cXHMrLywgJycpXG4gICAgICAgIGlmICh0cmltbWVkID09PSAnKicpIHtcbiAgICAgICAgICAgIGhhc0ZhbGxiYWNrID0gdHJ1ZVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvXlxcdys6L2dpLnRlc3QodHJpbW1lZCkpIHtcbiAgICAgICAgICAgIHByb2JsZW1zLnB1c2goXCJyZW1vdmUgcHJvdG9jb2xzLCBleDogJ2h0dHA6Ly8nXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihcXHcrXFwuKStcXHcrLy50ZXN0KHRyaW1tZWQpKSB7XG4gICAgICAgICAgICBwcm9ibGVtcy5wdXNoKFwic2hvdWxkIGluY2x1ZGUgZG9tYWluLCBleDogJ2V4YW1wbGUub3JnL3BhdGgnXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWhhc0ZhbGxiYWNrKSBwcm9ibGVtcy51bnNoaWZ0KFwic2hvdWxkIGluY2x1ZGUgYSBmYWxsYmFjayAnKidcIilcblxuICAgIHJldHVybiBwcm9ibGVtc1xufVxuIiwiaW1wb3J0IHR5cGUgeyBDYWNoZUNvbmZpZyB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgeyBjb21wYXJlQnlTcGVjaWZpY2l0eSB9IGZyb20gJy4vc3RyaW5ncydcbmltcG9ydCB7IHByZXBhcmVSZW1vdGVzIH0gZnJvbSAnLi9yZW1vdGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZ3MoY29uZmlnczogQ2FjaGVDb25maWdbXSk6IENhY2hlQ29uZmlnW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdIGFzIENhY2hlQ29uZmlnW11cblxuICAgIGZvciAoY29uc3QgYSBvZiBjb25maWdzKSB7XG4gICAgICAgIC8vIGlmIGlzIHVuaXF1ZSwga2VlcCBpdFxuICAgICAgICBjb25zdCBiSW5kZXggPSByZXN1bHQuZmluZEluZGV4KChiKSA9PiBiLnBhdHRlcm4gPT09IGEucGF0dGVybilcbiAgICAgICAgaWYgKGJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGVuc3VyZSByZW1vdGVzIGFyZSBzb3J0ZWRcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgLi4uYSwgcmVtb3RlczogcHJlcGFyZVJlbW90ZXMoYS5yZW1vdGVzKSB9KVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdoZW4gZHVwbGljYXRlcywga2VlcCB0aGUgbW9yZSBzcGVjaWZpYyBvbmVcbiAgICAgICAgaWYgKGEucmVtb3Rlcy5sZW5ndGggPiByZXN1bHRbYkluZGV4XS5yZW1vdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gZW5zdXJlIHJlbW90ZXMgYXJlIHNvcnRlZFxuICAgICAgICAgICAgcmVzdWx0W2JJbmRleF0gPSB7IC4uLmEsIHJlbW90ZXM6IHByZXBhcmVSZW1vdGVzKGEucmVtb3RlcykgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIHNvcnRpbmcgb2YgcGF0aHNcbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVCeVNwZWNpZmljaXR5KGEucGF0dGVybiwgYi5wYXR0ZXJuKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUGF0dGVybihjb25maWdzOiBDYWNoZUNvbmZpZ1tdLCBfdmFsdWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBpZiAoIV92YWx1ZSkgcmV0dXJuIFsnaW52YWxpZCBwYXR0ZXJuJ11cbiAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiBjb25maWdzKSB7XG4gICAgICAgIGlmIChjb25maWcucGF0dGVybiA9PT0gX3ZhbHVlKSByZXR1cm4gW2BkdXBsaWNhdGVkIHBhdHRlcm4gJyR7X3ZhbHVlfSdgXVxuICAgIH1cbiAgICByZXR1cm4gW11cbn1cbiIsImltcG9ydCB0eXBlIHsgTG9nTGV2ZWwgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5cbi8vI3JlZ2lvbiBMb2dMZXZlbFxuZXhwb3J0IHR5cGUgUGx1Z2luTGV2ZWwgPSBrZXlvZiB0eXBlb2YgTG9nTGV2ZWxcbmV4cG9ydCBjb25zdCBMRVZFTF9MQUJFTFM6IFJlY29yZDxQbHVnaW5MZXZlbCwgc3RyaW5nPiA9IHtcbiAgICBFUlJPUjogJ0VSUk9SJyxcbiAgICBXQVJOOiAnIFdBUk4nLFxuICAgIElORk86ICcgSU5GTycsXG4gICAgREVCVUc6ICdERUJVRycsXG4gICAgVFJBQ0U6ICdUUkFDRScsXG59XG4vLyNlbmRyZWdpb24gTG9nTGV2ZWxcblxuLy8jcmVnaW9uIFByaW9yaXRpZXNcbi8qKiBVdGlsaXR5IHR5cGUgdG8gbWFwIHByaW9yaXR5IHZhbHVlcy4gKi9cbmV4cG9ydCB0eXBlIFBsdWdpblByaW9yaXR5ID0gJ0xPV0VSJyB8ICdOT1JNQUwnIHwgJ0hJR0hFUidcbi8qKiBQcmlvcml0eSBiZWhhdmlvcjogYGhpZ2hlciA9IGFmdGVyYCAqL1xuZXhwb3J0IGNvbnN0IFBSSU9SSVRZOiBSZWNvcmQ8UGx1Z2luUHJpb3JpdHksIG51bWJlcj4gPSB7XG4gICAgLy8gISBhbnkgdmFsdWUgbG93ZXIgdGhhbiAwIHdpbGwgaWdub3JlIHVzZXItd3JpdHRlbiBlbGVtZW50c1xuICAgIC8qKiBPbmx5IGNhY2hlcyB1c2VyLXdyaXR0ZW4gbWFya2Rvd24uICovXG4gICAgTE9XRVI6IDAsXG4gICAgLyoqIENhY2hlcyAqKlBvc3RQcm9jZXNzb3JzKiogd2l0aCBkZWZhdWx0IHByaW9yaXR5IGAwYC4gKi9cbiAgICBOT1JNQUw6IDEsXG4gICAgLyoqIE9ubHkgaWdub3JlcyB0aGUgaGlnaGVzdCBwcmlvcml0eSBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgICovXG4gICAgSElHSEVSOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAtIDEsXG59XG4vKiogTGFiZWxzIGZvciBwcmlvcml0eSB2YWx1ZXMgKi9cbmV4cG9ydCBjb25zdCBQUklPUklUWV9MQUJFTFM6IFJlY29yZDxQbHVnaW5Qcmlvcml0eSwgc3RyaW5nPiA9IHtcbiAgICBMT1dFUjogJ09ubHkgY2FjaGUgc3RhdGljIGF0dGFjaG1lbnRzJyxcbiAgICBOT1JNQUw6ICdDYWNoZSBtYWpvcml0eSBvZiBhdHRhY2htZW50cycsXG4gICAgSElHSEVSOiAnQ2FjaGUgYWxsIHBvc2libGUgYXR0YWNobWVudHMnLFxufVxuLy8jZW5kcmVnaW9uIFByaW9yaXRpZXNcblxuLy8jcmVnaW9uIE1vZGVzXG4vKipcbiAqIE1vZGUgdG8gc3RvcmUgdGhlIHZhbHVlczpcbiAqIC0gYCdOT1RFJ2AgYWxvbmdzaWRlIHRoZSBub3RlLiAoZG9lc24ndCB1c2UgdGFyZ2V0KVxuICogLSBgJ05PVEUtRk9MREVSJ2AgYWxvbmdzaWRlIHRoZSBub3RlIGluIGEgc3ViZm9sZGVyIHdpdGggdGhlIHRhcmdldCBhcyBuYW1lLlxuICogLSBgJ1RBUkdFVCdgIGRpcmVjdGx5IGluc2lkZSB0YXJnZXQgcGF0aC5cbiAqIC0gYCdUQVJHRVQtTk9URSdgIGluc2lkZSB0YXJnZXQgcGF0aCBpbiBhIHN1YmZvbGRlciB3aXRoIHRoZSBub3RlLW5hbWUuXG4gKiAtIGAnVEFSR0VULVBBVEgnYCBpbnNpZGUgdGFyZ2V0IHBhdGggcmVwbGljYXRpbmcgbm90ZS1wYXRoXG4gKi9cbmV4cG9ydCB0eXBlIENhY2hlTW9kZSA9XG4gICAgfCAnTk9URSdcbiAgICB8ICdOT1RFLUZPTERFUidcbiAgICB8ICdUQVJHRVQnXG4gICAgfCAnVEFSR0VULU5PVEUnXG4gICAgfCAnVEFSR0VULVBBVEgnXG5pbnRlcmZhY2UgTW9kZUV4YW1wbGVEZXRhaWxzIHtcbiAgICBtb2RlOiBDYWNoZU1vZGVcbiAgICB0YXJnZXQ6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgTU9ERV9MQUJFTFM6IFJlY29yZDxDYWNoZU1vZGUsIHN0cmluZz4gPSB7XG4gICAgTk9URTogLyogICAgKi8gJ0F0dGFjaG1lbnRzIG5leHQgdG8gdGhlIE5vdGUnLFxuICAgICdOT1RFLUZPTERFUic6ICdBdHRhY2htZW50cyBvbiBTdWJmb2xkZXInLFxuICAgIFRBUkdFVDogLyogICovICdBdHRhY2htZW50cyBvbiBDYWNoZSBGb2xkZXInLFxuICAgICdUQVJHRVQtTk9URSc6ICdBdHRhY2htZW50cyBvbiBDYWNoZSBOb3RlIEZvbGRlcicsXG4gICAgJ1RBUkdFVC1QQVRIJzogJ0F0dGFjaG1lbnRzIG9uIENhY2hlIE5vdGUgUGF0aCcsXG59XG5leHBvcnQgY29uc3QgTU9ERV9ERVNDOiBSZWNvcmQ8Q2FjaGVNb2RlLCBzdHJpbmc+ID0ge1xuICAgIE5PVEU6IC8qICAgICovICdTdG9yZSBpbiB0aGUgc2FtZSBmb2xkZXIgYXMgdGhlIG5vdGUnLFxuICAgICdOT1RFLUZPTERFUic6ICdTdG9yZSBuZXh0IHRvIHRoZSBub3RlIGluIHN1YmZvbGRlcicsXG4gICAgVEFSR0VUOiAvKiAgKi8gJ1N0b3JlIGluIGZvbGRlcicsXG4gICAgJ1RBUkdFVC1OT1RFJzogJ1N0b3JlIGluIHN1YmZvbGRlciB3aXRoIHRoZSBub3RlLW5hbWUgdW5kZXInLFxuICAgICdUQVJHRVQtUEFUSCc6ICdTdG9yZSBpbiBhIHJlcGxhdGVkIG5vdGUtcGF0aCB1bmRlcicsXG59XG5leHBvcnQgY29uc3QgbW9kZUV4YW1wbGUgPSAoeyBtb2RlLCB0YXJnZXQgfTogTW9kZUV4YW1wbGVEZXRhaWxzKSA9PiB7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgJ05PVEUnOiAvKiAgKi8gcmV0dXJuICdmb2xkZXIvaW1nMS5qcGcnXG4gICAgICAgIGNhc2UgJ05PVEUtRk9MREVSJzogcmV0dXJuIGBmb2xkZXIvJHt0YXJnZXR9L2ltZzEuanBnYFxuICAgICAgICBjYXNlICdUQVJHRVQnOiAvKiovIHJldHVybiBgJHt0YXJnZXR9L2ltZzEuanBnYFxuICAgICAgICBjYXNlICdUQVJHRVQtTk9URSc6IHJldHVybiBgJHt0YXJnZXR9L25vdGUxL2ltZzEuanBnYFxuICAgICAgICBjYXNlICdUQVJHRVQtUEFUSCc6IHJldHVybiBgJHt0YXJnZXR9L2ZvbGRlci9ub3RlMS9pbWcxLmpwZ2BcbiAgICB9XG59XG4vLyNlbmRyZWdpb24gTW9kZXNcbiIsImltcG9ydCB0eXBlIHsgQ2FjaGVDb25maWcsIENhY2hlUmVtb3RlIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IFNldHRpbmcsIFRleHRBcmVhQ29tcG9uZW50LCBUZXh0Q29tcG9uZW50IH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBjaGVja1JlbW90ZXMsIHBhcnNlUmVtb3Rlcywgc2VyaWFsaXplUmVtb3RlcyB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IENhY2hlTW9kZSwgTU9ERV9ERVNDLCBNT0RFX0xBQkVMUywgbW9kZUV4YW1wbGUgfSBmcm9tICcuL3ZhbHVlcydcblxudHlwZSBFdmVudENhbGxiYWNrID0gKGNhY2hlOiBDYWNoZUNvbmZpZykgPT4gdm9pZFxuXG5leHBvcnQgY2xhc3MgQ2FjaGVTZXR0aW5ncyB7XG4gICAgI2NhY2hlOiBDYWNoZUNvbmZpZ1xuICAgICNjYWNoZUhlYWRlcjogU2V0dGluZ1xuICAgICNjYWNoZURldGFpbHM6IEhUTUxFbGVtZW50XG4gICAgI2NhY2hlUmVtb3RlczogSFRNTEVsZW1lbnRcbiAgICAjcmVtb3Rlc1RleHQ/OiBUZXh0QXJlYUNvbXBvbmVudFxuXG4gICAgY29uc3RydWN0b3IocGFyZW50OiBIVE1MRWxlbWVudCwgY2FjaGU6IENhY2hlQ29uZmlnKSB7XG4gICAgICAgIC8vIGNsb25lZCB0byBjb250cm9sIGZsb3cgb2YgdXBkYXRlc1xuICAgICAgICB0aGlzLiNjYWNoZSA9IHsgLi4uY2FjaGUsIHJlbW90ZXM6IFsuLi5jYWNoZS5yZW1vdGVzXSB9XG5cbiAgICAgICAgdGhpcy4jY2FjaGVIZWFkZXIgPSBuZXcgU2V0dGluZyhwYXJlbnQpXG4gICAgICAgIHRoaXMuI2NhY2hlRGV0YWlscyA9XG4gICAgICAgICAgICB0aGlzLiNjYWNoZUhlYWRlci5zZXR0aW5nRWwuY3JlYXRlRGl2KCdjYWNoZS1kZXRhaWxzJylcbiAgICAgICAgdGhpcy4jY2FjaGVSZW1vdGVzID1cbiAgICAgICAgICAgIHRoaXMuI2NhY2hlSGVhZGVyLnNldHRpbmdFbC5jcmVhdGVEaXYoJ2NhY2hlLXJlbW90ZXMnKVxuXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlDYWNoZUhlYWRlcigpXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlDYWNoZURldGFpbHMoKVxuICAgICAgICB0aGlzLiNkaXNwbGF5Q2FjaGVSZW1vdGVzKClcbiAgICB9XG5cbiAgICAjY2FjaGVOYW1lKCk6IERvY3VtZW50RnJhZ21lbnQge1xuICAgICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnQoKGRpdikgPT4ge1xuICAgICAgICAgICAgZGl2LmFwcGVuZChgJHt0aGlzLiNjYWNoZS5lbmFibGVkID8gJ0VuYWJsZWQnIDogJ0Rpc2FibGVkJ30gcGF0aDogYClcbiAgICAgICAgICAgIGRpdi5jcmVhdGVFbCgnY29kZScpLmFwcGVuZFRleHQodGhpcy4jY2FjaGUucGF0dGVybilcbiAgICAgICAgfSlcbiAgICB9XG4gICAgI2NhY2hlRGVzYygpOiBEb2N1bWVudEZyYWdtZW50IHwgc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuI2NhY2hlLm1vZGUgPT09ICdOT1RFJykgcmV0dXJuIE1PREVfREVTQy5OT1RFXG4gICAgICAgIHJldHVybiBjcmVhdGVGcmFnbWVudCgoZGl2KSA9PiB7XG4gICAgICAgICAgICBkaXYuYXBwZW5kKE1PREVfREVTQ1t0aGlzLiNjYWNoZS5tb2RlXSlcbiAgICAgICAgICAgIGRpdi5jcmVhdGVFbCgnY29kZScpLmFwcGVuZFRleHQodGhpcy4jY2FjaGUudGFyZ2V0KVxuICAgICAgICB9KVxuICAgIH1cbiAgICAjZGlzcGxheUNhY2hlSGVhZGVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLiNjYWNoZUhlYWRlci5zZXROYW1lKHRoaXMuI2NhY2hlTmFtZSgpKVxuICAgICAgICB0aGlzLiNjYWNoZUhlYWRlci5zZXREZXNjKHRoaXMuI2NhY2hlRGVzYygpKVxuXG4gICAgICAgIGlmICh0aGlzLiNjYWNoZS5wYXR0ZXJuICE9PSAnKicpIHtcbiAgICAgICAgICAgIHRoaXMuI2NhY2hlSGVhZGVyLmFkZEV4dHJhQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0SWNvbigndHJhc2gtMicpLnNldFRvb2x0aXAoJ1JlbW92ZScpXG4gICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jY2FjaGUucGF0dGVybiA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJmYWxsYmFjayBjb25maWcoJyonKSBjYW4ndCBiZSByZW1vdmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2NhY2hlSGVhZGVyLmNsZWFyKClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jY2FjaGVIZWFkZXIuc2V0dGluZ0VsLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2ludm9rZVJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jY2FjaGVIZWFkZXIuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLiNjYWNoZS5lbmFibGVkKVxuICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuI2NhY2hlLmVuYWJsZWQgPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuI2ludm9rZUNoYW5nZSgpXG5cbiAgICAgICAgICAgICAgICB0aGlzLiNjYWNoZUhlYWRlci5zZXROYW1lKHRoaXMuI2NhY2hlTmFtZSgpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy4jY2FjaGVIZWFkZXIuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgbGV0IHZpc2libGUgPSBmYWxzZVxuICAgICAgICAgICAgYnV0dG9uLnNldEljb24oJ2NoZXZyb24tZG93bicpLnNldFRvb2x0aXAoJ0RldGFpbHMnKVxuICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZpc2libGUgPSAhdmlzaWJsZVxuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCdjaGV2cm9uLXVwJylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jY2FjaGVIZWFkZXIuc2V0dGluZ0VsLmFkZENsYXNzKCdzaG93LWRldGFpbHMnKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCdjaGV2cm9uLWRvd24nKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNjYWNoZUhlYWRlci5zZXR0aW5nRWwucmVtb3ZlQ2xhc3MoJ3Nob3ctZGV0YWlscycpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAjdGFyZ2V0RGVzYygpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50KChkaXYpID0+IHtcbiAgICAgICAgICAgIGRpdi5hcHBlbmQoJ0F0dGFjaG1lbnRzIHN0b3JhZ2UgcGF0aCwgZXg6JylcblxuICAgICAgICAgICAgY29uc3QgdWwgPSBkaXYuY3JlYXRlRWwoJ3VsJylcbiAgICAgICAgICAgIGNvbnN0IG5vdGUgPSB1bC5jcmVhdGVFbCgnbGknKVxuICAgICAgICAgICAgbm90ZS5hcHBlbmQoXCJOb3RlOiAnXCIpXG4gICAgICAgICAgICBub3RlLmNyZWF0ZUVsKCdiJykuYXBwZW5kVGV4dCgnZm9sZGVyL25vdGUxLm1kJylcbiAgICAgICAgICAgIG5vdGUuYXBwZW5kKFwiJ1wiKVxuXG4gICAgICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gdWwuY3JlYXRlRWwoJ2xpJylcbiAgICAgICAgICAgIGF0dGFjaG1lbnQuYXBwZW5kKFwiQXR0YWNobWVudDogJ1wiKVxuICAgICAgICAgICAgYXR0YWNobWVudC5jcmVhdGVFbCgnYicpLmFwcGVuZFRleHQobW9kZUV4YW1wbGUodGhpcy4jY2FjaGUpKVxuICAgICAgICAgICAgYXR0YWNobWVudC5hcHBlbmQoXCInXCIpXG4gICAgICAgIH0pXG4gICAgfVxuICAgICNkaXNwbGF5Q2FjaGVEZXRhaWxzKCk6IHZvaWQge1xuICAgICAgICBsZXQgdGFyZ2V0SW5wdXQ6IFRleHRDb21wb25lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblxuICAgICAgICBjb25zdCBjYWNoZVNldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLiNjYWNoZURldGFpbHMpXG4gICAgICAgIGNhY2hlU2V0dGluZy5zZXROYW1lKCdBdHRhY2htZW50cyBTdG9yYWdlJylcbiAgICAgICAgY2FjaGVTZXR0aW5nLnNldERlc2ModGhpcy4jdGFyZ2V0RGVzYygpKVxuICAgICAgICBjYWNoZVNldHRpbmcuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XG4gICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb25zKE1PREVfTEFCRUxTKVxuICAgICAgICAgICAgZHJvcGRvd24uc2V0VmFsdWUodGhpcy4jY2FjaGUubW9kZSlcbiAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuI2NhY2hlLm1vZGUgPSB2YWx1ZSBhcyBDYWNoZU1vZGVcbiAgICAgICAgICAgICAgICB0aGlzLiNpbnZva2VDaGFuZ2UoKVxuXG4gICAgICAgICAgICAgICAgY2FjaGVTZXR0aW5nLnNldERlc2ModGhpcy4jdGFyZ2V0RGVzYygpKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNjYWNoZS5tb2RlID09PSAnTk9URScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SW5wdXQ/LnNldERpc2FibGVkKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElucHV0Py5zZXRWYWx1ZSgnJylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJbnB1dD8uc2V0RGlzYWJsZWQoZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElucHV0Py5zZXRWYWx1ZSh0aGlzLiNjYWNoZS50YXJnZXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgY2FjaGVTZXR0aW5nLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICB0YXJnZXRJbnB1dCA9IGlucHV0XG4gICAgICAgICAgICBpZiAodGhpcy4jY2FjaGUubW9kZSA9PT0gJ05PVEUnKSBpbnB1dC5zZXREaXNhYmxlZCh0cnVlKVxuICAgICAgICAgICAgZWxzZSBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNjYWNoZS50YXJnZXQpXG4gICAgICAgICAgICBpbnB1dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjYWNoZS50YXJnZXQgPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuI2ludm9rZUNoYW5nZSgpXG5cbiAgICAgICAgICAgICAgICBjYWNoZVNldHRpbmcuc2V0RGVzYyh0aGlzLiN0YXJnZXREZXNjKCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IHJlbW90ZXNEZXNjID0gY3JlYXRlRnJhZ21lbnQoKVxuICAgICAgICBjb25zdCByZW1vdGVzRGVzY1VsID0gcmVtb3Rlc0Rlc2MuY3JlYXRlRWwoJ3VsJylcbiAgICAgICAgY29uc3QgcmVtb3Rlc1NldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLiNjYWNoZURldGFpbHMpXG4gICAgICAgIHJlbW90ZXNTZXR0aW5nLnNldENsYXNzKCdyZW1vdGVzLWlucHV0JylcbiAgICAgICAgcmVtb3Rlc1NldHRpbmcuc2V0TmFtZSgnUmVtb3RlcyBMaXN0JylcbiAgICAgICAgcmVtb3Rlc1NldHRpbmcuc2V0RGVzYyhyZW1vdGVzRGVzYylcbiAgICAgICAgcmVtb3Rlc1NldHRpbmcuYWRkVGV4dEFyZWEoKHRleHRhcmVhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNyZW1vdGVzVGV4dCA9IHRleHRhcmVhXG4gICAgICAgICAgICB0ZXh0YXJlYS5zZXRWYWx1ZShzZXJpYWxpemVSZW1vdGVzKHRoaXMuI2NhY2hlLnJlbW90ZXMpKVxuICAgICAgICAgICAgdGV4dGFyZWEub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAgICByZW1vdGVzRGVzY1VsLmVtcHR5KClcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ibGVtcyA9IGNoZWNrUmVtb3Rlcyh2YWx1ZSlcbiAgICAgICAgICAgICAgICBpZiAocHJvYmxlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ibGVtcy5mb3JFYWNoKChwKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3Rlc0Rlc2NVbC5jcmVhdGVFbCgnbGknKS5hcHBlbmRUZXh0KHApLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuI2NhY2hlLnJlbW90ZXMgPSBwYXJzZVJlbW90ZXModGhpcy4jY2FjaGUucmVtb3RlcywgdmFsdWUpXG4gICAgICAgICAgICAgICAgdGhpcy4jaW52b2tlQ2hhbmdlKClcbiAgICAgICAgICAgICAgICB0aGlzLiNkaXNwbGF5Q2FjaGVSZW1vdGVzKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgI3JlbW90ZU5hbWUocjogQ2FjaGVSZW1vdGUpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50KChkaXYpID0+IHtcbiAgICAgICAgICAgIGRpdi5hcHBlbmQoXG4gICAgICAgICAgICAgICAgYCR7ci53aGl0ZWxpc3RlZCA/ICdXaGl0ZWxpc3RlZCcgOiAnQmxhY2tsaXN0ZWQnfSByZW1vdGU6IGAsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBkaXYuY3JlYXRlRWwoJ2NvZGUnKS5hcHBlbmRUZXh0KHIucGF0dGVybilcbiAgICAgICAgfSlcbiAgICB9XG4gICAgI2Rpc3BsYXlDYWNoZVJlbW90ZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuI2NhY2hlUmVtb3Rlcy5lbXB0eSgpXG5cbiAgICAgICAgZm9yIChjb25zdCByZW1vdGUgb2YgdGhpcy4jY2FjaGUucmVtb3Rlcykge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZyA9IG5ldyBTZXR0aW5nKHRoaXMuI2NhY2hlUmVtb3RlcylcbiAgICAgICAgICAgIHNldHRpbmcuc2V0TmFtZSh0aGlzLiNyZW1vdGVOYW1lKHJlbW90ZSkpXG5cbiAgICAgICAgICAgIGlmIChyZW1vdGUucGF0dGVybiAhPT0gJyonKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCd0cmFzaC0yJykuc2V0VG9vbHRpcCgnUmVtb3ZlJylcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlcyA9IHRoaXMuI2NhY2hlLnJlbW90ZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChyKSA9PiByLnBhdHRlcm4gIT09IHJlbW90ZS5wYXR0ZXJuKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlUmVtb3RlcyhyZW1vdGVzKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldHRpbmcuYWRkQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dChcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlLndoaXRlbGlzdGVkID8gJ0JsYWNrbGlzdCcgOiAnV2hpdGVsaXN0JyxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVzID0gdGhpcy4jY2FjaGUucmVtb3Rlcy5tYXAoKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLnBhdHRlcm4gIT09IHJlbW90ZS5wYXR0ZXJuKSByZXR1cm4gclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uciwgd2hpdGVsaXN0ZWQ6ICFyLndoaXRlbGlzdGVkIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlUmVtb3RlcyhyZW1vdGVzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgI3VwZGF0ZVJlbW90ZXMocmVtb3RlczogQ2FjaGVSZW1vdGVbXSk6IHZvaWQge1xuICAgICAgICB0aGlzLiNjYWNoZS5yZW1vdGVzID0gcmVtb3Rlc1xuICAgICAgICB0aGlzLiNpbnZva2VDaGFuZ2UoKVxuXG4gICAgICAgIHRoaXMuI3JlbW90ZXNUZXh0Py5zZXRWYWx1ZShzZXJpYWxpemVSZW1vdGVzKHJlbW90ZXMpKVxuICAgICAgICB0aGlzLiNkaXNwbGF5Q2FjaGVSZW1vdGVzKClcbiAgICB9XG5cbiAgICAjY2hhbmdlTGlzdGVuZXJzOiBFdmVudENhbGxiYWNrW10gPSBbXVxuICAgICNyZW1vdmVMaXN0ZW5lcnM6IEV2ZW50Q2FsbGJhY2tbXSA9IFtdXG5cbiAgICAjaW52b2tlQ2hhbmdlKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuI2NoYW5nZUxpc3RlbmVycykgbGlzdGVuZXIodGhpcy4jY2FjaGUpXG4gICAgfVxuICAgICNpbnZva2VSZW1vdmUoKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy4jcmVtb3ZlTGlzdGVuZXJzKSBsaXN0ZW5lcih0aGlzLiNjYWNoZSlcbiAgICB9XG5cbiAgICBvbkNoYW5nZShjYWxsYmFjazogRXZlbnRDYWxsYmFjayk6IHRoaXMge1xuICAgICAgICB0aGlzLiNjaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgb25SZW1vdmUoY2FsbGJhY2s6IEV2ZW50Q2FsbGJhY2spOiB0aGlzIHtcbiAgICAgICAgdGhpcy4jcmVtb3ZlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxufVxuIiwiaW1wb3J0IHR5cGUge1xuICAgIEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4sXG4gICAgQ2FjaGVDb25maWcsXG4gICAgUGx1Z2luU2V0dGluZ3MsXG59IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQge1xuICAgIEJ1dHRvbkNvbXBvbmVudCxcbiAgICBEcm9wZG93bkNvbXBvbmVudCxcbiAgICBQbHVnaW5TZXR0aW5nVGFiLFxuICAgIFNldHRpbmcsXG4gICAgVGV4dENvbXBvbmVudCxcbn0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBjaGVja1BhdHRlcm4sIHByZXBhcmVDb25maWdzLCBwcmVwYXJlSGFzaCB9IGZyb20gJ0AvdXRpbGl0eSdcbmltcG9ydCB7IENhY2hlU2V0dGluZ3MgfSBmcm9tICcuL0NhY2hlU2V0dGluZ3MnXG5pbXBvcnQgeyBMRVZFTF9MQUJFTFMsIFBSSU9SSVRZX0xBQkVMUyB9IGZyb20gJy4vdmFsdWVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gZG9jcyhuYW1lOiBzdHJpbmcsIGRlc2M6IHN0cmluZyk6IERvY3VtZW50RnJhZ21lbnQge1xuICAgIHJldHVybiBjcmVhdGVGcmFnbWVudCgoZGl2KSA9PiB7XG4gICAgICAgIGRpdi5hcHBlbmRUZXh0KGRlc2MgKyAnLiBDaGVjayB0aGUgJylcbiAgICAgICAgZGl2LmNyZWF0ZUVsKCdhJywge1xuICAgICAgICAgICAgdGV4dDogJ0RvY3MnLFxuICAgICAgICAgICAgaHJlZjogYGh0dHBzOi8vZ2l0aHViLmNvbS9sdWlzYnMvb2JzaWRpYW4tYXR0YWNobWVudHMtY2FjaGUvYmxvYi9tYWluL2RvY3Mvc2V0dGluZ3MubWQjJHtwcmVwYXJlSGFzaChuYW1lKX1gLFxuICAgICAgICB9KVxuICAgICAgICBkaXYuYXBwZW5kVGV4dCgnLicpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgI3BsdWdpbjogQXR0YWNobWVudHNDYWNoZVBsdWdpblxuICAgICNzZXR0aW5nczogUGx1Z2luU2V0dGluZ3NcblxuICAgICNjb25maWdzTGlzdD86IEhUTUxEaXZFbGVtZW50XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgcGx1Z2luKVxuICAgICAgICB0aGlzLiNwbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgdGhpcy4jc2V0dGluZ3MgPSBwbHVnaW4uc2V0dGluZ3NcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KClcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcygnYXR0YWNobWVudHMtY2FjaGUtc2V0dGluZ3MnKVxuXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlHZW5lcmFsU2V0dGluZ3MoKVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpLnNldE5hbWUoJ1BhdGhzIFNldHRpbmdzJykuc2V0SGVhZGluZygpXG4gICAgICAgIHRoaXMuI2Rpc3BsYXlDb25maWdzSGVhZGVyKClcbiAgICAgICAgdGhpcy4jY29uZmlnc0xpc3QgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdignY29uZmlncy1saXN0JylcbiAgICAgICAgdGhpcy4jZGlzcGxheUNvbmZpZ3NMaXN0KClcbiAgICB9XG5cbiAgICAjZGlzcGxheUdlbmVyYWxTZXR0aW5ncygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGV2ZWxTZXR0aW5nID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgbGV2ZWxTZXR0aW5nLnNldE5hbWUoJ1BsdWdnaW5nIExvZ0xldmVsJylcbiAgICAgICAgbGV2ZWxTZXR0aW5nLnNldERlc2MoXG4gICAgICAgICAgICBkb2NzKCdQbHVnZ2luZyBMb2dMZXZlbCcsICdUbyBjaGVjayB0aGUgcGx1Z2luIGxvZ3MnKSxcbiAgICAgICAgKVxuICAgICAgICBsZXZlbFNldHRpbmcuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XG4gICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb25zKExFVkVMX0xBQkVMUylcbiAgICAgICAgICAgIGRyb3Bkb3duLnNldFZhbHVlKHRoaXMuI3NldHRpbmdzLnBsdWdpbl9sZXZlbClcbiAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMsICdwbHVnaW5fbGV2ZWwnKSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBwcmlvcml0eVNldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBwcmlvcml0eVNldHRpbmcuc2V0TmFtZSgnUGx1Z2luIFByaW9yaXR5JylcbiAgICAgICAgcHJpb3JpdHlTZXR0aW5nLnNldERlc2MoXG4gICAgICAgICAgICBkb2NzKCdQbHVnaW4gUHJpb3JpdHknLCAnQWZmZWN0cyB0aGUgYXR0YWNobWVudHMgYmVlbiBjYWNoZWQnKSxcbiAgICAgICAgKVxuICAgICAgICBwcmlvcml0eVNldHRpbmcuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XG4gICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb25zKFBSSU9SSVRZX0xBQkVMUylcbiAgICAgICAgICAgIGRyb3Bkb3duLnNldFZhbHVlKHRoaXMuI3NldHRpbmdzLnBsdWdpbl9wcmlvcml0eSlcbiAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMsICdwbHVnaW5fcHJpb3JpdHknKSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBjaGFyc1NldHRpbmcgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBjaGFyc1NldHRpbmcuc2V0TmFtZSgnS2VlcCBTcGVjaWFsIENoYXJhY3RlcnMnKVxuICAgICAgICBjaGFyc1NldHRpbmcuc2V0RGVzYyhcbiAgICAgICAgICAgICdJZiB5b3UgYXJlIGhhdmluZyBwcm9ibGVtcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycyBvbiBwYXRocywgZGlzYWJsZSB0aGlzIHNldHRpbmcuJyxcbiAgICAgICAgKVxuICAgICAgICBjaGFyc1NldHRpbmcuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLiNzZXR0aW5ncy5hbGxvd19jaGFyYWN0ZXJzKVxuICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMsICdhbGxvd19jaGFyYWN0ZXJzJykpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8jcmVnaW9uIFVSTCBwYXJhbXNcbiAgICAgICAgY29uc3QgdXJsaWdub3JlID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgdXJsaWdub3JlLnNldE5hbWUoJ1VSTCBQYXJhbSBJZ25vcmUnKVxuICAgICAgICB1cmxpZ25vcmUuc2V0RGVzYygnT3ZlcnJpZGVzIHJ1bGVzIGFuZCBpZ25vcmVzIHRoZSBhdHRhY2htZW50LicpXG4gICAgICAgIHVybGlnbm9yZS5hZGRUZXh0KChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodGhpcy4jc2V0dGluZ3MudXJsX3BhcmFtX2lnbm9yZSlcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMsICd1cmxfcGFyYW1faWdub3JlJykpXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHVybGNhY2hlID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgdXJsY2FjaGUuc2V0TmFtZSgnVVJMIFBhcmFtIENhY2hlJylcbiAgICAgICAgdXJsY2FjaGUuc2V0RGVzYygnT3ZlcnJpZGVzIHJ1bGVzIGFuZCBjYWNoZXMgdGhlIGF0dGFjaG1lbnQuJylcbiAgICAgICAgdXJsY2FjaGUuYWRkVGV4dCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlucHV0LnNldFZhbHVlKHRoaXMuI3NldHRpbmdzLnVybF9wYXJhbV9jYWNoZSlcbiAgICAgICAgICAgIGlucHV0Lm9uQ2hhbmdlKHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMsICd1cmxfcGFyYW1fY2FjaGUnKSlcbiAgICAgICAgfSlcbiAgICAgICAgLy8jZW5kcmVnaW9uXG5cbiAgICAgICAgLy8jcmVnaW9uIE5vdGUgcGFyYW1zXG4gICAgICAgIGNvbnN0IG5vdGVpZ25vcmUgPSBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxuICAgICAgICBub3RlaWdub3JlLnNldE5hbWUoJ05vdGUgRnJvbnRtYXR0ZXIgUGFyYW0gSWdub3JlJylcbiAgICAgICAgbm90ZWlnbm9yZS5zZXREZXNjKCdPdmVycmlkZXMgcnVsZXMgYW5kIGlnbm9yZXMgdGhlIE5vdGUgYXR0YWNobWVudHMuJylcbiAgICAgICAgbm90ZWlnbm9yZS5hZGRUZXh0KChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodGhpcy4jc2V0dGluZ3Mubm90ZV9wYXJhbV9pZ25vcmUpXG4gICAgICAgICAgICBpbnB1dC5vbkNoYW5nZSh0aGlzLiNoYW5kbGUuYmluZCh0aGlzLCAnbm90ZV9wYXJhbV9pZ25vcmUnKSlcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3Qgbm90ZWNhY2hlID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgbm90ZWNhY2hlLnNldE5hbWUoJ05vdGUgRnJvbnRtYXR0ZXIgUGFyYW0gQ2FjaGUnKVxuICAgICAgICBub3RlY2FjaGUuc2V0RGVzYygnT3ZlcnJpZGVzIHJ1bGVzIGFuZCBjYWNoZXMgdGhlIE5vdGUgYXR0YWNobWVudHMuJylcbiAgICAgICAgbm90ZWNhY2hlLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZSh0aGlzLiNzZXR0aW5ncy5ub3RlX3BhcmFtX2NhY2hlKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UodGhpcy4jaGFuZGxlLmJpbmQodGhpcywgJ25vdGVfcGFyYW1fY2FjaGUnKSlcbiAgICAgICAgfSlcbiAgICAgICAgLy8jZW5kcmVnaW9uXG4gICAgfVxuXG4gICAgI2Rpc3BsYXlDb25maWdzSGVhZGVyKCk6IHZvaWQge1xuICAgICAgICBsZXQgcGF0dGVybklucHV0OiBUZXh0Q29tcG9uZW50IHwgbnVsbCA9IG51bGxcbiAgICAgICAgbGV0IHNvdXJjZURyb3Bkb3duOiBEcm9wZG93bkNvbXBvbmVudCB8IG51bGwgPSBudWxsXG4gICAgICAgIGxldCBkdXBsaWNhdGVCdXR0b246IEJ1dHRvbkNvbXBvbmVudCB8IG51bGwgPSBudWxsXG5cbiAgICAgICAgY29uc3QgaGVhZGVyRGVzYyA9IGNyZWF0ZUZyYWdtZW50KClcbiAgICAgICAgY29uc3QgaGVhZGVyRGVzY1VsID0gaGVhZGVyRGVzYy5jcmVhdGVFbCgndWwnKVxuXG4gICAgICAgIGNvbnN0IGhlYWRlckVsID0gbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcbiAgICAgICAgaGVhZGVyRWwuc2V0Q2xhc3MoJ2NvbmZpZ3MtaGVhZGVyJylcbiAgICAgICAgaGVhZGVyRWwuc2V0TmFtZSgnRHVwbGljYXRlIFZhdWx0IFBhdGgnKVxuICAgICAgICBoZWFkZXJFbC5zZXREZXNjKGhlYWRlckRlc2MpXG4gICAgICAgIGhlYWRlckVsLmFkZFRleHQoKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBwYXR0ZXJuSW5wdXQgPSBpbnB1dFxuICAgICAgICAgICAgaW5wdXQuc2V0UGxhY2Vob2xkZXIoJ2dsb2I6ICoqLyoubWQnKVxuICAgICAgICAgICAgaW5wdXQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyRGVzY1VsLmVtcHR5KClcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cGxpY2F0ZUJ1dHRvbj8uc2V0RGlzYWJsZWQodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ibGVtcyA9IGNoZWNrUGF0dGVybihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jc2V0dGluZ3MuY2FjaGVfY29uZmlncyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIChwcm9ibGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2JsZW1zLmZvckVhY2goKHApID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJEZXNjVWwuY3JlYXRlRWwoJ2xpJykuYXBwZW5kVGV4dChwKSxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZHVwbGljYXRlQnV0dG9uPy5zZXREaXNhYmxlZChwcm9ibGVtcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgaGVhZGVyRWwuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2VEcm9wZG93biA9IGRyb3Bkb3duXG4gICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZSgnKicpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiB0aGlzLiNzZXR0aW5ncy5jYWNoZV9jb25maWdzKSB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKGNvbmZpZy5wYXR0ZXJuLCBjb25maWcucGF0dGVybilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaGVhZGVyRWwuYWRkQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGR1cGxpY2F0ZUJ1dHRvbiA9IGJ1dHRvblxuICAgICAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQoJ0R1cGxpY2F0ZScpXG4gICAgICAgICAgICBidXR0b24uc2V0RGlzYWJsZWQodHJ1ZSlcbiAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHBhdHRlcm5JbnB1dD8uZ2V0VmFsdWUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZURyb3Bkb3duPy5nZXRWYWx1ZSgpID8/ICcqJ1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gdGhpcy4jc2V0dGluZ3MuY2FjaGVfY29uZmlncy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAoaSkgPT4gaS5wYXR0ZXJuID09PSByZWYsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2ggfHwgIXNyYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3VuZXhwZWN0ZWQgc3RhdGUnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWdzID0gdGhpcy4jc2V0dGluZ3MuY2FjaGVfY29uZmlnc1xuICAgICAgICAgICAgICAgIGNvbmZpZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IG1hdGNoLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVzOiBzcmMucmVtb3RlcyxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogc3JjLmVuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogc3JjLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogc3JjLm1vZGUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0aGlzLiN1cGRhdGVDb25maWdzKGNvbmZpZ3MpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgICNkaXNwbGF5Q29uZmlnc0xpc3QoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy4jY29uZmlnc0xpc3QpIHJldHVyblxuICAgICAgICB0aGlzLiNjb25maWdzTGlzdC5lbXB0eSgpXG5cbiAgICAgICAgZm9yIChjb25zdCBjYWNoZSBvZiB0aGlzLiNzZXR0aW5ncy5jYWNoZV9jb25maWdzKSB7XG4gICAgICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IENhY2hlU2V0dGluZ3ModGhpcy4jY29uZmlnc0xpc3QsIGNhY2hlKVxuICAgICAgICAgICAgc2V0dGluZy5vbkNoYW5nZSgoX2NhY2hlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIGlzIGFscmVhZHkgaGFuZGxlXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlncyA9IHRoaXMuI3NldHRpbmdzLmNhY2hlX2NvbmZpZ3MgLy9cbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoYykgPT4gKGMucGF0dGVybiA9PT0gX2NhY2hlLnBhdHRlcm4gPyBfY2FjaGUgOiBjKSlcbiAgICAgICAgICAgICAgICB0aGlzLiN1cGRhdGVDb25maWdzKGNvbmZpZ3MpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgc2V0dGluZy5vblJlbW92ZSgoX2NhY2hlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgb2YgcmVkZXIgaXMgYWxyZWFkeSBoYW5kbGVcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWdzID0gdGhpcy4jc2V0dGluZ3MuY2FjaGVfY29uZmlncyAvL1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChjKSA9PiBjLnBhdHRlcm4gIT09IF9jYWNoZS5wYXR0ZXJuKVxuICAgICAgICAgICAgICAgIHRoaXMuI3VwZGF0ZUNvbmZpZ3MoY29uZmlncylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAjaGFuZGxlKGtleToga2V5b2YgUGx1Z2luU2V0dGluZ3MsIHZhbHVlOiB1bmtub3duKTogdm9pZCB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgZHluYW1pYyBhc3NpZ25tZW50XG4gICAgICAgIHRoaXMuI3NldHRpbmdzW2tleV0gPSB2YWx1ZVxuICAgICAgICB2b2lkIHRoaXMuI3BsdWdpbi5zYXZlU2V0dGluZ3MoKVxuICAgIH1cbiAgICAjdXBkYXRlQ29uZmlncyhjb25maWc6IENhY2hlQ29uZmlnW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jc2V0dGluZ3MuY2FjaGVfY29uZmlncyA9IHByZXBhcmVDb25maWdzKGNvbmZpZylcbiAgICAgICAgdm9pZCB0aGlzLiNwbHVnaW4uc2F2ZVNldHRpbmdzKClcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4gfSBmcm9tICdAL3R5cGVzJ1xuaW1wb3J0IHR5cGUge1xuICAgIE1hcmtkb3duUG9zdFByb2Nlc3NvcixcbiAgICBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxufSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IFBSSU9SSVRZIH0gZnJvbSAnQC9zZXR0aW5ncy92YWx1ZXMnXG5cbmV4cG9ydCBjbGFzcyBNYXJrZG93bkhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBBdHRhY2htZW50c0NhY2hlUGx1Z2luKSB7fVxuXG4gICAgI21wcD86IE1hcmtkb3duUG9zdFByb2Nlc3NvclxuXG4gICAgLyoqXG4gICAgICogUHJpb3JpdGllcyBzb3J0cyB0aGUgKipQb3N0UHJvY2Vzb3JzKiogb3JkZXIgb2YgZXhlY3V0aW9uLCBgaGlnaGVyID0gYWZ0ZXJgLlxuICAgICAqXG4gICAgICogV2hlbiBhICoqUG9zdFByb2Nlc29ycyoqIHJ1bnMgYWZ0ZXIgdGhlIGNhY2hlICoqUG9zdFByb2Nlc29yKiosXG4gICAgICogYW55IGF0dGFjaG1lbnQgZ2VuZXJhdGVkIHdpbGwgbm90IGJlIGRldGVjdGVkLlxuICAgICAqXG4gICAgICogRm9yIGNvbnRleHQgb24gcHJpb3JpdHkgb2Ygb3RoZXIgcGx1Z2luczpcbiAgICAgKiAqIGx1aXNicy9vYnNpZGlhbi1jb21wb25lbnRzOiBgLTEwMGBcbiAgICAgKiAqIGJsYWNrc21pdGhndS9vYnNpZGlhbi1kYXRhdmlldzogYC0xMDBgXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgOTlgIGNhY2hlcyBhdHRhY2htZW50cyBvZiBub3JtYWwgUG9zdFByb2Nlc29ycyAoYHByaW9yaXR5ID0gMGApXG4gICAgICovXG4gICAgcHVibGljIHN5bmNQcmlvcml0eSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLiNtcHApIHJldHVyblxuICAgICAgICB0aGlzLiNtcHAuc29ydE9yZGVyID0gUFJJT1JJVFlbdGhpcy5wbHVnaW4uc2V0dGluZ3MucGx1Z2luX3ByaW9yaXR5XVxuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3Rlck1hcmtkb3duUHJvY2Vzc29yKCk6IHZvaWQge1xuICAgICAgICB0aGlzLiNtcHAgPSB0aGlzLnBsdWdpbi5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcihcbiAgICAgICAgICAgIHRoaXMuI2hhbmRsZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgUFJJT1JJVFlbdGhpcy5wbHVnaW4uc2V0dGluZ3MucGx1Z2luX3ByaW9yaXR5XSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFzeW5jICNoYW5kbGUoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICB7IHNvdXJjZVBhdGggfTogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgZm9yIChjb25zdCBlbCBvZiBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJykpKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwaS5jYWNoZShzb3VyY2VQYXRoLCBlbC5zcmMpXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWQpIGVsLnNyYyA9IHJlc29sdmVkXG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3Igb3RoZXIgdHlwZXMgb2YgYXR0YWNobWVudHNcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4sIENhY2hlTWF0Y2hlciB9IGZyb20gJ0AvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW5BUEkgfSBmcm9tICdAL2luZGV4J1xuaW1wb3J0IHsgVmF1bHQsIG5vcm1hbGl6ZVBhdGggfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IExvZ2dlciwgVVJJLCBVUkwgfSBmcm9tICdAbHVpcy5icy9vYnNpZGlhbi1mbmMnXG5pbXBvcnQgeyBnZXRSZW1vdGVDb250ZW50LCBnZXRSZW1vdGVFeHQsIEF0dGFjaG1lbnRFcnJvciB9IGZyb20gJy4vdXRpbGl0eSdcblxuaW50ZXJmYWNlIFJlbW90ZURlZiB7XG4gICAgbm90ZXBhdGg6IHN0cmluZ1xuICAgIHJlbW90ZTogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50c0NhY2hlQVBJIGltcGxlbWVudHMgQXR0YWNobWVudHNDYWNoZVBsdWdpbkFQSSB7XG4gICAgcHVibGljIGxvZzogTG9nZ2VyXG5cbiAgICAjdmF1bHQ6IFZhdWx0XG4gICAgI3BsdWdpbjogQXR0YWNobWVudHNDYWNoZVBsdWdpblxuXG4gICAgI21lbW8gPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPigpXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5sb2cgPSBwbHVnaW4ubG9nLm1ha2UoQXR0YWNobWVudHNDYWNoZUFQSS5uYW1lKVxuICAgICAgICB0aGlzLiN2YXVsdCA9IHBsdWdpbi5hcHAudmF1bHRcbiAgICAgICAgdGhpcy4jcGx1Z2luID0gcGx1Z2luXG4gICAgfVxuXG4gICAgbWF5Q2FjaGUobm90ZXBhdGg6IHN0cmluZywgcmVtb3RlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy4jZmluZENhY2hlUnVsZSh7IG5vdGVwYXRoLCByZW1vdGUgfSwgdGhpcy5sb2cpXG4gICAgfVxuXG4gICAgYXN5bmMgaXNDYWNoZWQobm90ZXBhdGg6IHN0cmluZywgcmVtb3RlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgbG9jYWxQYXRoID0gYXdhaXQgdGhpcy5yZXNvbHZlKG5vdGVwYXRoLCByZW1vdGUpXG4gICAgICAgIHJldHVybiBsb2NhbFBhdGggPyBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLmV4aXN0cyhsb2NhbFBhdGgpIDogZmFsc2VcbiAgICB9XG5cbiAgICBhc3luYyByZXNvdXJjZShcbiAgICAgICAgbm90ZXBhdGg6IHN0cmluZyxcbiAgICAgICAgcmVtb3RlOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgbG9jYWxQYXRoID0gYXdhaXQgdGhpcy5yZXNvbHZlKG5vdGVwYXRoLCByZW1vdGUpXG4gICAgICAgIGlmICghbG9jYWxQYXRoKSByZXR1cm5cblxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy4jdmF1bHQuZ2V0RmlsZUJ5UGF0aChsb2NhbFBhdGgpXG4gICAgICAgIHJldHVybiBmaWxlID8gdGhpcy4jdmF1bHQuZ2V0UmVzb3VyY2VQYXRoKGZpbGUpIDogdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgYXN5bmMgcmVzb2x2ZShcbiAgICAgICAgbm90ZXBhdGg6IHN0cmluZyxcbiAgICAgICAgcmVtb3RlOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmxvZy5ncm91cCgpXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGdyb3VwLmRlYnVnKCdSZXNvbHZpbmcnLCB7IG5vdGVwYXRoLCByZW1vdGUgfSlcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsUGF0aCA9IGF3YWl0IHRoaXMuI3Jlc29sdmUoeyBub3RlcGF0aCwgcmVtb3RlIH0sIGdyb3VwKVxuICAgICAgICAgICAgaWYgKGxvY2FsUGF0aCkge1xuICAgICAgICAgICAgICAgIGdyb3VwLmZsdXNoKCdyZW1vdGUgcmVzb2x2ZWQnLCByZW1vdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsUGF0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZ3JvdXAuZXJyb3IoZXJyb3IpXG4gICAgICAgIH1cblxuICAgICAgICBncm91cC5mbHVzaCgncmVtb3RlIGNvdWxkIG5vdCBiZSByZXNvbHZlZCcsIHJlbW90ZSlcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgYXN5bmMgY2FjaGUobm90ZXBhdGg6IHN0cmluZywgcmVtb3RlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMubG9nLmdyb3VwKClcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZ3JvdXAuZGVidWcoJ0NhY2hpbmcnLCB7IG5vdGVwYXRoLCByZW1vdGUgfSlcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsUGF0aCA9IGF3YWl0IHRoaXMuI3Jlc29sdmUoeyBub3RlcGF0aCwgcmVtb3RlIH0sIGdyb3VwKVxuICAgICAgICAgICAgaWYgKCFsb2NhbFBhdGgpIHtcbiAgICAgICAgICAgICAgICBncm91cC5kZWJ1ZygncmVtb3RlIGNvdWxkIG5vdCBiZSByZXNvbHZlZCcpXG4gICAgICAgICAgICAgICAgZ3JvdXAuZmx1c2goJ3JlbW90ZSB3YXMgbm90IGNhY2hlZCcsIHJlbW90ZSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2hlY2sgZXhpc3RlbmNlXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRGaWxlID0gdGhpcy4jdmF1bHQuZ2V0RmlsZUJ5UGF0aChsb2NhbFBhdGgpXG4gICAgICAgICAgICBpZiAoY2FjaGVkRmlsZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLmZsdXNoKCdyZW1vdGUgaXMgYWxyZWFkeSBpbiBjYWNoZScsIHJlbW90ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jdmF1bHQuZ2V0UmVzb3VyY2VQYXRoKGNhY2hlZEZpbGUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvd25sb2FkIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBnZXRSZW1vdGVDb250ZW50KHJlbW90ZSwgZ3JvdXApXG4gICAgICAgICAgICBhd2FpdCB0aGlzLiN2YXVsdC5hZGFwdGVyLm1rZGlyKFVSSS5nZXRQYXJlbnQobG9jYWxQYXRoKSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI3ZhdWx0LmFkYXB0ZXIud3JpdGVCaW5hcnkobG9jYWxQYXRoLCBjb250ZW50KVxuXG4gICAgICAgICAgICAvLyBjaGVjayByZXN1bHRcbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkZWRGaWxlID0gdGhpcy4jdmF1bHQuZ2V0RmlsZUJ5UGF0aChsb2NhbFBhdGgpXG4gICAgICAgICAgICBpZiAoZG93bmxvYWRlZEZpbGUpIHtcbiAgICAgICAgICAgICAgICBncm91cC5mbHVzaCgncmVtb3RlIHdhcyBjYWNoZWQnLCByZW1vdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3ZhdWx0LmdldFJlc291cmNlUGF0aChkb3dubG9hZGVkRmlsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGdyb3VwLmVycm9yKGVycm9yKVxuICAgICAgICB9XG5cbiAgICAgICAgZ3JvdXAuZmx1c2goJ3JlbW90ZSBjb3VsZCBub3QgYmUgY2FjaGVkJywgcmVtb3RlKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAjZmluZENhY2hlUnVsZSh2OiBSZW1vdGVEZWYsIGxvZzogTG9nZ2VyKTogQ2FjaGVNYXRjaGVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbG9nLmRlYnVnKCdzZWFyY2hpbmcgYW4gYWN0aXZlIGNhY2hlIHJ1bGUnKVxuICAgICAgICBjb25zdCBtYXRjaGVyID0gdGhpcy4jcGx1Z2luLnN0YXRlLmNhY2hlX21hdGNoZXJzIC8vXG4gICAgICAgICAgICAuZmluZCgobWF0Y2hlcikgPT4gbWF0Y2hlci50ZXN0UGF0aCh2Lm5vdGVwYXRoKSlcblxuICAgICAgICAvLyBub3QtZm91bmQgb3IgZGlzYWJsZWQgcGF0aHNcbiAgICAgICAgaWYgKCFtYXRjaGVyPy5pc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdub3RlcGF0aCBkb2VzIG5vdCBtYXRjaCBhbmQgYWN0aXZlIHJ1bGUnKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBVUkwgb3ZlcnJpZGVzXG4gICAgICAgIGlmICh0aGlzLiNwbHVnaW4uc3RhdGUudXJsX2lnbm9yZV9tYXRjaGVyKHYucmVtb3RlKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdyZW1vdGUgaGFzIHRvIGJlIGlnbm9yZWQgKFVSTCBwYXJhbSknKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI3BsdWdpbi5zdGF0ZS51cmxfY2FjaGVfbWF0Y2hlcih2LnJlbW90ZSkpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygncmVtb3RlIGhhcyB0byBiZSBjYWNoZWQgKFVSTCBwYXJhbSknKVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXJcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZyb250bWF0dGVyIG92ZXJyaWRlc1xuICAgICAgICBpZiAodGhpcy4jcGx1Z2luLnN0YXRlLm5vdGVfaWdub3JlX21hdGNoZXIodi5ub3RlcGF0aCwgdi5yZW1vdGUpKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ3JlbW90ZSBoYXMgdG8gYmUgaWdub3JlZCAoRnJvbnRtYXR0ZXIgcGFyYW0pJylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNwbHVnaW4uc3RhdGUubm90ZV9jYWNoZV9tYXRjaGVyKHYubm90ZXBhdGgsIHYucmVtb3RlKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdyZW1vdGUgaGFzIHRvIGJlIGNhY2hlZCAoRnJvbnRtYXR0ZXIgcGFyYW0pJylcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyXG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGFuZGFyZCBiZWhhdmlvclxuICAgICAgICBpZiAobWF0Y2hlci50ZXN0UmVtb3RlKHYucmVtb3RlKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdyZW1vdGUgbWF0Y2hlcyBhbiBhY3RpdmUgcnVsZScpXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlclxuICAgICAgICB9XG5cbiAgICAgICAgbG9nLmRlYnVnKCdyZW1vdGUgZG9lcyBub3QgbWF0Y2ggYW5kIGFjdGl2ZSBydWxlJylcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIC8qKiBAdGhyb3dzIHtBdHRhY2htZW50RXJyb3J9ICovXG4gICAgYXN5bmMgI3Jlc29sdmUodjogUmVtb3RlRGVmLCBsb2c6IExvZ2dlcik6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBVUkwuZ2V0QmFzZXVybCh2LnJlbW90ZSlcbiAgICAgICAgaWYgKCFiYXNlVXJsKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ3JlbW90ZSBpcyBub3QgYSB2YWxpZCBVUkwnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEF0dGFjaG1lbnRFcnJvcigncmVtb3RlLW5vLXVybCcsIGByZW1vdGUoJHt2LnJlbW90ZX0pYClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhc3RlciByZXNvbHV0aW9uXG4gICAgICAgIGNvbnN0IGNhY2hlZFBhdGggPSB0aGlzLiNtZW1vLmdldChiYXNlVXJsKVxuICAgICAgICBpZiAoY2FjaGVkUGF0aCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdyZW1vdGUgcmVzb2x2ZWQgZnJvbSBjYWNoZScsIGNhY2hlZFBhdGgpXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkUGF0aFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWRlbnRpZnkgYmVoYXZpb3JcbiAgICAgICAgY29uc3QgbWF0Y2hlciA9IHRoaXMuI2ZpbmRDYWNoZVJ1bGUodiwgbG9nKVxuICAgICAgICBpZiAoIW1hdGNoZXIpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnYSBjYWNoZSBydWxlIGNvdWxkIG5vdCBiZSBtYXRjaGVkJylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5zdXJlIG5vcm1hbGl6YXRpb25cbiAgICAgICAgY29uc3QgbmFtZSA9IFVSSS5nZXRCYXNlbmFtZShiYXNlVXJsKVxuICAgICAgICBjb25zdCBleHQgPSBVUkkuZ2V0RXh0KGJhc2VVcmwpID8/IChhd2FpdCBnZXRSZW1vdGVFeHQodi5yZW1vdGUsIGxvZykpXG4gICAgICAgIGlmICghbmFtZSB8fCAhZXh0KSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYG5hbWUoJHtuYW1lfSkgb3IgZXh0KCR7ZXh0fSkgY291bGQgbm90IGJlIHJlc29sdmVkYClcbiAgICAgICAgICAgIHRocm93IG5ldyBBdHRhY2htZW50RXJyb3IoJ3JlbW90ZS1uby1leHQnKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSBVUkkuam9pbihtYXRjaGVyLnJlc29sdmUodi5ub3RlcGF0aCksIG5hbWUgKyAnLicgKyBleHQpXG4gICAgICAgIGNvbnN0IGxvY2FsUGF0aCA9ICF0aGlzLiNwbHVnaW4uc2V0dGluZ3MuYWxsb3dfY2hhcmFjdGVyc1xuICAgICAgICAgICAgPyBub3JtYWxpemVQYXRoKFVSSS5ub3JtYWxpemUoZmlsZXBhdGgpKVxuICAgICAgICAgICAgOiBub3JtYWxpemVQYXRoKGZpbGVwYXRoKVxuXG4gICAgICAgIC8vIHNhdmUgZm9yIGZhc3RlciByZXNvbHV0aW9uXG4gICAgICAgIHRoaXMuI21lbW8uc2V0KGJhc2VVcmwsIGxvY2FsUGF0aClcblxuICAgICAgICBsb2cuZGVidWcoJ3JlbW90ZSByZXNvbHZlZCcsIGxvY2FsUGF0aClcbiAgICAgICAgcmV0dXJuIGxvY2FsUGF0aFxuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUGx1Z2luU2V0dGluZ3MsIFBsdWdpblN0YXRlIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IEFwcCwgUGx1Z2luLCBQbHVnaW5NYW5pZmVzdCB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJ0BsdWlzLmJzL29ic2lkaWFuLWZuYydcbmltcG9ydCB7IHByZXBhcmVDb25maWdzLCBwcmVwYXJlU3RhdGUgfSBmcm9tICcuL3V0aWxpdHknXG5pbXBvcnQgeyBTZXR0aW5nc1RhYiB9IGZyb20gJy4vc2V0dGluZ3MvU2V0dGluZ3NUYWInXG5pbXBvcnQgeyBNYXJrZG93bkhhbmRsZXIgfSBmcm9tICcuL2ZpbGVzeXN0ZW0vTWFya2Rvd25IYW5kbGVyJ1xuaW1wb3J0IHsgQXR0YWNobWVudHNDYWNoZUFQSSB9IGZyb20gJy4vQXR0YWNobWVudHNDYWNoZUFQSSdcblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgLy8gKiAnV0FSTicgbGV2ZWwgdG8gZm9yY2UgdGhlIHVzZXIgdG8gY2hvb3NlIGEgbG93ZXIgbGV2ZWwgd2hlbiBpcyByZXF1aXJlZFxuICAgIC8vICogdGhpcyBkZWNpdGlvbiwgcHJldmVudHMgdGhlIGNvbnNvbGUgZnJvbSBiZWVuIG92ZXJwb3B1bGF0ZWQgYnkgZGVmYXVsdFxuICAgIHBsdWdpbl9sZXZlbDogJ1dBUk4nLFxuICAgIC8vICogJ05PUk1BTCcgcHJpb3JpdHkgdG8gY2FjaGUgdXNlci13cml0dGVuIG1hcmtkb3duXG4gICAgLy8gKiBhbmQgUG9zdFByb2Nlc3NvcnMgd2l0aCBkZWZhdWx0IHByaW9yaXR5XG4gICAgcGx1Z2luX3ByaW9yaXR5OiAnTk9STUFMJyxcbiAgICAvL1xuICAgIGFsbG93X2NoYXJhY3RlcnM6IGZhbHNlLFxuICAgIHVybF9wYXJhbV9jYWNoZTogJ2NhY2hlX2ZpbGUnLFxuICAgIHVybF9wYXJhbV9pZ25vcmU6ICdpZ25vcmVfZmlsZScsXG4gICAgbm90ZV9wYXJhbV9jYWNoZTogJ2NhY2hlX2Zyb20nLFxuICAgIG5vdGVfcGFyYW1faWdub3JlOiAnY2FjaGVfdW5sZXNzJyxcbiAgICBjYWNoZV9jb25maWdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBhdHRlcm46ICcqJyxcbiAgICAgICAgICAgIHJlbW90ZXM6IFt7IHdoaXRlbGlzdGVkOiBmYWxzZSwgcGF0dGVybjogJyonIH1dLFxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICAgICAgbW9kZTogJ05PVEUnLFxuICAgICAgICB9LFxuICAgIF0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dGFjaG1lbnRzQ2FjaGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHB1YmxpYyBsb2cgPSBMb2dnZXIuY29uc29sZUxvZ2dlcihBdHRhY2htZW50c0NhY2hlUGx1Z2luLm5hbWUpXG5cbiAgICBwdWJsaWMgc2V0dGluZ3MgPSB7fSBhcyBQbHVnaW5TZXR0aW5nc1xuICAgIHB1YmxpYyBzdGF0ZSA9IHt9IGFzIFBsdWdpblN0YXRlXG5cbiAgICBwdWJsaWMgYXBpOiBBdHRhY2htZW50c0NhY2hlQVBJXG4gICAgcHVibGljIG1hcmtkb3duOiBNYXJrZG93bkhhbmRsZXJcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYW5pZmVzdDogUGx1Z2luTWFuaWZlc3QpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBtYW5pZmVzdClcblxuICAgICAgICAvLyAqIGFsd2F5cyBwcmludGluZyB0aGUgZmlyc3QgbG9hZFNldHRpbmdzKClcbiAgICAgICAgLy8gKiBhZnRlciB0aGF0LCB0aGUgdXNlci1kZWZpbmVkIGxldmVsIGlzIHVzZWRcbiAgICAgICAgdGhpcy5sb2cuc2V0TGV2ZWwoTG9nTGV2ZWwuREVCVUcpXG4gICAgICAgIHRoaXMubG9nLnNldEZvcm1hdCgnW2hoOm1tOnNzLm1zXSBsZXZlbDonKVxuICAgICAgICB0aGlzLmFwaSA9IG5ldyBBdHRhY2htZW50c0NhY2hlQVBJKHRoaXMpXG4gICAgICAgIHRoaXMubWFya2Rvd24gPSBuZXcgTWFya2Rvd25IYW5kbGVyKHRoaXMpXG5cbiAgICAgICAgLy8gdGhyaWQtcGFydHkgQVBJXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm9uLXN0YW5kYXJkIEFQSVxuICAgICAgICB3aW5kb3cuQXR0YWNobWVudHNDYWNoZSA9IHRoaXMuYXBpXG4gICAgfVxuXG4gICAgYXN5bmMgb25sb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ3NUYWIodGhpcykpXG5cbiAgICAgICAgdGhpcy5tYXJrZG93bi5yZWdpc3Rlck1hcmtkb3duUHJvY2Vzc29yKClcbiAgICB9XG5cbiAgICAvLyBhc3luYyBvbnVubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyAgICAgLy8gVE9ET1xuICAgIC8vIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmxvZy5ncm91cCgnTG9hZGluZyBTZXR0aW5ncycpXG4gICAgICAgIGNvbnN0IHsgY2FjaGVfY29uZmlncywgLi4ucHJpbWl0aXZlcyB9ID0gKChhd2FpdCB0aGlzLmxvYWREYXRhKCkpIHx8XG4gICAgICAgICAgICB7fSkgYXMgUGFydGlhbDxQbHVnaW5TZXR0aW5ncz5cblxuICAgICAgICAvLyBlbnN1cmUgYSBmYWxsYmFjayB2YWx1ZSBpcyBwcmVzZW50XG4gICAgICAgIC8vIGVuc3VyZSBvcmRlciBvZiBjb25maWdzIGFuZCByZW1vdGVzXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBwcmltaXRpdmVzKVxuICAgICAgICB0aGlzLnNldHRpbmdzLmNhY2hlX2NvbmZpZ3MgPSBwcmVwYXJlQ29uZmlncyhbXG4gICAgICAgICAgICAuLi4oY2FjaGVfY29uZmlncyA/PyBbXSksXG4gICAgICAgICAgICAuLi5ERUZBVUxUX1NFVFRJTkdTLmNhY2hlX2NvbmZpZ3MsXG4gICAgICAgIF0pXG5cbiAgICAgICAgZ3JvdXAuZGVidWcoJ0xvYWRlZDogJywgdGhpcy5zZXR0aW5ncylcblxuICAgICAgICB0aGlzLiNwcmVwYXJlU3RhdGUoZ3JvdXApXG4gICAgICAgIGdyb3VwLmZsdXNoKCdMb2FkZWQgU2V0dGluZ3MnKVxuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmxvZy5ncm91cCgnU2F2aW5nIFNldHRpbmdzJylcbiAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2V0dGluZ3MpXG5cbiAgICAgICAgLy8gc2VyaWFsaXplIHNwZWNpYWwgZGF0YSB0eXBlcyAoTWFwLCBTZXQsIGV0YylcbiAgICAgICAgLy8gZW5zdXJlIG9yZGVyIG9mIGNvbmZpZ3MgYW5kIHJlbW90ZXNcbiAgICAgICAgZGF0YS5jYWNoZV9jb25maWdzID0gcHJlcGFyZUNvbmZpZ3MoZGF0YS5jYWNoZV9jb25maWdzKVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEoZGF0YSlcbiAgICAgICAgZ3JvdXAuZGVidWcoJ1NhdmVkOiAnLCBkYXRhKVxuXG4gICAgICAgIHRoaXMuI3ByZXBhcmVTdGF0ZShncm91cClcbiAgICAgICAgZ3JvdXAuZmx1c2goJ1NhdmVkIFNldHRpbmdzJylcbiAgICB9XG5cbiAgICAjcHJlcGFyZVN0YXRlKGxvZzogTG9nZ2VyKTogdm9pZCB7XG4gICAgICAgIGxvZy5pbmZvKCdQcmVwYXJpbmcgc3RhdGUnKVxuXG4gICAgICAgIC8vIGNoYW5nZSBQbHVnaW4gYmVoYXZpb3IgYmFzZWQgb24gdXNlciBpbnB1dFxuICAgICAgICB0aGlzLmxvZy5zZXRMZXZlbChMb2dMZXZlbFt0aGlzLnNldHRpbmdzLnBsdWdpbl9sZXZlbF0pXG4gICAgICAgIHRoaXMubWFya2Rvd24uc3luY1ByaW9yaXR5KClcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHByZXBhcmVTdGF0ZSh0aGlzKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJwdCIsIm4iLCJnIiwid3QiLCJWIiwiI3MiLCIjZSIsIiNuIiwibXQiLCJvIiwiSnQiLCJRdCIsIkF0dGFjaG1lbnRFcnJvciIsImNvZGUiLCJjYXVzZSIsInVybCIsInJlc3BvbnNlIiwibWVzc2FnZSIsIiNkZXNjcmlwdGlvbiIsImJhbGFuY2VkTWF0Y2giLCJiYWxhbmNlZCIsImEiLCJiIiwic3RyIiwibWF5YmVNYXRjaCIsInIiLCJyYW5nZSIsInJlZyIsIm0iLCJiZWdzIiwiYmVnIiwibGVmdCIsInJpZ2h0IiwicmVzdWx0IiwiYWkiLCJiaSIsImkiLCJyZXF1aXJlJCQwIiwiYnJhY2VFeHBhbnNpb24iLCJleHBhbmRUb3AiLCJlc2NTbGFzaCIsImVzY09wZW4iLCJlc2NDbG9zZSIsImVzY0NvbW1hIiwiZXNjUGVyaW9kIiwibnVtZXJpYyIsImVzY2FwZUJyYWNlcyIsInVuZXNjYXBlQnJhY2VzIiwicGFyc2VDb21tYVBhcnRzIiwicGFydHMiLCJwcmUiLCJib2R5IiwicG9zdCIsInAiLCJwb3N0UGFydHMiLCJleHBhbmQiLCJlbWJyYWNlIiwiaXNQYWRkZWQiLCJlbCIsImx0ZSIsInkiLCJndGUiLCJpc1RvcCIsImV4cGFuc2lvbnMiLCJrIiwiZXhwYW5zaW9uIiwiaXNOdW1lcmljU2VxdWVuY2UiLCJpc0FscGhhU2VxdWVuY2UiLCJpc1NlcXVlbmNlIiwiaXNPcHRpb25zIiwiTiIsIngiLCJ3aWR0aCIsImluY3IiLCJ0ZXN0IiwicmV2ZXJzZSIsInBhZCIsImMiLCJuZWVkIiwieiIsImoiLCJNQVhfUEFUVEVSTl9MRU5HVEgiLCJhc3NlcnRWYWxpZFBhdHRlcm4iLCJwYXR0ZXJuIiwicG9zaXhDbGFzc2VzIiwiYnJhY2VFc2NhcGUiLCJzIiwicmVnZXhwRXNjYXBlIiwicmFuZ2VzVG9TdHJpbmciLCJyYW5nZXMiLCJwYXJzZUNsYXNzIiwiZ2xvYiIsInBvc2l0aW9uIiwicG9zIiwibmVncyIsInNhd1N0YXJ0IiwidWZsYWciLCJlc2NhcGluZyIsIm5lZ2F0ZSIsImVuZFBvcyIsInJhbmdlU3RhcnQiLCJXSElMRSIsImNscyIsInVuaXAiLCJ1IiwibmVnIiwic3JhbmdlcyIsInNuZWdzIiwidW5lc2NhcGUiLCJ3aW5kb3dzUGF0aHNOb0VzY2FwZSIsInR5cGVzIiwiaXNFeHRnbG9iVHlwZSIsInN0YXJ0Tm9UcmF2ZXJzYWwiLCJzdGFydE5vRG90IiwiYWRkUGF0dGVyblN0YXJ0IiwianVzdERvdHMiLCJyZVNwZWNpYWxzIiwicmVnRXhwRXNjYXBlIiwicW1hcmsiLCJzdGFyIiwic3Rhck5vRW1wdHkiLCJBU1QiLCIjcm9vdCIsIiNoYXNNYWdpYyIsIiN1ZmxhZyIsIiNwYXJ0cyIsIiNwYXJlbnQiLCIjcGFyZW50SW5kZXgiLCIjbmVncyIsIiNmaWxsZWROZWdzIiwiI29wdGlvbnMiLCIjdG9TdHJpbmciLCIjZW1wdHlFeHQiLCJ0eXBlIiwicGFyZW50Iiwib3B0aW9ucyIsIiNmaWxsTmVncyIsInBwIiwicGFydCIsInJldCIsInBsIiwiI3BhcnNlQVNUIiwiYXN0Iiwib3B0IiwiaW5CcmFjZSIsImJyYWNlU3RhcnQiLCJicmFjZU5lZyIsImFjYyIsImV4dCIsInJlIiwiaGFzTWFnaWMiLCJmbGFncyIsImFsbG93RG90IiwiZG90Iiwibm9FbXB0eSIsInNyYyIsIl8iLCIjcGFyc2VHbG9iIiwic3RhcnQiLCJhcHMiLCJuZWVkTm9UcmF2IiwibmVlZE5vRG90IiwiZW5kIiwicmVwZWF0ZWQiLCIjcGFydHNUb1JlZ0V4cCIsImJvZHlEb3RBbGxvd2VkIiwiZmluYWwiLCJjbG9zZSIsIl9oYXNNYWdpYyIsIm5lZWRVZmxhZyIsImNvbnN1bWVkIiwibWFnaWMiLCJlc2NhcGUiLCJtaW5pbWF0Y2giLCJNaW5pbWF0Y2giLCJzdGFyRG90RXh0UkUiLCJzdGFyRG90RXh0VGVzdCIsImYiLCJzdGFyRG90RXh0VGVzdERvdCIsInN0YXJEb3RFeHRUZXN0Tm9jYXNlIiwic3RhckRvdEV4dFRlc3ROb2Nhc2VEb3QiLCJzdGFyRG90U3RhclJFIiwic3RhckRvdFN0YXJUZXN0Iiwic3RhckRvdFN0YXJUZXN0RG90IiwiZG90U3RhclJFIiwiZG90U3RhclRlc3QiLCJzdGFyUkUiLCJzdGFyVGVzdCIsInN0YXJUZXN0RG90IiwicW1hcmtzUkUiLCJxbWFya3NUZXN0Tm9jYXNlIiwiJDAiLCJub2V4dCIsInFtYXJrc1Rlc3ROb0V4dCIsInFtYXJrc1Rlc3ROb2Nhc2VEb3QiLCJxbWFya3NUZXN0Tm9FeHREb3QiLCJxbWFya3NUZXN0RG90IiwicW1hcmtzVGVzdCIsImxlbiIsImRlZmF1bHRQbGF0Zm9ybSIsInBhdGgiLCJzZXAiLCJHTE9CU1RBUiIsInR3b1N0YXJEb3QiLCJ0d29TdGFyTm9Eb3QiLCJmaWx0ZXIiLCJkZWZhdWx0cyIsImRlZiIsIm9yaWciLCJsaXN0IiwiYnJhY2VFeHBhbmQiLCJtYWtlUmUiLCJtYXRjaCIsIm1tIiwiZ2xvYk1hZ2ljIiwiYXJncyIsInJhd0dsb2JQYXJ0cyIsInNldCIsIl9fIiwiaXNVTkMiLCJpc0RyaXZlIiwic3MiLCJnbG9iUGFydHMiLCJvcHRpbWl6YXRpb25MZXZlbCIsImdzIiwicHJldiIsImRpZFNvbWV0aGluZyIsImRkIiwiZ3NzIiwibmV4dCIsInAyIiwib3RoZXIiLCJzcGxpbiIsIm1hdGNoZWQiLCJlbXB0eUdTTWF0Y2giLCJ3aGljaCIsIm5lZ2F0ZU9mZnNldCIsImZpbGUiLCJwYXJ0aWFsIiwiZmlsZURyaXZlIiwiZmlsZVVOQyIsInBhdHRlcm5Ecml2ZSIsInBhdHRlcm5VTkMiLCJmZGkiLCJwZGkiLCJmZCIsInBkIiwiZmkiLCJwaSIsImZsIiwiZnIiLCJwciIsInN3YWxsb3dlZSIsImhpdCIsImZhc3RUZXN0IiwidHdvU3RhciIsIm9wZW4iLCJmZiIsImZpbGVuYW1lIiwicHJlcGFyZUhhc2giLCJzb3VyY2UiLCJjb21wYXJlQnlTcGVjaWZpY2l0eSIsImdldE1pbWVFeHQiLCJtaW1lIiwicHJlcGFyZVN0YXRlIiwicGx1Z2luIiwiY29uZmlnTWF0Y2hlcnMiLCJyZW1vdGVNYXRjaGVyIiwiZnJvbnRtYXR0ZXJNYXRjaGVyIiwiYXBwIiwibm90ZV9wYXJhbSIsIm5vdGVwYXRoIiwicmVtb3RlIiwibWV0YWRhdGEiLCJ2YWx1ZSIsInBhcnNlRnJvbnRNYXR0ZXJFbnRyeSIsInRlc3RVcmwiLCJ2YWwiLCJ1cmxfcGFyYW0iLCJyZWdleCIsImNvbmZpZ3MiLCJjb25maWciLCJyZXNvbHZlIiwiX3BhdGgiLCJVUkkiLCJ0ZXN0UGF0aCIsIl9ub3RlcGF0aCIsInRlc3RSZW1vdGUiLCJfcmVtb3RlIiwid2hpdGVsaXN0ZWQiLCJnZXRSZW1vdGVFeHQiLCJsb2ciLCJyZWZlcmVyIiwiVVJMIiwicmVxdWVzdFVybCIsImdldFJlbW90ZUNvbnRlbnQiLCJwcmVwYXJlUmVtb3RlcyIsInJlbW90ZXMiLCJoYXNGYWxsYmFjayIsInNlcmlhbGl6ZVJlbW90ZXMiLCJwYXJzZVJlbW90ZSIsInBhcnNlUmVtb3RlcyIsInNvdXJjZXMiLCJ3IiwiY2hlY2tSZW1vdGVzIiwicHJvYmxlbXMiLCJ0cmltbWVkIiwicHJlcGFyZUNvbmZpZ3MiLCJiSW5kZXgiLCJjaGVja1BhdHRlcm4iLCJfdmFsdWUiLCJMRVZFTF9MQUJFTFMiLCJQUklPUklUWSIsIlBSSU9SSVRZX0xBQkVMUyIsIk1PREVfTEFCRUxTIiwiTU9ERV9ERVNDIiwibW9kZUV4YW1wbGUiLCJtb2RlIiwidGFyZ2V0IiwiQ2FjaGVTZXR0aW5ncyIsIiNjYWNoZSIsIiNjYWNoZUhlYWRlciIsIiNjYWNoZURldGFpbHMiLCIjY2FjaGVSZW1vdGVzIiwiI3JlbW90ZXNUZXh0IiwiY2FjaGUiLCJTZXR0aW5nIiwiI2Rpc3BsYXlDYWNoZUhlYWRlciIsIiNkaXNwbGF5Q2FjaGVEZXRhaWxzIiwiI2Rpc3BsYXlDYWNoZVJlbW90ZXMiLCIjY2FjaGVOYW1lIiwiZGl2IiwiI2NhY2hlRGVzYyIsImJ1dHRvbiIsIiNpbnZva2VSZW1vdmUiLCJ0b2dnbGUiLCIjaW52b2tlQ2hhbmdlIiwidmlzaWJsZSIsIiN0YXJnZXREZXNjIiwidWwiLCJub3RlIiwiYXR0YWNobWVudCIsInRhcmdldElucHV0IiwiY2FjaGVTZXR0aW5nIiwiZHJvcGRvd24iLCJpbnB1dCIsInJlbW90ZXNEZXNjIiwicmVtb3Rlc0Rlc2NVbCIsInJlbW90ZXNTZXR0aW5nIiwidGV4dGFyZWEiLCIjcmVtb3RlTmFtZSIsInNldHRpbmciLCIjdXBkYXRlUmVtb3RlcyIsIiNjaGFuZ2VMaXN0ZW5lcnMiLCIjcmVtb3ZlTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJjYWxsYmFjayIsImRvY3MiLCJuYW1lIiwiZGVzYyIsIlNldHRpbmdzVGFiIiwiUGx1Z2luU2V0dGluZ1RhYiIsIiNwbHVnaW4iLCIjc2V0dGluZ3MiLCIjY29uZmlnc0xpc3QiLCIjZGlzcGxheUdlbmVyYWxTZXR0aW5ncyIsIiNkaXNwbGF5Q29uZmlnc0hlYWRlciIsIiNkaXNwbGF5Q29uZmlnc0xpc3QiLCJsZXZlbFNldHRpbmciLCIjaGFuZGxlIiwicHJpb3JpdHlTZXR0aW5nIiwiY2hhcnNTZXR0aW5nIiwidXJsaWdub3JlIiwidXJsY2FjaGUiLCJub3RlaWdub3JlIiwibm90ZWNhY2hlIiwicGF0dGVybklucHV0Iiwic291cmNlRHJvcGRvd24iLCJkdXBsaWNhdGVCdXR0b24iLCJoZWFkZXJEZXNjIiwiaGVhZGVyRGVzY1VsIiwiaGVhZGVyRWwiLCJyZWYiLCIjdXBkYXRlQ29uZmlncyIsIl9jYWNoZSIsImtleSIsIk1hcmtkb3duSGFuZGxlciIsIiNtcHAiLCJlbGVtZW50Iiwic291cmNlUGF0aCIsInJlc29sdmVkIiwiQXR0YWNobWVudHNDYWNoZUFQSSIsIiN2YXVsdCIsIiNtZW1vIiwiI2ZpbmRDYWNoZVJ1bGUiLCJsb2NhbFBhdGgiLCJncm91cCIsIiNyZXNvbHZlIiwiZXJyb3IiLCJjYWNoZWRGaWxlIiwiY29udGVudCIsImRvd25sb2FkZWRGaWxlIiwidiIsIm1hdGNoZXIiLCJiYXNlVXJsIiwiY2FjaGVkUGF0aCIsImZpbGVwYXRoIiwibm9ybWFsaXplUGF0aCIsIkRFRkFVTFRfU0VUVElOR1MiLCJBdHRhY2htZW50c0NhY2hlUGx1Z2luIiwiUGx1Z2luIiwiTG9nZ2VyIiwibWFuaWZlc3QiLCJMb2dMZXZlbCIsImNhY2hlX2NvbmZpZ3MiLCJwcmltaXRpdmVzIiwiI3ByZXBhcmVTdGF0ZSIsImRhdGEiXSwibWFwcGluZ3MiOiJ5Q0FBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBTUEsTUFBTUEsRUFBRyxDQUNQLE1BQU0sRUFBR0MsRUFBRyxDQUNWLFFBQVEsTUFBTSxFQUFHLEdBQUdBLENBQUMsQ0FDekIsQ0FDRSxLQUFLLEVBQUdBLEVBQUcsQ0FDVCxRQUFRLEtBQUssRUFBRyxHQUFHQSxDQUFDLENBQ3hCLENBQ0UsS0FBSyxFQUFHQSxFQUFHLENBQ1QsUUFBUSxLQUFLLEVBQUcsR0FBR0EsQ0FBQyxDQUN4QixDQUNFLE1BQU0sRUFBR0EsRUFBRyxDQUNWLFFBQVEsTUFBTSxFQUFHLEdBQUdBLENBQUMsQ0FDekIsQ0FDRSxNQUFNLEVBQUdBLEVBQUcsQ0FDVixRQUFRLE1BQU0sRUFBRyxHQUFHQSxDQUFDLENBQ3pCLENBQ0UsTUFBTSxFQUFHQSxFQUFHLENBQ1YsT0FBTyxRQUFRLGVBQWUsRUFBRyxHQUFHQSxDQUFDLEVBQUcsUUFBUSxRQUNwRCxDQUNBLENBQ0EsTUFBTUMsRUFBSSxPQUFPLE9BQU8sQ0FDdEIsTUFBTyxFQUNQLE1BQU8sRUFDUCxLQUFNLEVBQ04sS0FBTSxFQUNOLE1BQU8sQ0FDVCxDQUFDLEVBQUdDLEdBQUssT0FBTyxPQUFPLENBQ3JCLEVBQUcsUUFDSCxFQUFHLFFBQ0gsRUFBRyxRQUNILEVBQUcsUUFDSCxFQUFHLE9BQ0wsQ0FBQyxFQUNELE1BQU1DLENBQUUsQ0FDTixHQUNBQyxHQUNBQyxHQUNBQyxHQUFLLENBQUUsRUFDUCxHQUFLLENBQUUsRUFFUCxJQUFJLE9BQVEsQ0FDVixPQUFPLEtBQUtGLEdBQUssS0FBS0EsR0FBSyxLQUFLLElBQUksT0FBU0gsRUFBRSxJQUNuRCxDQUNFLElBQUksUUFBUyxDQUNYLE9BQU8sS0FBS0ksR0FBSyxLQUFLQSxHQUFLLEtBQUssSUFBSSxRQUFVLGtDQUNsRCxDQUNFLElBQUksV0FBWSxDQUNkLE1BQU0sRUFBSSxDQUFF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
